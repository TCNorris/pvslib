(more_polynomial_props
 (polynomial_degree_existence 0
  (polynomial_degree_existence-1 nil 3591712357
   ("" (induct "n")
    (("1" (assert)
      (("1" (skeep)
        (("1" (inst + "0")
          (("1" (assert)
            (("1" (split +)
              (("1" (grind) nil nil)
               ("2" (skeep) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 "n")
      (("2" (flatten)
        (("2" (skeep)
          (("2" (inst - "a")
            (("2" (assert)
              (("2"
                (case " ((EXISTS (x): polynomial(a, 1+n)(x) /= 0) AND
        (EXISTS (i: upto(1+n)): a(i) /= 0))")
                (("1" (hide -3)
                  (("1" (split -)
                    (("1" (flatten)
                      (("1" (case "a(1+n) = 0")
                        (("1" (skosimp*)
                          (("1" (inst + "i!1")
                            (("1" (assert)
                              (("1"
                                (split +)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst - "j")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide (-2 3))
                                  (("2"
                                    (replace -2 :dir rl)
                                    (("2"
                                      (decompose-equality 1)
                                      (("2"
                                        (expand "polynomial" 1)
                                        (("2"
                                          (expand "sigma" + 1)
                                          (("2"
                                            (replaces -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst + "1+n")
                          (("2" (assert)
                            (("2" (skosimp*) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "a(1+n) /= 0")
                      (("1" (flatten)
                        (("1" (inst 4 "1+n")
                          (("1" (assert)
                            (("1" (skosimp*) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (skosimp*)
                          (("2" (inst + "x!1")
                            (("2" (flatten)
                              (("2"
                                (rewrite "polynomial_rec" 2)
                                (("2"
                                  (replaces -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide (-1 2))
                  (("2" (ground)
                    (("1" (lemma "polynomial_eq_coeff")
                      (("1" (inst - "a" "LAMBDA (ii:nat): 0" "1+n")
                        (("1" (flatten)
                          (("1" (hide -2)
                            (("1" (split -)
                              (("1"
                                (skosimp*)
                                (("1" (inst - "i!1") nil nil))
                                nil)
                               ("2"
                                (decompose-equality 1)
                                (("2"
                                  (inst + "x!1")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (replaces -2)
                                      (("2"
                                        (expand "polynomial")
                                        (("2"
                                          (rewrite
                                           "sigma_restrict_eq_0")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (lift-if)
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (expand "polynomial")
                        (("2" (rewrite "sigma_restrict_eq_0")
                          (("2" (skosimp*)
                            (("2" (inst + "i!1")
                              (("2"
                                (flatten)
                                (("2"
                                  (lift-if)
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subrange type-eq-decl nil integers nil)
    (polynomial_eq_coeff formula-decl nil polynomials nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (polynomial_rec formula-decl nil polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sigma def-decl "real" sigma nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (poly_deriv_limit_TCC1 0
  (poly_deriv_limit_TCC1-1 nil 3587828917 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (poly_deriv_limit subtype
    "(number_fields.-)(more_polynomial_props.pn, 1)" "nat")))
 (poly_deriv_limit_TCC2 0
  (poly_deriv_limit_TCC2-1 nil 3587828917 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (poly_deriv_limit subtype
    "((number_fields.-)(more_polynomial_props.x, more_polynomial_props.y))"
    "nznum")))
 (poly_deriv_limit 0
  (poly_deriv_limit-2 nil 3587828907
   ("" (lemma "poly_continuous")
    (("" (skeep)
      (("" (inst - "poly_deriv(a)" "pn-1" "y" "epsil")
        (("" (assert)
          (("" (skeep -1)
            (("" (inst + "delta")
              (("" (skeep)
                (("" (lemma "poly_mean_value")
                  (("" (case "x < y")
                    (("1" (inst - "a" "pn" "x" "y")
                      (("1" (assert)
                        (("1" (skeep -)
                          (("1"
                            (invoke (case "%1 = %2") (! -4 2)
                             (! 2 1 1 2))
                            (("1" (replace -1)
                              (("1"
                                (replace -5 :dir rl)
                                (("1"
                                  (inst - "cc")
                                  (("1"
                                    (split -)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (expand "abs")
                                      (("2"
                                        (lift-if)
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) (("2" (field) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst - "a" "pn" "y" "x")
                      (("2" (assert)
                        (("2" (skeep -1)
                          (("2" (replace -3 :dir rl)
                            (("2" (inst - "cc")
                              (("2"
                                (split -)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (expand "abs")
                                  (("2"
                                    (lift-if)
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (poly_mean_value formula-decl nil polynomials nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (FDX_121 skolem-const-decl "real" more_polynomial_props nil)
    (FDX_122 skolem-const-decl "real" more_polynomial_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonzero_times3 formula-decl nil real_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (poly_deriv const-decl "real" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (poly_continuous formula-decl nil polynomials nil))
   nil)
  (poly_deriv_limit-1 nil 3587821660
   (""
    (name "PQ"
          "LAMBDA (a:sequence[real],ki:nat): (FORALL (y: real, epsil: posreal):
                             EXISTS (delta: posreal):
                               FORALL (x: real):
                                 abs(x - y) < delta AND x /= y IMPLIES
                                  abs(polynomial(poly_deriv(a), ki+1 - 1)(y) -
                                       (polynomial(a, ki+1)(x) - polynomial(a, ki+1)(y)) / (x - y))
                                   < epsil)")
    (("1" (case "FORALL (a:sequence[real],ki:nat): PQ(a,ki)")
      (("1" (skeep)
        (("1" (inst - "a" "pn-1")
          (("1" (expand "PQ" -1)
            (("1" (assert) (("1" (inst - "y" "epsil") nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2"
          (case "FORALL (kc:real,nm:nat,ki:nat): (LET apow = (LAMBDA (ii:nat): IF ii = nm THEN kc ELSE 0 ENDIF) IN PQ(apow,ki))")
          (("1" (induct "ki" 1)
            (("1" (hide -)
              (("1" (skeep)
                (("1" (expand "PQ")
                  (("1" (skeep)
                    (("1" (case "a(1) = 0")
                      (("1" (inst + "1")
                        (("1" (skeep)
                          (("1" (expand "polynomial" +)
                            (("1" (expand "sigma")
                              (("1"
                                (expand "sigma")
                                (("1"
                                  (expand "sigma")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "poly_deriv")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "abs")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst + "epsil/abs(a(1))")
                        (("1" (skeep)
                          (("1" (expand "polynomial" +)
                            (("1" (expand "sigma")
                              (("1"
                                (expand "sigma")
                                (("1"
                                  (expand "sigma")
                                  (("1"
                                    (expand "poly_deriv")
                                    (("1"
                                      (expand "^")
                                      (("1"
                                        (expand "expt")
                                        (("1"
                                          (expand "expt")
                                          (("1"
                                            (case
                                             "a(1)*(x-y)/(x-y) = a(1)")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "abs" +)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (cross-mult 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (split)
                          (("1" (cross-mult 1) nil nil)
                           ("2" (cross-mult 1) nil nil))
                          nil)
                         ("3" (expand "abs")
                          (("3" (lift-if) (("3" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (skeep)
                (("2" (inst - "a(j+2)" "j+2" "j+1")
                  (("2" (skoletin -2)
                    (("2" (inst - "a")
                      (("2" (expand "PQ" (-1 -3 1))
                        (("2" (skeep)
                          (("2" (inst - "y" "epsil/2")
                            (("2" (inst - "y" "epsil/2")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst + "min(delta!1,delta!2)")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst - "x")
                                      (("2"
                                        (inst - "x")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "FORALL (xy:real): polynomial(a,2+j)(xy) = polynomial(a,1+j)(xy) + polynomial(apow,2+j)(xy)")
                                            (("1"
                                              (rewrite -1)
                                              (("1"
                                                (rewrite -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (case
                                                     "FORALL (xy:real): polynomial(poly_deriv(a),1+j)(xy) = polynomial(poly_deriv(a),j)(xy) + polynomial(poly_deriv(apow),1+j)(xy)")
                                                    (("1"
                                                      (rewrite -1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (expand
                                                           "abs"
                                                           (-1 -3 +))
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (expand
                                                           "polynomial")
                                                          (("2"
                                                            (expand
                                                             "sigma"
                                                             +
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "sigma")
                                                              (("2"
                                                                (invoke
                                                                 (case
                                                                  "%1 = 0")
                                                                 (!
                                                                  1
                                                                  2
                                                                  1))
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "poly_deriv")
                                                                      (("1"
                                                                        (expand
                                                                         "apow")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (rewrite
                                                                     "sigma_restrict_eq_0")
                                                                    (("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (expand
                                                                           "poly_deriv")
                                                                          (("2"
                                                                            (expand
                                                                             "apow")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (expand "polynomial")
                                                  (("2"
                                                    (expand
                                                     "sigma"
                                                     +
                                                     1)
                                                    (("2"
                                                      (expand "sigma")
                                                      (("2"
                                                        (invoke
                                                         (case
                                                          "%1 = 0")
                                                         (! 1 2 1))
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (expand
                                                             "apow")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (rewrite
                                                             "sigma_restrict_eq_0")
                                                            (("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (expand
                                                                 "apow")
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2"
            (case "(FORALL (y: real, epsil: posreal,nm:posnat,kc:real):
                                          EXISTS (delta: posreal):
                                            FORALL (x: real):
                                              abs(x - y) < delta AND x /= y IMPLIES
                                               abs(kc*nm*y^(nm-1) -
                                                    (kc*x^nm -kc*y^nm) / (x - y))
                                                < epsil)")
            (("1" (skeep)
              (("1" (case "nm = 0")
                (("1" (replaces -1)
                  (("1" (assert)
                    (("1" (hide-all-but 1)
                      (("1" (expand "PQ")
                        (("1" (skeep)
                          (("1" (inst + "1")
                            (("1" (skeep)
                              (("1"
                                (expand "poly_deriv")
                                (("1"
                                  (expand "polynomial" + 1)
                                  (("1"
                                    (rewrite "sigma_restrict_eq_0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (invoke
                                         (case "%1 = 0")
                                         (! 2 1 1 2 1))
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "abs")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 3)
                                          (("2"
                                            (expand "polynomial")
                                            (("2"
                                              (rewrite "sigma_minus")
                                              (("2"
                                                (rewrite
                                                 "sigma_restrict_eq_0")
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (lift-if)
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (label "nmzero" 1)
                  (("2" (hide (-2 3))
                    (("2" (skoletin 2)
                      (("2" (expand "PQ" 1)
                        (("2" (skeep)
                          (("2" (inst - "y" "epsil" "nm" "kc")
                            (("1" (skeep -2)
                              (("1"
                                (inst + "delta")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst - "x")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case "1+ki<nm")
                                        (("1"
                                          (invoke
                                           (case "%1 = 0")
                                           (! 2 1 1))
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (expand "abs" +)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 3)
                                            (("2"
                                              (invoke
                                               (case "%1 = 0")
                                               (! 1 1 1))
                                              (("1"
                                                (invoke
                                                 (case "%1 = 0")
                                                 (! 1 1 2))
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (invoke
                                                   (case "%1 = 0")
                                                   (! 1 1 1))
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (invoke
                                                     (case "%1 = 0")
                                                     (! 1 1 1))
                                                    (("1"
                                                      (invoke
                                                       (case "%1 = 0")
                                                       (! 1 1 2))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "polynomial"
                                                         1)
                                                        (("2"
                                                          (rewrite
                                                           "sigma_restrict_eq_0")
                                                          (("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (expand
                                                               "apow"
                                                               1)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "polynomial"
                                                       1)
                                                      (("2"
                                                        (rewrite
                                                         "sigma_restrict_eq_0")
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (expand
                                                             "apow"
                                                             1)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "polynomial" 1)
                                                (("2"
                                                  (expand
                                                   "poly_deriv"
                                                   1)
                                                  (("2"
                                                    (rewrite
                                                     "sigma_restrict_eq_0")
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (expand
                                                         "apow"
                                                         1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case
                                           "polynomial(poly_deriv(apow), ki)(y) = y ^ (nm - 1) * kc * nm")
                                          (("1"
                                            (case
                                             "FORALL (xy:real): polynomial(apow, 1 + ki)(xy) = kc * xy ^ nm")
                                            (("1"
                                              (inst-cp - "x")
                                              (("1"
                                                (inst - "y")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 4)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (expand
                                                   "polynomial"
                                                   1)
                                                  (("2"
                                                    (lemma
                                                     "sigma_eq_one_arg")
                                                    (("2"
                                                      (inst
                                                       -
                                                       _
                                                       _
                                                       _
                                                       "nm")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (split -)
                                                            (("1"
                                                              (expand
                                                               "apow"
                                                               -1
                                                               2)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (expand
                                                                 "apow"
                                                                 1)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (skosimp*)
                                                              (("3"
                                                                (expand
                                                                 "apow"
                                                                 1)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "polynomial" 1)
                                            (("2"
                                              (lemma
                                               "sigma_eq_one_arg")
                                              (("2"
                                                (inst - _ _ _ "nm-1")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split -)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (expand
                                                           "poly_deriv"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "apow"
                                                             1)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "^")
                                                                    (("1"
                                                                      (expand
                                                                       "expt"
                                                                       1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (expand
                                                           "poly_deriv"
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "apow"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (expand
                                                           "poly_deriv"
                                                           1)
                                                          (("3"
                                                            (expand
                                                             "apow"
                                                             1)
                                                            (("3"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2"
                (case "(FORALL (y: real, epsil: posreal, nm: posnat, kc: real):
         EXISTS (delta: posreal):
           FORALL (x: real):
             abs(x - y) < delta AND x /= y IMPLIES
              abs(nm * y ^ (nm - 1) -
                   (x ^ nm - y ^ nm) / (x - y))
               < epsil)")
                (("1" (skeep)
                  (("1" (case "kc = 0")
                    (("1" (replaces -1)
                      (("1" (assert)
                        (("1" (expand "abs" +) (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "NOT abs(kc)>0")
                      (("1" (expand "abs" 1)
                        (("1" (lift-if) (("1" (ground) nil nil)) nil))
                        nil)
                       ("2" (inst - "y" "epsil/abs(kc)" "nm" "kc")
                        (("1" (skeep -2)
                          (("1" (inst + "delta")
                            (("1" (skeep)
                              (("1"
                                (inst - "x")
                                (("1"
                                  (assert)
                                  (("1"
                                    (cross-mult -2)
                                    (("1"
                                      (rewrite "abs_mult" :dir rl)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 3)
                          (("2" (split)
                            (("1" (cross-mult 1) nil nil)
                             ("2" (cross-mult 1) nil nil))
                            nil))
                          nil)
                         ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (lemma "binomial_theorem")
                    (("2" (skeep) (("2" (postpone) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*) (("2" (assert) nil nil)) nil))
    nil)
   nil shostak))
 (square_free_min_TCC1 0
  (square_free_min_TCC1-1 nil 3587829356 ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (square_free_min subtype
    "(number_fields.-)(more_polynomial_props.pn, 1)" "nat")))
 (square_free_min 0
  (square_free_min-1 nil 3587829358
   ("" (skeep)
    (("" (case "NOT FORALL (RR:real): RR=0 IFF (RR>=0 AND RR<=0)")
      (("1" (skosimp*) (("1" (ground) nil nil)) nil)
       ("2" (rewrite -1 1)
        (("2" (hide -1)
          (("2" (split +)
            (("1" (lemma "poly_deriv_limit")
              (("1"
                (name "eppy" "-polynomial(poly_deriv(a), pn - 1)(y)/2")
                (("1" (inst - "a" "y" "eppy" "pn")
                  (("1" (skeep -2)
                    (("1"
                      (case "NOT FORALL (x:real): abs(x-y)<delta AND x/=y IMPLIES (polynomial(a, pn)(x) - polynomial(a, pn)(y)) / (x - y) < 0")
                      (("1" (skeep)
                        (("1" (inst - "x")
                          (("1" (assert)
                            (("1" (expand "abs" -3)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (name "xy" "y + min(delta,epsil)/2")
                        (("2" (inst - "xy")
                          (("2" (assert)
                            (("2" (split -)
                              (("1"
                                (cross-mult -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -6 "xy")
                                    (("1"
                                      (split -)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand "abs" 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "abs" 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skosimp*) (("3" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "poly_deriv_limit")
              (("2"
                (name "eppy" "polynomial(poly_deriv(a), pn - 1)(y)/2")
                (("2" (inst - "a" "y" "eppy" "pn")
                  (("1" (skeep -2)
                    (("1"
                      (case "NOT FORALL (x:real): abs(x-y)<delta AND x/=y IMPLIES (polynomial(a, pn)(x) - polynomial(a, pn)(y)) / (x - y) > 0")
                      (("1" (skeep)
                        (("1" (inst - "x")
                          (("1" (assert)
                            (("1" (expand "abs" -3)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (name "xy" "y - min(delta,epsil)/2")
                        (("2" (inst - "xy")
                          (("2" (assert)
                            (("2" (split -)
                              (("1"
                                (cross-mult -1)
                                (("1"
                                  (inst -6 "xy")
                                  (("1"
                                    (split -)
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (expand "abs" 1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "abs" 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skosimp*) (("3" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (eppy skolem-const-decl "real" more_polynomial_props nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_neg_gt1 formula-decl nil extra_real_props nil)
    (poly_deriv_limit formula-decl nil more_polynomial_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eppy skolem-const-decl "real" more_polynomial_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (poly_deriv const-decl "real" polynomials nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (square_free_max_TCC1 0
  (square_free_max_TCC1-1 nil 3587832241 ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (square_free_max subtype
    "(number_fields.-)(more_polynomial_props.pn, 1)" "nat")))
 (square_free_max 0
  (square_free_max-1 nil 3587832242
   ("" (skeep)
    (("" (lemma "square_free_min")
      (("" (inst - "-a" "epsil" "y" "-c" "pn")
        (("" (assert)
          (("" (split -)
            (("1" (hide-all-but (-1 1))
              (("1" (case "NOT poly_deriv(-a) = (-1)*poly_deriv(a)")
                (("1" (expand "poly_deriv" 1)
                  (("1" (decompose-equality 1)
                    (("1" (hide-all-but 1) (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (lemma "scal_polynomial")
                    (("2" (expand "const_fun")
                      (("2" (expand "*")
                        (("2" (inst - _ _ "-1")
                          (("2" (inst - "poly_deriv(a)" "pn-1")
                            (("2" (decompose-equality -1)
                              (("2"
                                (inst - "y")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1))
              (("2" (replace -1 1 :dir rl)
                (("2" (hide -1)
                  (("2" (expand "polynomial")
                    (("2" (case "FORALL (ccc:real): -ccc = (-1)*ccc")
                      (("1" (rewrite -1 1)
                        (("1" (rewrite "sigma_scal" :dir rl)
                          (("1" (rewrite "sigma_eq")
                            (("1" (skosimp*) (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide (-1 2))
              (("3" (skeep)
                (("3" (inst - "x")
                  (("3" (assert)
                    (("3"
                      (case "(-1)*polynomial(-a, pn)(x) = polynomial(a,pn)(x)")
                      (("1" (assert) nil nil)
                       ("2" (hide-all-but 1)
                        (("2" (expand "polynomial")
                          (("2" (rewrite "sigma_scal" :dir rl)
                            (("2" (rewrite "sigma_eq")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (hide 2)
                                  (("2" (grind :exclude "^") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((square_free_min formula-decl nil more_polynomial_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sigma_scal formula-decl nil sigma nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (expt def-decl "real" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_eq formula-decl nil sigma nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (sigma def-decl "real" sigma nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (const_fun const-decl "[T -> real]" real_fun_ops nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "[T -> real]" real_fun_ops nil)
    (scal_polynomial formula-decl nil polynomials nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[T -> real]" real_fun_ops nil)
    (poly_deriv const-decl "real" polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (deriv_poly_shift_TCC1 0
  (deriv_poly_shift_TCC1-1 nil 3589548521 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (deriv_poly_shift subtype
    "(number_fields.-)(more_polynomial_props.n, 1)" "nat")))
 (deriv_poly_shift 0
  (deriv_poly_shift-1 nil 3589548523
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (name "j" "x!1")
        (("" (replace -1)
          (("" (hide -1)
            (("" (expand "poly_deriv")
              (("" (expand "poly_shift")
                (("" (rewrite "sigma_scal_right" 1 :dir rl)
                  (("1" (rewrite "sigma_sum")
                    (("1" (rewrite "sigma_shift_fun_eq")
                      (("1" (hide 2)
                        (("1" (skosimp*)
                          (("1" (assert)
                            (("1" (factor 1)
                              (("1"
                                (lemma " binom_absorption")
                                (("1"
                                  (inst - "1+j" "1+i!1+j")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1 +)
                                      (("1"
                                        (factor 1)
                                        (("1"
                                          (typepred "i!1")
                                          (("1" (field) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (skosimp*) (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (skosimp*) (("3" (assert) nil nil)) nil)
                       ("4" (skosimp*) (("4" (assert) nil nil)) nil)
                       ("5" (skosimp*) (("5" (assert) nil nil)) nil))
                      nil)
                     ("2" (skosimp*) (("2" (assert) nil nil)) nil)
                     ("3" (skosimp*) (("3" (assert) nil nil)) nil))
                    nil)
                   ("2" (skosimp*) (("2" (assert) nil nil)) nil)
                   ("3" (skosimp*) (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (n skolem-const-decl "nat" more_polynomial_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (poly_deriv const-decl "real" polynomials nil)
    (poly_shift const-decl "sequence[real]" polynomials nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sigma_scal_right formula-decl nil sigma nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (C const-decl "posnat" binomial nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma_shift_fun_eq formula-decl nil sigma nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (subrange type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (binom_absorption formula-decl nil binomial_identities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_sum formula-decl nil sigma nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (linear_power_is_differentiable_TCC1 0
  (linear_power_is_differentiable_TCC1-1 nil 3589549521
   ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil))
   nil
   (linear_power_is_differentiable subtype "more_polynomial_props.m"
    "{i: integers.int | booleans.OR(((number_fields.-)(more_polynomial_props.x, more_polynomial_props.y)) /= 0, reals.>=(i, 0))}")))
 (linear_power_is_differentiable 0
  (linear_power_is_differentiable-1 nil 3589549523
   ("" (skeep)
    (("" (lemma "power_linear_polynomial")
      (("" (inst + "power_linear(-y,1,m)")
        (("" (assert)
          (("" (split +)
            (("1" (expand "power_linear" 1)
              (("1" (assert)
                (("1" (expand "C" 1)
                  (("1" (assert)
                    (("1" (expand "^" 1)
                      (("1" (lemma "expt_1n_aux")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (replace -1)
                              (("1"
                                (expand "expt" +)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -) (("2" (grind) nil nil)) nil)
             ("3" (skeep) (("3" (inst?) (("3" (assert) nil nil)) nil))
              nil)
             ("4" (lemma "deriv_power_linear")
              (("4" (skeep)
                (("4" (inst?)
                  (("4" (replace -1)
                    (("4" (expand "max")
                      (("4" (assert)
                        (("4" (rewrite "scal_polynomial2")
                          (("4" (inst?) (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((power_linear_polynomial formula-decl nil polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv_power_linear formula-decl nil polynomials nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (scal_polynomial2 formula-decl nil polynomials nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (factorial def-decl "posnat" factorial "ints/")
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (C const-decl "posnat" binomial nil)
    (^ const-decl "real" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (expt_1n_aux formula-decl nil exponentiation nil)
    (factorial_0 formula-decl nil factorial "ints/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (power_linear const-decl "real" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (polynomial_prod_degrees 0
  (polynomial_prod_degrees-1 nil 3591538151
   ("" (skeep)
    (("" (lemma "polynomial_prod_def")
      ((""
        (case "NOT polynomial(a,n) = polynomial(polynomial_prod(b,m,g,p),m+p)")
        (("1" (hide 5)
          (("1" (decompose-equality +)
            (("1" (inst - "b" "g" "p" "m" "x!1")
              (("1" (inst - "x!1") (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (case "m+p < n")
          (("1"
            (case "polynomial(a, n) = polynomial(polynomial_prod(b, m, g, p), n)")
            (("1" (lemma "polynomial_eq_coeff")
              (("1" (inst?)
                (("1" (assert)
                  (("1" (inst - "n")
                    (("1" (expand "polynomial_prod" -1)
                      (("1" (expand "max" -1)
                        (("1" (expand "sigma") (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replace -2 +)
              (("2" (expand "polynomial" 1)
                (("2" (decompose-equality +)
                  (("2" (lemma "sigma_split")
                    (("2" (inst - _ "n" "0" "m+p")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (replaces -1 +)
                            (("2" (assert)
                              (("2"
                                (rewrite "sigma_restrict_eq_0")
                                (("2"
                                  (skosimp*)
                                  (("2"
                                    (expand "polynomial_prod" 1)
                                    (("2"
                                      (expand "max")
                                      (("2"
                                        (expand "sigma" +)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (lemma "polynomial_eq_coeff")
              (("2"
                (inst -
                 "LAMBDA (i:nat): IF i<=n THEN a(i) ELSE 0 ENDIF"
                 "polynomial_prod(b,m,g,p)" "m+p")
                (("2" (case "m + p > n")
                  (("1" (assert)
                    (("1" (replace -3 :dir rl)
                      (("1" (flatten)
                        (("1" (hide -3)
                          (("1" (splash -2)
                            (("1" (inst - "m+p")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "polynomial_prod" -1)
                                  (("1"
                                    (expand "max" -1)
                                    (("1"
                                      (expand "sigma" -1)
                                      (("1"
                                        (expand "sigma" -1)
                                        (("1"
                                          (lemma
                                           "nzreal_times_nzreal_is_nzreal")
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "sigma_split")
                              (("2"
                                (invoke (name "PG" "%1") (! 1 2))
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (decompose-equality 1)
                                    (("2"
                                      (expand "polynomial" 1)
                                      (("2"
                                        (inst - _ "m+p" "0" "n")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replaces -2)
                                              (("2"
                                                (invoke
                                                 (case "%1 = 0")
                                                 (! 1 1 2))
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "PG" +)
                                                      (("1"
                                                        (expand
                                                         "polynomial"
                                                         1)
                                                        (("1"
                                                          (rewrite
                                                           "sigma_eq")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (rewrite
                                                     "sigma_restrict_eq_0")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (case "m+p = n")
                      (("1" (replace -1 :dir rl)
                        (("1" (assert)
                          (("1" (hide -2)
                            (("1" (lemma "polynomial_eq_coeff")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skeep)
                                    (("1" (inst - "i") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomial_prod_def formula-decl nil polynomials nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (sigma_split formula-decl nil sigma nil)
    (polynomial_eq_coeff formula-decl nil polynomials nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma def-decl "real" sigma nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (> const-decl "bool" reals nil)
    (PG skolem-const-decl "[real -> real]" more_polynomial_props nil)
    (sigma_eq formula-decl nil sigma nil)
    (nzreal_times_nzreal_is_nzreal judgement-tcc nil real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i skolem-const-decl "nat" more_polynomial_props nil)
    (m skolem-const-decl "nat" more_polynomial_props nil)
    (p skolem-const-decl "nat" more_polynomial_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (polynomial_prod const-decl "real" polynomials nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (polynomial_div_linear_power_degree_TCC1 0
  (polynomial_div_linear_power_degree_TCC1-1 nil 3591543095
   ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil))
   nil
   (polynomial_div_linear_power_degree subtype
    "more_polynomial_props.k"
    "{i: integers.int | booleans.OR(((number_fields.-)(more_polynomial_props.x, more_polynomial_props.y)) /= 0, reals.>=(i, 0))}")))
 (polynomial_div_linear_power_degree 0
  (polynomial_div_linear_power_degree-1 nil 3591543097
   ("" (skeep)
    (("" (case "k = 0")
      (("1" (replaces -1)
        (("1" (assert)
          (("1" (expand "^")
            (("1" (expand "expt")
              (("1" (assert)
                (("1" (case "m > n")
                  (("1"
                    (name "aa"
                          "LAMBDA (i:nat): IF i<=n THEN a(i) ELSE 0 ENDIF")
                    (("1" (lemma "polynomial_eq_coeff")
                      (("1" (inst - "aa" "b" "m")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (hide -2)
                              (("1"
                                (split -)
                                (("1"
                                  (inst - "m")
                                  (("1"
                                    (expand "aa" -1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (decompose-equality 1)
                                  (("2"
                                    (inst - "x!1")
                                    (("2"
                                      (replace -3 :dir rl)
                                      (("2"
                                        (expand "polynomial" 1 1)
                                        (("2"
                                          (lemma "sigma_split")
                                          (("2"
                                            (inst - _ "m" "0" "n")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (invoke
                                                     (case "%1 = 0")
                                                     (! 1 1 2))
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "polynomial"
                                                           +)
                                                          (("1"
                                                            (rewrite
                                                             "sigma_eq")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (expand
                                                                 "aa"
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "sigma_restrict_eq_0")
                                                      (("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (expand
                                                           "aa"
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "n > m")
                    (("1"
                      (name "bb"
                            "LAMBDA (i:nat): IF i<=m THEN b(i) ELSE 0 ENDIF")
                      (("1" (lemma "polynomial_eq_coeff")
                        (("1" (inst - "a" "bb" "n")
                          (("1" (flatten)
                            (("1" (hide -2)
                              (("1"
                                (split -)
                                (("1"
                                  (inst - "n")
                                  (("1"
                                    (expand "bb" -1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "polynomial" + 2)
                                  (("2"
                                    (decompose-equality 1)
                                    (("2"
                                      (lemma "sigma_split")
                                      (("2"
                                        (inst - _ "n" "0" "m")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (invoke
                                                 (case "%1 = 0")
                                                 (! 1 2 2))
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst - "x!1")
                                                      (("1"
                                                        (replace -3 +)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "polynomial"
                                                             1)
                                                            (("1"
                                                              (case
                                                               "FORALL (diggy:real): 1*diggy=diggy")
                                                              (("1"
                                                                (rewrite
                                                                 -1)
                                                                (("1"
                                                                  (rewrite
                                                                   "sigma_eq")
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (expand
                                                                       "bb"
                                                                       1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (rewrite
                                                     "sigma_restrict_eq_0")
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (expand "bb" 1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (case "NOT m = n")
                        (("1" (assert) nil nil)
                         ("2" (hide (1 2))
                          (("2" (replace -1)
                            (("2" (assert)
                              (("2"
                                (lemma "polynomial_eq_coeff")
                                (("2"
                                  (inst - "a" "b" "n")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (split -)
                                        (("1" (inst - "n") nil nil)
                                         ("2"
                                          (decompose-equality 1)
                                          (("2"
                                            (inst - "x!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (lemma "linear_power_is_differentiable")
          (("2" (inst - "k" "y")
            (("2" (assert)
              (("2" (skolem -1 "G")
                (("2" (flatten)
                  (("2" (lemma "polynomial_prod_degrees")
                    (("2" (inst - "a" "G" "b" "n" "k" "m")
                      (("2" (assert)
                        (("2" (split -)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (inst - "n")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -2 4)
                                    (("1"
                                      (expand "polynomial_prod" +)
                                      (("1"
                                        (expand "max" +)
                                        (("1"
                                          (expand "sigma" +)
                                          (("1"
                                            (expand "sigma" +)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (inst -5 "x!1")
                              (("2"
                                (replace -5 +)
                                (("2"
                                  (inst -3 "x!1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt def-decl "real" exponentiation nil)
    (> const-decl "bool" reals nil)
    (polynomial_eq_coeff formula-decl nil polynomials nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (sigma_split formula-decl nil sigma nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (sigma_eq formula-decl nil sigma nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sigma def-decl "real" sigma nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (aa skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (sequence type-eq-decl nil sequences nil)
    (<= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (bb skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (^ const-decl "real" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (linear_power_is_differentiable formula-decl nil
     more_polynomial_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (polynomial_prod const-decl "real" polynomials nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (polynomial_prod_degrees formula-decl nil more_polynomial_props
     nil))
   shostak))
 (poly_deriv_signs_neq_around_root_left_TCC1 0
  (poly_deriv_signs_neq_around_root_left_TCC1-1 nil 3592659204
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (poly_deriv_signs_neq_around_root_left subtype
    "(number_fields.-)(more_polynomial_props.n, 1)" "nat")))
 (poly_deriv_signs_neq_around_root_left_TCC2 0
  (poly_deriv_signs_neq_around_root_left_TCC2-1 nil 3592659204
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (poly_deriv const-decl "real" polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (poly_deriv_signs_neq_around_root_left subtype
    "(number_fields.-)(more_polynomial_props.n, 1)" "nat")))
 (poly_deriv_signs_neq_around_root_left 0
  (poly_deriv_signs_neq_around_root_left-1 nil 3592659205
   (""
    (case "FORALL (a: sequence[real], n: nat, x, y: real):
        (n > 0 AND
          x < y AND
           polynomial(a, n)(y) = 0 AND
            (FORALL (z: real):
               x <= z AND
                z <= y AND
                 (polynomial(a, n)(z) = 0 OR
                   polynomial(poly_deriv(a), n - 1)(z) = 0)
                IMPLIES z = y))
         AND polynomial(a,n)(x)<0
         IMPLIES
         sign_ext(polynomial(a, n)(x)) =
          -sign_ext(polynomial(poly_deriv(a), n - 1)(x))")
    (("1" (skeep)
      (("1" (case "polynomial(a,n)(x)<0")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (inst - "-a" "n" "x" "y")
          (("2" (assert)
            (("2" (rewrite "neg_polynomial" :dir rl)
              (("2" (assert)
                (("2" (case "poly_deriv(-a) = -poly_deriv(a)")
                  (("1" (replace -1)
                    (("1" (rewrite "neg_polynomial" :dir rl)
                      (("1" (assert)
                        (("1" (expand "-")
                          (("1" (assert)
                            (("1" (case "polynomial(a,n)(x)=0")
                              (("1"
                                (hide (-2 -3))
                                (("1"
                                  (inst - "x")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (split -)
                                  (("1"
                                    (expand "sign_ext" (-1 +))
                                    (("1"
                                      (lift-if)
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (inst - "z")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (decompose-equality) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (expand "sign_ext" +)
          (("2" (lift-if)
            (("2" (lift-if)
              (("2" (lift-if)
                (("2" (lift-if)
                  (("2" (assert)
                    (("2"
                      (case "polynomial(poly_deriv(a), n - 1)(x) = 0")
                      (("1" (inst - "x") (("1" (assert) nil nil)) nil)
                       ("2" (assert)
                        (("2"
                          (case "polynomial(poly_deriv(a), n - 1)(x) >=0")
                          (("1" (ground) nil nil)
                           ("2" (hide (2 3))
                            (("2" (lemma "poly_decreasing")
                              (("2"
                                (inst - "a" "n" "x" "y")
                                (("2"
                                  (assert)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (lemma
                                       "poly_intermediate_value_inc")
                                      (("2"
                                        (inst
                                         -
                                         "poly_deriv(a)"
                                         "0"
                                         "n-1"
                                         "x"
                                         "c")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst - "cc!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)
     ("4" (hide 2) (("4" (skosimp*) (("4" (assert) nil nil)) nil))
      nil))
    nil)
   ((poly_decreasing formula-decl nil polynomials nil)
    (poly_intermediate_value_inc formula-decl nil polynomials nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (neg_polynomial formula-decl nil polynomials nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (poly_deriv const-decl "real" polynomials nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sign_ext const-decl
     "{sig: real | (sig = -1 OR sig = 1 OR sig = 0) AND sig * x = abs(x)}"
     sign nil))
   shostak))
 (poly_deriv_signs_neq_around_root_right_TCC1 0
  (poly_deriv_signs_neq_around_root_right_TCC1-1 nil 3592664083
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (poly_deriv_signs_neq_around_root_right subtype
    "(number_fields.-)(more_polynomial_props.n, 1)" "nat")))
 (poly_deriv_signs_neq_around_root_right_TCC2 0
  (poly_deriv_signs_neq_around_root_right_TCC2-1 nil 3592664083
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (poly_deriv const-decl "real" polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (poly_deriv_signs_neq_around_root_right subtype
    "(number_fields.-)(more_polynomial_props.n, 1)" "nat")))
 (poly_deriv_signs_neq_around_root_right 0
  (poly_deriv_signs_neq_around_root_right-1 nil 3592664088
   (""
    (case "FORALL (a: sequence[real], n: nat, x, y: real):
        (n > 0 AND
          x > y AND
           polynomial(a, n)(y) = 0 AND
            (FORALL (z: real):
               y <= z AND
                z <= x AND
                 (polynomial(a, n)(z) = 0 OR
                   polynomial(poly_deriv(a), n - 1)(z) = 0)
                IMPLIES z = y)) AND
         polynomial(a,n)(x)>0
         IMPLIES
         sign_ext(polynomial(a, n)(x)) =
          sign_ext(polynomial(poly_deriv(a), n - 1)(x))")
    (("1" (skeep)
      (("1" (case "polynomial(a,n)(x)>0")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (inst - "-a" "n" "x" "y")
          (("2" (assert)
            (("2" (rewrite "neg_polynomial" :dir rl)
              (("2" (assert)
                (("2" (case "poly_deriv(-a) = -poly_deriv(a)")
                  (("1" (replace -1)
                    (("1" (rewrite "neg_polynomial" :dir rl)
                      (("1" (assert)
                        (("1" (expand "-")
                          (("1" (assert)
                            (("1" (case "polynomial(a,n)(x)=0")
                              (("1"
                                (hide (-2 -3))
                                (("1"
                                  (inst - "x")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (split -)
                                  (("1"
                                    (expand "sign_ext" (-1 +))
                                    (("1"
                                      (lift-if)
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (inst - "z")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (decompose-equality) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (expand "sign_ext" +)
          (("2" (lift-if)
            (("2" (lift-if)
              (("2" (lift-if)
                (("2" (lift-if)
                  (("2" (assert)
                    (("2"
                      (case "polynomial(poly_deriv(a), n - 1)(x) = 0")
                      (("1" (inst - "x") (("1" (assert) nil nil)) nil)
                       ("2" (assert)
                        (("2"
                          (case "polynomial(poly_deriv(a), n - 1)(x) >=0")
                          (("1" (ground) nil nil)
                           ("2" (hide (2 3))
                            (("2" (lemma "poly_decreasing")
                              (("2"
                                (inst - "a" "n" "y" "x")
                                (("2"
                                  (assert)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (lemma
                                       "poly_intermediate_value_dec")
                                      (("2"
                                        (inst
                                         -
                                         "poly_deriv(a)"
                                         "0"
                                         "n-1"
                                         "c"
                                         "x")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst - "cc!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)
     ("4" (hide 2) (("4" (skosimp*) (("4" (assert) nil nil)) nil))
      nil))
    nil)
   ((poly_decreasing formula-decl nil polynomials nil)
    (poly_intermediate_value_dec formula-decl nil polynomials nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (neg_polynomial formula-decl nil polynomials nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (poly_deriv const-decl "real" polynomials nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sign_ext const-decl
     "{sig: real | (sig = -1 OR sig = 1 OR sig = 0) AND sig * x = abs(x)}"
     sign nil))
   nil))
 (max_linear_div_power?_TCC1 0
  (max_linear_div_power?_TCC1-1 nil 3591032268
   ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil))
   nil
   (max_linear_div_power? subtype "more_polynomial_props.m"
    "{i: integers.int | booleans.OR(((number_fields.-)(more_polynomial_props.x, more_polynomial_props.y)) /= 0, reals.>=(i, 0))}")))
 (max_linear_div_power?_TCC2 0
  (max_linear_div_power?_TCC2-1 nil 3591032268
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (max_linear_div_power? subtype
    "(number_fields.-)(more_polynomial_props.n, more_polynomial_props.m)"
    "nat")))
 (max_linear_div_power?_TCC3 0
  (max_linear_div_power?_TCC3-1 nil 3591032268
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (max_linear_div_power? subtype
    "(number_fields.-)(more_polynomial_props.n, 1)" "nat")))
 (max_linear_div_power?_TCC4 0
  (max_linear_div_power?_TCC4-1 nil 3591032268
   ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (max_linear_div_power? subtype
    "((number_fields.-)(more_polynomial_props.m, 1))"
    "{i: integers.int | booleans.OR(((number_fields.-)(more_polynomial_props.x, more_polynomial_props.y)) /= 0, reals.>=(i, 0))}")))
 (max_linear_div_power_rew 0
  (max_linear_div_power_rew-2 nil 3591090184
   ("" (skeep)
    (("" (expand "max_linear_div_power?")
      (("" (ground)
        (("1" (skeep) (("1" (inst + "b") (("1" (assert) nil nil)) nil))
          nil)
         ("2" (skeep)
          (("2" (case "n = m")
            (("1" (replace -1)
              (("1" (assert)
                (("1" (inst + "b" "m*b")
                  (("1" (split +)
                    (("1" (propax) nil nil) ("2" (propax) nil nil)
                     ("3" (skeep)
                      (("3" (lemma "linear_power_is_differentiable")
                        (("3" (inst - "m" "y")
                          (("3" (assert)
                            (("3" (skolem -1 "g")
                              (("3"
                                (flatten)
                                (("3"
                                  (hide -1)
                                  (("3"
                                    (case
                                     "FORALL (j:nat): j<=m IMPLIES a(j)=g(j)*b(0)")
                                    (("1"
                                      (inst -4 "x")
                                      (("1"
                                        (case
                                         "polynomial(poly_deriv(a),m-1)(x) = polynomial(poly_deriv(g),m-1)(x)*b(0)")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (replace -4)
                                            (("1"
                                              (expand "polynomial" +)
                                              (("1"
                                                (expand "sigma" +)
                                                (("1"
                                                  (expand "sigma" +)
                                                  (("1"
                                                    (expand "*")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand "polynomial" +)
                                            (("2"
                                              (rewrite
                                               "sigma_scal_right"
                                               1
                                               :dir
                                               rl)
                                              (("2"
                                                (rewrite "sigma_eq")
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (expand
                                                       "poly_deriv"
                                                       1)
                                                      (("2"
                                                        (inst
                                                         -
                                                         "1+n!1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "polynomial_eq_coeff")
                                      (("2"
                                        (inst - "a" "b(0)*g" "m")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst - "j")
                                                    (("1"
                                                      (expand "*")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (decompose-equality
                                                   1)
                                                  (("2"
                                                    (inst -6 "x!1")
                                                    (("2"
                                                      (replace -6 1)
                                                      (("2"
                                                        (expand
                                                         "polynomial"
                                                         +
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "sigma"
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "sigma"
                                                             1)
                                                            (("2"
                                                              (inst
                                                               -2
                                                               "x!1")
                                                              (("2"
                                                                (replace
                                                                 -2
                                                                 1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (rewrite
                                                                   "scal_polynomial2")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (inst - "1")
                      (("4" (mult-by 1 "m")
                        (("4" (assert)
                          (("4" (expand "polynomial" (-1 1))
                            (("4"
                              (rewrite "sigma_scal_right" 1 :dir rl)
                              (("4"
                                (expand "*")
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (label "neqm" 1)
              (("2" (hide "neqm")
                (("2"
                  (case "EXISTS (q:[nat->real]): FORALL (x:real): polynomial(q,n-m)(x) = (x-y)^1*polynomial(poly_deriv(b),n-m-1)(x) + m*polynomial(b,n-m)(x)")
                  (("1" (skeep)
                    (("1"
                      (case "FORALL (x):
                                                                                         polynomial(poly_deriv(a), n - 1)(x) =
                                                                                          (x - y) ^ (m - 1) * polynomial(q, n - m)(x)")
                      (("1" (inst + "b" "q")
                        (("1" (assert)
                          (("1" (split +)
                            (("1" (propax) nil nil)
                             ("2" (propax) nil nil)
                             ("3" (assert)
                              (("3"
                                (inst -2 "y")
                                (("3"
                                  (assert)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (replace -2 +)
                                      (("3"
                                        (inst -4 "1")
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (mult-by 1 "m")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (expand "^" -1)
                                                (("3"
                                                  (expand "expt" -1)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 3)
                        (("2" (lemma "linear_power_is_differentiable")
                          (("2" (inst - "m" "y")
                            (("2" (assert)
                              (("2"
                                (skolem -1 "z")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (case
                                         "NOT polynomial(poly_deriv(a),n-1) = polynomial(poly_deriv(polynomial_prod(z,m,b,n-m)),n-1)")
                                        (("1"
                                          (case
                                           "NOT polynomial(poly_deriv(LAMBDA (i:nat): IF i>n THEN 0 ELSE a(i) ENDIF),n-1) = polynomial(poly_deriv(polynomial_prod(z,m,b,n-m)),n-1)")
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (invoke
                                               (name "aq" "%1")
                                               (! 1 1 1 1))
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (case
                                                   "aq = polynomial_prod(z, m, b, n - m)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "polynomial_eq_coeff")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "aq"
                                                       "polynomial_prod(z, m, b, n - m)"
                                                       "n")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (split -)
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (case
                                                                 "x!1 > n")
                                                                (("1"
                                                                  (expand
                                                                   "aq"
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "polynomial_prod"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "max")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "sigma"
                                                                             +)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (decompose-equality
                                                               1)
                                                              (("2"
                                                                (rewrite
                                                                 "polynomial_prod_def"
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "x!1")
                                                                  (("2"
                                                                    (inst
                                                                     -7
                                                                     "x!1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -3
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (replace
                                                                           -7
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (expand
                                                                             "polynomial"
                                                                             1)
                                                                            (("2"
                                                                              (rewrite
                                                                               "sigma_restrict_eq")
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "restrict")
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "aq")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -1 1 :dir rl)
                                            (("2"
                                              (decompose-equality 1)
                                              (("2"
                                                (expand "polynomial" 1)
                                                (("2"
                                                  (rewrite
                                                   "sigma_restrict_eq")
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (decompose-equality
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "restrict")
                                                        (("2"
                                                          (expand
                                                           "poly_deriv")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma " poly_product_rule")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst - "x")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (reveal "neqm")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace
                                                         -2
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           +)
                                                          (("2"
                                                            (inst
                                                             -4
                                                             "x")
                                                            (("2"
                                                              (inst
                                                               -5
                                                               "x")
                                                              (("2"
                                                                (replace
                                                                 -5)
                                                                (("2"
                                                                  (replace
                                                                   -4)
                                                                  (("2"
                                                                    (inst
                                                                     -6
                                                                     "x")
                                                                    (("2"
                                                                      (replace
                                                                       -6)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "expt_plus")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "m-1"
                                                                             "1"
                                                                             "x-y")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "^"
                                                                                   +)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "expt"
                                                                                     +)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (hide 3)
                      (("2"
                        (name "DIGG"
                              "LAMBDA (ii:nat): IF ii = n-m THEN poly_deriv(b)(n-m-1) + m*b(n-m) ELSIF ii>0 THEN poly_deriv(b)(ii-1) - y*poly_deriv(b)(ii) + m*b(ii) ELSE -y*poly_deriv(b)(0) + m*b(0) ENDIF")
                        (("1" (inst + "DIGG")
                          (("1" (skeep)
                            (("1"
                              (name "IP"
                                    "LAMBDA (i:nat): IF i = 1 THEN 1 ELSIF i = 0 THEN -y ELSE 0 ENDIF")
                              (("1"
                                (case "x-y = polynomial(IP,1)(x)")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (expand "^" 1)
                                    (("1"
                                      (expand "expt" 1)
                                      (("1"
                                        (expand "expt" 1)
                                        (("1"
                                          (rewrite
                                           "polynomial_prod_def")
                                          (("1"
                                            (rewrite
                                             "scal_polynomial2"
                                             :dir
                                             rl)
                                            (("1"
                                              (expand "polynomial" 1)
                                              (("1"
                                                (rewrite "sigma_sum")
                                                (("1"
                                                  (rewrite
                                                   "sigma_restrict_eq")
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (decompose-equality
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "restrict")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split +)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (case
                                                                   "DIGG(x!1) =
                                                                                                     (m * b)(x!1) +
                                                                                                      polynomial_prod(poly_deriv(b), -1 - m + n, IP, 1)(x!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     3)
                                                                    (("2"
                                                                      (hide
                                                                       -3)
                                                                      (("2"
                                                                        (expand
                                                                         "DIGG"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "polynomial_prod")
                                                                          (("2"
                                                                            (expand
                                                                             "max")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (case
                                                                                 "x!1 = 0")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "sigma_eq_one_arg")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "IP"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("1"
                                                                                                      (reveal
                                                                                                       "neqm")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (reveal
                                                                                                 "neqm")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (skosimp*)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (split
                                                                                         +)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "sigma"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "sigma"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "IP"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "*")
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "sigma_reverse"
                                                                                               2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "sigma"
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "sigma"
                                                                                                   +)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (invoke
                                                                                                       (case
                                                                                                        "NOT %1 = 0")
                                                                                                       (!
                                                                                                        2
                                                                                                        2
                                                                                                        2))
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         3)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "sigma_restrict_eq_0")
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (skosimp*)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "IP"
                                                                                                             +)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "*")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (skosimp*)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (skosimp*)
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("5"
                                                                                                        (flatten)
                                                                                                        (("5"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (reveal
                                                                     "neqm")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          (("2"
                                                            (reveal
                                                             "neqm")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (reveal "neqm")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "IP" 2)
                                        (("2"
                                          (hide-all-but 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*) (("2" (assert) nil nil)) nil)
                         ("3" (skosimp*)
                          (("3" (assert)
                            (("3" (reveal "neqm")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (reveal "neqm") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_linear_div_power? const-decl "bool" more_polynomial_props nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (poly_product_rule formula-decl nil polynomials nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (y skolem-const-decl "real" more_polynomial_props nil)
    (x skolem-const-decl "real" more_polynomial_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sigma_restrict_eq formula-decl nil sigma nil)
    (restrict const-decl "[T -> real]" sigma nil)
    (polynomial_prod_def formula-decl nil polynomials nil)
    (x!1 skolem-const-decl "nat" more_polynomial_props nil)
    (n skolem-const-decl "nat" more_polynomial_props nil)
    (aq skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (polynomial_prod const-decl "real" polynomials nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sigma_reverse formula-decl nil sigma_nat nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (sigma_eq_one_arg formula-decl nil sigma nil)
    (IP skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (DIGG skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (sigma_sum formula-decl nil sigma nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[T -> real]" real_fun_ops nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (polynomial_eq_coeff formula-decl nil polynomials nil)
    (scal_polynomial2 formula-decl nil polynomials nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (m skolem-const-decl "posnat" more_polynomial_props nil)
    (j skolem-const-decl "nat" more_polynomial_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma_scal_right formula-decl nil sigma nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sigma_eq formula-decl nil sigma nil)
    (TRUE const-decl "bool" booleans nil)
    (sigma def-decl "real" sigma nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (poly_deriv const-decl "real" polynomials nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (linear_power_is_differentiable formula-decl nil
     more_polynomial_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)
  (max_linear_div_power_rew-1 nil 3591089825
   (""
    (case "NOT FORALL (a: sequence[real], n: nat, y: real):
                                                         a(n) /= 0 AND polynomial(a, n)(y) = 0 IMPLIES
                                                          (EXISTS (b: [nat -> real], m: posnat):
                                                                  m <= n
                                                              AND FORALL (x):
                                                                    polynomial(a, n)(x) =
                                                                     (x - y) ^ m * polynomial(b, n - m)(x)
                                                              AND polynomial(b, n - m)(y) /= 0)")
    (("1" (hide 2)
      (("1" (induct "n")
        (("1" (skeep)
          (("1" (expand "polynomial" -1)
            (("1" (expand "sigma")
              (("1" (expand "sigma") (("1" (propax) nil)))))))))
         ("2" (skolem 1 "nn")
          (("2" (flatten)
            (("2" (skeep)
              (("2" (lemma "polynomial_zero_factor")
                (("2" (inst - "a" "nn+1" "y")
                  (("2" (assert)
                    (("2" (skeep -1)
                      (("2" (case "polynomial(g,nn)(y)/=0")
                        (("1" (inst + "g" "1")
                          (("1" (assert)
                            (("1" (expand "^" +)
                              (("1"
                                (expand "expt" +)
                                (("1"
                                  (expand "expt" +)
                                  (("1" (propax) nil)))))))))))
                         ("2" (flatten)
                          (("2" (inst - "g" "y")
                            (("2" (assert)
                              (("2"
                                (case "g(nn)/=0")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst + "b" "m+1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst - "x")
                                                (("1"
                                                  (inst - "x")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "FORALL (rr:real): x*rr-rr*y = (x-y)^1*rr")
                                                      (("1"
                                                        (rewrite -1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             +)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -4
                                                                     +)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "expt_plus")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               +)
                                                                              (("1"
                                                                                (assert)
                                                                                nil)))))
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (replace
                                                                               -1
                                                                               +)
                                                                              (("2"
                                                                                (expand
                                                                                 "^"
                                                                                 +)
                                                                                (("2"
                                                                                  (expand
                                                                                   "expt"
                                                                                   +)
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil)))))))))))))))))))))))))))))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil)))))))))))))))))))))))))
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma "polynomial_eq_coeff")
                                      (("2"
                                        (name
                                         "DIG"
                                         "LAMBDA (ii:nat): IF ii = 1+nn THEN g(nn) ELSIF ii>0 THEN g(ii-1) - g(ii)*y ELSE -g(0)*y ENDIF")
                                        (("1"
                                          (inst - "a" "DIG" "1+nn")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide -3)
                                              (("1"
                                                (split -)
                                                (("1"
                                                  (inst - "1+nn")
                                                  (("1"
                                                    (expand "DIG" -1)
                                                    (("1"
                                                      (assert)
                                                      nil)))))
                                                 ("2"
                                                  (decompose-equality
                                                   1)
                                                  (("2"
                                                    (inst - "x!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -4 1)
                                                        (("2"
                                                          (expand
                                                           "polynomial"
                                                           1)
                                                          (("2"
                                                            (name
                                                             "IG"
                                                             "LAMBDA (i: nat): g(i) * (IF i = 0 THEN 1 ELSE x!1 ^ i ENDIF)")
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (case
                                                                 "sigma(0,nn,IG)=sigma(0,1+nn,LAMBDA (ii:nat): IF ii=0 THEN 0 ELSE IG(ii-1) ENDIF)")
                                                                (("1"
                                                                  (mult-by
                                                                   -1
                                                                   "x!1")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     +)
                                                                    (("1"
                                                                      (rewrite
                                                                       "sigma_scal_right"
                                                                       1
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (rewrite
                                                                         "sigma_scal_right"
                                                                         1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (case
                                                                           "sigma(0, nn, LAMBDA (i: nat): IG(i) * y) = sigma(0, 1+nn, LAMBDA (i: nat): IF i >nn THEN 0 ELSE IG(i) * y ENDIF)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             +)
                                                                            (("1"
                                                                              (rewrite
                                                                               "sigma_minus")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "sigma_restrict_eq")
                                                                                (("1"
                                                                                  (hide
                                                                                   2)
                                                                                  (("1"
                                                                                    (decompose-equality
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "restrict")
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (ground)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "DIG"
                                                                                               1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "IG"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil)))))))
                                                                                             ("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "NOT x!2 = 1+nn")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "DIG"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "IG"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil)))))))))))))
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "IG"
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "DIG"
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (lift-if)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (ground)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "^"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "expt"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "expt"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil)))))))))
                                                                                                             ("2"
                                                                                                              (lemma
                                                                                                               "expt_plus")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!2-1"
                                                                                                                 "1"
                                                                                                                 "x!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     +)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "^"
                                                                                                                       2
                                                                                                                       3)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "expt"
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "expt"
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil)))))))))))
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "^"
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "expt"
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil)))))))))))))))))))))))))))))))))))))))
                                                                                     ("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil)))))))))))))
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "sigma"
                                                                               +
                                                                               2)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "sigma_restrict_eq")
                                                                                (("2"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "restrict")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil)))))))))))))))))))
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (assert)
                                                                      nil)))))
                                                                 ("2"
                                                                  (case
                                                                   "FORALL (k:nat): k<=nn IMPLIES sigma(0, k, IG) =
                                                                                           sigma(0, 1 + k,
                                                                                                 LAMBDA (ii: nat): IF ii = 0 THEN 0 ELSE IG(ii - 1) ENDIF)")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))
                                                                   ("2"
                                                                    (induct
                                                                     "k")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "IG")
                                                                          (("1"
                                                                            (grind)
                                                                            nil)))))))
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "sigma"
                                                                           +)
                                                                          (("2"
                                                                            (propax)
                                                                            nil)))))))
                                                                     ("3"
                                                                      (skosimp*)
                                                                      (("3"
                                                                        (assert)
                                                                        nil)))))
                                                                   ("3"
                                                                    (skosimp*)
                                                                    (("3"
                                                                      (assert)
                                                                      nil)))))
                                                                 ("3"
                                                                  (skosimp*)
                                                                  (("3"
                                                                    (assert)
                                                                    nil)))))))))))))))))))))))))))
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (assert)
                                            nil)))))))))))))))))))))))))))))))))))
         ("3" (skosimp*) (("3" (assert) nil)))
         ("4" (skosimp*) (("4" (assert) nil)))))))
     ("2" (skeep)
      (("2" (inst - "a" "n" "y")
        (("2" (assert)
          (("2" (skeep)
            (("2" (case "n = m")
              (("1" (replace -1)
                (("1" (assert)
                  (("1" (inst + "m")
                    (("1" (expand "max_linear_div_power?")
                      (("1" (inst + "b" "m*b")
                        (("1" (split +)
                          (("1" (skeep)
                            (("1" (inst - "x") (("1" (assert) nil)))))
                           ("2" (inst - "1") (("2" (assert) nil)))
                           ("3" (skeep)
                            (("3"
                              (lemma "linear_power_is_differentiable")
                              (("3"
                                (inst - "m" "y")
                                (("3"
                                  (assert)
                                  (("3"
                                    (skolem -1 "g")
                                    (("3"
                                      (flatten)
                                      (("3"
                                        (case
                                         "FORALL (j:nat): j<=m IMPLIES a(j)=g(j)*b(0)")
                                        (("1"
                                          (inst -4 "x")
                                          (("1"
                                            (case
                                             "polynomial(poly_deriv(a),m-1)(x) = polynomial(poly_deriv(g),m-1)(x)*b(0)")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (replace -4)
                                                (("1"
                                                  (expand
                                                   "polynomial"
                                                   +)
                                                  (("1"
                                                    (expand "sigma" +)
                                                    (("1"
                                                      (expand
                                                       "sigma"
                                                       +)
                                                      (("1"
                                                        (expand "*")
                                                        (("1"
                                                          (propax)
                                                          nil)))))))))))))
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "polynomial" +)
                                                (("2"
                                                  (rewrite
                                                   "sigma_scal_right"
                                                   1
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (rewrite
                                                     "sigma_eq")
                                                    (("2"
                                                      (hide 2)
                                                      (("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (expand
                                                           "poly_deriv"
                                                           1)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "1+n!1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  nil)))))))))))))))))))))))))
                                         ("2"
                                          (lemma "polynomial_eq_coeff")
                                          (("2"
                                            (inst - "a" "b(0)*g" "m")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (hide -2)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst - "j")
                                                        (("1"
                                                          (expand "*")
                                                          (("1"
                                                            (assert)
                                                            nil)))))))
                                                     ("2"
                                                      (decompose-equality
                                                       1)
                                                      (("2"
                                                        (inst -6 "x!1")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (replace
                                                             -6
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "polynomial"
                                                               +
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "sigma"
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "sigma"
                                                                   1)
                                                                  (("2"
                                                                    (inst
                                                                     -2
                                                                     "x!1")
                                                                    (("2"
                                                                      (replace
                                                                       -2
                                                                       1
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite
                                                                         "scal_polynomial2")
                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))
                           ("4" (inst - "1")
                            (("4" (flatten)
                              (("4"
                                (mult-by 1 "m")
                                (("4"
                                  (assert)
                                  (("4"
                                    (expand "polynomial" (-1 1))
                                    (("4"
                                      (rewrite
                                       "sigma_scal_right"
                                       1
                                       :dir
                                       rl)
                                      (("4"
                                        (expand "*")
                                        (("4"
                                          (assert)
                                          nil)))))))))))))))))))))))))))
               ("2" (label "neqm" 1)
                (("2" (hide "neqm")
                  (("2"
                    (case "EXISTS (q:[nat->real]): FORALL (x:real): polynomial(q,n-m)(x) = (x-y)^1*polynomial(poly_deriv(b),n-m-1)(x) + m*polynomial(b,n-m)(x)")
                    (("1" (skeep)
                      (("1"
                        (case "FORALL (x):
                                                               polynomial(poly_deriv(a), n - 1)(x) =
                                                                (x - y) ^ (m - 1) * polynomial(q, n - m)(x)")
                        (("1" (inst + "m")
                          (("1" (expand "max_linear_div_power?")
                            (("1" (inst + "b" "q")
                              (("1"
                                (assert)
                                (("1"
                                  (split +)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -4 "x")
                                      (("1" (assert) nil)))))
                                   ("2"
                                    (inst -4 "1")
                                    (("2" (assert) nil)))
                                   ("3" (propax) nil)
                                   ("4"
                                    (inst -2 "y")
                                    (("4"
                                      (assert)
                                      (("4"
                                        (assert)
                                        (("4"
                                          (replace -2 +)
                                          (("4"
                                            (inst -4 "1")
                                            (("4"
                                              (flatten)
                                              (("4"
                                                (mult-by 1 "m")
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (expand "^" -1)
                                                    (("4"
                                                      (expand
                                                       "expt"
                                                       -1)
                                                      (("4"
                                                        (assert)
                                                        nil)))))))))))))))))))))))))))))))
                         ("2" (lemma "linear_power_is_differentiable")
                          (("2" (inst - "m" "y")
                            (("2" (assert)
                              (("2"
                                (skolem -1 "z")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide 3)
                                      (("2"
                                        (case
                                         "NOT polynomial(poly_deriv(a),n-1) = polynomial(poly_deriv(polynomial_prod(z,m,b,n-m)),n-1)")
                                        (("1"
                                          (case
                                           "NOT polynomial(poly_deriv(LAMBDA (i:nat): IF i>n THEN 0 ELSE a(i) ENDIF),n-1) = polynomial(poly_deriv(polynomial_prod(z,m,b,n-m)),n-1)")
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (invoke
                                               (name "aq" "%1")
                                               (! 1 1 1 1))
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (case
                                                   "aq = polynomial_prod(z, m, b, n - m)")
                                                  (("1" (assert) nil)
                                                   ("2"
                                                    (lemma
                                                     "polynomial_eq_coeff")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "aq"
                                                       "polynomial_prod(z, m, b, n - m)"
                                                       "n")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (split -)
                                                            (("1"
                                                              (decompose-equality
                                                               1)
                                                              (("1"
                                                                (case
                                                                 "x!1 > n")
                                                                (("1"
                                                                  (expand
                                                                   "aq"
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "polynomial_prod"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "max")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "sigma"
                                                                             +)
                                                                            (("1"
                                                                              (propax)
                                                                              nil)))))))))))))
                                                                 ("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil)))))))
                                                             ("2"
                                                              (decompose-equality
                                                               1)
                                                              (("2"
                                                                (rewrite
                                                                 "polynomial_prod_def"
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "x!1")
                                                                  (("2"
                                                                    (inst
                                                                     -7
                                                                     "x!1")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (replace
                                                                           -3
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (replace
                                                                             -7
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (expand
                                                                               "polynomial"
                                                                               1)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "sigma_restrict_eq")
                                                                                (("2"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "restrict")
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "aq")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil)))))))))))))))))))))))))))))))))))))))))))))))
                                           ("2"
                                            (replace -1 1 :dir rl)
                                            (("2"
                                              (decompose-equality 1)
                                              (("2"
                                                (expand "polynomial" 1)
                                                (("2"
                                                  (rewrite
                                                   "sigma_restrict_eq")
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (decompose-equality
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "restrict")
                                                        (("2"
                                                          (expand
                                                           "poly_deriv")
                                                          (("2"
                                                            (propax)
                                                            nil)))))))))))))))))))
                                         ("2"
                                          (lemma " poly_product_rule")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst - "x")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (reveal "neqm")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace
                                                         -2
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           +)
                                                          (("2"
                                                            (inst
                                                             -4
                                                             "x")
                                                            (("2"
                                                              (inst
                                                               -5
                                                               "x")
                                                              (("2"
                                                                (replace
                                                                 -5)
                                                                (("2"
                                                                  (replace
                                                                   -4)
                                                                  (("2"
                                                                    (inst
                                                                     -6
                                                                     "x")
                                                                    (("2"
                                                                      (replace
                                                                       -6)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "expt_plus")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "m-1"
                                                                             "1"
                                                                             "x-y")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "^"
                                                                                   +)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "expt"
                                                                                     +)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                         ("3" (assert) nil)))))
                     ("2" (hide 3)
                      (("2"
                        (name "DIGG"
                              "LAMBDA (ii:nat): IF ii = n-m THEN poly_deriv(b)(n-m-1) + m*b(n-m) ELSIF ii>0 THEN poly_deriv(b)(ii-1) - y*poly_deriv(b)(ii) + m*b(ii) ELSE -y*poly_deriv(b)(0) + m*b(0) ENDIF")
                        (("1" (inst + "DIGG")
                          (("1" (skeep)
                            (("1"
                              (name "IP"
                                    "LAMBDA (i:nat): IF i = 1 THEN 1 ELSIF i = 0 THEN -y ELSE 0 ENDIF")
                              (("1"
                                (case "x-y = polynomial(IP,1)(x)")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (expand "^" 1)
                                    (("1"
                                      (expand "expt" 1)
                                      (("1"
                                        (expand "expt" 1)
                                        (("1"
                                          (rewrite
                                           "polynomial_prod_def")
                                          (("1"
                                            (rewrite
                                             "scal_polynomial2"
                                             :dir
                                             rl)
                                            (("1"
                                              (expand "polynomial" 1)
                                              (("1"
                                                (rewrite "sigma_sum")
                                                (("1"
                                                  (rewrite
                                                   "sigma_restrict_eq")
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (decompose-equality
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "restrict")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split +)
                                                              (("1"
                                                                (propax)
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (case
                                                                   "DIGG(x!1) =
                                                           (m * b)(x!1) +
                                                            polynomial_prod(poly_deriv(b), -1 - m + n, IP, 1)(x!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     3)
                                                                    (("2"
                                                                      (hide
                                                                       -3)
                                                                      (("2"
                                                                        (expand
                                                                         "DIGG"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "polynomial_prod")
                                                                          (("2"
                                                                            (expand
                                                                             "max")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (case
                                                                                 "x!1 = 0")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "sigma_eq_one_arg")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "IP"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("1"
                                                                                                      (reveal
                                                                                                       "neqm")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil)))))))))
                                                                                               ("2"
                                                                                                (reveal
                                                                                                 "neqm")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil)))
                                                                                               ("3"
                                                                                                (skosimp*)
                                                                                                nil)))))))
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil)))))))))))
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (split
                                                                                         +)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "sigma"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "sigma"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "IP"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "*")
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil)))))))))))))))
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "sigma_reverse"
                                                                                               2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "sigma"
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "sigma"
                                                                                                   +)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (invoke
                                                                                                       (case
                                                                                                        "NOT %1 = 0")
                                                                                                       (!
                                                                                                        2
                                                                                                        2
                                                                                                        2))
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         3)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "sigma_restrict_eq_0")
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil)))))
                                                                                                           ("2"
                                                                                                            (skosimp*)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil)))))))
                                                                                                       ("2"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "IP"
                                                                                                             +)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "*")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil)))))))))
                                                                                                       ("3"
                                                                                                        (skosimp*)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          nil)))
                                                                                                       ("4"
                                                                                                        (skosimp*)
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil)))
                                                                                                       ("5"
                                                                                                        (flatten)
                                                                                                        (("5"
                                                                                                          (assert)
                                                                                                          nil)))))))))))
                                                                                               ("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil)))))))))))))))))))))))))))))))
                                                                   ("3"
                                                                    (reveal
                                                                     "neqm")
                                                                    (("3"
                                                                      (assert)
                                                                      nil)))))))))))))))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          (("2"
                                                            (reveal
                                                             "neqm")
                                                            (("2"
                                                              (assert)
                                                              nil)))))))))))))))))))))))))))))
                                 ("2"
                                  (assert)
                                  (("2"
                                    (reveal "neqm")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "IP" 2)
                                        (("2"
                                          (hide-all-but 2)
                                          (("2"
                                            (grind)
                                            nil)))))))))))))))))))
                         ("2" (skosimp*) (("2" (assert) nil)))
                         ("3" (skosimp*) (("3" (assert) nil)))
                         ("4" (skosimp*)
                          (("4" (assert)
                            (("4" (reveal "neqm")
                              (("4" (assert) nil)))))))))))
                     ("3" (assert)
                      (("3" (reveal "neqm") (("3" (assert) nil)))))
                     ("4" (assert) nil)))))))))))))))))
     ("3" (skosimp*) (("3" (assert) nil)))
     ("4" (skosimp*) (("4" (assert) nil))))
    nil)
   nil nil))
 (max_linear_div_power_rew2_TCC1 0
  (max_linear_div_power_rew2_TCC1-1 nil 3591634826
   ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil))
   nil
   (max_linear_div_power_rew2 subtype "more_polynomial_props.m"
    "{i: integers.int | booleans.OR(((number_fields.-)(more_polynomial_props.x, more_polynomial_props.y)) /= 0, reals.>=(i, 0))}")))
 (max_linear_div_power_rew2 0
  (max_linear_div_power_rew2-1 nil 3591634835
   ("" (skeep)
    (("" (rewrite "max_linear_div_power_rew")
      (("" (split)
        (("1" (flatten)
          (("1" (skosimp*)
            (("1" (assert)
              (("1" (inst + "b!1" "n-m") (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (case "NOT m<=n")
            (("1" (hide 2)
              (("1" (lemma "polynomial_prod_def")
                (("1" (lemma "linear_power_is_differentiable")
                  (("1" (inst - "m" "y")
                    (("1" (assert)
                      (("1" (skolem - "aa")
                        (("1" (flatten)
                          (("1" (skeep)
                            (("1" (hide -4)
                              (("1"
                                (inst - "aa" "b" "k" "m" _)
                                (("1"
                                  (case
                                   "NOT polynomial(a,n) = polynomial(polynomial_prod(aa,m,b,k),k+m)")
                                  (("1"
                                    (decompose-equality 1)
                                    (("1"
                                      (inst -3 "x!1")
                                      (("1"
                                        (inst -4 "x!1")
                                        (("1"
                                          (replace -4 :dir rl)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -5 "x!1")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case
                                     "EXISTS (D:nat): D<=k AND b(D)/=0 AND FORALL (i:nat): i>D AND i<=k IMPLIES b(i)=0")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (name
                                         "pp"
                                         "polynomial_prod(aa, m, b, k)")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (case "pp(D+m)/=0")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case
                                                 "NOT polynomial(LAMBDA (i:nat): IF i>n THEN 0 ELSE a(i) ENDIF,k+m) = polynomial(pp,k+m)")
                                                (("1"
                                                  (decompose-equality
                                                   1)
                                                  (("1"
                                                    (decompose-equality
                                                     -4)
                                                    (("1"
                                                      (inst - "x!1")
                                                      (("1"
                                                        (replaces
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (hide-all-but
                                                           (1 4))
                                                          (("1"
                                                            (expand
                                                             "polynomial"
                                                             +
                                                             1)
                                                            (("1"
                                                              (lemma
                                                               "sigma_split")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "n")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (invoke
                                                                         (case
                                                                          "%1 = 0")
                                                                         (!
                                                                          1
                                                                          1
                                                                          2))
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "polynomial"
                                                                             +)
                                                                            (("1"
                                                                              (rewrite
                                                                               "sigma_eq")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (rewrite
                                                                             "sigma_restrict_eq_0")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "polynomial_eq_coeff")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst - "D+m")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "pp" -1)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (expand
                                                       "polynomial_prod")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "sigma_eq_one_arg")
                                                          (("2"
                                                            (inst?)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "m")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   +)
                                                                  (("1"
                                                                    (expand
                                                                     "max"
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (inst
                                                                       -3
                                                                       "D-i+m")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skeep)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case
                                       "EXISTS (ii:nat): ii<=k AND b(ii)/=0")
                                      (("1"
                                        (skeep -)
                                        (("1"
                                          (hide-all-but (-1 1 2 3))
                                          (("1"
                                            (case
                                             "FORALL (kk:nat): kk>=ii IMPLIES EXISTS (D: nat):
                                                     D <= kk AND
                                                      b(D) /= 0 AND (FORALL (i: nat): i > D AND i <= kk IMPLIES b(i) = 0)")
                                            (("1"
                                              (inst - "k")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (induct "kk")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case "ii = 0")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst + "0")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case "j>=ii")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "b(1+j)/=0")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst
                                                               +
                                                               "1+j")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "D")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "i")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (case
                                                             "b(1+j)/=0")
                                                            (("1"
                                                              (inst
                                                               +
                                                               "1+j")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (1 4))
                                        (("2"
                                          (expand "polynomial")
                                          (("2"
                                            (rewrite
                                             "sigma_restrict_eq_0")
                                            (("2"
                                              (hide 3)
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst + "i!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (skeep)
                (("2"
                  (name "bb"
                        "LAMBDA (i:nat): IF i<=k THEN b(i) ELSE 0 ENDIF")
                  (("2" (inst + "bb")
                    (("2" (assert)
                      (("2"
                        (case "polynomial(bb,n-m) = polynomial(b,k)")
                        (("1" (assert) nil nil)
                         ("2" (hide 3)
                          (("2"
                            (case "NOT EXISTS (i:nat): i<=k AND i>n-m AND b(i)/=0")
                            (("1" (case "k <= n-m")
                              (("1"
                                (expand "polynomial" 2 1)
                                (("1"
                                  (decompose-equality 2)
                                  (("1"
                                    (lemma "sigma_split")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (inst - "k")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (invoke
                                               (case "%1 = 0")
                                               (! 1 1 2))
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "polynomial"
                                                     1)
                                                    (("1"
                                                      (rewrite
                                                       "sigma_eq")
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (expand
                                                             "bb"
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (rewrite
                                                   "sigma_restrict_eq_0")
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (expand "bb" 1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "NOT k>n-m")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide 1)
                                  (("2"
                                    (decompose-equality 2)
                                    (("2"
                                      (expand "polynomial" + 2)
                                      (("2"
                                        (lemma "sigma_split")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (inst - "n-m")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (invoke
                                                   (case "%1 = 0")
                                                   (! 1 2 2))
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (expand
                                                       "polynomial"
                                                       1)
                                                      (("1"
                                                        (rewrite
                                                         "sigma_eq")
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (expand
                                                             "bb"
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "sigma_restrict_eq_0")
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst + "i!1")
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (lemma "linear_power_is_differentiable")
                              (("2"
                                (case "NOT k>n-m")
                                (("1"
                                  (skosimp*)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (inst - "m" "y")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skolem - "AA")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide -5)
                                            (("2"
                                              (lemma
                                               "polynomial_prod_def")
                                              (("2"
                                                (case
                                                 "EXISTS (i:nat): i<=k AND i>n-m AND b(i)/=0 AND FORALL (ij:nat): ij>i AND ij<=k IMPLIES b(ij)=0")
                                                (("1"
                                                  (skolem -1 "D")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case
                                                       "polynomial(b,k) = polynomial(b,D)")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (inst
                                                           -
                                                           "AA"
                                                           "b"
                                                           "D"
                                                           "m"
                                                           _)
                                                          (("1"
                                                            (name
                                                             "pp"
                                                             "polynomial_prod(AA, m, b, D)")
                                                            (("1"
                                                              (name
                                                               "aa"
                                                               "LaMBDA (i:nat): IF i<=n THEN a(i) ELSE 0 ENDIF")
                                                              (("1"
                                                                (case
                                                                 "FORALL (ij:nat): ij<=m+k IMPLIES aa(ij) = pp(ij)")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "m+D")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "aa"
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "pp"
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "polynomial_prod"
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "max"
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "sigma"
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "sigma"
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "polynomial_eq_coeff")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "aa"
                                                                     "pp"
                                                                     "m+k")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -2)
                                                                          (("2"
                                                                            (split
                                                                             -)
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "ij")
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (case
                                                                                 "NOT polynomial(aa,k+m)=polynomial(a,n)")
                                                                                (("1"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "polynomial"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "sigma_split")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "n")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (invoke
                                                                                                 (case
                                                                                                  "%1 = 0")
                                                                                                 (!
                                                                                                  1
                                                                                                  1
                                                                                                  2))
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "polynomial"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "sigma_eq")
                                                                                                        (("1"
                                                                                                          (skosimp*)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "aa"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (rewrite
                                                                                                   "sigma_restrict_eq_0")
                                                                                                  (("2"
                                                                                                    (skosimp*)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "aa"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     1)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -7
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("2"
                                                                                          (case
                                                                                           "polynomial(pp,k+m) = polynomial(pp,D+m)")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -7
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -11
                                                                                                 "x!1")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -11)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -15
                                                                                                     "x!1")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (case
                                                                                               "FORALL (ij:nat): ij>D+m IMPLIES pp(ij) = 0")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "polynomial"
                                                                                                 +
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (decompose-equality
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "sigma_split")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "D+m")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (invoke
                                                                                                               (case
                                                                                                                "%1 = 0")
                                                                                                               (!
                                                                                                                1
                                                                                                                1
                                                                                                                2))
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "polynomial"
                                                                                                                   +
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "sigma_restrict_eq_0")
                                                                                                                  (("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "i!1")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (skeep)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "pp")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "polynomial_prod")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "max")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "sigma")
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (decompose-equality
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "polynomial"
                                                           +
                                                           1)
                                                          (("2"
                                                            (lemma
                                                             "sigma_split")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "D")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (invoke
                                                                       (case
                                                                        "%1 = 0")
                                                                       (!
                                                                        1
                                                                        1
                                                                        2))
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "polynomial"
                                                                           +
                                                                           1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (rewrite
                                                                         "sigma_restrict_eq_0")
                                                                        (("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "i!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "FORALL (i:nat): i>n-m AND i<=k IMPLIES b(i) = 0")
                                                  (("1"
                                                    (decompose-equality
                                                     2)
                                                    (("1"
                                                      (expand
                                                       "polynomial"
                                                       1
                                                       2)
                                                      (("1"
                                                        (lemma
                                                         "sigma_split")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "n-m")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (invoke
                                                                   (case
                                                                    "%1 = 0")
                                                                   (!
                                                                    1
                                                                    2
                                                                    2))
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "polynomial"
                                                                         1)
                                                                        (("1"
                                                                          (rewrite
                                                                           "sigma_eq")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (expand
                                                                               "bb"
                                                                               1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "sigma_restrict_eq_0")
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "i!1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "FORALL (kk:nat): (EXISTS (i: nat):
        i <= n-m+1+kk AND
         i > n - m AND
          b(i) /= 0 AND
           (FORALL (ij: nat): ij > i AND ij <= n-m+1+kk IMPLIES b(ij) = 0)) OR (FORALL (i: nat): i > n - m AND i <= n-m+1+kk IMPLIES b(i) = 0)")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "k-n+m-1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide (2 3))
                                                      (("2"
                                                        (induct "kk")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst
                                                               +
                                                               "n-m+1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skolem
                                                           1
                                                           "kk")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "b(n-m+2+kk)=0")
                                                                (("1"
                                                                  (split
                                                                   -)
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "i!1")
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "ij!1")
                                                                            (("1"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep
                                                                     2)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "i")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   +
                                                                   "n-m+2+kk")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (split
                                                                         -)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           -
                                                                           "ij!1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_linear_div_power_rew formula-decl nil more_polynomial_props
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (k skolem-const-decl "nat" more_polynomial_props nil)
    (ij skolem-const-decl "nat" more_polynomial_props nil)
    (aa skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (pp skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (bb skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (linear_power_is_differentiable formula-decl nil
     more_polynomial_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (polynomial_prod const-decl "real" polynomials nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (pp skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (sigma_eq_one_arg formula-decl nil sigma nil)
    (subrange type-eq-decl nil integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (m skolem-const-decl "posnat" more_polynomial_props nil)
    (D skolem-const-decl "nat" more_polynomial_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (polynomial_eq_coeff formula-decl nil polynomials nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (sigma_split formula-decl nil sigma nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (sigma_eq formula-decl nil sigma nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sigma def-decl "real" sigma nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (TRUE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (polynomial_prod_def formula-decl nil polynomials nil)
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (max_linear_div_power_unique 0
  (max_linear_div_power_unique-1 nil 3591628357
   (""
    (case "FORALL (a: sequence[real], n: nat, y: real, m, kp: posnat):
        kp > m AND
        max_linear_div_power?(a, n, y)(m) IMPLIES
         NOT max_linear_div_power?(a, n, y)(kp)")
    (("1" (skeep)
      (("1" (inst-cp - "a" "n" "y" "m" "kp")
        (("1" (inst - "a" "n" "y" "kp" "m") (("1" (ground) nil nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (rewrite "max_linear_div_power_rew")
          (("2" (rewrite "max_linear_div_power_rew")
            (("2" (flatten)
              (("2" (assert)
                (("2" (skolem - "bm")
                  (("2" (skolem - "bk")
                    (("2" (flatten)
                      (("2"
                        (case "NOT FORALL (x): polynomial(bm,n-m)(x) = (x-y)^(kp-m)*polynomial(bk,n-kp)(x)")
                        (("1"
                          (case "FORALL (x): x/=y IMPLIES polynomial(bm, n - m)(x) =
         (x - y) ^ (kp - m) * polynomial(bk, n - kp)(x)")
                          (("1"
                            (lemma "linear_power_is_differentiable")
                            (("1" (inst - "kp-m" "y")
                              (("1"
                                (assert)
                                (("1"
                                  (skolem -1 "D")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (lemma "polynomial_prod_def")
                                      (("1"
                                        (case
                                         "NOT FORALL (x): x/=y IMPLIES polynomial(bm,n-m)(x) = polynomial(polynomial_prod(D, kp - m, bk, n - kp), kp - m + (n - kp))(x)")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst
                                             -
                                             "D"
                                             "bk"
                                             "n-kp"
                                             "kp-m"
                                             "x")
                                            (("1"
                                              (inst -4 "x")
                                              (("1"
                                                (replace -4)
                                                (("1"
                                                  (inst -6 "x")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "polynomial(bm, n - m) =
          polynomial(polynomial_prod(D, kp - m, bk, n - kp), n - m)")
                                            (("1"
                                              (decompose-equality -1)
                                              (("1"
                                                (inst - "y")
                                                (("1"
                                                  (inst
                                                   -
                                                   "D"
                                                   "bk"
                                                   "n-kp"
                                                   "kp-m"
                                                   "y")
                                                  (("1"
                                                    (inst -6 "y")
                                                    (("1"
                                                      (replace -6)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           -3
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (case
                                                             "0^(kp-m) = 0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "^"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "expt"
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "FORALL (aa:[nat->real],nm:nat): (FORALL (x): x/=y IMPLIES polynomial(aa,nm)(x)=0) IMPLIES polynomial(aa,nm) = (LAMBDA (x): 0)")
                                              (("1"
                                                (inst
                                                 -
                                                 "bm-polynomial_prod(D, kp - m, bk, n - kp)"
                                                 "n-m")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -)
                                                    (("1"
                                                      (rewrite
                                                       "polynomial_sub")
                                                      (("1"
                                                        (expand "-")
                                                        (("1"
                                                          (decompose-equality
                                                           1)
                                                          (("1"
                                                            (decompose-equality
                                                             -)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst - "x")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "polynomial_sub")
                                                            (("2"
                                                              (expand
                                                               "-")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (lemma
                                                     "poly_continuous")
                                                    (("2"
                                                      (decompose-equality
                                                       +)
                                                      (("2"
                                                        (inst
                                                         -
                                                         "aa"
                                                         "nm"
                                                         "x!1"
                                                         "abs(polynomial(aa,nm)(x!1))/2")
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "y-delta!1/2")
                                                            (("1"
                                                              (inst-cp
                                                               -
                                                               "x!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "y-delta!1/2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -)
                                                                            (("1"
                                                                              (expand
                                                                               "abs")
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "abs"
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide (2 3 4))
                            (("2" (skeep)
                              (("2"
                                (inst - "x")
                                (("2"
                                  (inst - "x")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replaces -3)
                                      (("2"
                                        (lemma "expt_plus")
                                        (("2"
                                          (inst - "m" "kp-m" "x-y")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (div-by -4 "(x-y)^m")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -4)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (field)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (lemma "expt_eq_0")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst - "y")
                          (("2" (assert)
                            (("2" (expand "^" -1)
                              (("2"
                                (expand "expt" -1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_linear_div_power_rew formula-decl nil more_polynomial_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (polynomial_prod_def formula-decl nil polynomials nil)
    (polynomial_sub formula-decl nil polynomials nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (x!1 skolem-const-decl "real" more_polynomial_props nil)
    (nm skolem-const-decl "nat" more_polynomial_props nil)
    (aa skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (poly_continuous formula-decl nil polynomials nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (polynomial_prod const-decl "real" polynomials nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (linear_power_is_differentiable formula-decl nil
     more_polynomial_props nil)
    (TRUE const-decl "bool" booleans nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_eq_0 formula-decl nil exponentiation nil)
    (div_cancel3 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (x skolem-const-decl "real" more_polynomial_props nil)
    (y skolem-const-decl "real" more_polynomial_props nil)
    (m skolem-const-decl "posnat" more_polynomial_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (expt_plus formula-decl nil exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max_linear_div_power? const-decl "bool" more_polynomial_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (max_linear_div_power_additive 0
  (max_linear_div_power_additive-1 nil 3591709973
   ("" (skeep)
    (("" (rewrite "max_linear_div_power_rew2")
      (("" (rewrite "max_linear_div_power_rew2")
        (("" (skosimp*)
          (("" (inst + "b!1" "k!1")
            (("" (assert)
              (("" (skeep)
                (("" (inst - "x")
                  (("" (inst - "x")
                    (("" (lemma "expt_plus")
                      (("" (inst?)
                        (("1" (assert)
                          (("1" (replace -1) (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (replace -1)
                            (("2" (expand "^")
                              (("2"
                                (expand "expt")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_linear_div_power_rew2 formula-decl nil more_polynomial_props
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (y skolem-const-decl "real" more_polynomial_props nil)
    (x skolem-const-decl "real" more_polynomial_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (max_linear_div_power_derivative_TCC1 0
  (max_linear_div_power_derivative_TCC1-1 nil 3591455656
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (poly_deriv const-decl "real" polynomials nil)
    (max_linear_div_power? const-decl "bool" more_polynomial_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (max_linear_div_power_derivative subtype
    "(number_fields.-)(more_polynomial_props.m, 1)" "posnat")))
 (max_linear_div_power_derivative_TCC2 0
  (max_linear_div_power_derivative_TCC2-1 nil 3591455656
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (poly_deriv const-decl "real" polynomials nil)
    (max_linear_div_power? const-decl "bool" more_polynomial_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (max_linear_div_power_derivative subtype
    "(number_fields.-)(more_polynomial_props.n, 1)" "nat")))
 (max_linear_div_power_derivative 0
  (max_linear_div_power_derivative-1 nil 3591455878
   ("" (skeep)
    (("" (expand "max_linear_div_power?" -)
      (("" (skeep)
        (("" (case "n = 0")
          (("1" (replace -1) (("1" (assert) nil nil)) nil)
           ("2" (assert)
            (("2" (rewrite "max_linear_div_power_rew")
              (("2" (inst + "q") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_linear_div_power? const-decl "bool" more_polynomial_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_linear_div_power_rew formula-decl nil more_polynomial_props
     nil)
    (sequence type-eq-decl nil sequences nil)
    (poly_deriv const-decl "real" polynomials nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (poly_max_zero_power 0
  (poly_max_zero_power-1 nil 3589289206
   (""
    (case "NOT FORALL (a: sequence[real], n: nat, y: real):
                                                         a(n) /= 0 AND polynomial(a, n)(y) = 0 IMPLIES
                                                          (EXISTS (b: [nat -> real], m: posnat):
                                                                  m <= n
                                                              AND FORALL (x):
                                                                    polynomial(a, n)(x) =
                                                                     (x - y) ^ m * polynomial(b, n - m)(x)
                                                              AND polynomial(b, n - m)(y) /= 0)")
    (("1" (hide 2)
      (("1" (induct "n")
        (("1" (skeep)
          (("1" (expand "polynomial" -1)
            (("1" (expand "sigma")
              (("1" (expand "sigma") (("1" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (skolem 1 "nn")
          (("2" (flatten)
            (("2" (skeep)
              (("2" (lemma "polynomial_zero_factor")
                (("2" (inst - "a" "nn+1" "y")
                  (("2" (assert)
                    (("2" (skeep -1)
                      (("2" (case "polynomial(g,nn)(y)/=0")
                        (("1" (inst + "g" "1")
                          (("1" (assert)
                            (("1" (expand "^" +)
                              (("1"
                                (expand "expt" +)
                                (("1"
                                  (expand "expt" +)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (inst - "g" "y")
                            (("2" (assert)
                              (("2"
                                (case "g(nn)/=0")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst + "b" "m+1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst - "x")
                                                (("1"
                                                  (inst - "x")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "FORALL (rr:real): x*rr-rr*y = (x-y)^1*rr")
                                                      (("1"
                                                        (rewrite -1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             +)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -4
                                                                     +)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "expt_plus")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               +)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (replace
                                                                               -1
                                                                               +)
                                                                              (("2"
                                                                                (expand
                                                                                 "^"
                                                                                 +)
                                                                                (("2"
                                                                                  (expand
                                                                                   "expt"
                                                                                   +)
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma "polynomial_eq_coeff")
                                      (("2"
                                        (name
                                         "DIG"
                                         "LAMBDA (ii:nat): IF ii = 1+nn THEN g(nn) ELSIF ii>0 THEN g(ii-1) - g(ii)*y ELSE -g(0)*y ENDIF")
                                        (("1"
                                          (inst - "a" "DIG" "1+nn")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide -3)
                                              (("1"
                                                (split -)
                                                (("1"
                                                  (inst - "1+nn")
                                                  (("1"
                                                    (expand "DIG" -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (decompose-equality
                                                   1)
                                                  (("2"
                                                    (inst - "x!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -4 1)
                                                        (("2"
                                                          (expand
                                                           "polynomial"
                                                           1)
                                                          (("2"
                                                            (name
                                                             "IG"
                                                             "LAMBDA (i: nat): g(i) * (IF i = 0 THEN 1 ELSE x!1 ^ i ENDIF)")
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (case
                                                                 "sigma(0,nn,IG)=sigma(0,1+nn,LAMBDA (ii:nat): IF ii=0 THEN 0 ELSE IG(ii-1) ENDIF)")
                                                                (("1"
                                                                  (mult-by
                                                                   -1
                                                                   "x!1")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     +)
                                                                    (("1"
                                                                      (rewrite
                                                                       "sigma_scal_right"
                                                                       1
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (rewrite
                                                                         "sigma_scal_right"
                                                                         1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (case
                                                                           "sigma(0, nn, LAMBDA (i: nat): IG(i) * y) = sigma(0, 1+nn, LAMBDA (i: nat): IF i >nn THEN 0 ELSE IG(i) * y ENDIF)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             +)
                                                                            (("1"
                                                                              (rewrite
                                                                               "sigma_minus")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "sigma_restrict_eq")
                                                                                (("1"
                                                                                  (hide
                                                                                   2)
                                                                                  (("1"
                                                                                    (decompose-equality
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "restrict")
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (ground)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "DIG"
                                                                                               1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "IG"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "NOT x!2 = 1+nn")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "DIG"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "IG"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "IG"
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "DIG"
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (lift-if)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (ground)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "^"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "expt"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "expt"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (lemma
                                                                                                               "expt_plus")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!2-1"
                                                                                                                 "1"
                                                                                                                 "x!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     +)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "^"
                                                                                                                       2
                                                                                                                       3)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "expt"
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "expt"
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "^"
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "expt"
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "sigma"
                                                                               +
                                                                               2)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "sigma_restrict_eq")
                                                                                (("2"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "restrict")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "FORALL (k:nat): k<=nn IMPLIES sigma(0, k, IG) =
                                                                                           sigma(0, 1 + k,
                                                                                                 LAMBDA (ii: nat): IF ii = 0 THEN 0 ELSE IG(ii - 1) ENDIF)")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (induct
                                                                     "k")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "IG")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "sigma"
                                                                           +)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp*)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skosimp*)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (skosimp*)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skosimp*) (("3" (assert) nil nil)) nil)
         ("4" (skosimp*) (("4" (assert) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (inst - "a" "n" "y")
        (("2" (assert)
          (("2" (skeep)
            (("2" (inst + "m")
              (("2" (rewrite "max_linear_div_power_rew")
                (("2" (assert)
                  (("2" (inst + "b")
                    (("2" (split)
                      (("1" (skeep)
                        (("1" (inst - "x") (("1" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (inst - "1") (("2" (flatten) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)
     ("4" (hide 2) (("4" (skosimp*) (("4" (assert) nil nil)) nil))
      nil))
    nil)
   ((max_linear_div_power_rew formula-decl nil more_polynomial_props
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (polynomial_eq_coeff formula-decl nil polynomials nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nn skolem-const-decl "nat" more_polynomial_props nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_scal_right formula-decl nil sigma nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sigma_minus formula-decl nil sigma nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "real" more_polynomial_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (IG skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (restrict const-decl "[T -> real]" sigma nil)
    (sigma_restrict_eq formula-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (DIG skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt_plus formula-decl nil exponentiation nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (y skolem-const-decl "real" more_polynomial_props nil)
    (x skolem-const-decl "real" more_polynomial_props nil)
    (expt def-decl "real" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (polynomial_zero_factor formula-decl nil polynomials nil)
    (sigma def-decl "real" sigma nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (max_linear_div_power_scal 0
  (max_linear_div_power_scal-1 nil 3591458539
   (""
    (case " FORALL (a: sequence[real], n: nat, y: real, nz: nzreal, m: posnat):
        max_linear_div_power?(a, n, y)(m) IMPLIES
         max_linear_div_power?(nz * a, n, y)(m)")
    (("1" (skeep)
      (("1" (inst-cp - "a" "n" "y" "nz" "m")
        (("1" (inst - "nz*a" "n" "y" "1/nz" "m")
          (("1" (case "(1/nz)*(nz*a) = a")
            (("1" (ground) nil nil)
             ("2" (hide-all-but 1)
              (("2" (decompose-equality)
                (("2" (expand "*") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (rewrite "max_linear_div_power_rew" +)
          (("2" (rewrite "max_linear_div_power_rew" -)
            (("2" (flatten)
              (("2" (assert)
                (("2" (skeep)
                  (("2" (inst + "nz*b")
                    (("2" (assert)
                      (("2" (split +)
                        (("1" (skeep)
                          (("1" (inst - "x")
                            (("1" (rewrite "scal_polynomial2")
                              (("1"
                                (rewrite "scal_polynomial2")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "scal_polynomial2")
                          (("2" (flatten)
                            (("2" (mult-by 1 "nz")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_linear_div_power_rew formula-decl nil more_polynomial_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (scal_polynomial2 formula-decl nil polynomials nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (max_linear_div_power? const-decl "bool" more_polynomial_props nil)
    (* const-decl "[T -> real]" real_fun_ops nil))
   shostak))
 (max_linear_div_power_lower_bound 0
  (max_linear_div_power_lower_bound-1 nil 3591632939
   ("" (skeep)
    (("" (case "polynomial(b,j)(y)/=0")
      (("1" (flatten)
        (("1" (assert)
          (("1" (case "k = m")
            (("1" (assert) nil nil)
             ("2" (hide 3)
              (("2" (lemma "max_linear_div_power_unique")
                (("2" (inst?)
                  (("2" (case "NOT k = 0")
                    (("1" (inst - "k")
                      (("1" (assert)
                        (("1" (rewrite "max_linear_div_power_rew2" +)
                          (("1" (inst + "b" "j")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (replaces -1)
                      (("2" (expand "^")
                        (("2" (expand "expt")
                          (("2" (hide -1)
                            (("2"
                              (rewrite "max_linear_div_power_rew2" -)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst - "y")
                                  (("2"
                                    (inst - "y")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "^")
                                        (("2"
                                          (expand "expt")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (assert)
          (("2" (case "k < m")
            (("1" (assert) nil nil)
             ("2" (hide 2)
              (("2"
                (case "EXISTS (jk:posnat): b(jk)/=0 AND polynomial(b,j) = polynomial(b,jk)")
                (("1" (skeep)
                  (("1" (replace -1)
                    (("1" (lemma "poly_max_zero_power")
                      (("1" (inst - "b" "jk" "y")
                        (("1" (assert)
                          (("1" (skolem -1 "bm")
                            (("1"
                              (lemma "max_linear_div_power_additive")
                              (("1"
                                (inst - "a" "n" "y" "k" "bm" "b" "jk")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -6)
                                    (("1"
                                      (lemma
                                       "max_linear_div_power_unique")
                                      (("1"
                                        (inst - "a" "n" "y" "bm+k" "m")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "FORALL (i:nat): i<=j IMPLIES b(i)=0")
                  (("1" (case "polynomial(b,j) = (LAMBDA (x:real): 0)")
                    (("1" (replaces -1)
                      (("1" (hide -1)
                        (("1" (assert)
                          (("1" (expand "max_linear_div_power?")
                            (("1" (skosimp*)
                              (("1"
                                (lemma "poly_continuous")
                                (("1"
                                  (inst
                                   -
                                   "b!1"
                                   "n-m"
                                   "y"
                                   "abs(polynomial(b!1, n - m)(y))/2")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (inst - "y-delta!1/2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "abs" -1 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst - "y-delta!1/2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "nzreal_times_nzreal_is_nzreal")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "(-1 * (delta!1 / 2)) ^ m"
                                                     "polynomial(b!1, n - m)(y - delta!1 / 2)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -
                                                         "y-delta!1/2")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "y-delta!1/2")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "abs" 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lift-if)
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-1 1))
                      (("2" (decompose-equality 1)
                        (("2" (expand "polynomial" 1)
                          (("2" (rewrite "sigma_restrict_eq_0")
                            (("2" (skosimp*)
                              (("2"
                                (inst - "i!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replaces -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lift-if)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide (-2 -3))
                    (("2" (lemma "polynomial_degree_existence")
                      (("2" (inst - "b" "j")
                        (("2" (assert)
                          (("2" (split -)
                            (("1" (skeep -1)
                              (("1"
                                (inst 3 "i")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (case "i = 0")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replaces -2)
                                          (("1"
                                            (expand "polynomial" -2)
                                            (("1"
                                              (expand "sigma")
                                              (("1"
                                                (expand "sigma")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2"
                                (flatten)
                                (("2"
                                  (lemma "polynomial_eq_coeff")
                                  (("2"
                                    (inst
                                     -
                                     "b"
                                     "(LAMBDA (i:nat): 0)"
                                     "j")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (hide -2)
                                        (("2"
                                          (split -)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst - "i")
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (decompose-equality 1)
                                            (("2"
                                              (inst + "x!1")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (expand
                                                     "polynomial"
                                                     1)
                                                    (("2"
                                                      (rewrite
                                                       "sigma_restrict_eq_0")
                                                      (("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomial const-decl "[real -> real]" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (expt def-decl "real" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (k skolem-const-decl "nat" more_polynomial_props nil)
    (max_linear_div_power_rew2 formula-decl nil more_polynomial_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max_linear_div_power_unique formula-decl nil more_polynomial_props
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "nat" more_polynomial_props nil)
    (m skolem-const-decl "posnat" more_polynomial_props nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (b!1 skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (y skolem-const-decl "real" more_polynomial_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal judgement-tcc nil real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (poly_continuous formula-decl nil polynomials nil)
    (max_linear_div_power? const-decl "bool" more_polynomial_props nil)
    (polynomial_degree_existence formula-decl nil more_polynomial_props
     nil)
    (polynomial_eq_coeff formula-decl nil polynomials nil)
    (i skolem-const-decl "nat" more_polynomial_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (sigma def-decl "real" sigma nil)
    (i skolem-const-decl "upto(j)" more_polynomial_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (j skolem-const-decl "nat" more_polynomial_props nil)
    (poly_max_zero_power formula-decl nil more_polynomial_props nil)
    (max_linear_div_power_additive formula-decl nil
     more_polynomial_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil))
   shostak))
 (div_linear_power_reduces_TCC1 0
  (div_linear_power_reduces_TCC1-1 nil 3591965356
   ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (div_linear_power_reduces subtype "more_polynomial_props.d"
    "{i: integers.int | booleans.OR(((number_fields.-)(more_polynomial_props.x, more_polynomial_props.y)) /= 0, reals.>=(i, 0))}")))
 (div_linear_power_reduces 0
  (div_linear_power_reduces-1 nil 3591965347
   ("" (skeep)
    (("" (case "k = d")
      (("1" (inst + "b" "j") (("1" (assert) nil nil)) nil)
       ("2" (lemma "linear_power_is_differentiable")
        (("2" (inst - "k-d" "y")
          (("1" (assert)
            (("1" (skeep)
              (("1" (inst + "polynomial_prod(a!1,k-d,b,j)" "k-d+j")
                (("1" (skeep)
                  (("1" (rewrite "polynomial_prod_def" :dir rl)
                    (("1" (inst -3 "x")
                      (("1" (replace -3)
                        (("1" (lemma "expt_plus")
                          (("1" (inst - "d" "k-d" "x-y")
                            (("1" (assert)
                              (("1"
                                (assert)
                                (("1"
                                  (inst -6 "x")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (replace -1)
                                (("2"
                                  (inst -6 "x")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "^" + 2)
                                          (("2"
                                            (expand "^" -6)
                                            (("2"
                                              (expand "expt")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (d skolem-const-decl "nat" more_polynomial_props nil)
    (k skolem-const-decl "nat" more_polynomial_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (expt_plus formula-decl nil exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (y skolem-const-decl "real" more_polynomial_props nil)
    (x skolem-const-decl "real" more_polynomial_props nil)
    (/= const-decl "boolean" notequal nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (polynomial_prod_def formula-decl nil polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial_prod const-decl "real" polynomials nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (linear_power_is_differentiable formula-decl nil
     more_polynomial_props nil))
   nil))
 (max_linear_div_power_sign_change 0
  (max_linear_div_power_sign_change-1 nil 3591977475
   (""
    (case "NOT FORALL (xyz,abc:real): sign_ext(xyz*abc) = sign_ext(xyz)*sign_ext(abc)")
    (("1" (hide 2)
      (("1" (lemma "nnreal_times_nnreal_is_nnreal")
        (("1" (skeep)
          (("1" (inst - "abs(xyz)" "abs(abc)")
            (("1" (case "xyz = 0 OR abc = 0")
              (("1" (grind) nil nil)
               ("2" (flatten) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (label "hyplem" -1)
      (("2" (hide "hyplem")
        (("2" (skeep)
          (("2" (skoletin 1)
            (("2" (skoletin 1)
              (("2" (case "NOT (sigx/= 0 AND sigz/=0)")
                (("1" (hide 2)
                  (("1" (inst-cp - "x")
                    (("1" (inst - "z")
                      (("1" (assert)
                        (("1" (expand "sign_ext")
                          (("1" (lift-if) (("1" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "max_linear_div_power_rew2" -7)
                  (("2" (skeep)
                    (("2"
                      (case "FORALL (xy:real): x<=xy AND xy<=z IMPLIES polynomial(b,k)(xy)/=0")
                      (("1" (inst-cp - "x")
                        (("1" (inst-cp - "z")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (case
                                 "sign_ext(polynomial(b,k)(x)) = sign_ext(polynomial(b,k)(z))")
                                (("1"
                                  (lemma "even_or_odd")
                                  (("1"
                                    (inst - "m")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case "even?(m)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case "sigx = sigz")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (expand "even?")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (case
                                                   "sign_ext((x-y)^(2*j)) = sign_ext((z-y)^(2*j))")
                                                  (("1"
                                                    (mult-eq -1 -3)
                                                    (("1"
                                                      (reveal "hyplem")
                                                      (("1"
                                                        (rewrite
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (rewrite
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (inst-cp
                                                             -12
                                                             "x")
                                                            (("1"
                                                              (inst
                                                               -12
                                                               "z")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "FORALL (BG:nzreal): sign_ext(BG^2)=1")
                                                    (("1"
                                                      (inst-cp
                                                       -
                                                       "(x-y)^j")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "(z-y)^j")
                                                        (("1"
                                                          (expand
                                                           "^"
                                                           -1
                                                           2)
                                                          (("1"
                                                            (expand
                                                             "^"
                                                             -2
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "expt")
                                                              (("1"
                                                                (expand
                                                                 "expt")
                                                                (("1"
                                                                  (expand
                                                                   "expt")
                                                                  (("1"
                                                                    (rewrite
                                                                     "expt_plus"
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (rewrite
                                                                       "expt_plus"
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "expt_nonzero")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "expt_nonzero")
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case "sigx = -sigz")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (expand "odd?")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (case
                                                   "sign_ext((x-y)^(2*j+1)) = -sign_ext((z-y)^(2*j+1))")
                                                  (("1"
                                                    (mult-eq -1 -3)
                                                    (("1"
                                                      (reveal "hyplem")
                                                      (("1"
                                                        (rewrite
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (case
                                                           " FORALL (xyz, abc: real):
        -sign_ext(xyz * abc) = -sign_ext(xyz) * sign_ext(abc)")
                                                          (("1"
                                                            (rewrite
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (inst-cp
                                                               -13
                                                               "x")
                                                              (("1"
                                                                (inst
                                                                 -13
                                                                 "z")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-1 1))
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "-xyz"
                                                                 "abc")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "FORALL (BG:nzreal): sign_ext(BG^2)=1")
                                                    (("1"
                                                      (inst-cp
                                                       -
                                                       "(x-y)^j")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "(z-y)^j")
                                                        (("1"
                                                          (case
                                                           "FORALL (GC:real): GC^(2*j+1) = GC * GC^j^2")
                                                          (("1"
                                                            (rewrite
                                                             -1)
                                                            (("1"
                                                              (rewrite
                                                               -1)
                                                              (("1"
                                                                (reveal
                                                                 "hyplem")
                                                                (("1"
                                                                  (inst-cp
                                                                   -
                                                                   "(x-y)^j^2"
                                                                   "x-y")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "(z-y)^j^2"
                                                                     "z-y")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "sign_ext"
                                                                             +
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "sign_ext"
                                                                               +
                                                                               3)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "j < 0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 2))
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "^"
                                                                   +
                                                                   3)
                                                                  (("2"
                                                                    (expand
                                                                     "expt")
                                                                    (("2"
                                                                      (expand
                                                                       "expt")
                                                                      (("2"
                                                                        (expand
                                                                         "expt")
                                                                        (("2"
                                                                          (case
                                                                           "GC = 0")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "^")
                                                                                (("1"
                                                                                  (expand
                                                                                   "expt")
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "expt_plus"
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (expand
                                                                               "^")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "expt"
                                                                                   +
                                                                                   1)
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "expt_nonzero")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "expt_nonzero")
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide (6 7))
                                  (("2"
                                    (expand "sign_ext" 1)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("1"
                                              (lemma
                                               "poly_intermediate_value_inc")
                                              (("1"
                                                (inst
                                                 -
                                                 "b"
                                                 "0"
                                                 "k"
                                                 "x"
                                                 "z")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst - "cc!1")
                                                      (("1"
                                                        (inst - "cc!1")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "cc!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "poly_intermediate_value_dec")
                                              (("2"
                                                (inst
                                                 -
                                                 "b"
                                                 "0"
                                                 "k"
                                                 "x"
                                                 "z")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (inst - "cc!1")
                                                      (("2"
                                                        (inst - "cc!1")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "cc!1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst - "xy")
                          (("2" (inst - "xy") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_linear_div_power_rew2 formula-decl nil more_polynomial_props
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (poly_intermediate_value_dec formula-decl nil polynomials nil)
    (poly_intermediate_value_inc formula-decl nil polynomials nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (j skolem-const-decl "int" more_polynomial_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (< const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (x skolem-const-decl "real" more_polynomial_props nil)
    (y skolem-const-decl "real" more_polynomial_props nil)
    (j skolem-const-decl "int" more_polynomial_props nil)
    (expt_nonzero formula-decl nil exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (z skolem-const-decl "real" more_polynomial_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (even? const-decl "bool" integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (odd? const-decl "bool" integers nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sign_ext const-decl
     "{sig: real | (sig = -1 OR sig = 1 OR sig = 0) AND sig * x = abs(x)}"
     sign nil))
   shostak))
 (poly_eq_except_on_finite_set 0
  (poly_eq_except_on_finite_set-1 nil 3592038329
   (""
    (case "FORALL (a:[nat->real],n:nat,N:posnat): (EXISTS (rootseq: [below(N) -> real]):
                           FORALL (x):
                             (FORALL (ib: below(N)): x /= rootseq(ib)) IMPLIES
                              polynomial(a, n)(x) = 0) IMPLIES ((FORALL (j:nat): j<=n IMPLIES a(j)=0) AND polynomial(a,n) = (LAMBDA (x:real): 0))")
    (("1" (skeep)
      (("1" (skeep)
        (("1"
          (name "aa" "LaMBDA (i:nat): IF i>n THEN 0 ELSE a(i) ENDIF")
          (("1"
            (name "bb" "LAMBDA (i:nat): IF i>m THEN 0 ELSE b(i) ENDIF")
            (("1" (inst - "aa-bb" "max(n,m)" "N")
              (("1"
                (case "polynomial(a,n) = polynomial(aa,max(n,m)) AND polynomial(b,m) = polynomial(bb,max(n,m))")
                (("1" (flatten)
                  (("1" (replaces -1)
                    (("1" (replaces -1)
                      (("1" (split -)
                        (("1" (hide -4)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (split +)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (hide -4)
                                    (("1"
                                      (inst - "j")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "min")
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (expand "-")
                                                (("1"
                                                  (expand "aa")
                                                  (("1"
                                                    (expand "bb")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst - "j")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "min")
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (expand "-")
                                              (("2"
                                                (expand "aa")
                                                (("2"
                                                  (expand "bb")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skeep)
                                  (("3"
                                    (inst - "j")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (expand "-")
                                        (("3"
                                          (expand "aa")
                                          (("3"
                                            (expand "bb")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (decompose-equality 1)
                                  (("4"
                                    (expand "polynomial" 1)
                                    (("4"
                                      (rewrite "sigma_eq")
                                      (("4"
                                        (skosimp*)
                                        (("4"
                                          (inst - "n!1")
                                          (("4"
                                            (assert)
                                            (("4"
                                              (expand "-")
                                              (("4"
                                                (lift-if)
                                                (("4"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skeep)
                            (("2" (inst + "rootseq")
                              (("2"
                                (skeep)
                                (("2"
                                  (inst -4 "x")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (rewrite "polynomial_sub")
                                      (("2"
                                        (expand "-")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (hide-all-but 1)
                    (("2" (split +)
                      (("1" (decompose-equality 1)
                        (("1" (expand "polynomial" + 2)
                          (("1" (lemma "sigma_split")
                            (("1" (inst?)
                              (("1"
                                (inst - "n")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (invoke
                                       (case "%1 = 0")
                                       (! 1 2 2))
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "polynomial")
                                            (("1"
                                              (rewrite "sigma_eq")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (expand "aa" 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "sigma_restrict_eq_0")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (expand "aa" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (decompose-equality 1)
                        (("2" (expand "polynomial" + 2)
                          (("2" (lemma "sigma_split")
                            (("2" (inst?)
                              (("2"
                                (inst - "m")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replaces -1)
                                    (("2"
                                      (invoke
                                       (case "%1 = 0")
                                       (! 1 2 2))
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "polynomial")
                                            (("1"
                                              (rewrite "sigma_eq")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (expand "bb" 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "sigma_restrict_eq_0")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (expand "bb" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (case "NOT polynomial(a, n) = (LAMBDA (x: real): 0)")
            (("1" (hide 2)
              (("1" (decompose-equality 1)
                (("1" (inst-cp - "x!1")
                  (("1" (assert)
                    (("1"
                      (case "EXISTS (epsil:posreal): FORALL (x:real): abs(x-x!1)<epsil IMPLIES polynomial(a,n)(x)/=0")
                      (("1" (skeep -1)
                        (("1"
                          (case "EXISTS (x): abs(x-x!1)<epsil AND (FORALL (ib:below(N)): x/=rootseq(ib))")
                          (("1" (skeep -1)
                            (("1" (inst -3 "x")
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (inst -3 "x")
                                    (("1"
                                      (replace -2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (1 3))
                            (("2" (skeep)
                              (("2"
                                (case
                                 "FORALL (ii:nat): ii<=N-1 IMPLIES EXISTS (x):
                       abs(x - x!1) < epsil AND x/=x!1 AND (FORALL (ib: below(ii+1)): x!1/=rootseq(ib) IMPLIES abs(x-x!1) < abs(rootseq(ib)-x!1))")
                                (("1"
                                  (inst - "N-1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst + "x")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst - "ib!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (induct "ii")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (name
                                         "xx"
                                         "IF rootseq(0) = x!1 THEN x!1 + epsil/2 ELSE x!1 + min(abs(x!1 - rootseq(0))/2,epsil/2) ENDIF")
                                        (("1"
                                          (inst + "xx")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "xx" 1)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand "abs" 1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("4"
                                                      (skeep)
                                                      (("4"
                                                        (case
                                                         "ib!1 = 0")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skolem 1 "M")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (skolem -1 "bx")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (name
                                                   "xx"
                                                   "IF rootseq(1+M) = x!1 THEN bx ELSE x!1 + min(abs(x!1 - rootseq(1+M))/2,abs(bx-x!1)/2) ENDIF")
                                                  (("2"
                                                    (inst + "xx")
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (expand "xx")
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (ground)
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "ib!1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("4"
                                                                (skeep)
                                                                (("4"
                                                                  (case
                                                                   "ib!1 = 1+M")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     -
                                                                     "ib!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3"
                                        (skosimp*)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (hide 2)
                                      (("4"
                                        (skosimp*)
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide 2)
                                  (("3"
                                    (skosimp*)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (hide 2)
                                  (("4"
                                    (skosimp*)
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 2))
                        (("2" (lemma "poly_continuous")
                          (("2"
                            (inst - "a" "n" "x!1"
                             "abs(polynomial(a,n)(x!1))/2")
                            (("1" (skeep)
                              (("1"
                                (inst + "delta")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst - "x")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -)
                                        (("1"
                                          (expand "abs")
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replace -1)
              (("2" (lemma "polynomial_eq_coeff")
                (("2" (inst - "a" "(LAMBDA (i:nat): 0)" "n")
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (hide -2)
                        (("2" (split -)
                          (("1" (skeep) (("1" (inst - "j") nil nil))
                            nil)
                           ("2" (decompose-equality -1)
                            (("2" (assert)
                              (("2"
                                (decompose-equality 1)
                                (("2"
                                  (inst - "x!1")
                                  (("2"
                                    (replaces -1)
                                    (("2"
                                      (expand "polynomial" 1)
                                      (("2"
                                        (rewrite "sigma_restrict_eq_0")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (lift-if)
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((upto nonempty-type-eq-decl nil naturalnumbers nil)
    (j skolem-const-decl "nat" more_polynomial_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (polynomial_eq_coeff formula-decl nil polynomials nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (M skolem-const-decl "nat" more_polynomial_props nil)
    (ib!1 skolem-const-decl "below(2 + M)" more_polynomial_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (ib skolem-const-decl "below(N)" more_polynomial_props nil)
    (ib!1 skolem-const-decl "below(2 + M)" more_polynomial_props nil)
    (xx skolem-const-decl "real" more_polynomial_props nil)
    (xx skolem-const-decl "real" more_polynomial_props nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (rootseq skolem-const-decl "[below(N) -> real]"
     more_polynomial_props nil)
    (epsil skolem-const-decl "posreal" more_polynomial_props nil)
    (x!1 skolem-const-decl "real" more_polynomial_props nil)
    (N skolem-const-decl "posnat" more_polynomial_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (poly_continuous formula-decl nil polynomials nil)
    (n skolem-const-decl "nat" more_polynomial_props nil)
    (a skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma def-decl "real" sigma nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (sigma_split formula-decl nil sigma nil)
    (polynomial_sub formula-decl nil polynomials nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma_eq formula-decl nil sigma nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subrange type-eq-decl nil integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (aa skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (bb skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil))
   shostak))
 (max_div_linear_power_remainder_sign_swaps 0
  (max_div_linear_power_remainder_sign_swaps-1 nil 3592065681
   ("" (skeep)
    (("" (label "xyp" -1)
      (("" (label "yzp" -2)
        (("" (label "rem" -3)
          (("" (label "uni" -4)
            (("" (label "pdef" -5)
              (("" (label "rdef" -6)
                (("" (label "hen" -7)
                  (("" (label "kpm" -8)
                    ((""
                      (case "sign_ext(polynomial(p, pn)(x)) = sign_ext(polynomial(r, rn)(x))
                                           AND
                                           sign_ext(polynomial(p, pn)(z)) = sign_ext(polynomial(r, rn)(z))")
                      (("1" (rewrite "neg_polynomial" :dir rl)
                        (("1" (assert)
                          (("1"
                            (case "FORALL (rrr:real): sign_ext(-rrr) = -sign_ext(rrr)")
                            (("1" (expand "-" +)
                              (("1"
                                (rewrite -1)
                                (("1"
                                  (rewrite -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide "rem")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (inst-cp - "x")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst - "z")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand "sign_ext")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (label "final" 1)
                          (("2" (hide "final")
                            (("2"
                              (rewrite "max_linear_div_power_rew2"
                               "pdef")
                              (("2"
                                (rewrite
                                 "max_linear_div_power_rew2"
                                 "rdef")
                                (("2"
                                  (rewrite
                                   "max_linear_div_power_rew2"
                                   "hen")
                                  (("2"
                                    (case
                                     "EXISTS (b: [nat -> real], k: nat):
                                            (FORALL (x):
                                               polynomial(h, hn)(x) = (x - y) ^ m * polynomial(b, k)(x))
                                             AND polynomial(b, k)(y) = 0")
                                    (("1"
                                      (label "hdef" -1)
                                      (("1"
                                        (hide "hen")
                                        (("1"
                                          (skolem "pdef" ("bp" "lp"))
                                          (("1"
                                            (skolem "rdef" ("br" "lr"))
                                            (("1"
                                              (skolem
                                               "hdef"
                                               ("bh" "lh"))
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (case
                                                   "FORALL (xyz:real): polynomial(bp,lp)(xyz) = polynomial(q,qn)(xyz) * polynomial(bh,lh)(xyz) + polynomial(br,lr)(xyz)")
                                                  (("1"
                                                    (inst - "y")
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "sign_ext(polynomial(bp,lp)(y)) = sign_ext(polynomial(bp,lp)(x)) AND sign_ext(polynomial(bp,lp)(y)) = sign_ext(polynomial(bp,lp)(z))")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (case
                                                               "sign_ext(polynomial(br,lr)(y)) = sign_ext(polynomial(br,lr)(x)) AND sign_ext(polynomial(br,lr)(y)) = sign_ext(polynomial(br,lr)(z))")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (reveal
                                                                   "final")
                                                                  (("1"
                                                                    (split
                                                                     +)
                                                                    (("1"
                                                                      (inst
                                                                       "hdef"
                                                                       "x")
                                                                      (("1"
                                                                        (inst
                                                                         "pdef"
                                                                         "x")
                                                                        (("1"
                                                                          (inst
                                                                           "rdef"
                                                                           "x")
                                                                          (("1"
                                                                            (replace
                                                                             "pdef"
                                                                             +)
                                                                            (("1"
                                                                              (replace
                                                                               "rdef"
                                                                               +)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "sign_ext_mult")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "sign_ext_mult")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       "pdef"
                                                                       "z")
                                                                      (("2"
                                                                        (inst
                                                                         "rdef"
                                                                         "z")
                                                                        (("2"
                                                                          (replace
                                                                           "pdef")
                                                                          (("2"
                                                                            (replace
                                                                             "rdef")
                                                                            (("2"
                                                                              (rewrite
                                                                               "sign_ext_mult")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "sign_ext_mult")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (copy
                                                                 "uni")
                                                                (("2"
                                                                  (inst-cp
                                                                   -
                                                                   "x")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "z")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           (-1
                                                                            -2))
                                                                          (("2"
                                                                            (expand
                                                                             "sign_ext"
                                                                             7)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (ground)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "poly_intermediate_value_inc")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "br"
                                                                                                 "0"
                                                                                                 "lr"
                                                                                                 "x"
                                                                                                 "z")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       "rdef"
                                                                                                       "cc!1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               "uni"
                                                                                                               "cc!1")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "poly_intermediate_value_dec")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "br"
                                                                                                 "0"
                                                                                                 "lr"
                                                                                                 "x"
                                                                                                 "y")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (skosimp*)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       "rdef"
                                                                                                       "cc!1")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         "uni"
                                                                                                         "cc!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (lemma
                                                                                               "poly_intermediate_value_inc")
                                                                                              (("3"
                                                                                                (inst
                                                                                                 -
                                                                                                 "br"
                                                                                                 "0"
                                                                                                 "lr"
                                                                                                 "x"
                                                                                                 "y")
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  (("3"
                                                                                                    (skosimp*)
                                                                                                    (("3"
                                                                                                      (inst
                                                                                                       "rdef"
                                                                                                       "cc!1")
                                                                                                      (("3"
                                                                                                        (inst
                                                                                                         "uni"
                                                                                                         "cc!1")
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("4"
                                                                                              (lemma
                                                                                               "poly_intermediate_value_dec")
                                                                                              (("4"
                                                                                                (inst
                                                                                                 -
                                                                                                 "br"
                                                                                                 "0"
                                                                                                 "lr"
                                                                                                 "x"
                                                                                                 "z")
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  (("4"
                                                                                                    (skosimp*)
                                                                                                    (("4"
                                                                                                      (inst
                                                                                                       "rdef"
                                                                                                       "cc!1")
                                                                                                      (("4"
                                                                                                        (inst
                                                                                                         "uni"
                                                                                                         "cc!1")
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("5"
                                                                                              (lemma
                                                                                               "poly_intermediate_value_dec")
                                                                                              (("5"
                                                                                                (inst
                                                                                                 -
                                                                                                 "br"
                                                                                                 "0"
                                                                                                 "lr"
                                                                                                 "x"
                                                                                                 "z")
                                                                                                (("5"
                                                                                                  (assert)
                                                                                                  (("5"
                                                                                                    (skosimp*)
                                                                                                    (("5"
                                                                                                      (inst
                                                                                                       "rdef"
                                                                                                       "cc!1")
                                                                                                      (("5"
                                                                                                        (inst
                                                                                                         "uni"
                                                                                                         "cc!1")
                                                                                                        (("5"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("6"
                                                                                              (inst
                                                                                               "rdef"
                                                                                               "x")
                                                                                              (("6"
                                                                                                (inst
                                                                                                 "uni"
                                                                                                 "x")
                                                                                                (("6"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (copy
                                                             "uni")
                                                            (("2"
                                                              (inst-cp
                                                               -
                                                               "x")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "z")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "sign_ext"
                                                                       7)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (ground)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "poly_intermediate_value_inc")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "bp"
                                                                                           "0"
                                                                                           "lp"
                                                                                           "x"
                                                                                           "z")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (skosimp*)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 "pdef"
                                                                                                 "cc!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -3)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         "uni"
                                                                                                         "cc!1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "poly_intermediate_value_dec")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "bp"
                                                                                           "0"
                                                                                           "lp"
                                                                                           "x"
                                                                                           "y")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 "pdef"
                                                                                                 "cc!1")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   "uni"
                                                                                                   "cc!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "poly_intermediate_value_inc")
                                                                                        (("3"
                                                                                          (inst
                                                                                           -
                                                                                           "bp"
                                                                                           "0"
                                                                                           "lp"
                                                                                           "x"
                                                                                           "y")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (skosimp*)
                                                                                              (("3"
                                                                                                (inst
                                                                                                 "pdef"
                                                                                                 "cc!1")
                                                                                                (("3"
                                                                                                  (inst
                                                                                                   "uni"
                                                                                                   "cc!1")
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (lemma
                                                                                         "poly_intermediate_value_dec")
                                                                                        (("4"
                                                                                          (inst
                                                                                           -
                                                                                           "bp"
                                                                                           "0"
                                                                                           "lp"
                                                                                           "x"
                                                                                           "z")
                                                                                          (("4"
                                                                                            (assert)
                                                                                            (("4"
                                                                                              (skosimp*)
                                                                                              (("4"
                                                                                                (inst
                                                                                                 "pdef"
                                                                                                 "cc!1")
                                                                                                (("4"
                                                                                                  (inst
                                                                                                   "uni"
                                                                                                   "cc!1")
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("5"
                                                                                        (lemma
                                                                                         "poly_intermediate_value_dec")
                                                                                        (("5"
                                                                                          (inst
                                                                                           -
                                                                                           "bp"
                                                                                           "0"
                                                                                           "lp"
                                                                                           "x"
                                                                                           "z")
                                                                                          (("5"
                                                                                            (assert)
                                                                                            (("5"
                                                                                              (skosimp*)
                                                                                              (("5"
                                                                                                (inst
                                                                                                 "pdef"
                                                                                                 "cc!1")
                                                                                                (("5"
                                                                                                  (inst
                                                                                                   "uni"
                                                                                                   "cc!1")
                                                                                                  (("5"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("6"
                                                                                        (inst
                                                                                         "pdef"
                                                                                         "x")
                                                                                        (("6"
                                                                                          (inst
                                                                                           "uni"
                                                                                           "x")
                                                                                          (("6"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (rewrite
                                                       "polynomial_prod_def"
                                                       1)
                                                      (("2"
                                                        (name
                                                         "pp"
                                                         "polynomial_prod(q, qn, bh, lh)")
                                                        (("2"
                                                          (name
                                                           "BBR"
                                                           "LAMBDA (i:nat): IF i > lr THEN 0 ELSE br(i) ENDIF")
                                                          (("2"
                                                            (replace
                                                             -2)
                                                            (("2"
                                                              (case
                                                               "polynomial(pp,lh+qn)(xyz) = polynomial(pp,lh+qn+lr)(xyz)")
                                                              (("1"
                                                                (case
                                                                 "polynomial(br,lr)(xyz) = polynomial(BBR,lh+qn+lr)(xyz)")
                                                                (("1"
                                                                  (label
                                                                   "iggy"
                                                                   -2)
                                                                  (("1"
                                                                    (label
                                                                     "pen"
                                                                     -1)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (case
                                                                           "polynomial(pp, lh + qn + lr)(xyz) +
                                          polynomial(BBR, lh + qn + lr)(xyz)=polynomial(pp+BBR, lh + qn + lr)(xyz)")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "poly_eq_except_on_finite_set")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "bp"
                                                                                   "lh+lr+qn"
                                                                                   "lp"
                                                                                   "pp+BBR"
                                                                                   "1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "LaMBDA (jj:below(1)): y")
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (case
                                                                                           "x!1 = y")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (hide
                                                                                               3)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "polynomial(pp + BBR, lh + lr + qn)(x!1) = polynomial(pp, lh + qn)(x!1) + polynomial(BBR, lr)(x!1)")
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "pp"
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "polynomial_prod_def"
                                                                                                       +
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (mult-by
                                                                                                         2
                                                                                                         "(x!1-y)^m")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           "hdef"
                                                                                                           "x!1")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             "pdef"
                                                                                                             "x!1")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               "rdef"
                                                                                                               "x!1")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   "pdef"
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "polynomial(BBR,lr) = polynomial(br,lr)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             "rem"
                                                                                                                             "x!1")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "polynomial_eq_coeff")
                                                                                                                        (("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "BBR")
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (lemma
                                                                                                           "nzreal_expt")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "^"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "sum_polynomial")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "pp"
                                                                                                       "BBR"
                                                                                                       "lr"
                                                                                                       "lh+qn")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (decompose-equality
                                                                                                             -)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "x!1")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "+")
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "polynomial"
                                                                                                                     +
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "sigma_split")
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "max(lh+qn,lr)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               -)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (invoke
                                                                                                                                   (case
                                                                                                                                    "%1 = 0")
                                                                                                                                   (!
                                                                                                                                    1
                                                                                                                                    1
                                                                                                                                    2))
                                                                                                                                  (("1"
                                                                                                                                    (replaces
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "polynomial"
                                                                                                                                           +)
                                                                                                                                          (("1"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (rewrite
                                                                                                                                       "sigma_restrict_eq_0")
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "BBR")
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "pp"
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "polynomial_prod"
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (typepred
                                                                                                                                                   "i!1")
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "max"
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "sigma"
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide-all-but
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (skeep)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "pp")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "polynomial_prod")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "max")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "sigma")
                                                                                                                      (("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("3"
                                                                                                              (skeep)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "BBR")
                                                                                                                (("3"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "polynomial")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "sigma_sum")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "sigma_eq")
                                                                                  (("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "+")
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "polynomial"
                                                                     +
                                                                     2)
                                                                    (("2"
                                                                      (lemma
                                                                       "sigma_split")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "lr")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replaces
                                                                               -1)
                                                                              (("2"
                                                                                (invoke
                                                                                 (case
                                                                                  "%1 = 0")
                                                                                 (!
                                                                                  1
                                                                                  2
                                                                                  2))
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "polynomial")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "sigma_eq")
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "BBR")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "sigma_restrict_eq_0")
                                                                                    (("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "BBR"
                                                                                         1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "polynomial"
                                                                   +
                                                                   2)
                                                                  (("2"
                                                                    (lemma
                                                                     "sigma_split")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "lh + qn")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replaces
                                                                             -1)
                                                                            (("2"
                                                                              (invoke
                                                                               (case
                                                                                "%1 = 0")
                                                                               (!
                                                                                1
                                                                                2
                                                                                2))
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "polynomial")
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "sigma_restrict_eq_0")
                                                                                  (("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "pp")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "polynomial_prod")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "max")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but
                                       ("xyp" "yzp" "hen" "kpm" +))
                                      (("2"
                                        (skolem - ("B" "K"))
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (lemma "expt_plus")
                                            (("2"
                                              (lemma
                                               "linear_power_is_differentiable")
                                              (("2"
                                                (inst - "kp-m" "y")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (name
                                                       "pp"
                                                       "polynomial_prod(a,kp-m,B,K)")
                                                      (("1"
                                                        (inst
                                                         +
                                                         "pp"
                                                         "kp-m+K")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split +)
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (expand
                                                                 "pp"
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "polynomial_prod_def"
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (inst
                                                                     -4
                                                                     "x!1")
                                                                    (("1"
                                                                      (replace
                                                                       -4)
                                                                      (("1"
                                                                        (lemma
                                                                         "expt_plus")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "m"
                                                                           "kp-m"
                                                                           "x!1-y")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               "hen"
                                                                               "x!1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (inst
                                                                               "hen"
                                                                               "x!1")
                                                                              (("2"
                                                                                (replaces
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "^"
                                                                                     +)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "expt")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "^"
                                                                                           "hen")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "expt")
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "pp"
                                                               1)
                                                              (("2"
                                                                (rewrite
                                                                 "polynomial_prod_def"
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (inst
                                                                   -4
                                                                   "y")
                                                                  (("2"
                                                                    (replace
                                                                     -4)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "^"
                                                                         +)
                                                                        (("2"
                                                                          (expand
                                                                           "expt")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomial const-decl "[real -> real]" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sign_ext const-decl
     "{sig: real | (sig = -1 OR sig = 1 OR sig = 0) AND sig * x = abs(x)}"
     sign nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (neg_polynomial formula-decl nil polynomials nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (max_linear_div_power_rew2 formula-decl nil more_polynomial_props
     nil)
    (linear_power_is_differentiable formula-decl nil
     more_polynomial_props nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (x!1 skolem-const-decl "real" more_polynomial_props nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (pp skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (kp skolem-const-decl "posnat" more_polynomial_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sign_ext_mult formula-decl nil sign nil)
    (poly_intermediate_value_dec formula-decl nil polynomials nil)
    (poly_intermediate_value_inc formula-decl nil polynomials nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (polynomial_prod_def formula-decl nil polynomials nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[T -> real]" real_fun_ops nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (sigma_split formula-decl nil sigma nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sigma def-decl "real" sigma nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (subrange type-eq-decl nil integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sum_polynomial formula-decl nil polynomials nil)
    (nzreal_expt judgement-tcc nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (BBR skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (polynomial_eq_coeff formula-decl nil polynomials nil)
    (x!1 skolem-const-decl "real" more_polynomial_props nil)
    (y skolem-const-decl "real" more_polynomial_props nil)
    (m skolem-const-decl "posnat" more_polynomial_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (pp skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (poly_eq_except_on_finite_set formula-decl nil
     more_polynomial_props nil)
    (TRUE const-decl "bool" booleans nil)
    (sigma_eq formula-decl nil sigma nil)
    (sigma_sum formula-decl nil sigma nil)
    (polynomial_prod const-decl "real" polynomials nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (at_zero_remainder_sign_swaps 0
  (at_zero_remainder_sign_swaps-1 nil 3592066463
   ("" (skeep)
    (("" (label "xyp" -1)
      (("" (label "yzp" -2)
        (("" (label "rem" -3)
          (("" (label "uni" -4)
            (("" (label "hdef" -5)
              (("" (label "pyz" 1)
                (("" (label "ryz" 2)
                  (("" (label "pxz" 3)
                    (("" (label "rxz" 4)
                      (("" (label "pzz" 5)
                        (("" (label "rzz" 6)
                          ((""
                            (case "sign_ext(polynomial(p, pn)(x)) = sign_ext(polynomial(r, rn)(x))
                                                         AND
                                                         sign_ext(polynomial(p, pn)(z)) = sign_ext(polynomial(r, rn)(z))")
                            (("1" (rewrite "neg_polynomial" :dir rl)
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   "FORALL (rrr:real): sign_ext(-rrr) = -sign_ext(rrr)")
                                  (("1"
                                    (expand "-" +)
                                    (("1"
                                      (rewrite -1)
                                      (("1"
                                        (rewrite -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide "rem")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (inst-cp - "x")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst - "z")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "sign_ext")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 8)
                              (("2"
                                (inst "rem" "y")
                                (("2"
                                  (replace "hdef")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (case
                                       "sign_ext(polynomial(p, pn)(x)) = sign_ext(polynomial(p, pn)(y)) AND sign_ext(polynomial(p, pn)(z)) = sign_ext(polynomial(p, pn)(y))")
                                      (("1"
                                        (case
                                         "sign_ext(polynomial(r, rn)(x)) = sign_ext(polynomial(r, rn)(y)) AND sign_ext(polynomial(r, rn)(z)) = sign_ext(polynomial(r, rn)(y))")
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (expand "sign_ext" 1)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (ground)
                                                              (("1"
                                                                (lemma
                                                                 "poly_intermediate_value_inc")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "r"
                                                                   "0"
                                                                   "rn"
                                                                   "x"
                                                                   "z")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (inst
                                                                         "uni"
                                                                         "cc!1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "poly_intermediate_value_inc")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "r"
                                                                   "0"
                                                                   "rn"
                                                                   "x"
                                                                   "y")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (inst
                                                                         "uni"
                                                                         "cc!1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (lemma
                                                                 "poly_intermediate_value_dec")
                                                                (("3"
                                                                  (inst
                                                                   -
                                                                   "r"
                                                                   "0"
                                                                   "rn"
                                                                   "x"
                                                                   "y")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (skosimp*)
                                                                      (("3"
                                                                        (inst
                                                                         "uni"
                                                                         "cc!1")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (lemma
                                                                 "poly_intermediate_value_dec")
                                                                (("4"
                                                                  (inst
                                                                   -
                                                                   "r"
                                                                   "0"
                                                                   "rn"
                                                                   "x"
                                                                   "z")
                                                                  (("4"
                                                                    (assert)
                                                                    (("4"
                                                                      (skosimp*)
                                                                      (("4"
                                                                        (inst
                                                                         "uni"
                                                                         "cc!1")
                                                                        (("4"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (expand "sign_ext" 1)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (ground)
                                                                (("1"
                                                                  (lemma
                                                                   "poly_intermediate_value_inc")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "p"
                                                                     "0"
                                                                     "pn"
                                                                     "x"
                                                                     "z")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst
                                                                           "uni"
                                                                           "cc!1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "poly_intermediate_value_inc")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "p"
                                                                     "0"
                                                                     "pn"
                                                                     "x"
                                                                     "y")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (inst
                                                                           "uni"
                                                                           "cc!1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (lemma
                                                                   "poly_intermediate_value_dec")
                                                                  (("3"
                                                                    (inst
                                                                     -
                                                                     "p"
                                                                     "0"
                                                                     "pn"
                                                                     "x"
                                                                     "y")
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (skosimp*)
                                                                        (("3"
                                                                          (inst
                                                                           "uni"
                                                                           "cc!1")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (lemma
                                                                   "poly_intermediate_value_dec")
                                                                  (("4"
                                                                    (inst
                                                                     -
                                                                     "p"
                                                                     "0"
                                                                     "pn"
                                                                     "x"
                                                                     "z")
                                                                    (("4"
                                                                      (assert)
                                                                      (("4"
                                                                        (skosimp*)
                                                                        (("4"
                                                                          (inst
                                                                           "uni"
                                                                           "cc!1")
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (poly_intermediate_value_inc formula-decl nil polynomials nil)
    (poly_intermediate_value_dec formula-decl nil polynomials nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (neg_polynomial formula-decl nil polynomials nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sign_ext const-decl
     "{sig: real | (sig = -1 OR sig = 1 OR sig = 0) AND sig * x = abs(x)}"
     sign nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials nil))
   nil))
 (poly_all_derivs_vanish_TCC1 0
  (poly_all_derivs_vanish_TCC1-1 nil 3594395013
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (poly_all_derivs_vanish subtype
    "(number_fields.-)(more_polynomial_props.n, more_polynomial_props.i)"
    "nat")))
 (poly_all_derivs_vanish 0
  (poly_all_derivs_vanish-1 nil 3594395015
   ("" (skeep)
    (("" (ground)
      (("1"
        (case "FORALL (kk: nat,i:nat): kk <= n AND i<=kk IMPLIES a(n-i) = 0")
        (("1" (skeep)
          (("1" (inst - "n-i" "n-i")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (induct "kk")
            (("1" (assert)
              (("1" (skeep)
                (("1" (case "NOT i = 0")
                  (("1" (assert) nil nil)
                   ("2" (replaces -1)
                    (("2" (assert)
                      (("2" (inst - "0")
                        (("2" (assert)
                          (("2" (expand "poly_n_deriv")
                            (("2" (expand "polynomial")
                              (("2"
                                (expand "sigma")
                                (("2"
                                  (expand "sigma")
                                  (("2"
                                    (lemma
                                     "nzreal_times_nzreal_is_nzreal")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (mult-by 1 "C(n,n)")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (skeep)
                (("2" (case "NOT i = j+1")
                  (("1" (inst - "i") (("1" (assert) nil nil)) nil)
                   ("2" (replace -1)
                    (("2" (hide -4)
                      (("2" (assert)
                        (("2" (inst -4 "1+j")
                          (("2" (assert)
                            (("2" (expand "polynomial")
                              (("2"
                                (rewrite "sigma_first")
                                (("2"
                                  (invoke (case "%1 = 0") (! -4 1 2))
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "poly_n_deriv")
                                      (("1"
                                        (lemma
                                         "nzreal_times_nzreal_is_nzreal")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (mult-by
                                               1
                                               "C(n-j-1,n-j-1)")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -4)
                                    (("2"
                                      (rewrite "sigma_restrict_eq_0")
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (invoke
                                             (case "%1 = 0")
                                             (! 1 1 1))
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "poly_n_deriv")
                                                (("2"
                                                  (inst - "j+1-i!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp*) (("3" (assert) nil nil)) nil)
             ("4" (skosimp*) nil nil))
            nil))
          nil)
         ("3" (assert) (("3" (skosimp*) (("3" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "polynomial")
          (("2" (rewrite "sigma_restrict_eq_0")
            (("2" (hide 2)
              (("2" (skosimp*)
                (("2" (invoke (case "%1 = 0") (! 1 1 1))
                  (("1" (assert)
                    (("1" (replaces -1)
                      (("1" (lift-if) (("1" (ground) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "poly_n_deriv")
                      (("2" (inst - "n-i+i!1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (subrange type-eq-decl nil integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (sigma_first formula-decl nil sigma nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (C const-decl "posnat" binomial nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nzreal_times_nzreal_is_nzreal judgement-tcc nil real_types nil)
    (sigma def-decl "real" sigma nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (poly_n_deriv const-decl "real" polynomials nil)
    (TRUE const-decl "bool" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (i skolem-const-decl "nat" more_polynomial_props nil)
    (n skolem-const-decl "nat" more_polynomial_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sequence type-eq-decl nil sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (poly_sign_near_infinity 0
  (poly_sign_near_infinity-1 nil 3594044746
   (""
    (case "FORALL (a: sequence[real], n: nat,KV:real):
                             a(n) > 0 IMPLIES
                              (EXISTS (M: posnat):
                                 FORALL (x: real):
                                   x >= M AND n>0 IMPLIES polynomial(a,n)(x)>KV)")
    (("1" (skeep)
      (("1" (case "a(n)>0")
        (("1" (inst - "a" "n" "1")
          (("1" (assert)
            (("1" (skeep)
              (("1" (inst + "M")
                (("1" (skeep)
                  (("1" (inst - "x")
                    (("1" (assert)
                      (("1" (case "n = 0")
                        (("1" (replaces -1)
                          (("1" (hide -2) (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "sign_ext" +)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst - "-a" "n" "1")
          (("2" (rewrite "neg_polynomial" :dir rl)
            (("2" (assert)
              (("2" (expand "-")
                (("2" (skeep)
                  (("2" (inst + "M")
                    (("2" (skeep)
                      (("2" (inst - "x")
                        (("2" (assert)
                          (("2" (case "n = 0")
                            (("1" (replaces -1)
                              (("1"
                                (hide -1)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (expand "sign_ext" +)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (hide 2)
        (("2" (induct "n")
          (("1" (skeep)
            (("1" (inst + "1") (("1" (grind) nil nil)) nil)) nil)
           ("2" (skolem 1 "n")
            (("2" (flatten)
              (("2" (assert)
                (("2" (skeep)
                  (("2" (label "hyp1" -1)
                    (("2" (copy -1)
                      (("2" (hide "hyp1")
                        (("2" (case "n = 0")
                          (("1" (replaces -1)
                            (("1" (hide -1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "polynomial")
                                  (("1"
                                    (expand "sigma")
                                    (("1"
                                      (expand "sigma")
                                      (("1"
                                        (expand "sigma")
                                        (("1"
                                          (expand "^")
                                          (("1"
                                            (expand "expt")
                                            (("1"
                                              (expand "expt")
                                              (("1"
                                                (lemma
                                                 "axiom_of_archimedes")
                                                (("1"
                                                  (inst
                                                   -
                                                   "abs(abs(KV) + abs(a(0)))/a(1)")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst + "i")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (case
                                                           "x > abs(abs(KV) + abs(a(0))) / a(1)")
                                                          (("1"
                                                            (cross-mult
                                                             -1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "nnreal_div_posreal_is_nnreal")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (case "NOT FORALL (kk:nat): polynomial(a, 1 + kk) = (LAMBDA (y:real): y*polynomial(LAMBDA (i: nat): a(1 + i), kk)(y) + a(0))")
                              (("1"
                                (hide-all-but 1)
                                (("1"
                                  (induct "kk")
                                  (("1"
                                    (decompose-equality)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (decompose-equality +)
                                        (("2"
                                          (decompose-equality -)
                                          (("2"
                                            (inst - "x!1")
                                            (("2"
                                              (rewrite
                                               "polynomial_rec"
                                               1)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "polynomial_rec")
                                                    (("2"
                                                      (inst
                                                       -
                                                       _
                                                       "1+j"
                                                       _)
                                                      (("2"
                                                        (inst
                                                         -
                                                         "LAMBDA (i:nat): a(1+i)"
                                                         "x!1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "expt_plus")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "1+j"
                                                                   "1"
                                                                   "x!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "^"
                                                                       -1
                                                                       3)
                                                                      (("1"
                                                                        (expand
                                                                         "expt")
                                                                        (("1"
                                                                          (expand
                                                                           "expt")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               +)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide
                                                                                   -)
                                                                                  (("1"
                                                                                    (invoke
                                                                                     (name-replace
                                                                                      "A"
                                                                                      "%1")
                                                                                     (!
                                                                                      1
                                                                                      1
                                                                                      2
                                                                                      2))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (invoke
                                                                                         (name-replace
                                                                                          "B"
                                                                                          "%1")
                                                                                         (!
                                                                                          1
                                                                                          1
                                                                                          1
                                                                                          2))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "^")
                                                                        (("2"
                                                                          (expand
                                                                           "expt")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (inst
                                   -
                                   "LAMBDA (i:nat): a(1+i)"
                                   "1+abs(a(0)) + abs(KV)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst + "M")
                                        (("2"
                                          (inst - "n")
                                          (("2"
                                            (replace -1 +)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst - "x")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case "x >= 1")
                                                        (("1"
                                                          (mult-ineq
                                                           -1
                                                           -2)
                                                          (("1"
                                                            (hide-all-but
                                                             (-1 +))
                                                            (("1"
                                                              (grind
                                                               :exclude
                                                               "polynomial")
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide 1)
                                                              (("2"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "abs"
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "abs"
                                                                   1
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "abs"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (i skolem-const-decl "int" more_polynomial_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (nnreal_div_posreal_is_nnreal judgement-tcc nil real_types nil)
    (axiom_of_archimedes formula-decl nil real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (polynomial_rec formula-decl nil polynomials nil)
    (x!1 skolem-const-decl "real" more_polynomial_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (expt_plus formula-decl nil exponentiation nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (neg_polynomial formula-decl nil polynomials nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma nil)
    (sign_ext const-decl
     "{sig: real | (sig = -1 OR sig = 1 OR sig = 0) AND sig * x = abs(x)}"
     sign nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (polynomial const-decl "[real -> real]" polynomials nil))
   shostak))
 (poly_sign_near_negative_infinity 0
  (poly_sign_near_negative_infinity-1 nil 3594051042
   ("" (skeep)
    (("" (lemma "poly_sign_near_infinity")
      ((""
        (name "aa"
              "LaMBDA (i:nat): IF even?(i) THEN a(i) ELSE -a(i) ENDIF")
        (("" (inst - "aa" "n")
          (("" (case "aa(n)=0")
            (("1" (hide-all-but (-1 1))
              (("1" (expand "aa" -1)
                (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
              nil)
             ("2" (assert)
              (("2" (skeep)
                (("2" (inst + "M")
                  (("2" (skeep)
                    (("2" (inst - "-x")
                      (("2" (assert)
                        (("2" (expand "aa" -2 2)
                          (("2" (replace -2 :dir rl)
                            (("2"
                              (invoke
                               (case
                                "polynomial(a,n)(x) = polynomial(aa,n)(-x)"))
                              (("1" (assert) nil nil)
                               ("2"
                                (hide (- 4))
                                (("2"
                                  (expand "polynomial")
                                  (("2"
                                    (rewrite "sigma_eq")
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (expand "aa")
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (copy -1)
                                                      (("1"
                                                        (expand
                                                         "even?"
                                                         -1)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (lemma
                                                             "even_m1_pow")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "mult_expt")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "n!1"
                                                                     "-1"
                                                                     "x")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "not_even_m1_pow")
                                                      (("2"
                                                        (inst - "n!1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "mult_expt")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "n!1"
                                                               "-1"
                                                               "x")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_sign_near_infinity formula-decl nil more_polynomial_props
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (not_even_m1_pow formula-decl nil exponentiation nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (mult_expt formula-decl nil exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_m1_pow formula-decl nil exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma_eq formula-decl nil sigma nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (aa skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (even? const-decl "bool" integers nil)
    (sequence type-eq-decl nil sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   shostak))
 (poly_coeff_bound_TCC1 0
  (poly_coeff_bound_TCC1-1 nil 3594126151 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (poly_coeff_bound subtype
    "(number_fields.+)(real_defs.abs(more_polynomial_props.a(0)), 1)"
    "{kr: real_types.posreal | FORALL (i: naturalnumbers.nat): booleans.IMPLIES(reals.<=(i, more_polynomial_props.n), reals.<(real_defs.abs(more_polynomial_props.a(i)), kr))}")))
 (poly_coeff_bound_TCC2 0
  (poly_coeff_bound_TCC2-1 nil 3594126151 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (poly_coeff_bound subtype
    "(number_fields.-)(more_polynomial_props.n, 1)" "nat")))
 (poly_coeff_bound_TCC3 0
  (poly_coeff_bound_TCC3-1 nil 3594126151
   ("" (termination-tcc) nil nil) nil nil
   (poly_coeff_bound termination
    "more_polynomial_props.poly_coeff_bound(more_polynomial_props.a, (number_fields.-)(more_polynomial_props.n, 1))"
    "nil")))
 (poly_coeff_bound_TCC4 0
  (poly_coeff_bound_TCC4-1 nil 3594126151
   ("" (skeep)
    (("" (skeep)
      (("" (case "i = n")
        (("1" (grind) nil nil)
         ("2" (typepred "v(a,n-1)")
          (("1" (inst - "i") (("1" (assert) nil nil)) nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (sequence type-eq-decl nil sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_max application-judgement
     "{z: posreal | z >= x AND z >= y}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (poly_coeff_bound subtype
    "real_defs.max((number_fields.+)(real_defs.abs(more_polynomial_props.a(more_polynomial_props.n)), 1), more_polynomial_props.poly_coeff_bound(more_polynomial_props.a, (number_fields.-)(more_polynomial_props.n, 1)))"
    "{kr: real_types.posreal | FORALL (i: naturalnumbers.nat): booleans.IMPLIES(reals.<=(i, more_polynomial_props.n), reals.<(real_defs.abs(more_polynomial_props.a(i)), kr))}")))
 (poly_continuity_const_TCC1 0
  (poly_continuity_const_TCC1-2 "" 3750466814
   ("" (subtype-tcc) nil nil) nil shostak
   (poly_continuity_const subtype
    "(number_fields.-)(more_polynomial_props.j, 1)"
    "{i_1: naturalnumbers.nat | reals.<=(i_1, more_polynomial_props.i)}"))
  (poly_continuity_const_TCC1-1 nil 3594132001
   ("" (skeep)
    (("" (lemma "nzreal_times_nzreal_is_nzreal")
      ((""
        (inst - "polynomial(LAMBDA (i: nat): n - i, n - 1)(abs(x))+1"
         "poly_coeff_bound(a,n)")
        (("1" (assert) nil nil)
         ("2" (expand "polynomial" -1)
          (("2" (lemma "sigma_ge_0")
            (("2" (inst?)
              (("2" (assert)
                (("2" (hide -)
                  (("2" (skeep)
                    (("2" (lift-if)
                      (("2" (ground)
                        (("2" (typepred "n_1")
                          (("2" (mult-by -2 "abs(x)^n_1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (poly_continuity_const subtype
    "(number_fields.-)(more_polynomial_props.j, 1)"
    "{i_1: naturalnumbers.nat | reals.<=(i_1, more_polynomial_props.i)}")))
 (poly_continuity_const_TCC2 0
  (poly_continuity_const_TCC2-3 "" 3750466874
   ("" (subtype-tcc) nil nil) nil shostak
   (poly_continuity_const subtype
    "((number_fields.-)(more_polynomial_props.j, 1))"
    "{i: integers.int | booleans.OR(real_defs.abs(more_polynomial_props.x) /= 0, reals.>=(i, 0))}"))
  (poly_continuity_const_TCC2-2 nil 3594137920
   ("" (skeep)
    (("" (case "FORALL (rr:real): rr>0 IMPLIES (rr>=0 AND rr>0)")
      (("1" (inst?)
        (("1" (assert)
          (("1" (replace 2)
            (("1" (hide 3)
              (("1" (lemma "posreal_div_posreal_is_posreal")
                (("1" (inst?)
                  (("1" (hide 2)
                    (("1"
                      (case "FORALL (rr:real): rr>0 IMPLIES (rr>=0 AND rr>0)")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (replace 1)
                            (("1" (hide 2)
                              (("1"
                                (lemma
                                 "posreal_times_posreal_is_posreal")
                                (("1"
                                  (inst
                                   -
                                   "polynomial(LAMBDA (i: nat): n - i, n - 1)(abs(x))+1"
                                   "poly_coeff_bound(a,n)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (case
                                       "FORALL (rr:real): rr>0 IMPLIES (rr>=0 AND rr>0)")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (replace 1)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (expand "polynomial" 1)
                                              (("1"
                                                (lemma "sigma_ge_0")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (typepred
                                                               "n_1")
                                                              (("1"
                                                                (mult-by
                                                                 -2
                                                                 "abs(x)^n_1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "nzreal_times_nzreal_is_nzreal")
            (("2"
              (inst -
               "polynomial(LAMBDA (i: nat): n - i, n - 1)(abs(x))+1"
               "poly_coeff_bound(a,n)")
              (("1" (assert) nil nil)
               ("2" (hide -2)
                (("2" (expand "polynomial" -1)
                  (("2" (lemma "sigma_ge_0")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (lift-if)
                            (("2" (ground)
                              (("2"
                                (typepred "n_1")
                                (("2"
                                  (mult-by -2 "abs(x)^n_1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (assert) nil nil))
              nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil)
       ("2" (skeep) (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (poly_continuity_const subtype
    "((number_fields.-)(more_polynomial_props.j, 1))"
    "{i: integers.int | booleans.OR(real_defs.abs(more_polynomial_props.x) /= 0, reals.>=(i, 0))}"))
  (poly_continuity_const_TCC2-1 nil 3594132001
   ("" (skeep)
    (("" (lemma "nzreal_times_nzreal_is_nzreal")
      (("" (inst?)
        (("1" (assert) nil nil)
         ("2" (expand "polynomial" -1)
          (("2" (invoke (name "FF" "%1") (! -1 1 2 3))
            (("2" (replace -1)
              (("2"
                (case "FORALL (kk:nat): kk<=n-1 IMPLIES sigma(0,kk,FF)>=0")
                (("1" (inst?)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
                 ("2" (induct "kk")
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (expand "sigma" 1)
                        (("1" (expand "sigma" 1)
                          (("1" (expand "FF" 1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (assert)
                      (("2" (expand "sigma" +)
                        (("2" (case "FF(1+j) >=0")
                          (("1" (assert) nil nil)
                           ("2" (hide 2)
                            (("2" (expand "FF" 1)
                              (("2"
                                (mult-by -2 "abs(x)^(1+j)")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((sigma_0_neg formula-decl nil sigma_nat nil)
    (sigma def-decl "real" sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (polynomial const-decl "[real -> real]" polynomials nil))
   nil
   (poly_continuity_const subtype
    "((number_fields.-)(more_polynomial_props.j, 1))"
    "{i: integers.int | booleans.OR(real_defs.abs(more_polynomial_props.x) /= 0, reals.>=(i, 0))}")))
 (poly_continuity_const_TCC3 0
  (poly_continuity_const_TCC3-1 nil 3594382232
   ("" (skeep)
    (("" (typepred "poly_coeff_bound(a, n)")
      (("" (rewrite "zero_times3")
        (("1" (assert)
          (("1" (use "sigma_ge_0")
            (("1" (assert)
              (("1" (hide-all-but 1)
                (("1" (skeep)
                  (("1" (use "sigma_ge_0")
                    (("1" (assert)
                      (("1" (hide 2)
                        (("1" (skeep :preds? t)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil)
                     ("3" (hide 2) (("3" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
             ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
         ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((poly_coeff_bound def-decl
     "{kr: posreal | FORALL (i: nat): i <= n IMPLIES abs(a(i)) < kr}"
     more_polynomial_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (n skolem-const-decl "nat" more_polynomial_props nil)
    (subrange type-eq-decl nil integers nil)
    (n_1 skolem-const-decl "subrange(1, n)" more_polynomial_props nil)
    (x skolem-const-decl "real" more_polynomial_props nil)
    (sigma_ge_0 formula-decl nil sigma nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (C const-decl "posnat" binomial nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma def-decl "real" sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (zero_times3 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (poly_continuity_const subtype
    "(number_fields.*(more_polynomial_props.poly_coeff_bound(more_polynomial_props.a, more_polynomial_props.n), ((number_fields.+)(sigma[nat].sigma(1, more_polynomial_props.n, LAMBDA (i: naturalnumbers.nat): sigma[nat].sigma(1, i, LAMBDA (j: naturalnumbers.nat): IF (booleans.OR(j = 0, reals.>(j, i))) THEN 0 ELSE number_fields.*(binomial.C(i, (number_fields.-)(j, 1)), exponentiation.^(real_defs.abs(more_polynomial_props.x), ((number_fields.-)(j, 1)))) ENDIF)), 1))))"
    "nznum")))
 (poly_continuity_const_TCC4 0
  (poly_continuity_const_TCC4-1 nil 3594382232
   ("" (skeep)
    (("" (skeep)
      (("" (use "sigma_ge_0")
        (("1" (split -1)
          (("1" (typepred "poly_coeff_bound(a, n)")
            (("1"
              (name-replace "sig" "sigma(1, n,
            LAMBDA (i: nat):
              sigma(1, i,
                    LAMBDA (j: nat):
                      IF (j = 0 OR j > i) THEN 0
                      ELSE C(i, j - 1) * abs(x) ^ (j - 1)
                      ENDIF))")
              (("1" (typepred "epsil")
                (("1" (use "posreal_times_posreal_is_posreal")
                  (("1" (lemma "posreal_div_posreal_is_posreal")
                    (("1"
                      (inst -1 "epsil"
                       "poly_coeff_bound(a, n) * (sig + 1)")
                      (("1" (grind) nil nil) ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (use "sigma_ge_0")
              (("1" (assert)
                (("1" (hide-all-but 1)
                  (("1" (skeep :preds? t)
                    (("1" (typepred "C(n_1, n!1 - 1)")
                      (("1" (typepred "abs(x) ^ (n!1 - 1)")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
         ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sig skolem-const-decl "real" more_polynomial_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (n skolem-const-decl "nat" more_polynomial_props nil)
    (a skolem-const-decl "sequence[real]" more_polynomial_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzreal_min application-judgement "{z: nzreal | z <= x AND z <= y}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_max application-judgement
     "{z: posreal | z >= x AND z >= y}" real_defs nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (sequence type-eq-decl nil sequences nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (poly_coeff_bound def-decl
     "{kr: posreal | FORALL (i: nat): i <= n IMPLIES abs(a(i)) < kr}"
     more_polynomial_props nil)
    (n_1 skolem-const-decl "subrange(1, n)" more_polynomial_props nil)
    (subrange type-eq-decl nil integers nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (x skolem-const-decl "real" more_polynomial_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (sigma def-decl "real" sigma nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (C const-decl "posnat" binomial nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sigma_ge_0 formula-decl nil sigma nil))
   nil
   (poly_continuity_const subtype
    "real_defs.min(more_polynomial_props.epcon, number_fields./(1, 2))"
    "posreal")))
 (poly_continuity_const_def 0
  (poly_continuity_const_def-1 nil 3594137484
   ("" (skeep)
    (("" (skoletin 1)
      ((""
        (case "FORALL (d:real):
                                                  abs(d) < delt IMPLIES
                                                   abs(polynomial(a, n)(x) - polynomial(a, n)(x+d)) < epsil")
        (("1" (skeep)
          (("1" (inst - "y-x")
            (("1" (assert)
              (("1" (expand "abs")
                (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skeep)
            (("2" (name "M" "poly_coeff_bound(a,n)")
              (("2"
                (case "sigma(0,n,LAMBDA (i:nat): abs(x^i - (x+d)^i)) < epsil/M")
                (("1" (cross-mult -1)
                  (("1" (lemma "sigma_scal_right")
                    (("1" (inst?)
                      (("1" (replaces -1 :dir rl)
                        (("1" (expand "polynomial" +)
                          (("1" (rewrite "sigma_minus")
                            (("1"
                              (invoke (case "%1 <= %2") (! 1 1)
                               (! -1 1))
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (lemma "sigma_triangle")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (invoke
                                       (case "%1 <= %2")
                                       (! -1 2)
                                       (! 1 2))
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide (-1 2))
                                        (("2"
                                          (case
                                           "NOT (LAMBDA (n_1: nat):
                                                                                                        abs(a(n_1) * (IF n_1 = 0 THEN 1 ELSE x ^ n_1 ENDIF) -
                                                                                                             a(n_1) * (IF n_1 = 0 THEN 1 ELSE (d + x) ^ n_1 ENDIF))) = (LAMBDA (n_1: nat):
                                                                                                        abs(a(n_1) * x ^ n_1 -
                                                                                                             a(n_1) * (d + x) ^ n_1))")
                                          (("1"
                                            (hide-all-but 1)
                                            (("1"
                                              (decompose-equality)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand "^")
                                                          (("1"
                                                            (expand
                                                             "expt")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replaces -1)
                                            (("2"
                                              (lemma "sigma_le")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (lemma
                                                         "abs_mult")
                                                        (("2"
                                                          (invoke
                                                           (inst
                                                            -
                                                            "a(n!1)"
                                                            "%1")
                                                           (! 1 2 1 1))
                                                          (("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (typepred
                                                               "M")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "n!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (invoke
                                                                     (mult-by
                                                                      -3
                                                                      "%1")
                                                                     (!
                                                                      1
                                                                      1
                                                                      2))
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "poly_continuity_const")
                    (("2" (lift-if)
                      (("2" (ground)
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (expand "sigma")
                              (("1"
                                (expand "sigma")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (invoke (name "DD" "%1") (! -1 2 1 2 2 2))
                            (("1" (replace -1)
                              (("1"
                                (case
                                 "NOT (abs(d)<1 AND abs(d) < epsil /
                                        (poly_coeff_bound(a, n) +
                                          DD *
                                           poly_coeff_bound(a, n)))")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (case "abs(d)*(1+DD) < epsil/M")
                                    (("1"
                                      (case "d = 0")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -)
                                              (("1"
                                                (lemma
                                                 "sigma_restrict_eq_0")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (expand
                                                         "abs"
                                                         1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "abs(d)=0")
                                        (("1"
                                          (expand "abs" -1)
                                          (("1"
                                            (lift-if)
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case
                                           "sigma(0, n, LAMBDA (i: nat): abs(x ^ i - (d + x) ^ i))<=sigma(0, n, (LAMBDA (i:nat): (abs(x) + abs(d))^i - abs(x)^i))")
                                          (("1"
                                            (case
                                             "sigma(0, n, (LAMBDA (i: nat): (abs(x) + abs(d)) ^ i - abs(x) ^ i)) < epsil/M")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide (-1 5))
                                              (("2"
                                                (case
                                                 "sigma(0, n, (LAMBDA (i: nat): (abs(x) + abs(d)) ^ i - abs(x) ^ i))<=abs(d) * DD")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (case
                                                     "FORALL (kk:nat): sigma(0, 1+kk, (LAMBDA (i: nat): (abs(x) + abs(d)) ^ i - abs(x) ^ i)) <= abs(d)*sigma(1, 1+kk,
                                       LAMBDA (i: nat):
                                         sigma(1, i,
                                               LAMBDA (j: nat):
                                                 IF (j = 0 OR j > i) THEN 0
                                                 ELSE C(i, j - 1) * abs(x) ^ (j - 1)
                                                 ENDIF))")
                                                    (("1"
                                                      (inst - "n-1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide (2 6))
                                                      (("2"
                                                        (hide -4)
                                                        (("2"
                                                          (induct "kk")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "sigma"
                                                               +)
                                                              (("1"
                                                                (expand
                                                                 "sigma"
                                                                 +)
                                                                (("1"
                                                                  (expand
                                                                   "sigma"
                                                                   +)
                                                                  (("1"
                                                                    (expand
                                                                     "^"
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       "expt"
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         "expt"
                                                                         +)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (rewrite
                                                                             "C_0")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skolem
                                                             1
                                                             "jj")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "sigma"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "sigma"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         " (abs(d) + abs(x)) ^ (2 + jj)
                                      - abs(x) ^ (2 + jj)<=abs(d) *
                                        sigma(1, 2 + jj,
                                              LAMBDA (j: nat):
                                                IF (j = 0 OR j > 2 + jj) THEN 0
                                                ELSE C(2 + jj, j - 1) * abs(x) ^ (j - 1)
                                                ENDIF)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           (-1
                                                                            2))
                                                                          (("2"
                                                                            (rewrite
                                                                             "binomial_theorem")
                                                                            (("2"
                                                                              (rewrite
                                                                               "sigma_first")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "C_0")
                                                                                  (("1"
                                                                                    (case
                                                                                     "abs(d)^0=1")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "sigma_scal"
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "sigma_reverse")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "sigma_le")
                                                                                              (("1"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "C_symmetry")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "NOT 3-n!1+jj>=1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (case
                                                                                                             " abs(d) ^ (3 - n!1 + jj)<=abs(d)")
                                                                                                            (("1"
                                                                                                              (mult-by
                                                                                                               -1
                                                                                                               "C(2+jj,n!1-1)*abs(x)^(n!1-1)")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 " both_sides_expt_lt1_le_aux")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "abs(d)"
                                                                                                                   "2-n!1+jj"
                                                                                                                   "0")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "^"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "expt"
                                                                                                                         -1
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "expt"
                                                                                                                           -1
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("3"
                                                                                                  (skosimp*)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (hide
                                                                                               2)
                                                                                              (("3"
                                                                                                (skosimp*)
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide
                                                                                 2)
                                                                                (("3"
                                                                                  (skosimp*)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide
                                                                           2)
                                                                          (("3"
                                                                            (skosimp*)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (hide
                                                                           2)
                                                                          (("4"
                                                                            (skosimp*)
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide 2)
                                                            (("3"
                                                              (skosimp*)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (hide 2)
                                                            (("4"
                                                              (skosimp*)
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide 2)
                                                      (("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (hide 2)
                                                      (("4"
                                                        (skosimp*)
                                                        (("4"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide (-4 5))
                                            (("2"
                                              (rewrite "sigma_le")
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (case
                                                     "NOT abs(x ^ n!1 - (d + x) ^ n!1) = abs((d + x) ^ n!1-x ^ n!1)")
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (hide -)
                                                        (("1"
                                                          (grind
                                                           :exclude
                                                           "^")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (rewrite
                                                         "binomial_theorem")
                                                        (("2"
                                                          (rewrite
                                                           "binomial_theorem")
                                                          (("2"
                                                            (rewrite
                                                             "sigma_first")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite
                                                                 "C_0")
                                                                (("1"
                                                                  (case
                                                                   "d^0=1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (invoke
                                                                           (name
                                                                            "IG"
                                                                            "%1")
                                                                           (!
                                                                            1
                                                                            1))
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "sigma_first"
                                                                               1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "C_0")
                                                                                (("1"
                                                                                  (case
                                                                                   "abs(d)^0=1")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1
                                                                                         1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "sigma_triangle")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (invoke
                                                                                                 (case
                                                                                                  "%1 = %2")
                                                                                                 (!
                                                                                                  -1
                                                                                                  2)
                                                                                                 (!
                                                                                                  1
                                                                                                  2))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   (-1
                                                                                                    2))
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "sigma_eq")
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "abs_mult")
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "abs_mult")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "abs_expt")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "abs_expt")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "abs"
                                                                                                                   1
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "abs(0)=0")
                                                                                                                          (("1"
                                                                                                                            (replaces
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (case
                                                                                                                                 "n!1 = n!2")
                                                                                                                                (("1"
                                                                                                                                  (replaces
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "^"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "expt"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "abs"
                                                                                                                                           1
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "abs"
                                                                                                                                             1
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (rewrite
                                                                                                                                               "abs_mult")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (expand
                                                                                                                                   "^"
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "expt"
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (lift-if)
                                                                                                                                      (("2"
                                                                                                                                        (ground)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "abs"
                                                                                                                                           2
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide-all-but
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("3"
                                                                                                        (skosimp*)
                                                                                                        (("3"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("4"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("4"
                                                                                                        (skosimp*)
                                                                                                        (("4"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("3"
                                                                                                    (skosimp*)
                                                                                                    (("3"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("4"
                                                                                                    (skosimp*)
                                                                                                    (("4"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("5"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("5"
                                                                                                    (skosimp*)
                                                                                                    (("5"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (hide
                                                                                               2)
                                                                                              (("3"
                                                                                                (skosimp*)
                                                                                                (("3"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide
                                                                                 2)
                                                                                (("3"
                                                                                  (skosimp*)
                                                                                  (("3"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide
                                                                             2)
                                                                            (("3"
                                                                              (skosimp*)
                                                                              (("3"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (ground)
                                                                      (("2"
                                                                        (hide
                                                                         -)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide 2)
                                                              (("3"
                                                                (skosimp*)
                                                                (("3"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -5)
                                      (("2"
                                        (cross-mult -2)
                                        (("2"
                                          (cross-mult 1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case "DD+1>0")
                                                    (("1"
                                                      (mult-by -1 "M")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "DD>=0")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (replaces
                                                         -3
                                                         1
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (rewrite
                                                           "sigma_ge_0")
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (rewrite
                                                                 "sigma_ge_0")
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (lemma
                                                                       "nnreal_times_nnreal_is_nnreal")
                                                                      (("1"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide
                                                                   2)
                                                                  (("3"
                                                                    (skosimp*)
                                                                    (("3"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide 2)
                                                            (("3"
                                                              (skosimp*)
                                                              (("3"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (case "DD>=0")
                                  (("1"
                                    (mult-by -1 "M")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (replaces -1 1 :dir rl)
                                    (("2"
                                      (rewrite "sigma_ge_0")
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (rewrite "sigma_ge_0")
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (lemma
                                                   "nnreal_times_nnreal_is_nnreal")
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3"
                                                (skosimp*)
                                                (("3"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (skosimp*)
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3"
                                          (skosimp*)
                                          (("3" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1)
                              (("2"
                                (skosimp*)
                                (("2" (ground) nil nil))
                                nil))
                              nil)
                             ("3" (skosimp*) (("3" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (poly_continuity_const const-decl "posreal" more_polynomial_props
     nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (poly_coeff_bound def-decl
     "{kr: posreal | FORALL (i: nat): i <= n IMPLIES abs(a(i)) < kr}"
     more_polynomial_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (sigma_ge_0 formula-decl nil sigma nil)
    (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_neg_lt2 formula-decl nil extra_real_props nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (sigma_nat application-judgement "nat" sigma_nat nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (C_0 formula-decl nil binomial nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (sigma_first formula-decl nil sigma nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (sigma_scal formula-decl nil sigma nil)
    (both_sides_expt_lt1_le_aux formula-decl nil exponentiation nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (C_symmetry formula-decl nil binomial nil)
    (sigma_reverse formula-decl nil sigma_nat nil)
    (binomial_theorem formula-decl nil polynomials nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (abs_expt formula-decl nil exponentiation nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat_abs_is_nonneg application-judgement "{r: nonneg_rat | r >= q}"
     real_defs nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (sigma_eq formula-decl nil sigma nil)
    (n!1 skolem-const-decl "subrange(0, n)" more_polynomial_props nil)
    (n skolem-const-decl "nat" more_polynomial_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (C const-decl "posnat" binomial nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_min application-judgement "{z: nzreal | z <= x AND z <= y}"
     real_defs nil)
    (sigma_nnreal application-judgement "nnreal" sigma_nat nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_triangle formula-decl nil sigma nil)
    (a skolem-const-decl "sequence[real]" more_polynomial_props nil)
    (x skolem-const-decl "real" more_polynomial_props nil)
    (d skolem-const-decl "real" more_polynomial_props nil)
    (expt def-decl "real" exponentiation nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_le formula-decl nil sigma nil)
    (subrange type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (abs_mult formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma_minus formula-decl nil sigma nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma_scal_right formula-decl nil sigma nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (sigma def-decl "real" sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (max_nonvanishing_deriv_TCC1 0
  (max_nonvanishing_deriv_TCC1-2 nil 3594402813
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (ground)
          (("1" (skosimp*)
            (("1" (case "NOT ii!1 = 0")
              (("1" (assert) nil nil)
               ("2" (replaces -1)
                (("2" (assert)
                  (("2" (replaces -2)
                    (("2" (expand "poly_n_deriv")
                      (("2" (expand "factorial")
                        (("2" (expand "C")
                          (("2" (assert)
                            (("2" (expand "polynomial")
                              (("2"
                                (expand "sigma")
                                (("2"
                                  (expand "sigma")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replaces -1)
            (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)
           ("3" (lemma "poly_n_deriv_def")
            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil)
           ("4" (skosimp*) (("4" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (poly_n_deriv const-decl "real" polynomials nil)
    (C const-decl "posnat" binomial nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (sigma def-decl "real" sigma nil)
    (factorial_0 formula-decl nil factorial "ints/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (factorial def-decl "posnat" factorial "ints/")
    (TRUE const-decl "bool" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sequence type-eq-decl nil sequences nil)
    (poly_n_deriv_def formula-decl nil polynomials nil))
   nil
   (max_nonvanishing_deriv subtype "more_polynomial_props.n"
    "{lastn: naturalnumbers.nat | booleans.AND(reals.<=(lastn, more_polynomial_props.n), (booleans.IMPLIES((EXISTS (ii: naturalnumbers.upto(more_polynomial_props.n)): more_polynomial_props.a(ii) /= 0), (booleans.AND(polynomials.polynomial(polynomials.poly_n_deriv(more_polynomial_props.a, (number_fields.-)(more_polynomial_props.n, lastn)), lastn)(more_polynomial_props.x) /= 0, FORALL (i: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.>(i, lastn), reals.<=(i, more_polynomial_props.n)), polynomials.polynomial(polynomials.poly_n_deriv(more_polynomial_props.a, (number_fields.-)(more_polynomial_props.n, i)), i)(more_polynomial_props.x) = 0))))))}"))
  (max_nonvanishing_deriv_TCC1-1 nil 3594396056
   ("" (skeep)
    (("" (assert)
      (("" (split -)
        (("1" (replace -1)
          (("1" (assert)
            (("1" (flatten)
              (("1" (skosimp*)
                (("1" (assert)
                  (("1" (split +)
                    (("1" (expand "polynomial")
                      (("1" (expand "poly_n_deriv")
                        (("1" (expand "factorial")
                          (("1" (expand "C")
                            (("1" (expand "sigma")
                              (("1"
                                (expand "sigma")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten) (("2" (assert) (("2" (postpone) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (max_nonvanishing_deriv subtype "more_polynomial_props.n"
    "{lastn: naturalnumbers.nat | booleans.AND(reals.<=(lastn, more_polynomial_props.n), (booleans.IMPLIES((EXISTS (ii: naturalnumbers.upto(more_polynomial_props.n)): more_polynomial_props.a(ii) /= 0), (booleans.AND(polynomials.polynomial(polynomials.poly_n_deriv(more_polynomial_props.a, (number_fields.-)(more_polynomial_props.n, lastn)), lastn)(more_polynomial_props.x) /= 0, FORALL (i: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.>(i, lastn), reals.<=(i, more_polynomial_props.n)), polynomials.polynomial(polynomials.poly_n_deriv(more_polynomial_props.a, (number_fields.-)(more_polynomial_props.n, i)), i)(more_polynomial_props.x) = 0))))))}")))
 (max_nonvanishing_deriv_TCC2 0
  (max_nonvanishing_deriv_TCC2-2 nil 3594402735
   ("" (skeep)
    (("" (assert)
      (("" (typepred "v(poly_deriv(a),n-1,x)")
        (("" (assert)
          (("" (flatten)
            (("" (invoke (name "A" "%1") (! -1 1))
              (("" (replace -1)
                ((""
                  (case "poly_n_deriv(poly_deriv(a), -1 - A + n) = poly_n_deriv(a, n - A)")
                  (("1" (replace -1)
                    (("1" (split -)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (skeep)
                            (("1" (case "i = n")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "poly_n_deriv_def")
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst - "i")
                                (("2"
                                  (assert)
                                  (("2"
                                    (case
                                     "poly_n_deriv(poly_deriv(a), -1 - i + n) = poly_n_deriv(a, n - i)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (lemma "poly_n_deriv_def")
                                      (("2"
                                        (inst - "a")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst - "-1-i+n")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -3 1 :dir rl)
                                                (("2"
                                                  (expand
                                                   "poly_n_deriv"
                                                   1)
                                                  (("2"
                                                    (expand
                                                     "poly_deriv"
                                                     1)
                                                    (("2"
                                                      (decompose-equality
                                                       1)
                                                      (("2"
                                                        (name
                                                         "K4"
                                                         "factorial(-1 - i + n)")
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (expand
                                                             "C"
                                                             1)
                                                            (("2"
                                                              (field)
                                                              (("2"
                                                                (case
                                                                 "factorial(1+x!1) = (1+x!1)*factorial(x!1)")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "factorial(n-i+x!1) = (n-i+x!1)*factorial(-1-i+n+x!1)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "factorial"
                                                                             1
                                                                             1)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "factorial"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (name "bb" "poly_deriv(a)")
                        (("2" (replace -1)
                          (("2" (skeep)
                            (("2" (case "ii = 0")
                              (("1"
                                (case
                                 "FORALL (jj:upto(n)): jj>0 IMPLIES a(jj)=0")
                                (("1"
                                  (expand "polynomial" -7)
                                  (("1"
                                    (rewrite "sigma_first")
                                    (("1"
                                      (invoke
                                       (case "%1 = 0")
                                       (! -7 1 2))
                                      (("1"
                                        (replaces -1)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (rewrite "sigma_restrict_eq_0")
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst - "i!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst + "jj-1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "bb" 2)
                                        (("1"
                                          (expand "poly_deriv" 2)
                                          (("1"
                                            (hide 4)
                                            (("1"
                                              (lemma
                                               "nzreal_times_nzreal_is_nzreal")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 5)
                                (("2"
                                  (inst + "ii-1")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "bb" -2)
                                        (("1"
                                          (expand "poly_deriv" -2)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 3)
                    (("2" (hide -3)
                      (("2" (hide -1)
                        (("2" (decompose-equality 1)
                          (("2" (expand "poly_n_deriv" 1)
                            (("2" (expand "poly_deriv" 1)
                              (("2"
                                (expand "C" 1)
                                (("2"
                                  (field)
                                  (("2"
                                    (case
                                     "factorial(n-A+x!1) = (n-A+x!1)*factorial(-1+n-A+x!1)")
                                    (("1"
                                      (replace -1)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (expand "factorial" 1 1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (assert) nil nil) ("4" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (poly_n_deriv_def formula-decl nil polynomials nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (C const-decl "posnat" binomial nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal judgement-tcc nil real_types nil)
    (bb skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (jj skolem-const-decl "upto(n)" more_polynomial_props nil)
    (n skolem-const-decl "nat" more_polynomial_props nil)
    (sigma def-decl "real" sigma nil)
    (subrange type-eq-decl nil integers nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sigma_first formula-decl nil sigma nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (ii skolem-const-decl "upto(n)" more_polynomial_props nil)
    (a skolem-const-decl "sequence[real]" more_polynomial_props nil)
    (x skolem-const-decl "real" more_polynomial_props nil)
    (A skolem-const-decl "{lastn: nat |
   lastn <= n - 1 AND
    ((EXISTS (ii: upto(n - 1)): poly_deriv(a)(ii) /= 0) IMPLIES
      (NOT polynomial(poly_n_deriv(poly_deriv(a), -1 - lastn + n), lastn)
                     (x)
            = 0
        AND
        FORALL (i: nat):
          i > lastn AND i <= n - 1 IMPLIES
           polynomial(poly_n_deriv(poly_deriv(a), -1 - i + n), i)(x) = 0))}"
     more_polynomial_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (poly_n_deriv const-decl "real" polynomials nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (poly_deriv const-decl "real" polynomials nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (max_nonvanishing_deriv subtype
    "more_polynomial_props.max_nonvanishing_deriv(polynomials.poly_deriv(more_polynomial_props.a), (number_fields.-)(more_polynomial_props.n, 1), more_polynomial_props.x)"
    "{lastn: naturalnumbers.nat | booleans.AND(reals.<=(lastn, more_polynomial_props.n), (booleans.IMPLIES((EXISTS (ii: naturalnumbers.upto(more_polynomial_props.n)): more_polynomial_props.a(ii) /= 0), (booleans.AND(polynomials.polynomial(polynomials.poly_n_deriv(more_polynomial_props.a, (number_fields.-)(more_polynomial_props.n, lastn)), lastn)(more_polynomial_props.x) /= 0, FORALL (i: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.>(i, lastn), reals.<=(i, more_polynomial_props.n)), polynomials.polynomial(polynomials.poly_n_deriv(more_polynomial_props.a, (number_fields.-)(more_polynomial_props.n, i)), i)(more_polynomial_props.x) = 0))))))}"))
  (max_nonvanishing_deriv_TCC2-1 nil 3594396056
   ("" (subtype-tcc) nil nil)
   ((C const-decl "posnat" binomial nil)
    (poly_n_deriv const-decl "real" polynomials nil)
    (polynomial const-decl "[real -> real]" polynomials nil))
   nil
   (max_nonvanishing_deriv subtype
    "more_polynomial_props.max_nonvanishing_deriv(polynomials.poly_deriv(more_polynomial_props.a), (number_fields.-)(more_polynomial_props.n, 1), more_polynomial_props.x)"
    "{lastn: naturalnumbers.nat | booleans.AND(reals.<=(lastn, more_polynomial_props.n), (booleans.IMPLIES((EXISTS (ii: naturalnumbers.upto(more_polynomial_props.n)): more_polynomial_props.a(ii) /= 0), (booleans.AND(polynomials.polynomial(polynomials.poly_n_deriv(more_polynomial_props.a, (number_fields.-)(more_polynomial_props.n, lastn)), lastn)(more_polynomial_props.x) /= 0, FORALL (i: naturalnumbers.nat): booleans.IMPLIES(booleans.AND(reals.>(i, lastn), reals.<=(i, more_polynomial_props.n)), polynomials.polynomial(polynomials.poly_n_deriv(more_polynomial_props.a, (number_fields.-)(more_polynomial_props.n, i)), i)(more_polynomial_props.x) = 0))))))}")))
 (poly_rootless_width_TCC1 0
  (poly_rootless_width_TCC1-1 nil 3594402349 ("" (subtype-tcc) nil nil)
   nil nil
   (poly_rootless_width subtype
    "(number_fields.-)(more_polynomial_props.n, more_polynomial_props.maxn)"
    "nat")))
 (poly_rootless_width_TCC2 0
  (poly_rootless_width_TCC2-1 nil 3594402349
   ("" (skeep)
    (("" (case "FORALL (rr:real): rr/=0 IMPLIES abs(rr)>0")
      (("1" (rewrite -1)
        (("1" (hide (-1 2))
          (("1" (flatten)
            (("1" (typepred "maxn")
              (("1" (typepred "nzb") (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (poly_n_deriv const-decl "real" polynomials nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (poly_rootless_width subtype
    "real_defs.abs(polynomials.polynomial(polynomials.poly_n_deriv(more_polynomial_props.a, (number_fields.-)(more_polynomial_props.n, more_polynomial_props.maxn)), more_polynomial_props.maxn)(more_polynomial_props.x))"
    "posreal")))
 (poly_rootless_width_def_TCC1 0
  (poly_rootless_width_def_TCC1-1 nil 3594458819
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (poly_rootless_width_def subtype "booleans.TRUE"
    "{nzb: booleans.bool | booleans.IFF(nzb, EXISTS (i: naturalnumbers.upto(more_polynomial_props.n)): more_polynomial_props.a(i) /= 0)}")))
 (poly_rootless_width_def_TCC2 0
  (poly_rootless_width_def_TCC2-1 nil 3594458819
   ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (C const-decl "posnat" binomial nil)
    (poly_n_deriv const-decl "real" polynomials nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (poly_rootless_width const-decl "posreal" more_polynomial_props
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (poly_rootless_width_def subtype
    "(number_fields.-)(more_polynomial_props.n, more_polynomial_props.j)"
    "nat")))
 (poly_rootless_width_def 0
  (poly_rootless_width_def-1 nil 3594459250
   ("" (skeep)
    (("" (skoletin 1)
      (("" (skoletin 1)
        ((""
          (case "FORALL (y: real, j: nat,kk:nat):
        j<=kk AND kk <= n - mnd AND
         polynomial(poly_n_deriv(a, n-mnd-j), mnd+j)(y) = 0 AND
          abs(x - y) < epsil
         IMPLIES x = y")
          (("1" (skeep)
            (("1" (inst - "y" "n-j-mnd" "n-j-mnd")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (induct "kk")
              (("1" (skeep)
                (("1" (case "j = 0")
                  (("1" (assert)
                    (("1" (replaces -1)
                      (("1" (assert)
                        (("1" (expand "poly_rootless_width")
                          (("1" (replace -5 :dir rl)
                            (("1" (typepred "mnd")
                              (("1"
                                (replace -9)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "FORALL (rr:real): rr=0 IFF abs(rr)=0")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (copy 1)
                                          (("1"
                                            (replace 1 -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide 1)
                                                (("1"
                                                  (lemma
                                                   "poly_continuity_const_def")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (replace
                                                       -9
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst - "y")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -6)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (rewrite
                                                                   "abs_mult")
                                                                  (("1"
                                                                    (expand
                                                                     "abs"
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (skolem 1 "k")
                (("2" (flatten)
                  (("2" (skeep)
                    (("2" (case "NOT j = k+1")
                      (("1" (inst - "y" "j") (("1" (assert) nil nil))
                        nil)
                       ("2" (replace -1)
                        (("2" (assert)
                          (("2" (hide -3)
                            (("2" (assert)
                              (("2"
                                (typepred "mnd")
                                (("2"
                                  (replace -10)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst - "mnd+k+1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (name
                                           "aa"
                                           "poly_n_deriv(a, -1 - k - mnd + n)")
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (name "nn" "1+k+mnd")
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (case
                                                   "EXISTS (xy:real): abs(x-xy)<epsil AND polynomial(poly_deriv(aa),nn-1)(xy)=0 AND xy/=x")
                                                  (("1"
                                                    (skeep -)
                                                    (("1"
                                                      (inst - "xy" "k")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "poly_n_deriv(a,n-mnd-k) = poly_deriv(aa)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "poly_n_deriv_def")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "a")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "n-mnd-k-1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "poly_Rolle")
                                                    (("2"
                                                      (case "x < y")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "aa"
                                                         "nn"
                                                         "x"
                                                         "y")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               +
                                                               "c")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "abs")
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         -
                                                         "aa"
                                                         "nn"
                                                         "y"
                                                         "x")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (inst
                                                               +
                                                               "c")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "abs")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skeep)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep) (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (hide 2) (("3" (skeep) (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sequence type-eq-decl nil sequences nil)
    (/= const-decl "boolean" notequal nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (TRUE const-decl "bool" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (poly_rootless_width const-decl "posreal" more_polynomial_props
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (poly_n_deriv const-decl "real" polynomials nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (max_nonvanishing_deriv def-decl "{lastn: nat |
   lastn <= n AND
    ((EXISTS (ii: upto(n)): a(ii) /= 0) IMPLIES
      (polynomial(poly_n_deriv(a, n - lastn), lastn)(x) /= 0 AND
        FORALL (i: nat):
          i > lastn AND i <= n IMPLIES
           polynomial(poly_n_deriv(a, n - i), i)(x) = 0))}"
     more_polynomial_props nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "nat" more_polynomial_props nil)
    (n skolem-const-decl "nat" more_polynomial_props nil)
    (a skolem-const-decl "sequence[real]" more_polynomial_props nil)
    (x skolem-const-decl "real" more_polynomial_props nil)
    (mnd skolem-const-decl "{lastn: nat |
   lastn <= n AND
    ((EXISTS (ii: upto(n)): a(ii) /= 0) IMPLIES
      (polynomial(poly_n_deriv(a, n - lastn), lastn)(x) /= 0 AND
        FORALL (i: nat):
          i > lastn AND i <= n IMPLIES
           polynomial(poly_n_deriv(a, n - i), i)(x) = 0))}"
     more_polynomial_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (poly_continuity_const_def formula-decl nil more_polynomial_props
     nil)
    (abs_mult formula-decl nil real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (poly_deriv const-decl "real" polynomials nil)
    (poly_n_deriv_def formula-decl nil polynomials nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (poly_Rolle formula-decl nil polynomials nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (C const-decl "posnat" binomial nil)
    (^ const-decl "real" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (poly_roots_enumerated 0
  (poly_roots_enumerated-1 nil 3595091866
   ("" (induct "n")
    (("1" (skeep)
      (("1" (skeep -)
        (("1" (case "NOT i = 0")
          (("1" (assert) nil nil)
           ("2" (replace -1)
            (("2" (assert)
              (("2" (inst + "0" "LAMBDA (i:below(0)): 0")
                (("2" (split +)
                  (("1" (grind) nil nil)
                   ("2" (skeep)
                    (("2" (expand "polynomial")
                      (("2" (expand "sigma")
                        (("2" (expand "sigma") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 "n")
      (("2" (flatten)
        (("2" (skeep)
          (("2" (case "NOT EXISTS (y:real): polynomial(a,n+1)(y)=0")
            (("1" (inst + "0" "LAMBDA (i:below(0)): 0")
              (("1" (split +)
                (("1" (skosimp*) nil nil)
                 ("2" (skosimp*) (("2" (inst 2 "x!1") nil nil)) nil)
                 ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (skeep -)
              (("2" (lemma "polynomial_zero_factor")
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (skeep -)
                      (("2" (inst -3 "g")
                        (("2" (split -3)
                          (("1" (skeep -)
                            (("1" (case "polynomial(g,n)(y) = 0")
                              (("1"
                                (inst + "M" "rootseq")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst - "i")
                                        (("1"
                                          (inst -5 "rootseq(i)")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (inst -4 "x")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "polynomial(g,n)(x) = 0")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (inst -6 "x")
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (lemma
                                                     "nzreal_times_nzreal_is_nzreal")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "x-y"
                                                       "polynomial(g,n)(x)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst
                                 +
                                 "M+1"
                                 "LAMBDA (i:below(M+1)): IF i = M THEN y ELSE rootseq(i) ENDIF")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split +)
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split +)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (inst - "i!1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -4
                                                     "rootseq(i!1)")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (case "x = y")
                                        (("1"
                                          (assert)
                                          (("1" (inst + "M") nil nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (inst -3 "x")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (inst + "i!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst -4 "x")
                                                  (("2"
                                                    (lemma
                                                     "nzreal_times_nzreal_is_nzreal")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "x-y"
                                                       "polynomial(g,n)(x)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "injective?")
                                      (("3"
                                        (skosimp*)
                                        (("3"
                                          (lift-if -1)
                                          (("3"
                                            (lift-if -1)
                                            (("3"
                                              (lift-if -1)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (split -)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (inst - "x2!1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "x1!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "x1!1"
                                                             "x2!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp*)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (lemma "poly_eq_0_le_degree")
                              (("2"
                                (inst-cp - "g" "n")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (hide -3)
                                    (("2"
                                      (split -)
                                      (("1"
                                        (inst - "a" "1+n")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (split -)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst - "i!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (inst - "x")
                                                  (("2"
                                                    (inst - "x")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (inst + "ii")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x skolem-const-decl "real" more_polynomial_props nil)
    (y skolem-const-decl "real" more_polynomial_props nil)
    (g skolem-const-decl "sequence[real]" more_polynomial_props nil)
    (n skolem-const-decl "nat" more_polynomial_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nzreal_times_nzreal_is_nzreal judgement-tcc nil real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (x skolem-const-decl "real" more_polynomial_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (M skolem-const-decl "nat" more_polynomial_props nil)
    (poly_eq_0_le_degree formula-decl nil polynomials nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ii skolem-const-decl "nat" more_polynomial_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (polynomial_zero_factor formula-decl nil polynomials nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma def-decl "real" sigma nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (FALSE const-decl "bool" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (min_poly_root_distance 0
  (min_poly_root_distance-1 nil 3595091583
   ("" (skeep)
    (("" (lemma "poly_roots_enumerated")
      (("" (inst - "a" "n")
        (("" (assert)
          (("" (replace -2)
            (("" (skeep -)
              ((""
                (case "FORALL (kk:nat): kk<=M IMPLIES EXISTS (epsil:posreal): FORALL (ii,jj:below(kk)): rootseq(ii)/=rootseq(jj) IMPLIES abs(rootseq(ii) - rootseq(jj))>=epsil")
                (("1" (inst - "M")
                  (("1" (assert)
                    (("1" (skeep -)
                      (("1" (inst + "epsil")
                        (("1" (skeep)
                          (("1" (inst-cp -3 "x")
                            (("1" (inst -3 "y")
                              (("1"
                                (assert)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (inst-cp - "i!1" "i!2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "abs")
                                        (("1"
                                          (lift-if)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (induct "kk")
                    (("1" (assert)
                      (("1" (inst + "1") (("1" (skosimp*) nil nil))
                        nil))
                      nil)
                     ("2" (skolem 1 "kk")
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (skeep -)
                            (("2"
                              (inst +
                               "min(epsil/2,poly_rootless_width(a,n,rootseq(kk),TRUE))")
                              (("2"
                                (skeep)
                                (("2"
                                  (case "ii < jj")
                                  (("1"
                                    (case "jj < kk")
                                    (("1"
                                      (inst - "ii" "jj")
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (case "NOT jj = kk")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 1)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (lemma
                                             "poly_rootless_width_def")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (replace -9)
                                                (("2"
                                                  (skoletin -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace
                                                       -2
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (inst
                                                         -
                                                         "rootseq(ii)"
                                                         "0")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "poly_n_deriv_def")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (inst
                                                                       -9
                                                                       "ii")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "min"
                                                                           +)
                                                                          (("2"
                                                                            (expand
                                                                             "abs"
                                                                             +)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (case "jj < ii")
                                      (("1"
                                        (case "ii < kk")
                                        (("1"
                                          (inst - "ii" "jj")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (case "NOT ii = kk")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 1)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "poly_rootless_width_def")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace -9)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "rootseq(jj)"
                                                             "0")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (lemma
                                                                   "poly_n_deriv_def")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst
                                                                           -8
                                                                           "jj")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 2)
                      (("3" (skosimp*) (("3" (assert) nil nil)) nil))
                      nil)
                     ("4" (hide 3)
                      (("4" (skosimp*) (("4" (assert) nil nil)) nil))
                      nil)
                     ("5" (hide 2)
                      (("5" (skosimp*) (("5" (assert) nil nil)) nil))
                      nil)
                     ("6" (hide 3)
                      (("6" (skosimp*) (("6" (assert) nil nil)) nil))
                      nil)
                     ("7" (hide-all-but 1) (("7" (grind) nil nil)) nil)
                     ("8" (hide-all-but 2) (("8" (grind) nil nil)) nil)
                     ("9" (hide-all-but 1) (("9" (grind) nil nil)) nil)
                     ("10" (hide-all-but 2) (("10" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
                 ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil)
                 ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil)
                 ("6" (hide-all-but 1) (("6" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_roots_enumerated formula-decl nil more_polynomial_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (n skolem-const-decl "nat" more_polynomial_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (a skolem-const-decl "sequence[real]" more_polynomial_props nil)
    (TRUE const-decl "bool" booleans nil)
    (poly_rootless_width const-decl "posreal" more_polynomial_props
     nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (max_nonvanishing_deriv def-decl "{lastn: nat |
   lastn <= n AND
    ((EXISTS (ii: upto(n)): a(ii) /= 0) IMPLIES
      (polynomial(poly_n_deriv(a, n - lastn), lastn)(x) /= 0 AND
        FORALL (i: nat):
          i > lastn AND i <= n IMPLIES
           polynomial(poly_n_deriv(a, n - i), i)(x) = 0))}"
     more_polynomial_props nil)
    (poly_n_deriv const-decl "real" polynomials nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (poly_n_deriv_def formula-decl nil polynomials nil)
    (poly_rootless_width_def formula-decl nil more_polynomial_props
     nil)
    (kk skolem-const-decl "nat" more_polynomial_props nil)
    (jj skolem-const-decl "below(1 + kk)" more_polynomial_props nil)
    (ii skolem-const-decl "below(1 + kk)" more_polynomial_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (kk!1 skolem-const-decl "nat" more_polynomial_props nil)
    (kk!1 skolem-const-decl "nat" more_polynomial_props nil)
    (kk!1 skolem-const-decl "nat" more_polynomial_props nil)
    (kk!1 skolem-const-decl "nat" more_polynomial_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (rootseq skolem-const-decl "[below(M) -> real]"
     more_polynomial_props nil)
    (M skolem-const-decl "nat" more_polynomial_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (min_poly_root_dist_TCC1 0
  (min_poly_root_dist_TCC1-1 nil 3595094826
   (""
    (inst +
     "LAMBDA (a:sequence[real],(n|a(n)/=0)): choose({epsil:posreal | FORALL (x,y:real):
      polynomial(a,n)(x)=0 AND polynomial(a,n)(y)=0 AND x/=y IMPLIES
      abs(x-y)>epsil})")
    (("" (skeep)
      (("" (expand "nonempty?")
        (("" (expand "empty?")
          (("" (lemma "min_poly_root_distance")
            (("" (inst - "a" "n")
              (("" (split -)
                (("1" (skeep -)
                  (("1" (inst - "epsil/2")
                    (("1" (expand "member")
                      (("1" (skeep)
                        (("1" (inst - "x" "y") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst + "n") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (member const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (min_poly_root_distance formula-decl nil more_polynomial_props nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (min_poly_root_dist existence ""
    "[d: [a: sequence[real], {n | a(more_polynomial_props.n) /= 0}] -> {epsil: real_types.posreal | FORALL (x, y: reals.real): booleans.IMPLIES(booleans.AND(polynomials.polynomial(d`1, d`2)(x) = 0, booleans.AND(polynomials.polynomial(d`1, d`2)(y) = 0, x /= y)), reals.>(real_defs.abs((number_fields.-)(x, y)), epsil))}]")))
 (poly_root_bound_TCC1 0
  (poly_root_bound_TCC1-1 nil 3595096170 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (poly_root_bound subtype
    "real_defs.abs(more_polynomial_props.a(more_polynomial_props.n))"
    "nznum")))
 (poly_root_bound_TCC2 0
  (poly_root_bound_TCC2-1 nil 3595096170
   ("" (skeep)
    (("" (split)
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (skeep)
        (("3" (case "NOT abs(x) >= 2")
          (("1" (expand "max")
            (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)
           ("2" (invoke (case "%1 <= %2") (! 1 1) (! 1 2 2 1))
            (("1" (expand "max")
              (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)
             ("2" (hide 2)
              (("2" (expand "polynomial")
                (("2" (lemma "sigma_split")
                  (("2" (label "final" 1)
                    (("2" (hide "final")
                      (("2" (inst?)
                        (("2" (inst - "n-1")
                          (("2" (assert)
                            (("2" (replace -1)
                              (("2"
                                (hide -1)
                                (("2"
                                  (reveal "final")
                                  (("2"
                                    (expand "sigma" - 2)
                                    (("2"
                                      (expand "sigma" - 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case "n = 0")
                                          (("1"
                                            (typepred "n")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (mult-by
                                               2
                                               "abs(x)^(n-1) * abs(a(n))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   " abs(x) * (abs(x) ^ (n - 1) * abs(a(n))) = abs(a(n) * x ^ n)")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (both-sides
                                                       "-"
                                                       "a(n)*x^n"
                                                       -2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (neg-formula
                                                           -2)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             2
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (case
                                                               "FORALL (rr:real): abs(-rr) = abs(rr)")
                                                              (("1"
                                                                (rewrite
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "NOT FORALL (rrr,tt:real): rrr/abs(a(n)) * (tt*abs(a(n))) = rrr*tt")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       -1
                                                                       +)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (lemma
                                                                           "sigma_scal_right")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "LAMBDA (i:nat): abs(a(i))"
                                                                             "abs(x)^(n-1)"
                                                                             "n-1"
                                                                             "0")
                                                                            (("2"
                                                                              (replaces
                                                                               -1
                                                                               2
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (lemma
                                                                                 "sigma_triangle")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (invoke
                                                                                     (case
                                                                                      "%1 <= %2")
                                                                                     (!
                                                                                      -1
                                                                                      2)
                                                                                     (!
                                                                                      2
                                                                                      2))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       (-1
                                                                                        -3
                                                                                        3))
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "sigma_le")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "FORALL (kk:nat): abs(x)^kk >=1")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "n-1")
                                                                                                        (("1"
                                                                                                          (mult-by
                                                                                                           -1
                                                                                                           "abs(a(0))")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         (-2
                                                                                                          1))
                                                                                                        (("2"
                                                                                                          (induct
                                                                                                           "kk")
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (skeep)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "^")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "expt"
                                                                                                                 +)
                                                                                                                (("2"
                                                                                                                  (mult-ineq
                                                                                                                   -1
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (split)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "abs"
                                                                                                                       1
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "abs"
                                                                                                                         1
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "abs"
                                                                                                                       1
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "abs"
                                                                                                                         1
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (rewrite
                                                                                                     "abs_mult"
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       3)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "FORALL (kk:nat): abs(x^n!1) <= abs(x)^(n!1+kk)")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "n-1-n!1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (mult-by
                                                                                                               -1
                                                                                                               "abs(a(n!1))")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           3)
                                                                                                          (("2"
                                                                                                            (induct
                                                                                                             "kk")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "abs_expt")
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   -1
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -)
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (skeep)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (case
                                                                                                                   "NOT 1<=abs(x)^1")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "^"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "expt"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "expt"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (mult-ineq
                                                                                                                     -1
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "expt_plus"
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (split
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "abs"
                                                                                                                         1
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "abs"
                                                                                                                           1
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "abs"
                                                                                                                         1
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "abs"
                                                                                                                           1
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-1 1 3))
                                                    (("2"
                                                      (rewrite
                                                       "abs_mult")
                                                      (("2"
                                                        (expand
                                                         "^"
                                                         1
                                                         2)
                                                        (("2"
                                                          (expand
                                                           "expt")
                                                          (("2"
                                                            (expand
                                                             "^")
                                                            (("2"
                                                              (rewrite
                                                               "abs_mult")
                                                              (("2"
                                                                (rewrite
                                                                 "expt_of_abs"
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "posreal_times_posreal_is_posreal")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (lemma
                                                     "posreal_expt")
                                                    (("2"
                                                      (expand "^" 1)
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (sigma_split formula-decl nil sigma nil)
    (sigma_0_neg formula-decl nil sigma_nat nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (n skolem-const-decl "{n | a(n) /= 0}" more_polynomial_props nil)
    (a skolem-const-decl "sequence[real]" more_polynomial_props nil)
    (x skolem-const-decl "real" more_polynomial_props nil)
    (> const-decl "bool" reals nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (neg_one_times formula-decl nil extra_tegies nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (sigma_scal_right formula-decl nil sigma nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (expt def-decl "real" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (expt_plus formula-decl nil exponentiation nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (rat_abs_is_nonneg application-judgement "{r: nonneg_rat | r >= q}"
     real_defs nil)
    (abs_expt formula-decl nil exponentiation nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (abs_mult formula-decl nil real_props nil)
    (subrange type-eq-decl nil integers nil)
    (sigma_le formula-decl nil sigma nil)
    (sigma_triangle formula-decl nil sigma nil)
    (TRUE const-decl "bool" booleans nil)
    (expt_of_abs formula-decl nil exponentiation nil)
    (posreal_expt judgement-tcc nil exponentiation nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (^ const-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma def-decl "real" sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (<= const-decl "bool" reals nil)
    (sigma_nnreal application-judgement "nnreal" sigma_nat nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (poly_root_bound subtype
    "real_defs.max(2, (number_fields.+)(number_fields./(sigma[nat].sigma(0, (number_fields.-)(more_polynomial_props.n, 1), LAMBDA (i: naturalnumbers.nat): real_defs.abs(more_polynomial_props.a(i))), real_defs.abs(more_polynomial_props.a(more_polynomial_props.n))), 1))"
    "{K: real_types.posreal | FORALL (x: reals.real): booleans.IMPLIES(polynomials.polynomial(more_polynomial_props.a, more_polynomial_props.n)(x) = 0, reals.<(real_defs.abs(x), K))}")))
 (poly_cancel 0
  (poly_cancel-1 nil 3617621874
   (""
    (case "FORALL (a, h: sequence[real], n, p: nat):
        ((EXISTS (i: nat): i <= p AND h(i) /= 0) AND
          (FORALL (x):
             polynomial(h, p)(x) * polynomial(a, n)(x) = 0))
         IMPLIES polynomial(a, n) = (LAMBDA (x:real): 0)")
    (("1" (skeep)
      (("1"
        (name "anew" "LAMBDA (i:nat): IF i>n THEN 0 ELSE a(i) ENDIF")
        (("1"
          (name "bnew" "LAMBDA (i:nat): IF i>m THEN 0 ELSE b(i) ENDIF")
          (("1" (name "AA" "anew-bnew")
            (("1" (inst - "AA" "h" "max(m,n)" "p")
              (("1" (assert)
                (("1" (replace -5)
                  (("1"
                    (case "polynomial(AA,max(m,n)) = polynomial(a,n)-polynomial(b,m)")
                    (("1" (replace -1)
                      (("1" (expand "-")
                        (("1" (assert)
                          (("1" (split -)
                            (("1" (decompose-equality 1)
                              (("1"
                                (decompose-equality -1)
                                (("1"
                                  (inst - "x!1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (inst - "x!1")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "AA" 1)
                      (("2" (rewrite "polynomial_sub")
                        (("2"
                          (case "FORALL (kk:nat): polynomial(anew,n+kk) = polynomial(a,n)")
                          (("1"
                            (case "FORALL (kk:nat): polynomial(bnew,m+kk) = polynomial(b,m)")
                            (("1" (inst - "max(m,n)-m")
                              (("1"
                                (inst - "max(m,n)-n")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (induct "kk")
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite "polynomial_eq_coeff" 1)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (expand "bnew" 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (assert)
                                  (("2"
                                    (decompose-equality 1)
                                    (("2"
                                      (decompose-equality -1)
                                      (("2"
                                        (rewrite "polynomial_rec" 1)
                                        (("2"
                                          (expand "bnew" 1 2)
                                          (("2"
                                            (inst - "x!1")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (induct "kk")
                            (("1" (assert)
                              (("1"
                                (rewrite "polynomial_eq_coeff" 1)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (expand "anew" 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (decompose-equality 1)
                                (("2"
                                  (decompose-equality -1)
                                  (("2"
                                    (inst - "x!1")
                                    (("2"
                                      (rewrite "polynomial_rec" 1)
                                      (("2"
                                        (expand "anew" + 2)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2"
          (case "EXISTS (M:posreal): FORALL (z:real): (polynomial(h,p)(z)=0 OR polynomial(a,n)(z)=0) IMPLIES abs(z)<M")
          (("1" (skeep)
            (("1" (inst -3 "M")
              (("1" (inst - "M")
                (("1" (expand "abs" -1) (("1" (ground) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (case "NOT EXISTS (i:nat): i<=n AND a(i)/=0")
            (("1" (lemma "poly_eq_0_le_degree")
              (("1" (inst - "a" "n")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (hide -2)
                      (("1" (split -)
                        (("1" (decompose-equality 3) nil nil)
                         ("2" (skosimp*)
                          (("2" (inst + "ii!1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "polynomial_degree_existence")
              (("2" (inst-cp - "a" "n")
                (("2" (inst - "h" "p")
                  (("2" (assert)
                    (("2" (split -)
                      (("1" (split -)
                        (("1" (skolem - "nn")
                          (("1" (skolem - "pp")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (inst
                                   +
                                   "max(poly_root_bound(a,nn),poly_root_bound(h,pp))")
                                  (("1"
                                    (skeep +)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred
                                         "poly_root_bound(a,nn)")
                                        (("1"
                                          (inst - "z")
                                          (("1"
                                            (typepred
                                             "poly_root_bound(h,pp)")
                                            (("1"
                                              (inst - "z")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (skeep -2)
                            (("2" (inst 2 "i") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (skeep -3)
                          (("2" (inst 2 "i") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (polynomial_degree_existence formula-decl nil more_polynomial_props
     nil)
    (i skolem-const-decl "nat" more_polynomial_props nil)
    (posreal_max application-judgement
     "{z: posreal | z >= x AND z >= y}" real_defs nil)
    (a skolem-const-decl "sequence[real]" more_polynomial_props nil)
    (n skolem-const-decl "nat" more_polynomial_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nn skolem-const-decl "upto(n)" more_polynomial_props nil)
    (h skolem-const-decl "sequence[real]" more_polynomial_props nil)
    (p skolem-const-decl "nat" more_polynomial_props nil)
    (pp skolem-const-decl "upto(p)" more_polynomial_props nil)
    (poly_root_bound const-decl
     "{K: posreal | FORALL (x: real): polynomial(a, n)(x) = 0 IMPLIES abs(x) < K}"
     more_polynomial_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i skolem-const-decl "nat" more_polynomial_props nil)
    (poly_eq_0_le_degree formula-decl nil polynomials nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AA skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (polynomial_eq_coeff formula-decl nil polynomials nil)
    (bnew skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (polynomial_rec formula-decl nil polynomials nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (anew skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (polynomial_sub formula-decl nil polynomials nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (> const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials nil))
   shostak))
 (Knuth_bound_simple_TCC1 0
  (Knuth_bound_simple_TCC1-1 nil 3609926087 ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (Knuth_bound_simple subtype
    "(number_fields.-)(more_polynomial_props.n, more_polynomial_props.k)"
    "nat")))
 (Knuth_bound_simple_TCC2 0
  (Knuth_bound_simple_TCC2-1 nil 3609926087 ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (Knuth_bound_simple subtype "more_polynomial_props.k"
    "{i: integers.int | booleans.OR(more_polynomial_props.r /= 0, reals.>=(i, 0))}")))
 (Knuth_bound_simple 0
  (Knuth_bound_simple-1 nil 3609926088
   ("" (skeep)
    ((""
      (name "aneg" "LAMBDA (i:nat): IF a(i)<0 THEN a(i) ELSE 0 ENDIF")
      ((""
        (name "apos"
              "LAMBDA (i:nat): IF a(i)>=0 THEN a(i) ELSE 0 ENDIF")
        (("" (case "NOT a = aneg + apos")
          (("1" (decompose-equality 1)
            (("1" (hide-all-but 1)
              (("1" (expand "aneg")
                (("1" (expand "apos") (("1" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (hide (-2 -3))
            (("2" (copy -3)
              (("2" (replace -2 -1)
                (("2" (rewrite "sum_polynomial_eq_degree" :dir rl)
                  (("2" (expand "+" -1)
                    (("2" (lemma "polynomial_rec")
                      (("2" (inst-cp - "aneg" "n" "r")
                        (("2" (inst - "apos" "n" "r")
                          (("2" (assert)
                            (("2" (replaces -1)
                              (("2"
                                (replaces -1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "aneg" -1 2)
                                    (("2"
                                      (expand "apos" -1 2)
                                      (("2"
                                        (replace -3 -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "NOT FORALL (k:nat): polynomial(apos,k)(r)>=0")
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (induct "k")
                                                (("1"
                                                  (expand "apos" 1)
                                                  (("1"
                                                    (hide -)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (rewrite
                                                     "polynomial_rec"
                                                     +)
                                                    (("2"
                                                      (expand
                                                       "apos"
                                                       +
                                                       2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (lemma
                                                                 "nnreal_times_nnreal_is_nnreal")
                                                                (("2"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "nnreal_expt")
                                                                      (("2"
                                                                        (expand
                                                                         "^"
                                                                         1)
                                                                        (("2"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst - "n-1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case "NOT r^n>0")
                                                  (("1"
                                                    (lemma
                                                     "posreal_expt")
                                                    (("1"
                                                      (expand "^" 1)
                                                      (("1"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "NOT -polynomial(aneg,n-1)(r)>=r^n")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide (-3 -4))
                                                      (("2"
                                                        (lemma
                                                         "neg_polynomial")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "aneg"
                                                           "n-1")
                                                          (("2"
                                                            (decompose-equality
                                                             -1)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "r")
                                                              (("2"
                                                                (expand
                                                                 "-"
                                                                 -1
                                                                 1)
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (lemma
                                                                     "sigma_lt")
                                                                    (("2"
                                                                      (expand
                                                                       "polynomial"
                                                                       -2)
                                                                      (("2"
                                                                        (name
                                                                         "FF"
                                                                         "LAMBDA (i: nat):
              (-aneg)(i) * (IF i = 0 THEN 1 ELSE r ^ i ENDIF)")
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (name
                                                                             "GG"
                                                                             "LAMBDA (i: nat):
              r^n/2^(n-i)")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "FF"
                                                                               "GG"
                                                                               "n-1"
                                                                               "0")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split
                                                                                   -)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "sigma_geometric")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "n"
                                                                                       "1"
                                                                                       "1/2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (mult-by
                                                                                           -1
                                                                                           "r^n")
                                                                                          (("1"
                                                                                            (invoke
                                                                                             (case
                                                                                              "%1 = sigma(0, n - 1, GG)")
                                                                                             (!
                                                                                              -1
                                                                                              1))
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "((1 / 2) ^ 1 - (1 / 2) ^ (1 + n)) / (1 / 2) < 1")
                                                                                                      (("1"
                                                                                                        (mult-by
                                                                                                         -1
                                                                                                         "r^n")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (cross-mult
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "posreal_expt")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "1+n"
                                                                                                             "1/2")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "^"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "expt"
                                                                                                                 1
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "expt"
                                                                                                                   1
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "sigma_reverse"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "FORALL (k:nat): k<=n-1 IMPLIES sigma(1, 1+k,
            LAMBDA (n_1: nat):
              IF n_1 > 1 + n THEN 0 ELSE (1/2) ^ (1 - n_1 + n) ENDIF)
       * r ^ n
       = sigma(0, k, GG)")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "n-1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     (-1
                                                                                                      2))
                                                                                                    (("2"
                                                                                                      (induct
                                                                                                       "k")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "sigma")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "sigma")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "GG")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "div_expt")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "^"
                                                                                                                     +
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "expt_1n_aux")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skolem
                                                                                                         1
                                                                                                         "k")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "sigma"
                                                                                                                 +)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "GG"
                                                                                                                       +)
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "div_expt")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "^"
                                                                                                                           +
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "expt_1n_aux")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skolem
                                                                                     1
                                                                                     "nn")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "FF"
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "GG"
                                                                                         1)
                                                                                        (("2"
                                                                                          (case
                                                                                           "NOT (IF nn = 0 THEN 1 ELSE r ^ nn ENDIF) = r^nn")
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "-"
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "aneg"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (ground)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "n-nn")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (cross-mult
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (mult-by
                                                                                                             2
                                                                                                             "r^nn")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "expt_plus"
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (lemma
                                                                                                               "posreal_expt")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "nn"
                                                                                                                 "r")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "^"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (cross-mult
                                                                                                       2)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sequence type-eq-decl nil sequences nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "[T -> real]" real_fun_ops nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (apos skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (aneg skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (sum_polynomial_eq_degree formula-decl nil polynomials nil)
    (polynomial_rec formula-decl nil polynomials nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posreal_expt judgement-tcc nil exponentiation nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (<= const-decl "bool" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sigma_rat application-judgement "rational" sigma_nat nil)
    (sigma_nnreal application-judgement "nnreal" sigma_nat nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (GG skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (expt_1n_aux formula-decl nil exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (div_expt formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (sigma_reverse formula-decl nil sigma_nat nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div1 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (sigma_geometric formula-decl nil sigma_nat nil)
    (FF skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (expt_plus formula-decl nil exponentiation nil)
    (n skolem-const-decl "nat" more_polynomial_props nil)
    (nn skolem-const-decl "subrange(0, n - 1)" more_polynomial_props
     nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma_lt formula-decl nil sigma nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (neg_polynomial formula-decl nil polynomials nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (r skolem-const-decl "real" more_polynomial_props nil)
    (j skolem-const-decl "nat" more_polynomial_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal_expt judgement-tcc nil exponentiation nil)
    (nnreal type-eq-decl nil real_types nil)
    (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (Knuth_poly_pos_root_bound_TCC1 0
  (Knuth_poly_pos_root_bound_TCC1-1 nil 3609942115
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil))
   nil
   (Knuth_poly_pos_root_bound subtype "more_polynomial_props.aquot"
    "posreal")))
 (Knuth_poly_pos_root_bound_TCC2 0
  (Knuth_poly_pos_root_bound_TCC2-1 nil 3609942115
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (least_pow_2_ge const-decl
     "{k: int | xp <= 2 ^ k AND FORALL (i: int): i < k IMPLIES 2 ^ i < xp}"
     log_nat nil)
    (log_nat_it const-decl "[n: nat, {y | y < p AND x = p ^ n * y}]"
     log_nat nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (Knuth_poly_pos_root_bound subtype "more_polynomial_props.k"
    "nznum")))
 (Knuth_poly_pos_root_bound_TCC3 0
  (Knuth_poly_pos_root_bound_TCC3-1 nil 3609942115
   ("" (subtype-tcc) nil nil) nil nil
   (Knuth_poly_pos_root_bound subtype "more_polynomial_props.n"
    "{k: naturalnumbers.nat | reals.<=(1, k)}")))
 (Knuth_poly_pos_root_bound_TCC4 0
  (Knuth_poly_pos_root_bound_TCC4-2 nil 3611332774
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "Knuth_bound_simple")
        (("" (inst - "a" "n" "x")
          (("" (assert)
            (("" (skeep -1)
              (("" (typepred "max_rec(maxKfun,1,n)")
                (("" (inst -2 "k")
                  (("" (assert)
                    (("" (case "x<=2*maxKfun(k)")
                      (("1" (assert) nil nil)
                       ("2" (hide (-1 -2 2))
                        (("2" (replace -3 +)
                          (("2" (assert)
                            (("2" (hide -3)
                              (("2"
                                (name "j" "least_pow_2_ge(-a(n - k))")
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (typepred "floor(j/k)")
                                    (("2"
                                      (lemma "both_sides_expt_pos_le")
                                      (("2"
                                        (inst
                                         -
                                         "k"
                                         "x"
                                         "2 * 2 ^ (1 + floor(j / k))")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (rewrite "mult_expt")
                                              (("2"
                                                (case
                                                 "-a(n-k) <= 2 ^ (1 + floor(j / k)) ^ k")
                                                (("1"
                                                  (mult-by -1 "2^k")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (rewrite
                                                     "expt_times"
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "both_sides_expt_gt1_le")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "2"
                                                           "j"
                                                           "floor(j / k) * k + k")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide 2)
                                                              (("2"
                                                                (cross-mult
                                                                 -2)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_expt_pos_le formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (mult_expt formula-decl nil exponentiation nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (both_sides_expt_gt1_le formula-decl nil exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (expt_times formula-decl nil exponentiation nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (least_pow_2_ge const-decl
     "{k: int | xp <= 2 ^ k AND FORALL (i: int): i < k IMPLIES 2 ^ i < xp}"
     log_nat nil)
    (< const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (max_rec def-decl "{r: real |
   (EXISTS (i: nat): j <= i AND i <= k AND F(i) = r) AND
    (FORALL (i: nat): j <= i AND i <= k IMPLIES F(i) <= r)}" min_max
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (Knuth_bound_simple formula-decl nil more_polynomial_props nil))
   nil
   (Knuth_poly_pos_root_bound subtype
    "number_fields.*(2, min_max.max_rec(more_polynomial_props.maxKfun, 1, more_polynomial_props.n))"
    "{K: reals.real | FORALL (x: reals.real): booleans.IMPLIES(booleans.AND(polynomials.polynomial(more_polynomial_props.a, more_polynomial_props.n)(x) = 0, reals.>(x, 0)), reals.<=(x, K))}"))
  (Knuth_poly_pos_root_bound_TCC4-1 nil 3609942115
   ("" (subtype-tcc) nil nil) nil nil
   (Knuth_poly_pos_root_bound subtype
    "number_fields.*(2, min_max.max_rec(more_polynomial_props.maxKfun, 1, more_polynomial_props.n))"
    "{K: reals.real | FORALL (x: reals.real): booleans.IMPLIES(booleans.AND(polynomials.polynomial(more_polynomial_props.a, more_polynomial_props.n)(x) = 0, reals.>(x, 0)), reals.<=(x, K))}")))
 (Knuth_poly_root_bound_TCC1 0
  (Knuth_poly_root_bound_TCC1-1 nil 3609945018 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (Knuth_poly_root_bound subtype "0"
    "{K: real_types.nnreal | FORALL (x: reals.real): booleans.IMPLIES(polynomials.polynomial(more_polynomial_props.a, more_polynomial_props.n)(x) = 0, reals.<=(real_defs.abs(x), K))}")))
 (Knuth_poly_root_bound_TCC2 0
  (Knuth_poly_root_bound_TCC2-1 nil 3609945018
   ("" (subtype-tcc) nil nil) ((even? const-decl "bool" integers nil))
   nil
   (Knuth_poly_root_bound subtype
    "more_polynomial_props.a(more_polynomial_props.n)" "nznum")))
 (Knuth_poly_root_bound_TCC3 0
  (Knuth_poly_root_bound_TCC3-1 nil 3609945018
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even? const-decl "bool" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (Knuth_poly_root_bound subtype "more_polynomial_props.n"
    "{n | booleans.AND(more_polynomial_props.nega(more_polynomial_props.n) = 1, reals.>(more_polynomial_props.n, 0))}")))
 (Knuth_poly_root_bound_TCC4 0
  (Knuth_poly_root_bound_TCC4-1 nil 3609945018
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (even? const-decl "bool" integers nil)
    (Knuth_poly_pos_root_bound const-decl "{K: real |
   FORALL (x: real): polynomial(a, n)(x) = 0 AND x > 0 IMPLIES x <= K}"
     more_polynomial_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (Knuth_poly_root_bound subtype "more_polynomial_props.n"
    "{n | booleans.AND(more_polynomial_props.newa(more_polynomial_props.n) = 1, reals.>(more_polynomial_props.n, 0))}")))
 (Knuth_poly_root_bound_TCC5 0
  (Knuth_poly_root_bound_TCC5-1 nil 3609945018
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (skeep)
              (("" (split +)
                (("1" (hide -) (("1" (grind) nil nil)) nil)
                 ("2" (skeep)
                  (("2" (case "x = 0")
                    (("1" (replaces -1)
                      (("1" (hide -) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (assert)
                      (("2" (case "x > 0")
                        (("1" (expand "abs" +)
                          (("1" (assert)
                            (("1"
                              (typepred
                               "Knuth_poly_pos_root_bound(newa, n)")
                              (("1"
                                (inst - "x")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "scal_polynomial")
                                    (("1"
                                      (inst - "a" "n" "1/a(n)")
                                      (("1"
                                        (case
                                         "newa = const_fun(1 / a(n)) * a")
                                        (("1"
                                          (replaces -1 :dir rl)
                                          (("1"
                                            (expand "const_fun" -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replaces -1 :dir rl)
                                                (("1"
                                                  (expand "*")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (decompose-equality 1)
                                          (("2"
                                            (expand "const_fun" 1)
                                            (("2"
                                              (expand "*")
                                              (("2"
                                                (replace -6 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (typepred
                             "Knuth_poly_pos_root_bound(nega, n)")
                            (("2" (inst - "-x")
                              (("2"
                                (expand "abs" +)
                                (("2"
                                  (assert)
                                  (("2"
                                    (mult-by -1 "negsign(n)/a(n)")
                                    (("2"
                                      (case
                                       "FORALL (xyz:real):0*xyz=0")
                                      (("1"
                                        (rewrite -1)
                                        (("1"
                                          (replace -2 1 :dir rl)
                                          (("1"
                                            (hide (-1 -2))
                                            (("1"
                                              (expand "polynomial" 1)
                                              (("1"
                                                (rewrite
                                                 "sigma_scal_right"
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (rewrite "sigma_eq")
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (replace -2 1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "mult_expt")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "n!1"
                                                                     "-1"
                                                                     "x")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (case
                                                                           "FORALL (kp:nat): negsign(kp) = (-1)^kp")
                                                                          (("1"
                                                                            (inst-cp
                                                                             -
                                                                             "n!1")
                                                                            (("1"
                                                                              (case
                                                                               "(-1)^n!1 * (-1)^n!1 = 1")
                                                                              (("1"
                                                                                (replace
                                                                                 -3)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      -3
                                                                                      2))
                                                                                    (("1"
                                                                                      (grind-reals)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -2
                                                                                 1
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (replace
                                                                                   -3
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-1
                                                                              1))
                                                                            (("2"
                                                                              (replaces
                                                                               -1)
                                                                              (("2"
                                                                                (induct
                                                                                 "kp")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "^")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "expt"
                                                                                       +)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (ground)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "odd_iff_even_succ")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "j")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "even_iff_not_odd")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "even_iff_not_odd")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "j")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "odd_iff_even_succ")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma_eq formula-decl nil sigma nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (subrange type-eq-decl nil integers nil)
    (even? const-decl "bool" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_iff_even_succ formula-decl nil naturalnumbers nil)
    (even_iff_not_odd formula-decl nil naturalnumbers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (sqrt_1 formula-decl nil real_props nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (mult_expt formula-decl nil exponentiation nil)
    (sigma_scal_right formula-decl nil sigma nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (Knuth_poly_pos_root_bound const-decl "{K: real |
   FORALL (x: real): polynomial(a, n)(x) = 0 AND x > 0 IMPLIES x <= K}"
     more_polynomial_props nil)
    (<= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (const_fun const-decl "[T -> real]" real_fun_ops nil)
    (* const-decl "[T -> real]" real_fun_ops nil)
    (scal_polynomial formula-decl nil polynomials nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (Knuth_poly_root_bound subtype
    "real_defs.max(more_polynomial_props.posbound, real_defs.max(more_polynomial_props.negbound, 0))"
    "{K: real_types.nnreal | FORALL (x: reals.real): booleans.IMPLIES(polynomials.polynomial(more_polynomial_props.a, more_polynomial_props.n)(x) = 0, reals.<=(real_defs.abs(x), K))}")))
 (Knuth_poly_root_strict_bound_TCC1 0
  (Knuth_poly_root_strict_bound_TCC1-1 nil 3609950803
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (nnreal type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (Knuth_poly_root_strict_bound subtype "1"
    "{K: real_types.posreal | FORALL (x: reals.real): booleans.IMPLIES(polynomials.polynomial(more_polynomial_props.a, more_polynomial_props.n)(x) = 0, reals.<(real_defs.abs(x), K))}")))
 (Knuth_poly_root_strict_bound_TCC2 0
  (Knuth_poly_root_strict_bound_TCC2-1 nil 3609950803
   ("" (skeep)
    (("" (assert)
      (("" (hide -1)
        (("" (typepred "Kprb")
          (("" (skeep) (("" (inst - "x") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (Knuth_poly_root_strict_bound subtype
    "number_fields.*((number_fields./(101, 100)), more_polynomial_props.Kprb)"
    "{K: real_types.posreal | FORALL (x: reals.real): booleans.IMPLIES(polynomials.polynomial(more_polynomial_props.a, more_polynomial_props.n)(x) = 0, reals.<(real_defs.abs(x), K))}")))
 (Knuth_poly_root_strict_bound_TCC3 0
  (Knuth_poly_root_strict_bound_TCC3-1 nil 3609950803
   ("" (skeep)
    (("" (assert)
      (("" (typepred "Kprb")
        (("" (skeep)
          (("" (inst - "x")
            (("" (assert)
              (("" (expand "abs")
                (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (/= const-decl "boolean" notequal nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   nil
   (Knuth_poly_root_strict_bound subtype "more_polynomial_props.Kprb"
    "{K: real_types.posreal | FORALL (x: reals.real): booleans.IMPLIES(polynomials.polynomial(more_polynomial_props.a, more_polynomial_props.n)(x) = 0, reals.<(real_defs.abs(x), K))}")))
 (poly_increasing_is_strict_TCC1 0
  (poly_increasing_is_strict_TCC1-1 nil 3607855367
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (poly_increasing_is_strict subtype
    "(number_fields.-)(more_polynomial_props.n, 1)" "nat")))
 (poly_increasing_is_strict 0
  (poly_increasing_is_strict-1 nil 3607855367
   ("" (skeep)
    (("" (ground)
      (("1" (skeep)
        (("1" (lemma "poly_increasing")
          (("1" (inst - "a" "n" "x" "y")
            (("1" (assert)
              (("1" (split -1)
                (("1" (assert)
                  (("1"
                    (case "EXISTS (cc:real): x<cc AND cc<y AND polynomial(a,n)(cc)>polynomial(a,n)(x)")
                    (("1" (skeep -1)
                      (("1" (lemma "poly_increasing")
                        (("1" (inst - "a" "n" "cc" "y")
                          (("1" (assert)
                            (("1" (skeep)
                              (("1"
                                (inst - "c")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2"
                        (name "bb"
                              "a WITH [0:=a(0)-polynomial(a,n)(x)]")
                        (("2"
                          (case "polynomial(bb,n)(x)=0 AND bb(n)/=0")
                          (("1" (flatten)
                            (("1" (name "d" "min_poly_root_dist(bb,n)")
                              (("1"
                                (name "cc" "x + min(d,(y-x)/2)")
                                (("1"
                                  (inst + "cc")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case "NOT x < cc")
                                      (("1"
                                        (hide 3)
                                        (("1"
                                          (expand "cc" 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "min" 1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (lemma "poly_increasing")
                                          (("2"
                                            (inst - "a" "n" "x" "cc")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred "d")
                                                    (("1"
                                                      (inst - "x" "cc")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -)
                                                          (("1"
                                                            (expand
                                                             "abs"
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "FORALL (xy:real): polynomial(bb,n)(xy) = polynomial(a,n)(xy)-polynomial(a,n)(x)")
                                                            (("1"
                                                              (rewrite
                                                               -1)
                                                              (("1"
                                                                (rewrite
                                                                 -1)
                                                                (("1"
                                                                  (rewrite
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (rewrite
                                                                 "polynomial_eq_a0_plus"
                                                                 1)
                                                                (("2"
                                                                  (invoke
                                                                   (name
                                                                    "XV"
                                                                    "%1")
                                                                   (!
                                                                    1
                                                                    1))
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "polynomial_eq_a0_plus"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "XV"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "bb"
                                                                           1
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "(LAMBDA (i: nat): bb(1 + i)) = (LAMBDA (i: nat): a(1 + i))")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (decompose-equality
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst - "c")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (name "XV" "polynomial(a,n)(x)")
                              (("2"
                                (label "iggy" *)
                                (("2"
                                  (label "igzy" -1)
                                  (("2"
                                    (hide "iggy")
                                    (("2"
                                      (rewrite
                                       "polynomial_eq_a0_plus"
                                       -1)
                                      (("2"
                                        (reveal "iggy")
                                        (("2"
                                          (copy "igzy")
                                          (("2"
                                            (hide "igzy")
                                            (("2"
                                              (delabel "iggy")
                                              (("2"
                                                (rewrite
                                                 "polynomial_eq_a0_plus"
                                                 1)
                                                (("2"
                                                  (expand "bb" 1 1)
                                                  (("2"
                                                    (expand "XV")
                                                    (("2"
                                                      (case
                                                       "(LAMBDA (i: nat): bb(1 + i)) = (LAMBDA (i: nat): a(1 + i))")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (decompose-equality
                                                         1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst - "c") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (lemma "poly_continuous")
          (("2"
            (inst - "poly_deriv(a)" "n-1" "c"
             "-polynomial(poly_deriv(a),n-1)(c)")
            (("1" (skeep)
              (("1"
                (case "EXISTS (x,y:real): abs(x-c)<delta AND abs(y-c)<delta AND x<y AND xlb<=x AND y<=yub")
                (("1" (skeep)
                  (("1" (inst - "x" "y")
                    (("1" (assert)
                      (("1" (lemma "poly_mean_value")
                        (("1" (inst - "a" "n" "x" "y")
                          (("1" (assert)
                            (("1" (skeep -)
                              (("1"
                                (inst - "cc")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -)
                                    (("1"
                                      (case
                                       "polynomial(poly_deriv(a),n-1)(cc)<0")
                                      (("1"
                                        (replace -5 -1)
                                        (("1" (cross-mult -1) nil nil))
                                        nil)
                                       ("2"
                                        (expand "abs")
                                        (("2"
                                          (lift-if)
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "abs")
                                      (("2"
                                        (lift-if)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide (-1 -2))
                  (("2" (case "abs(c-xlb)<delta")
                    (("1" (case "abs(c-yub)<delta")
                      (("1" (inst + "xlb" "yub")
                        (("1" (assert)
                          (("1" (grind :exclude "polynomial") nil nil))
                          nil))
                        nil)
                       ("2" (inst + "c+delta/4" "c+delta/2")
                        (("2" (grind :exclude "polynomial") nil nil))
                        nil))
                      nil)
                     ("2" (inst + "c-delta/2" "c-delta/4")
                      (("2" (grind :exclude "polynomial") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (poly_increasing formula-decl nil polynomials nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (min_poly_root_dist const-decl "{epsil: posreal |
   FORALL (x, y: real):
     polynomial(a, n)(x) = 0 AND polynomial(a, n)(y) = 0 AND x /= y IMPLIES
      abs(x - y) > epsil}" more_polynomial_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cc skolem-const-decl "real" more_polynomial_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (bb skolem-const-decl "sequence[real]" more_polynomial_props nil)
    (XV skolem-const-decl "real" more_polynomial_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (polynomial_eq_a0_plus formula-decl nil polynomials nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (XV skolem-const-decl "real" more_polynomial_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (poly_continuous formula-decl nil polynomials nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (poly_mean_value formula-decl nil polynomials nil)
    (poly_deriv const-decl "real" polynomials nil)
    (a skolem-const-decl "sequence[real]" more_polynomial_props nil)
    (n skolem-const-decl "nat" more_polynomial_props nil)
    (c skolem-const-decl "real" more_polynomial_props nil))
   shostak))
 (poly_increasing_is_strict2 0
  (poly_increasing_is_strict2-1 nil 3607944563
   ("" (skeep)
    (("" (ground)
      (("1" (skeep)
        (("1" (lemma "poly_increasing")
          (("1" (inst - "a" "n" "x" "y")
            (("1" (assert)
              (("1" (skeep)
                (("1" (inst - "c") (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (lemma "poly_continuous")
          (("2"
            (inst - "poly_deriv(a)" "n-1" "c"
             "-polynomial(poly_deriv(a),n-1)(c)")
            (("1" (skeep)
              (("1"
                (case "EXISTS (x,y:real): abs(x-c)<delta AND abs(y-c)<delta AND x<y AND xlb<=x AND y<=yub")
                (("1" (skeep)
                  (("1" (inst - "x" "y")
                    (("1" (assert)
                      (("1" (lemma "poly_mean_value")
                        (("1" (inst - "a" "n" "x" "y")
                          (("1" (assert)
                            (("1" (skeep -)
                              (("1"
                                (inst - "cc")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -)
                                    (("1"
                                      (case
                                       "polynomial(poly_deriv(a),n-1)(cc)<0")
                                      (("1"
                                        (replace -5 -1)
                                        (("1" (cross-mult -1) nil nil))
                                        nil)
                                       ("2"
                                        (expand "abs")
                                        (("2"
                                          (lift-if)
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "abs")
                                      (("2"
                                        (lift-if)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide (-1 -2))
                  (("2" (case "abs(c-xlb)<delta")
                    (("1" (case "abs(c-yub)<delta")
                      (("1" (inst + "xlb" "yub")
                        (("1" (assert)
                          (("1" (grind :exclude "polynomial") nil nil))
                          nil))
                        nil)
                       ("2" (inst + "c+delta/4" "c+delta/2")
                        (("2" (grind :exclude "polynomial") nil nil))
                        nil))
                      nil)
                     ("2" (inst + "c-delta/2" "c-delta/4")
                      (("2" (grind :exclude "polynomial") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (poly_increasing formula-decl nil polynomials nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (poly_continuous formula-decl nil polynomials nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (poly_mean_value formula-decl nil polynomials nil)
    (<= const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (poly_deriv const-decl "real" polynomials nil)
    (a skolem-const-decl "sequence[real]" more_polynomial_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "nat" more_polynomial_props nil)
    (c skolem-const-decl "real" more_polynomial_props nil)
    (> const-decl "bool" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (poly_decreasing_is_strict 0
  (poly_decreasing_is_strict-1 nil 3607857803
   ("" (skeep)
    (("" (lemma "poly_increasing_is_strict")
      (("" (inst - "-a" "n" "xlb" "yub")
        (("" (expand "-" -1 1)
          (("" (assert)
            (("" (ground)
              (("1" (skeep)
                (("1" (inst - "x" "y")
                  (("1" (assert)
                    (("1" (rewrite "neg_polynomial" :dir rl)
                      (("1" (assert)
                        (("1" (expand "-") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (inst - "c")
                  (("2" (assert)
                    (("2" (lemma "poly_deriv_scal")
                      (("2" (inst - "a" "-1")
                        (("2" (case "-1*a = -a")
                          (("1" (replace -1)
                            (("1" (replace -2)
                              (("1"
                                (rewrite "scal_polynomial2")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (decompose-equality 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep 3)
                (("3" (inst - "c")
                  (("3" (assert)
                    (("3" (lemma "poly_deriv_scal")
                      (("3" (inst - "a" "-1")
                        (("3" (case "-1*a = -a")
                          (("1" (replace -1)
                            (("1" (replace -2)
                              (("1"
                                (rewrite "scal_polynomial2")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (decompose-equality 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (skeep 2)
                (("4" (inst - "x" "y")
                  (("4" (assert)
                    (("4" (rewrite "neg_polynomial" :dir rl)
                      (("4" (expand "-") (("4" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_increasing_is_strict formula-decl nil more_polynomial_props
     nil)
    (neg_polynomial formula-decl nil polynomials nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (poly_deriv_scal formula-decl nil polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[T -> real]" real_fun_ops nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (scal_polynomial2 formula-decl nil polynomials nil)
    (poly_deriv const-decl "real" polynomials nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (poly_decreasing_is_strict2 0
  (poly_decreasing_is_strict2-1 nil 3607944699
   ("" (skeep)
    (("" (lemma "poly_increasing_is_strict2")
      (("" (inst - "-a" "n" "xlb" "yub")
        (("" (expand "-" -1 1)
          (("" (assert)
            (("" (ground)
              (("1" (skeep)
                (("1" (inst - "x" "y")
                  (("1" (assert)
                    (("1" (rewrite "neg_polynomial" :dir rl)
                      (("1" (assert)
                        (("1" (expand "-") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (inst - "c")
                  (("2" (assert)
                    (("2" (lemma "poly_deriv_scal")
                      (("2" (inst - "a" "-1")
                        (("2" (case "-1*a = -a")
                          (("1" (replace -1)
                            (("1" (replace -2)
                              (("1"
                                (rewrite "scal_polynomial2")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (decompose-equality 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep 3)
                (("3" (inst - "c")
                  (("3" (assert)
                    (("3" (lemma "poly_deriv_scal")
                      (("3" (inst - "a" "-1")
                        (("3" (case "-1*a = -a")
                          (("1" (replace -1)
                            (("1" (replace -2)
                              (("1"
                                (rewrite "scal_polynomial2")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (decompose-equality 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (skeep 2)
                (("4" (inst - "x" "y")
                  (("4" (assert)
                    (("4" (rewrite "neg_polynomial" :dir rl)
                      (("4" (expand "-") (("4" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_increasing_is_strict2 formula-decl nil more_polynomial_props
     nil)
    (neg_polynomial formula-decl nil polynomials nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (poly_deriv_scal formula-decl nil polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[T -> real]" real_fun_ops nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (scal_polynomial2 formula-decl nil polynomials nil)
    (poly_deriv const-decl "real" polynomials nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (poly_injective_monotone 0
  (poly_injective_monotone-1 nil 3607860000
   ("" (skeep)
    (("" (ground)
      (("1" (name "f" "polynomial(a,n)")
        (("1" (replace -1)
          (("1" (name "inz" "LAMBDA (x:real): xlb<=x AND x<=yub")
            (("1"
              (case "EXISTS (x,y,z:real): inz(x) AND inz(y) AND inz(z) AND x<y AND y<z AND ((f(x)>f(y) AND f(y)<f(z)) OR (f(x) < f(y) AND f(y)>f(z)))")
              (("1" (hide (1 2))
                (("1" (skeep)
                  (("1" (ground)
                    (("1" (lemma "poly_intermediate_value_dec")
                      (("1" (case "f(x) >= f(z)")
                        (("1" (inst - "a" "f(z)" "n" "x" "y")
                          (("1" (assert)
                            (("1" (skeep)
                              (("1"
                                (rewrite "f" :dir rl)
                                (("1"
                                  (inst - "cc" "z")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "inz")
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1)
                          (("2" (lemma "poly_intermediate_value_inc")
                            (("2" (inst - "a" "f(x)" "n" "y" "z")
                              (("2"
                                (assert)
                                (("2"
                                  (rewrite "f" :dir rl)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst - "x" "cc")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "inz")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "f(x)>=f(z)")
                      (("1" (lemma "poly_intermediate_value_dec")
                        (("1" (inst - "a" "f(x)" "n" "y" "z")
                          (("1" (assert)
                            (("1" (rewrite "f" :dir rl)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst - "x" "cc")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "inz")
                                        (("1" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "poly_intermediate_value_inc")
                        (("2" (inst - "a" "f(z)" "n" "x" "y")
                          (("2" (assert)
                            (("2" (skeep)
                              (("2"
                                (rewrite "f" :dir rl)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst - "cc" "z")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "inz")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -3)
                (("2" (skolem 2 ("x1" "y1"))
                  (("2" (skolem 3 ("x2" "y2"))
                    (("2" (flatten)
                      (("2"
                        (case "NOT (f(y1)>=f(x1) AND f(x2)>=f(y2))")
                        (("1" (assert) nil nil)
                         ("2" (hide (2 3))
                          (("2" (flatten)
                            (("2" (hide -3)
                              (("2"
                                (label "igp" -)
                                (("2"
                                  (hide "igp")
                                  (("2"
                                    (case
                                     "inz(x1) AND inz(y1) AND inz(x2) AND inz(y2)")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (reveal "igp")
                                        (("1"
                                          (delabel "igp")
                                          (("1"
                                            (case
                                             "EXISTS (r,s:real): inz(r) AND inz(s) AND r/=s AND f(r)=f(s)")
                                            (("1"
                                              (case
                                               "NOT EXISTS (r,s:real): inz(r) AND inz(s) AND r<s AND f(r)=f(s)")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst-cp + "r" "s")
                                                  (("1"
                                                    (inst + "s" "r")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -2)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (name
                                                     "bb"
                                                     "a with [0:=a(0)-f(r)]")
                                                    (("2"
                                                      (name
                                                       "e"
                                                       "min_poly_root_dist(bb,n)")
                                                      (("1"
                                                        (case
                                                         "polynomial(bb,n) = LAMBDA (rr:real): polynomial(a,n)(rr)-f(r)")
                                                        (("1"
                                                          (name
                                                           "newr"
                                                           "r + min(e/2,(s-r)/2)")
                                                          (("1"
                                                            (case
                                                             "r<newr AND newr<s")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (case
                                                                 "inz(newr)")
                                                                (("1"
                                                                  (case
                                                                   "f(newr)>f(r) OR f(newr)<f(r) OR f(newr)=f(r)")
                                                                  (("1"
                                                                    (split
                                                                     -)
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "r"
                                                                       "newr"
                                                                       "s")
                                                                      (("1"
                                                                        (hide
                                                                         (-13
                                                                          -14
                                                                          -15
                                                                          -16
                                                                          -17
                                                                          -18
                                                                          -19
                                                                          -20
                                                                          -21
                                                                          -22
                                                                          -23
                                                                          -24
                                                                          -25
                                                                          -26
                                                                          -27))
                                                                        (("1"
                                                                          (replace
                                                                           -2)
                                                                          (("1"
                                                                            (replace
                                                                             -3)
                                                                            (("1"
                                                                              (replace
                                                                               -4)
                                                                              (("1"
                                                                                (replace
                                                                                 -10)
                                                                                (("1"
                                                                                  (replace
                                                                                   -12)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -9)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (hide
                                                                                         (-6
                                                                                          -7
                                                                                          -8))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       +
                                                                       "r"
                                                                       "newr"
                                                                       "s")
                                                                      (("2"
                                                                        (hide
                                                                         (-6
                                                                          -7
                                                                          -8))
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide
                                                                       (-7
                                                                        -8))
                                                                      (("3"
                                                                        (typepred
                                                                         "e")
                                                                        (("3"
                                                                          (inst
                                                                           -
                                                                           "r"
                                                                           "newr")
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (split
                                                                               -)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "newr")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (rewrite
                                                                                 -8
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (rewrite
                                                                                 -8
                                                                                 1)
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "inz")
                                                                  (("2"
                                                                    (hide
                                                                     (-4
                                                                      -6))
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-7 1))
                                                              (("2"
                                                                (expand
                                                                 "newr")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (decompose-equality)
                                                            (("2"
                                                              (rewrite
                                                               "polynomial_eq_a0_plus")
                                                              (("2"
                                                                (invoke
                                                                 (name
                                                                  "xv"
                                                                  "%1")
                                                                 (!
                                                                  1
                                                                  1))
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (rewrite
                                                                     "polynomial_eq_a0_plus"
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "(LAMBDA (i: nat): bb(1 + i))=(LAMBDA (i: nat): a(1 + i))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               1
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (expand
                                                                                 "bb"
                                                                                 1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "bb")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand "bb" 1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "NOT f(x2)>f(y2)")
                                              (("1"
                                                (inst + "x2" "y2")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -3)
                                                (("2"
                                                  (case
                                                   "NOT f(y1)>f(x1)")
                                                  (("1"
                                                    (inst + "x1" "y1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -3)
                                                    (("2"
                                                      (inst-cp
                                                       +
                                                       "x1"
                                                       "y1"
                                                       "x2")
                                                      (("2"
                                                        (inst-cp
                                                         +
                                                         "x1"
                                                         "y1"
                                                         "y2")
                                                        (("2"
                                                          (inst-cp
                                                           +
                                                           "x2"
                                                           "y2"
                                                           "x1")
                                                          (("2"
                                                            (inst-cp
                                                             +
                                                             "x2"
                                                             "y2"
                                                             "x2")
                                                            (("2"
                                                              (inst-cp
                                                               +
                                                               "x1"
                                                               "x2"
                                                               "y1")
                                                              (("2"
                                                                (inst-cp
                                                                 +
                                                                 "x1"
                                                                 "y2"
                                                                 "y1")
                                                                (("2"
                                                                  (inst-cp
                                                                   +
                                                                   "x2"
                                                                   "x1"
                                                                   "y2")
                                                                  (("2"
                                                                    (inst-cp
                                                                     +
                                                                     "x2"
                                                                     "y1"
                                                                     "y2")
                                                                    (("2"
                                                                      (inst-cp
                                                                       +
                                                                       "x2"
                                                                       "x1"
                                                                       "y1")
                                                                      (("2"
                                                                        (inst-cp
                                                                         +
                                                                         "y2"
                                                                         "x1"
                                                                         "y1")
                                                                        (("2"
                                                                          (inst-cp
                                                                           +
                                                                           "x1"
                                                                           "x2"
                                                                           "y2")
                                                                          (("2"
                                                                            (inst-cp
                                                                             +
                                                                             "y1"
                                                                             "x2"
                                                                             "y2")
                                                                            (("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split
                                                                                   +)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       +)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           +)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               +)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (split
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (split
                                                                                                   +)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (flatten)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (split
                                                                                               +)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (split
                                                                                     +)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         +)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             +)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             +)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         (4
                                                                                          5))
                                                                                        (("2"
                                                                                          (split
                                                                                           +)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (reveal -)
                                      (("2"
                                        (expand "inz")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (inst - "x" "y") (("2" (assert) nil nil)) nil)) nil)
       ("3" (skeep)
        (("3" (inst - "x" "y") (("3" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (poly_intermediate_value_dec formula-decl nil polynomials nil)
    (poly_intermediate_value_inc formula-decl nil polynomials nil)
    (inz skolem-const-decl "[real -> boolean]" more_polynomial_props
     nil)
    (f skolem-const-decl "[real -> real]" more_polynomial_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (min_poly_root_dist const-decl "{epsil: posreal |
   FORALL (x, y: real):
     polynomial(a, n)(x) = 0 AND polynomial(a, n)(y) = 0 AND x /= y IMPLIES
      abs(x - y) > epsil}" more_polynomial_props nil)
    (polynomial_eq_a0_plus formula-decl nil polynomials nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (bb skolem-const-decl "sequence[real]" more_polynomial_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (newr skolem-const-decl "real" more_polynomial_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials nil))
   shostak))
 (root_degree_TCC1 0
  (root_degree_TCC1-1 nil 3616847829 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (root_degree subtype "more_polynomial_props.m"
    "{i: integers.int | booleans.OR(((number_fields.-)(more_polynomial_props.x, more_polynomial_props.y)) /= 0, reals.>=(i, 0))}")))
 (root_degree_TCC2 0
  (root_degree_TCC2-1 nil 3616847829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (root_degree subtype "(number_fields.-)(more_polynomial_props.n, 1)"
    "nat")))
 (root_degree_TCC3 0
  (root_degree_TCC3-1 nil 3616847829 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (root_degree subtype
    "((number_fields.-)(more_polynomial_props.m, 1))"
    "{i: integers.int | booleans.OR(((number_fields.-)(more_polynomial_props.x, more_polynomial_props.y)) /= 0, reals.>=(i, 0))}")))
 (root_degree_TCC4 0
  (root_degree_TCC4-1 nil 3616847829
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (case "n = 0")
          (("1" (assert)
            (("1" (hide -2)
              (("1" (replaces -1)
                (("1" (assert)
                  (("1" (split)
                    (("1" (inst + "a") (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (flatten)
              (("2" (inst + "a")
                (("2" (split)
                  (("1" (skosimp*)
                    (("1" (grind :exclude "polynomial") nil nil)) nil)
                   ("2" (propax) nil nil) ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (sigma def-decl "real" sigma nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (sequence type-eq-decl nil sequences nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (root_degree subtype "0"
    "{m | booleans.AND(reals.<=(more_polynomial_props.m, more_polynomial_props.n), (booleans.IMPLIES(more_polynomial_props.a(more_polynomial_props.n) /= 0, (booleans.AND((EXISTS (b: [naturalnumbers.nat -> reals.real]): booleans.AND(FORALL (x): polynomials.polynomial(more_polynomial_props.a, more_polynomial_props.n)(more_polynomial_props.x) = number_fields.*(exponentiation.^(((number_fields.-)(more_polynomial_props.x, more_polynomial_props.y)), more_polynomial_props.m), polynomials.polynomial(b, (number_fields.-)(more_polynomial_props.n, more_polynomial_props.m))(more_polynomial_props.x)), booleans.AND(polynomials.polynomial(b, (number_fields.-)(more_polynomial_props.n, more_polynomial_props.m))(more_polynomial_props.y) /= 0, b((number_fields.-)(more_polynomial_props.n, more_polynomial_props.m)) /= 0))), booleans.AND((booleans.IMPLIES(polynomials.polynomial(more_polynomial_props.a, more_polynomial_props.n)(more_polynomial_props.y) = 0, reals.>(more_polynomial_props.m, 0))), (booleans.IMPLIES((booleans.AND(reals.>(more_polynomial_props.n, 0), reals.>(more_polynomial_props.m, 0))), (EXISTS (q: [naturalnumbers.nat -> reals.real]): booleans.AND(FORALL (x): polynomials.polynomial(polynomials.poly_deriv(more_polynomial_props.a), (number_fields.-)(more_polynomial_props.n, 1))(more_polynomial_props.x) = number_fields.*(exponentiation.^(((number_fields.-)(more_polynomial_props.x, more_polynomial_props.y)), ((number_fields.-)(more_polynomial_props.m, 1))), polynomials.polynomial(q, (number_fields.-)(more_polynomial_props.n, more_polynomial_props.m))(more_polynomial_props.x)), polynomials.polynomial(q, (number_fields.-)(more_polynomial_props.n, more_polynomial_props.m))(more_polynomial_props.y) /= 0))))))))))}")))
 (root_degree_TCC5 0
  (root_degree_TCC5-1 nil 3616847829
   ("" (skeep)
    ((""
      (name "rf" "LAMBDA
                                             (i: nat):
                                             poly_shift(a, n)(y)(i + 1)")
      (("" (replace -1)
        (("" (name "ps" "poly_shift(rf, n - 1)(-y)")
          (("1" (replace -1)
            (("1" (assert)
              (("1" (name "k" "v(ps,n-1)(y)")
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (invoke (case "NOT %1") (! 3 1))
                          (("1" (hide 4)
                            (("1" (typepred "k")
                              (("1"
                                (assert)
                                (("1"
                                  (case "ps(n-1)=0")
                                  (("1"
                                    (expand "ps" -1)
                                    (("1"
                                      (expand "poly_shift" -1)
                                      (("1"
                                        (expand "sigma" -1)
                                        (("1"
                                          (expand "sigma" -1)
                                          (("1"
                                            (expand "C" -1)
                                            (("1"
                                              (expand "rf" -1)
                                              (("1"
                                                (expand
                                                 "poly_shift"
                                                 -1)
                                                (("1"
                                                  (expand "sigma" -1)
                                                  (("1"
                                                    (expand "sigma" -1)
                                                    (("1"
                                                      (expand "C" -1)
                                                      (("1"
                                                        (expand "^" -1)
                                                        (("1"
                                                          (expand
                                                           "expt")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst + "b")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst - "x")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     " polynomial_zero_factor2")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "a"
                                                       "n"
                                                       "y")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace -8)
                                                          (("2"
                                                            (replace
                                                             -7)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "x")
                                                              (("2"
                                                                (expand
                                                                 "^")
                                                                (("2"
                                                                  (expand
                                                                   "expt"
                                                                   +)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -1)
                            (("2" (lemma "max_linear_div_power_rew2")
                              (("2"
                                (inst - "a" "n" "y" "k+1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (expand
                                           "max_linear_div_power?")
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (inst + "q!1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 4)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst + "b" "n-k-1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (poly_shift const-decl "sequence[real]" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rf skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (expt def-decl "real" exponentiation nil)
    (factorial_0 formula-decl nil factorial "ints/")
    (C const-decl "posnat" binomial nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (sigma def-decl "real" sigma nil)
    (ps skolem-const-decl "sequence[real]" more_polynomial_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (polynomial_zero_factor2 formula-decl nil polynomials nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max_linear_div_power_rew2 formula-decl nil more_polynomial_props
     nil)
    (max_linear_div_power? const-decl "bool" more_polynomial_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (> const-decl "bool" reals nil)
    (poly_deriv const-decl "real" polynomials nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (root_degree subtype
    "(number_fields.+)(1, more_polynomial_props.root_degree(polynomials.poly_shift(LAMBDA (i: naturalnumbers.nat): polynomials.poly_shift(more_polynomial_props.a, more_polynomial_props.n)(more_polynomial_props.y)((number_fields.+)(i, 1)), (number_fields.-)(more_polynomial_props.n, 1))(), (number_fields.-)(more_polynomial_props.n, 1))(more_polynomial_props.y))"
    "{m | booleans.AND(reals.<=(more_polynomial_props.m, more_polynomial_props.n), (booleans.IMPLIES(more_polynomial_props.a(more_polynomial_props.n) /= 0, (booleans.AND((EXISTS (b: [naturalnumbers.nat -> reals.real]): booleans.AND(FORALL (x): polynomials.polynomial(more_polynomial_props.a, more_polynomial_props.n)(more_polynomial_props.x) = number_fields.*(exponentiation.^(((number_fields.-)(more_polynomial_props.x, more_polynomial_props.y)), more_polynomial_props.m), polynomials.polynomial(b, (number_fields.-)(more_polynomial_props.n, more_polynomial_props.m))(more_polynomial_props.x)), booleans.AND(polynomials.polynomial(b, (number_fields.-)(more_polynomial_props.n, more_polynomial_props.m))(more_polynomial_props.y) /= 0, b((number_fields.-)(more_polynomial_props.n, more_polynomial_props.m)) /= 0))), booleans.AND((booleans.IMPLIES(polynomials.polynomial(more_polynomial_props.a, more_polynomial_props.n)(more_polynomial_props.y) = 0, reals.>(more_polynomial_props.m, 0))), (booleans.IMPLIES((booleans.AND(reals.>(more_polynomial_props.n, 0), reals.>(more_polynomial_props.m, 0))), (EXISTS (q: [naturalnumbers.nat -> reals.real]): booleans.AND(FORALL (x): polynomials.polynomial(polynomials.poly_deriv(more_polynomial_props.a), (number_fields.-)(more_polynomial_props.n, 1))(more_polynomial_props.x) = number_fields.*(exponentiation.^(((number_fields.-)(more_polynomial_props.x, more_polynomial_props.y)), ((number_fields.-)(more_polynomial_props.m, 1))), polynomials.polynomial(q, (number_fields.-)(more_polynomial_props.n, more_polynomial_props.m))(more_polynomial_props.x)), polynomials.polynomial(q, (number_fields.-)(more_polynomial_props.n, more_polynomial_props.m))(more_polynomial_props.y) /= 0))))))))))}")))
 (root_degree_pos 0
  (root_degree_pos-1 nil 3616858858
   ("" (skeep)
    (("" (name "rd" "root_degree(a,n)(y)")
      (("" (replaces -1)
        (("" (typepred "rd")
          (("" (assert)
            (("" (ground)
              (("1" (hide -2)
                (("1" (skeep)
                  (("1" (inst - "y")
                    (("1" (assert)
                      (("1" (expand "^")
                        (("1" (expand "expt") (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -2)
                (("2" (skeep)
                  (("2" (inst - "y")
                    (("2" (assert)
                      (("2" (expand "^")
                        (("2" (expand "expt") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((root_degree def-decl "{m |
   m <= n AND
    (a(n) /= 0 IMPLIES
      ((EXISTS (b: [nat -> real]):
          (FORALL (x):
             polynomial(a, n)(x) = (x - y) ^ m * polynomial(b, n - m)(x))
           AND polynomial(b, n - m)(y) /= 0 AND b(n - m) /= 0)
        AND
        (polynomial(a, n)(y) = 0 IMPLIES m > 0) AND
         ((n > 0 AND m > 0) IMPLIES
           (EXISTS (q: [nat -> real]):
              (FORALL (x):
                 polynomial(poly_deriv(a), n - 1)(x) =
                  (x - y) ^ (m - 1) * polynomial(q, n - m)(x))
               AND polynomial(q, n - m)(y) /= 0))))}"
     more_polynomial_props nil)
    (poly_deriv const-decl "real" polynomials nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (root_degree_max_linear_div_power_TCC1 0
  (root_degree_max_linear_div_power_TCC1-1 nil 3616865421
   ("" (skeep)
    (("" (lemma " root_degree_pos")
      (("" (inst?) (("" (ground) nil nil)) nil)) nil))
    nil)
   ((root_degree_pos formula-decl nil more_polynomial_props nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (root_degree_max_linear_div_power subtype
    "more_polynomial_props.root_degree(more_polynomial_props.a, more_polynomial_props.n)(more_polynomial_props.y)"
    "posnat")))
 (root_degree_max_linear_div_power 0
  (root_degree_max_linear_div_power-1 nil 3616865427
   ("" (skeep)
    (("" (lemma "root_degree_pos")
      (("" (inst?)
        (("" (assert)
          ((""
            (case "NOT (polynomial(a, n)(y) = 0 AND root_degree(a, n)(y) > 0)")
            (("1" (ground) nil nil)
             ("2" (hide (-2 -3))
              (("2" (flatten)
                (("2" (name "mm" "root_degree(a,n)(y)")
                  (("2" (replace -1)
                    (("2" (expand "max_linear_div_power?")
                      (("2" (assert)
                        (("2" (typepred "mm")
                          (("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (skeep)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst + "b" "q")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -2)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((root_degree_pos formula-decl nil more_polynomial_props nil)
    (max_linear_div_power? const-decl "bool" more_polynomial_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (poly_deriv const-decl "real" polynomials nil)
    (root_degree def-decl "{m |
   m <= n AND
    (a(n) /= 0 IMPLIES
      ((EXISTS (b: [nat -> real]):
          (FORALL (x):
             polynomial(a, n)(x) = (x - y) ^ m * polynomial(b, n - m)(x))
           AND polynomial(b, n - m)(y) /= 0 AND b(n - m) /= 0)
        AND
        (polynomial(a, n)(y) = 0 IMPLIES m > 0) AND
         ((n > 0 AND m > 0) IMPLIES
           (EXISTS (q: [nat -> real]):
              (FORALL (x):
                 polynomial(poly_deriv(a), n - 1)(x) =
                  (x - y) ^ (m - 1) * polynomial(q, n - m)(x))
               AND polynomial(q, n - m)(y) /= 0))))}"
     more_polynomial_props nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (root_degree_unique 0
  (root_degree_unique-1 nil 3616865346
   ("" (skeep)
    (("" (lemma "root_degree_max_linear_div_power")
      (("" (inst?)
        (("" (assert)
          ((""
            (case "NOT (polynomial(a, n)(y) = 0 OR root_degree(a, n)(y) > 0)")
            (("1" (hide -1)
              (("1" (flatten)
                (("1" (expand "root_degree" 4)
                  (("1" (assert)
                    (("1" (skeep)
                      (("1" (inst - "y") (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replace -1)
              (("2" (lemma "root_degree_pos")
                (("2" (inst?)
                  (("2" (assert)
                    (("2"
                      (case "NOT  (polynomial(a, n)(y) = 0 AND root_degree(a, n)(y) > 0)")
                      (("1" (ground) nil nil)
                       ("2" (hide (-2 -3))
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (lemma "max_linear_div_power_unique")
                              (("2"
                                (inst
                                 -
                                 "a"
                                 "n"
                                 "y"
                                 "m"
                                 "root_degree(a,n)(y)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "max_linear_div_power_rew2")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst + "b" "n-m")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst - "y")
                                      (("2"
                                        (expand "^" -5)
                                        (("2"
                                          (expand "expt")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((root_degree_max_linear_div_power formula-decl nil
     more_polynomial_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_linear_div_power_unique formula-decl nil more_polynomial_props
     nil)
    (max_linear_div_power_rew2 formula-decl nil more_polynomial_props
     nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (m skolem-const-decl "nat" more_polynomial_props nil)
    (root_degree_pos formula-decl nil more_polynomial_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sigma def-decl "real" sigma nil)
    (expt def-decl "real" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (poly_deriv const-decl "real" polynomials nil)
    (root_degree def-decl "{m |
   m <= n AND
    (a(n) /= 0 IMPLIES
      ((EXISTS (b: [nat -> real]):
          (FORALL (x):
             polynomial(a, n)(x) = (x - y) ^ m * polynomial(b, n - m)(x))
           AND polynomial(b, n - m)(y) /= 0 AND b(n - m) /= 0)
        AND
        (polynomial(a, n)(y) = 0 IMPLIES m > 0) AND
         ((n > 0 AND m > 0) IMPLIES
           (EXISTS (q: [nat -> real]):
              (FORALL (x):
                 polynomial(poly_deriv(a), n - 1)(x) =
                  (x - y) ^ (m - 1) * polynomial(q, n - m)(x))
               AND polynomial(q, n - m)(y) /= 0))))}"
     more_polynomial_props nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (root_degree_odd 0
  (root_degree_odd-1 nil 3616924318
   ("" (skeep)
    (("" (ground)
      (("1" (lemma "max_linear_div_power_sign_change")
        (("1" (inst - "a" "n" "x" "z" "y" "root_degree(a,n)(z)")
          (("1" (assert)
            (("1" (splash +)
              (("1" (lemma "root_degree_max_linear_div_power")
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (hide-all-but (-4 2))
                        (("1" (grind :exclude "root_degree") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "only_root_between?")
                (("2" (ground)
                  (("2" (skeep)
                    (("2" (inst - "r") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (assert)
                (("3" (expand "only_root_between?")
                  (("3" (propax) nil nil)) nil))
                nil)
               ("4" (expand "only_root_between?")
                (("4" (ground) nil nil)) nil))
              nil))
            nil)
           ("2" (hide-all-but (-1 1))
            (("2" (grind :exclude "root_degree") nil nil)) nil))
          nil))
        nil)
       ("2" (lemma "max_linear_div_power_sign_change")
        (("2" (inst - "a" "n" "x" "z" "y" "root_degree(a,n)(z)")
          (("1" (assert)
            (("1" (splash +)
              (("1" (lemma "root_degree_max_linear_div_power")
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (expand "sign_ext")
                        (("1" (lift-if)
                          (("1" (lift-if)
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (lemma
                                           "poly_intermediate_value_inc")
                                          (("1"
                                            (inst
                                             -
                                             "a"
                                             "0"
                                             "n"
                                             "x"
                                             "y")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst - "cc!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma
                                           "poly_intermediate_value_dec")
                                          (("2"
                                            (inst
                                             -
                                             "a"
                                             "0"
                                             "n"
                                             "x"
                                             "y")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst - "cc!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (inst-cp - "y")
                                          (("3"
                                            (inst - "x")
                                            (("3" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "only_root_between?")
                (("2" (skeep)
                  (("2" (assert)
                    (("2" (inst - "r") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "only_root_between?")
                (("3" (assert) nil nil)) nil)
               ("4" (expand "only_root_between?")
                (("4" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (copy -2)
            (("2" (expand "only_root_between?" -1)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (expand "sign_ext")
                    (("2" (lift-if)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (lift-if)
                                (("2"
                                  (assert)
                                  (("2"
                                    (ground)
                                    (("1"
                                      (lemma
                                       "poly_intermediate_value_inc")
                                      (("1"
                                        (inst - "a" "0" "n" "x" "y")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst - "cc!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (lemma
                                                     "root_degree_pos")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "poly_intermediate_value_dec")
                                      (("2"
                                        (inst - "a" "0" "n" "x" "y")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst - "cc!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "root_degree_pos")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (inst-cp - "y")
                                      (("3"
                                        (inst - "x")
                                        (("3" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (z skolem-const-decl "real" more_polynomial_props nil)
    (n skolem-const-decl "nat" more_polynomial_props nil)
    (a skolem-const-decl "sequence[real]" more_polynomial_props nil)
    (root_degree def-decl "{m |
   m <= n AND
    (a(n) /= 0 IMPLIES
      ((EXISTS (b: [nat -> real]):
          (FORALL (x):
             polynomial(a, n)(x) = (x - y) ^ m * polynomial(b, n - m)(x))
           AND polynomial(b, n - m)(y) /= 0 AND b(n - m) /= 0)
        AND
        (polynomial(a, n)(y) = 0 IMPLIES m > 0) AND
         ((n > 0 AND m > 0) IMPLIES
           (EXISTS (q: [nat -> real]):
              (FORALL (x):
                 polynomial(poly_deriv(a), n - 1)(x) =
                  (x - y) ^ (m - 1) * polynomial(q, n - m)(x))
               AND polynomial(q, n - m)(y) /= 0))))}"
     more_polynomial_props nil)
    (poly_deriv const-decl "real" polynomials nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (< const-decl "bool" reals nil)
    (max_linear_div_power? const-decl "bool" more_polynomial_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (odd? const-decl "bool" integers nil)
    (root_degree_max_linear_div_power formula-decl nil
     more_polynomial_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (only_root_between? const-decl "bool" more_polynomial_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max_linear_div_power_sign_change formula-decl nil
     more_polynomial_props nil)
    (poly_intermediate_value_dec formula-decl nil polynomials nil)
    (poly_intermediate_value_inc formula-decl nil polynomials nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sign_ext const-decl
     "{sig: real | (sig = -1 OR sig = 1 OR sig = 0) AND sig * x = abs(x)}"
     sign nil)
    (root_degree_pos formula-decl nil more_polynomial_props nil))
   shostak))
 (root_degree_even 0
  (root_degree_even-1 nil 3616925003
   ("" (skeep)
    (("" (ground)
      (("1" (lemma "max_linear_div_power_sign_change")
        (("1" (lemma "root_degree_pos")
          (("1" (inst - "a" "n" "z")
            (("1" (assert)
              (("1" (case "root_degree(a,n)(z)=0")
                (("1" (assert)
                  (("1" (hide -2)
                    (("1" (expand "sign_ext")
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (assert)
                              (("1"
                                (copy -3)
                                (("1"
                                  (expand "only_root_between?" -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst-cp - "x")
                                      (("1"
                                        (inst-cp - "y")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (lemma
                                                     "poly_intermediate_value_inc")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "a"
                                                       "0"
                                                       "n"
                                                       "x"
                                                       "y")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "cc!1")
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "poly_intermediate_value_dec")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "a"
                                                       "0"
                                                       "n"
                                                       "x"
                                                       "y")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "cc!1")
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (copy -4)
                    (("2" (expand "only_root_between?" -1)
                      (("2" (flatten)
                        (("2" (inst-cp - "x")
                          (("2" (inst-cp - "y")
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (inst
                                   -
                                   "a"
                                   "n"
                                   "x"
                                   "z"
                                   "y"
                                   "root_degree(a,n)(z)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split +)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst - "r")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "root_degree_max_linear_div_power")
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (copy -2)
        (("2" (expand "only_root_between?" -1)
          (("2" (flatten)
            (("2" (inst-cp - "x")
              (("2" (inst-cp - "y")
                (("2" (assert)
                  (("2" (flatten)
                    (("2" (lemma "max_linear_div_power_sign_change")
                      (("2" (case "root_degree(a,n)(z)=0")
                        (("1" (hide-all-but (-1 3))
                          (("1" (grind :exclude "root_degree") nil
                            nil))
                          nil)
                         ("2" (lemma "root_degree_pos")
                          (("2" (inst - "a" "n" "z")
                            (("2" (assert)
                              (("2"
                                (inst
                                 -
                                 "a"
                                 "n"
                                 "x"
                                 "z"
                                 "y"
                                 "root_degree(a,n)(z)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (split)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst - "r")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "root_degree_max_linear_div_power")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((root_degree_pos formula-decl nil more_polynomial_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (root_degree_max_linear_div_power formula-decl nil
     more_polynomial_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sign_ext const-decl
     "{sig: real | (sig = -1 OR sig = 1 OR sig = 0) AND sig * x = abs(x)}"
     sign nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (only_root_between? const-decl "bool" more_polynomial_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (poly_intermediate_value_inc formula-decl nil polynomials nil)
    (poly_intermediate_value_dec formula-decl nil polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (poly_deriv const-decl "real" polynomials nil)
    (root_degree def-decl "{m |
   m <= n AND
    (a(n) /= 0 IMPLIES
      ((EXISTS (b: [nat -> real]):
          (FORALL (x):
             polynomial(a, n)(x) = (x - y) ^ m * polynomial(b, n - m)(x))
           AND polynomial(b, n - m)(y) /= 0 AND b(n - m) /= 0)
        AND
        (polynomial(a, n)(y) = 0 IMPLIES m > 0) AND
         ((n > 0 AND m > 0) IMPLIES
           (EXISTS (q: [nat -> real]):
              (FORALL (x):
                 polynomial(poly_deriv(a), n - 1)(x) =
                  (x - y) ^ (m - 1) * polynomial(q, n - m)(x))
               AND polynomial(q, n - m)(y) /= 0))))}"
     more_polynomial_props nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (max_linear_div_power_sign_change formula-decl nil
     more_polynomial_props nil))
   shostak))
 (root_degree_deriv_TCC1 0
  (root_degree_deriv_TCC1-1 nil 3616927917 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (root_degree_deriv subtype
    "(number_fields.-)(more_polynomial_props.n, 1)" "nat")))
 (root_degree_deriv 0
  (root_degree_deriv-1 nil 3616927918
   ("" (skeep)
    (("" (typepred "root_degree(a,n)(y)")
      (("" (assert)
        (("" (flatten)
          (("" (assert)
            (("" (skeep -4)
              (("" (lemma "root_degree_unique")
                ((""
                  (inst - "poly_deriv(a)" "root_degree(a,n)(y)-1" "n-1"
                   "y")
                  (("" (assert)
                    (("" (split 1)
                      (("1" (expand "poly_deriv" 1)
                        (("1" (assert) nil nil)) nil)
                       ("2" (inst + "q") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((root_degree def-decl "{m |
   m <= n AND
    (a(n) /= 0 IMPLIES
      ((EXISTS (b: [nat -> real]):
          (FORALL (x):
             polynomial(a, n)(x) = (x - y) ^ m * polynomial(b, n - m)(x))
           AND polynomial(b, n - m)(y) /= 0 AND b(n - m) /= 0)
        AND
        (polynomial(a, n)(y) = 0 IMPLIES m > 0) AND
         ((n > 0 AND m > 0) IMPLIES
           (EXISTS (q: [nat -> real]):
              (FORALL (x):
                 polynomial(poly_deriv(a), n - 1)(x) =
                  (x - y) ^ (m - 1) * polynomial(q, n - m)(x))
               AND polynomial(q, n - m)(y) /= 0))))}"
     more_polynomial_props nil)
    (poly_deriv const-decl "real" polynomials nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (root_degree_unique formula-decl nil more_polynomial_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (root_degree_mult 0
  (root_degree_mult-1 nil 3616929132
   ("" (skeep)
    (("" (name "pp" "polynomial_prod(a,n,b,m)")
      (("" (replace -1)
        (("" (lemma "root_degree_unique")
          ((""
            (inst - "pp" "root_degree(a, n)(y) + root_degree(b, m)(y)"
             "n+m" "y")
            (("" (assert)
              (("" (case "pp(m+n)=0")
                (("1" (hide 1)
                  (("1" (expand "pp" -1)
                    (("1" (expand "polynomial_prod" -1)
                      (("1" (expand "max")
                        (("1" (expand "sigma")
                          (("1" (expand "sigma")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (typepred "root_degree(a,n)(y)")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (hide -4)
                          (("2" (skolem -2 ("ba"))
                            (("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (typepred "root_degree(b,m)(y)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (hide -4)
                                        (("2"
                                          (skolem -2 ("bb"))
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (name
                                                 "BZ"
                                                 "polynomial_prod(ba,n-root_degree(a,n)(y),bb,m-root_degree(b,m)(y))")
                                                (("2"
                                                  (inst + "BZ")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "polynomial_prod_def")
                                                      (("2"
                                                        (inst-cp
                                                         -
                                                         "a"
                                                         "b"
                                                         "m"
                                                         "n"
                                                         _)
                                                        (("2"
                                                          (inst
                                                           -
                                                           "ba"
                                                           "bb"
                                                           "m-root_degree(b,m)(y)"
                                                           "n-root_degree(a,n)(y)"
                                                           _)
                                                          (("2"
                                                            (replace
                                                             -3)
                                                            (("2"
                                                              (replace
                                                               -10)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split
                                                                   +)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "x")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "x")
                                                                        (("1"
                                                                          (lemma
                                                                           "expt_plus")
                                                                          (("1"
                                                                            (case
                                                                             "NOT FORALL (i, j: nat, nx: real): nx ^ (i + j) = nx ^ i * nx ^ j")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("1"
                                                                                (skolem
                                                                                 1
                                                                                 (_
                                                                                  _
                                                                                  "nx"))
                                                                                (("1"
                                                                                  (case
                                                                                   "nx/=0")
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "i"
                                                                                       "j"
                                                                                       "nx")
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (case
                                                                                             "i = 0 OR j = 0")
                                                                                            (("1"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               -2)
                                                                              (("2"
                                                                                (rewrite
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -2
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -3
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "x")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "x")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     -
                                                                     "y")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomial_prod const-decl "real" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (root_degree_unique formula-decl nil more_polynomial_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (polynomial_prod_def formula-decl nil polynomials nil)
    (expt_plus formula-decl nil exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nx skolem-const-decl "real" more_polynomial_props nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma def-decl "real" sigma nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (pp skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (root_degree def-decl "{m |
   m <= n AND
    (a(n) /= 0 IMPLIES
      ((EXISTS (b: [nat -> real]):
          (FORALL (x):
             polynomial(a, n)(x) = (x - y) ^ m * polynomial(b, n - m)(x))
           AND polynomial(b, n - m)(y) /= 0 AND b(n - m) /= 0)
        AND
        (polynomial(a, n)(y) = 0 IMPLIES m > 0) AND
         ((n > 0 AND m > 0) IMPLIES
           (EXISTS (q: [nat -> real]):
              (FORALL (x):
                 polynomial(poly_deriv(a), n - 1)(x) =
                  (x - y) ^ (m - 1) * polynomial(q, n - m)(x))
               AND polynomial(q, n - m)(y) /= 0))))}"
     more_polynomial_props nil)
    (poly_deriv const-decl "real" polynomials nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (root_degree_scal 0
  (root_degree_scal-1 nil 3617011206
   ("" (skeep)
    (("" (lemma "root_degree_unique")
      (("" (inst - "x*a" "root_degree(a,n)(y)" "n" "y")
        (("" (assert)
          (("" (split 1)
            (("1" (expand "*") (("1" (assert) nil nil)) nil)
             ("2" (typepred "root_degree(a,n)(y)")
              (("2" (assert)
                (("2" (flatten)
                  (("2" (skeep -)
                    (("2" (inst + "x*b")
                      (("2" (assert)
                        (("2" (split +)
                          (("1" (skosimp*)
                            (("1" (inst - "x!1")
                              (("1"
                                (rewrite "scal_polynomial2")
                                (("1"
                                  (rewrite "scal_polynomial2")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "scal_polynomial2")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((root_degree_unique formula-decl nil more_polynomial_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (scal_polynomial2 formula-decl nil polynomials nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (root_degree def-decl "{m |
   m <= n AND
    (a(n) /= 0 IMPLIES
      ((EXISTS (b: [nat -> real]):
          (FORALL (x):
             polynomial(a, n)(x) = (x - y) ^ m * polynomial(b, n - m)(x))
           AND polynomial(b, n - m)(y) /= 0 AND b(n - m) /= 0)
        AND
        (polynomial(a, n)(y) = 0 IMPLIES m > 0) AND
         ((n > 0 AND m > 0) IMPLIES
           (EXISTS (q: [nat -> real]):
              (FORALL (x):
                 polynomial(poly_deriv(a), n - 1)(x) =
                  (x - y) ^ (m - 1) * polynomial(q, n - m)(x))
               AND polynomial(q, n - m)(y) /= 0))))}"
     more_polynomial_props nil)
    (poly_deriv const-decl "real" polynomials nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[T -> real]" real_fun_ops nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (root_degree_power_linear 0
  (root_degree_power_linear-1 nil 3617017768
   ("" (skeep)
    (("" (lemma "root_degree_unique")
      (("" (inst - "power_linear(-y,1,m)" "m" "m" "y")
        (("" (assert)
          (("" (split 1)
            (("1" (expand "power_linear")
              (("1" (lemma "expt_1n_aux")
                (("1" (inst - "m")
                  (("1" (expand "^" -2)
                    (("1" (replaces -1)
                      (("1" (expand "expt")
                        (("1" (expand "C" -1) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst + "LAMBDA (i:nat): 1")
              (("2" (expand "polynomial" + 2)
                (("2" (expand "polynomial" + 2)
                  (("2" (expand "sigma")
                    (("2" (expand "sigma")
                      (("2" (lemma "power_linear_polynomial")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (skeep)
                              (("2"
                                (inst - "x")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((root_degree_unique formula-decl nil more_polynomial_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (power_linear_polynomial formula-decl nil polynomials nil)
    (sigma def-decl "real" sigma nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (C const-decl "posnat" binomial nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (factorial_0 formula-decl nil factorial "ints/")
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (expt_1n_aux formula-decl nil exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (power_linear const-decl "real" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (root_degree_eq 0
  (root_degree_eq-1 nil 3617018052
   ("" (skeep)
    (("" (lemma "root_degree_unique")
      (("" (inst - "a" "root_degree(b,n)(y)" "n" "y")
        (("" (assert)
          (("" (lemma "polynomial_eq_coeff")
            (("" (inst - "a" "b" "n")
              (("" (replace -2)
                (("" (assert)
                  (("" (typepred "root_degree(b,n)(y)")
                    (("" (assert)
                      (("" (split -2)
                        (("1" (flatten)
                          (("1" (skosimp*)
                            (("1" (inst + "b!1")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (inst - "n") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((root_degree_unique formula-decl nil more_polynomial_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (polynomial_eq_coeff formula-decl nil polynomials nil)
    (root_degree def-decl "{m |
   m <= n AND
    (a(n) /= 0 IMPLIES
      ((EXISTS (b: [nat -> real]):
          (FORALL (x):
             polynomial(a, n)(x) = (x - y) ^ m * polynomial(b, n - m)(x))
           AND polynomial(b, n - m)(y) /= 0 AND b(n - m) /= 0)
        AND
        (polynomial(a, n)(y) = 0 IMPLIES m > 0) AND
         ((n > 0 AND m > 0) IMPLIES
           (EXISTS (q: [nat -> real]):
              (FORALL (x):
                 polynomial(poly_deriv(a), n - 1)(x) =
                  (x - y) ^ (m - 1) * polynomial(q, n - m)(x))
               AND polynomial(q, n - m)(y) /= 0))))}"
     more_polynomial_props nil)
    (poly_deriv const-decl "real" polynomials nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (root_degree_lower_bound_TCC1 0
  (root_degree_lower_bound_TCC1-1 nil 3617015298
   ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil))
   nil
   (root_degree_lower_bound subtype "more_polynomial_props.m"
    "{i: integers.int | booleans.OR(((number_fields.-)(more_polynomial_props.x, more_polynomial_props.y)) /= 0, reals.>=(i, 0))}")))
 (root_degree_lower_bound 0
  (root_degree_lower_bound-1 nil 3617015299
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "power_linear_polynomial")
        (("" (inst - "-y" "m" "1" _ "m")
          (("" (assert)
            ((""
              (name "ppl"
                    "polynomial_prod(power_linear(-y,1,m),m,b,k)")
              (("" (case "NOT polynomial(a,n)=polynomial(ppl,m+k)")
                (("1" (decompose-equality 1)
                  (("1" (lemma "polynomial_prod_def")
                    (("1" (inst?)
                      (("1" (inst - "x!1")
                        (("1" (replace -2)
                          (("1" (inst - "x!1")
                            (("1" (replace -3 :dir rl)
                              (("1"
                                (assert)
                                (("1"
                                  (inst - "x!1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "NOT m+k = n")
                  (("1"
                    (case "FORALL (ab,ba:[nat->real],ak,bk:nat): ak>=bk AND ab(ak)/=0 AND ba(bk)/=0 AND polynomial(ab,ak)=polynomial(ba,bk) IMPLIES ak=bk")
                    (("1" (inst-cp - "a" "ppl" "n" "m+k")
                      (("1" (inst - "ppl" "a" "m+k" "n")
                        (("1" (case "ppl(m+k)/=0")
                          (("1" (ground) nil nil)
                           ("2" (hide (-1 -2))
                            (("2" (expand "ppl" 1)
                              (("2"
                                (expand "polynomial_prod" -1)
                                (("2"
                                  (expand "max")
                                  (("2"
                                    (expand "sigma")
                                    (("2"
                                      (expand "sigma")
                                      (("2"
                                        (expand "power_linear" -1)
                                        (("2"
                                          (expand "^" -1)
                                          (("2"
                                            (rewrite "expt_1n_aux")
                                            (("2"
                                              (expand "expt")
                                              (("2"
                                                (expand "C" -1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (skeep)
                        (("2"
                          (name "newb"
                                "LAMBDA (i:nat): IF i>bk THEN 0 ELSE ba(i) ENDIF")
                          (("2"
                            (case "NOT polynomial(ba,bk)=polynomial(newb,ak)")
                            (("1" (decompose-equality 1)
                              (("1"
                                (expand "polynomial" 1 2)
                                (("1"
                                  (lemma "sigma_split")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst - "bk")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (invoke
                                             (case "%1 = 0")
                                             (! 1 2 2))
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (expand "polynomial" 1)
                                                (("1"
                                                  (rewrite "sigma_eq")
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (expand "newb" 1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (rewrite
                                                 "sigma_restrict_eq_0")
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand "newb" 1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2"
                                (lemma "polynomial_eq_coeff")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst - "ak")
                                      (("2"
                                        (expand "newb" -1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (replace -1)
                      (("2" (lemma "root_degree_eq")
                        (("2" (inst - "a" "ppl" "n" "y")
                          (("2" (assert)
                            (("2" (split -1)
                              (("1"
                                (replace -1 +)
                                (("1"
                                  (expand "ppl" +)
                                  (("1"
                                    (lemma "root_degree_mult")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (inst - "y")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "root_degree_power_linear")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "power_linear" 1)
                                              (("2"
                                                (expand "^" -1)
                                                (("2"
                                                  (rewrite
                                                   "expt_1n_aux"
                                                   -1)
                                                  (("2"
                                                    (expand "expt" -1)
                                                    (("2"
                                                      (expand "C")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "polynomial_eq_coeff")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (power_linear const-decl "real" polynomials nil)
    (polynomial_prod const-decl "real" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (> const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (polynomial_eq_coeff formula-decl nil polynomials nil)
    (sigma_split formula-decl nil sigma nil)
    (TRUE const-decl "bool" booleans nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (sigma_eq formula-decl nil sigma nil)
    (newb skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ppl skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (factorial_0 formula-decl nil factorial "ints/")
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (C const-decl "posnat" binomial nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (expt_1n_aux formula-decl nil exponentiation nil)
    (sigma def-decl "real" sigma nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (root_degree_power_linear formula-decl nil more_polynomial_props
     nil)
    (root_degree_mult formula-decl nil more_polynomial_props nil)
    (root_degree_eq formula-decl nil more_polynomial_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (polynomial_prod_def formula-decl nil polynomials nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (power_linear_polynomial formula-decl nil polynomials nil))
   shostak))
 (root_degree_division 0
  (root_degree_division-2 nil 3617031603
   ("" (skeep)
    (("" (label "hp" 1)
      (("" (copy "hp")
        (("" (hide "hp")
          (("" (assert)
            (("" (name "ar" "root_degree(a,n)(y)")
              (("" (replaces -1)
                (("" (name "br" "root_degree(b,m)(y)")
                  (("" (replaces -1)
                    (("" (name "hr" "root_degree(h,p)(y)")
                      (("" (replaces -1)
                        (("" (lemma "root_degree_lower_bound")
                          (("" (inst - "h" "min(ar,br)" "p" "y" _)
                            ((""
                              (case "(EXISTS (bb: [nat -> real],kz:nat):
                                                                                                           bb(kz) /= 0 AND
                                                                                                            (FORALL (x):
                                                                                                               polynomial(h, p)(x) =
                                                                                                                (x - y) ^ min(ar,br) * polynomial(bb, kz)(x)))")
                              (("1"
                                (case "NOT hr>=min(ar,br)")
                                (("1"
                                  (hide 4)
                                  (("1"
                                    (skeep -)
                                    (("1"
                                      (inst -2 "kz")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (lemma "hr")
                                            (("1" (ground) nil nil))
                                            nil)
                                           ("2"
                                            (inst + "bb")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "min")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case "NOT hr > ar")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide -2)
                                            (("2"
                                              (hide 3)
                                              (("2"
                                                (lemma
                                                 "root_degree_lower_bound")
                                                (("2"
                                                  (case
                                                   "EXISTS (bb: [nat -> real],kzz:nat):
                                                                                                      bb(kzz) /= 0 AND
                                                                                                       (FORALL (x):
                                                                                                          polynomial(a, n)(x) =
                                                                                                           (x - y) ^ min(hr, br) * polynomial(bb, kzz)(x))")
                                                  (("1"
                                                    (skeep -)
                                                    (("1"
                                                      (inst
                                                       -
                                                       "a"
                                                       "min(hr,br)"
                                                       "n"
                                                       "y"
                                                       "kzz")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "ar")
                                                              (("1"
                                                                (expand
                                                                 "min")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             +
                                                             "bb")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1)
                                                    (("2"
                                                      (case
                                                       "EXISTS (bbr: [nat -> real],kzzr:nat):
                                                                          (FORALL (x):
                                                                              polynomial(a, n)(x) =
                                                                               (x - y) ^ min(hr, br) * polynomial(bbr, kzzr)(x))")
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 1 3))
                                                        (("1"
                                                          (skolem
                                                           -
                                                           ("bbb"
                                                            "kzzz"))
                                                          (("1"
                                                            (case
                                                             "EXISTS (kp: nat): kp<=kzzz AND bbb(kp)/=0 AND (FORALL (i:nat): i>kp AND i<=kzzz IMPLIES bbb(i)=0)")
                                                            (("1"
                                                              (skeep -)
                                                              (("1"
                                                                (case
                                                                 "polynomial(bbb,kp) = polynomial(bbb,kzzz)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "bbb"
                                                                     "kp")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -2
                                                                    1))
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "FORALL (zp:nat): kp+zp<=kzzz IMPLIES polynomial(bbb,kp+zp)=polynomial(bbb,kp)")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "kzzz-kp")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (induct
                                                                           "zp")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 +)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "polynomial_rec")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "1+j+kp")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (case
                                                                 "FORALL (kp:nat): kp<=kzzz IMPLIES bbb(kp)=0")
                                                                (("1"
                                                                  (lemma
                                                                   "poly_eq_0_le_degree")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "a"
                                                                     "n")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "n")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (inst
                                                                                 -2
                                                                                 "x!1")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "poly_eq_0_le_degree")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "bbb"
                                                                                     "kzzz")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("2"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "x!1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (-1
                                                                    3))
                                                                  (("2"
                                                                    (case
                                                                     " FORALL (kp: nat): kp <= kzzz IMPLIES FORALL (i:nat): i>kzzz-kp AND i<=kzzz IMPLIES bbb(i) = 0")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "kzzz")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "kp = 0")
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "0")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -
                                                                               "kp")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (induct
                                                                       "kp")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (inst
                                                                               +
                                                                               "i!1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "i")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (typepred
                                                               "hr")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     -3)
                                                                    (("2"
                                                                      (skolem
                                                                       -
                                                                       "bh")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "br")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (hide
                                                                                   -3)
                                                                                  (("2"
                                                                                    (skolem
                                                                                     -
                                                                                     "bb")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (name
                                                                                         "mn"
                                                                                         "min(hr,br)")
                                                                                        (("2"
                                                                                          (name
                                                                                           "pz5"
                                                                                           "polynomial_prod(power_linear(-y,1,hr-mn),hr-mn,bh,p-hr)")
                                                                                          (("1"
                                                                                            (name
                                                                                             "pz9"
                                                                                             "polynomial_prod(power_linear(-y,1,br-mn),br-mn,bb,m-br)")
                                                                                            (("1"
                                                                                              (name
                                                                                               "D10"
                                                                                               "polynomial_prod(g,k,pz9,m-mn)")
                                                                                              (("1"
                                                                                                (name
                                                                                                 "F8"
                                                                                                 "pz5 + D10")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "F8"
                                                                                                   "max(p-mn,m-mn+k)")
                                                                                                  (("1"
                                                                                                    (skeep)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "F8"
                                                                                                         +)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "sum_polynomial")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "pz5"
                                                                                                             "D10"
                                                                                                             "m-mn+k"
                                                                                                             "p-mn")
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -1
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "+")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "D10"
                                                                                                                     +)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "polynomial_prod_def")
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (replaces
                                                                                                                             -1
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "pz9"
                                                                                                                               +)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "polynomial_prod_def")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "power_linear(-y, 1, br - mn)"
                                                                                                                                   "bb"
                                                                                                                                   "m-br"
                                                                                                                                   "br-mn"
                                                                                                                                   "x")
                                                                                                                                  (("1"
                                                                                                                                    (replaces
                                                                                                                                     -1
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "pz5"
                                                                                                                                       +)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "polynomial_prod_def")
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "power_linear(-y, 1, hr - mn)"
                                                                                                                                           "bh"
                                                                                                                                           "p-hr"
                                                                                                                                           "hr-mn"
                                                                                                                                           "x")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (replaces
                                                                                                                                               -1
                                                                                                                                               :dir
                                                                                                                                               rl)
                                                                                                                                              (("1"
                                                                                                                                                (rewrite
                                                                                                                                                 "power_linear_polynomial"
                                                                                                                                                 :dir
                                                                                                                                                 rl)
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   "power_linear_polynomial"
                                                                                                                                                   :dir
                                                                                                                                                   rl)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (case
                                                                                                                                                       "NOT -y + 1*x = x-y")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (replace
                                                                                                                                                             -5)
                                                                                                                                                            (("2"
                                                                                                                                                              (lemma
                                                                                                                                                               "expt_plus")
                                                                                                                                                              (("2"
                                                                                                                                                                (case
                                                                                                                                                                 "FORALL (i, j: nat, nx: real): nx ^ (i + j) = nx ^ i * nx ^ j")
                                                                                                                                                                (("1"
                                                                                                                                                                  (hide
                                                                                                                                                                   -2)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst-cp
                                                                                                                                                                     -
                                                                                                                                                                     "hr-mn"
                                                                                                                                                                     "mn"
                                                                                                                                                                     "x-y")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst
                                                                                                                                                                       -
                                                                                                                                                                       "br-mn"
                                                                                                                                                                       "mn"
                                                                                                                                                                       "x-y")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst
                                                                                                                                                                           -
                                                                                                                                                                           "x")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst
                                                                                                                                                                             -
                                                                                                                                                                             "x")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst
                                                                                                                                                                               -
                                                                                                                                                                               "x")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   (-1
                                                                                                                                                                    1))
                                                                                                                                                                  (("2"
                                                                                                                                                                    (induct
                                                                                                                                                                     "i")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (hide
                                                                                                                                                                       -)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         -
                                                                                                                                                                         "1+j!2"
                                                                                                                                                                         "nx!1")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (replaces
                                                                                                                                                                             -1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "^"
                                                                                                                                                                               +)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "expt"
                                                                                                                                                                                 +
                                                                                                                                                                                 2)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "expt"
                                                                                                                                                                                   +
                                                                                                                                                                                   3)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "pz5"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "polynomial_prod"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "max"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "sigma"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (skosimp*)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "D10"
                                                                                                                   1)
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "polynomial_prod"
                                                                                                                     1)
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "max"
                                                                                                                       1)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "sigma"
                                                                                                                         1)
                                                                                                                        (("3"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skosimp*)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (name "mn" "min(ar,br)")
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (hide 5)
                                        (("2"
                                          (case
                                           "(EXISTS (bb: [nat -> real], kz: nat):
          (FORALL (x):
             polynomial(h, p)(x) = (x - y) ^ mn * polynomial(bb, kz)(x)))")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (case
                                               "EXISTS (kp:nat): bb(kp)/=0 AND kp<=kz AND FORALL (i:nat): i>kp AND i<=kz IMPLIES bb(i)=0")
                                              (("1"
                                                (skeep -)
                                                (("1"
                                                  (case
                                                   "polynomial(bb,kz) = polynomial(bb,kp)")
                                                  (("1"
                                                    (inst + "bb" "kp")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-1 -2 1))
                                                    (("2"
                                                      (case
                                                       "FORALL (i:nat): kp+i<=kz IMPLIES polynomial(bb,kp)=polynomial(bb,kp+i)")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "kz-kp")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (induct "i")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (decompose-equality
                                                               +)
                                                              (("2"
                                                                (decompose-equality
                                                                 -)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (lemma
                                                                     "polynomial_rec")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "bb"
                                                                       "1+j+kp"
                                                                       "x!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "1+j+kp")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "FORALL (kp:nat): kp<=kz IMPLIES FORALL (i:nat): i>=kz-kp AND i<=kz IMPLIES bb(i)=0")
                                                (("1"
                                                  (inst - "kz")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "poly_eq_0_le_degree")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "h"
                                                         "p")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (split -)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "p")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (inst
                                                                   -2
                                                                   "x!1")
                                                                  (("2"
                                                                    (lemma
                                                                     "poly_eq_0_le_degree")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "bb"
                                                                       "kz")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             -2)
                                                                            (("2"
                                                                              (split
                                                                               -)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (induct "kp")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (inst + "kz")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst + "i")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "i!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (typepred "ar")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide -4)
                                                    (("2"
                                                      (typepred "br")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide -5)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide -4)
                                                              (("2"
                                                                (skolem
                                                                 -
                                                                 "bb")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (skolem
                                                                       -
                                                                       "ba")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (name
                                                                               "pz5"
                                                                               "polynomial_prod(power_linear(-y,1,ar-mn),ar-mn,ba,n-ar)")
                                                                              (("2"
                                                                                (name
                                                                                 "pz9"
                                                                                 "polynomial_prod(power_linear(-y,1,br-mn),br-mn,bb,m-br)")
                                                                                (("2"
                                                                                  (name
                                                                                   "D10"
                                                                                   "polynomial_prod(g,k,pz9,m-mn)")
                                                                                  (("2"
                                                                                    (name
                                                                                     "F8"
                                                                                     "pz5 + (-D10)")
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "F8"
                                                                                       "max(n-mn,m-mn+k)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "F8"
                                                                                             +)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "sum_polynomial"
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "+")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "neg_polynomial")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "D10"
                                                                                                     "k-mn+m")
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "-"
                                                                                                         +)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "pz5"
                                                                                                           +)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "polynomial_prod_def")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "power_linear(-y, 1, ar - mn)"
                                                                                                               "ba"
                                                                                                               "n-ar"
                                                                                                               "ar-mn"
                                                                                                               "x")
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -1
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "power_linear_polynomial"
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "D10"
                                                                                                                       +)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "polynomial_prod_def")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "g"
                                                                                                                           "pz9"
                                                                                                                           "m-mn"
                                                                                                                           "k"
                                                                                                                           "x")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (replaces
                                                                                                                               -1
                                                                                                                               :dir
                                                                                                                               rl)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "pz9"
                                                                                                                                 +)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "-")
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "polynomial_prod_def")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "power_linear(-y, 1, br - mn)"
                                                                                                                                       "bb"
                                                                                                                                       "m-br"
                                                                                                                                       "br-mn"
                                                                                                                                       "x")
                                                                                                                                      (("1"
                                                                                                                                        (replaces
                                                                                                                                         -1
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (rewrite
                                                                                                                                           "power_linear_polynomial"
                                                                                                                                           :dir
                                                                                                                                           rl)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (lemma
                                                                                                                                               "expt_plus")
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "FORALL (i, j: nat, nx: real): nx ^ (i + j) = nx ^ i * nx ^ j")
                                                                                                                                                (("1"
                                                                                                                                                  (hide
                                                                                                                                                   -2)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst-cp
                                                                                                                                                     -
                                                                                                                                                     "mn"
                                                                                                                                                     "ar-mn"
                                                                                                                                                     "x-y")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -
                                                                                                                                                       "mn"
                                                                                                                                                       "br-mn"
                                                                                                                                                       "x-y")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -
                                                                                                                                                           "x")
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -
                                                                                                                                                             "x")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               -
                                                                                                                                                               "x")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   (-1
                                                                                                                                                    1))
                                                                                                                                                  (("2"
                                                                                                                                                    (hide
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (induct
                                                                                                                                                       "i")
                                                                                                                                                      (("1"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (skosimp*)
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -
                                                                                                                                                           "1+j!2"
                                                                                                                                                           "nx!1")
                                                                                                                                                          (("2"
                                                                                                                                                            (replaces
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "^")
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "expt"
                                                                                                                                                                 +
                                                                                                                                                                 2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "expt"
                                                                                                                                                                   +
                                                                                                                                                                   3)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "pz5"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "polynomial_prod"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "max"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "sigma"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (skosimp*)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "-"
                                                                                                   1)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "D10"
                                                                                                     1)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "polynomial_prod"
                                                                                                       1)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "max"
                                                                                                         1)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "sigma"
                                                                                                           1)
                                                                                                          (("3"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (skosimp*)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((root_degree def-decl "{m |
   m <= n AND
    (a(n) /= 0 IMPLIES
      ((EXISTS (b: [nat -> real]):
          (FORALL (x):
             polynomial(a, n)(x) = (x - y) ^ m * polynomial(b, n - m)(x))
           AND polynomial(b, n - m)(y) /= 0 AND b(n - m) /= 0)
        AND
        (polynomial(a, n)(y) = 0 IMPLIES m > 0) AND
         ((n > 0 AND m > 0) IMPLIES
           (EXISTS (q: [nat -> real]):
              (FORALL (x):
                 polynomial(poly_deriv(a), n - 1)(x) =
                  (x - y) ^ (m - 1) * polynomial(q, n - m)(x))
               AND polynomial(q, n - m)(y) /= 0))))}"
     more_polynomial_props nil)
    (poly_deriv const-decl "real" polynomials nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (root_degree_lower_bound formula-decl nil more_polynomial_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (ar skolem-const-decl "{m |
   m <= n AND
    (a(n) /= 0 IMPLIES
      ((EXISTS (b: [nat -> real]):
          (FORALL (x):
             polynomial(a, n)(x) = (x - y) ^ m * polynomial(b, n - m)(x))
           AND polynomial(b, n - m)(y) /= 0 AND b(n - m) /= 0)
        AND
        (polynomial(a, n)(y) = 0 IMPLIES m > 0) AND
         ((n > 0 AND m > 0) IMPLIES
           EXISTS (q: [nat -> real]):
             (FORALL (x):
                polynomial(poly_deriv(a), n - 1)(x) =
                 (x - y) ^ (m - 1) * polynomial(q, n - m)(x))
              AND polynomial(q, n - m)(y) /= 0)))}"
     more_polynomial_props nil)
    (poly_eq_0_le_degree formula-decl nil polynomials nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (polynomial_rec formula-decl nil polynomials nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (polynomial_prod const-decl "real" polynomials nil)
    (power_linear const-decl "real" polynomials nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (p skolem-const-decl "nat" more_polynomial_props nil)
    (h skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (y skolem-const-decl "real" more_polynomial_props nil)
    (m skolem-const-decl "nat" more_polynomial_props nil)
    (b skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (br skolem-const-decl "{m_1 |
   m_1 <= m AND
    (b(m) /= 0 IMPLIES
      ((EXISTS (b_1: [nat -> real]):
          (FORALL (x):
             polynomial(b, m)(x) =
              (x - y) ^ m_1 * polynomial(b_1, m - m_1)(x))
           AND polynomial(b_1, m - m_1)(y) /= 0 AND b_1(m - m_1) /= 0)
        AND
        (polynomial(b, m)(y) = 0 IMPLIES m_1 > 0) AND
         ((m > 0 AND m_1 > 0) IMPLIES
           EXISTS (q: [nat -> real]):
             (FORALL (x):
                polynomial(poly_deriv(b), m - 1)(x) =
                 (x - y) ^ (m_1 - 1) * polynomial(q, m - m_1)(x))
              AND polynomial(q, m - m_1)(y) /= 0)))}"
     more_polynomial_props nil)
    (mn skolem-const-decl "{k: nat | k <= hr AND k <= br}"
     more_polynomial_props nil)
    (k skolem-const-decl "nat" more_polynomial_props nil)
    (sum_polynomial formula-decl nil polynomials nil)
    (polynomial_prod_def formula-decl nil polynomials nil)
    (pz9 skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (pz5 skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (power_linear_polynomial formula-decl nil polynomials nil)
    (D10 skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (sigma def-decl "real" sigma nil)
    (F8 skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (+ const-decl "[T -> real]" real_fun_ops nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (hr skolem-const-decl "{m |
   m <= p AND
    (h(p) /= 0 IMPLIES
      ((EXISTS (b: [nat -> real]):
          (FORALL (x):
             polynomial(h, p)(x) = (x - y) ^ m * polynomial(b, p - m)(x))
           AND polynomial(b, p - m)(y) /= 0 AND b(p - m) /= 0)
        AND
        (polynomial(h, p)(y) = 0 IMPLIES m > 0) AND
         ((p > 0 AND m > 0) IMPLIES
           EXISTS (q: [nat -> real]):
             (FORALL (x):
                polynomial(poly_deriv(h), p - 1)(x) =
                 (x - y) ^ (m - 1) * polynomial(q, p - m)(x))
              AND polynomial(q, p - m)(y) /= 0)))}"
     more_polynomial_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (kp skolem-const-decl "nat" more_polynomial_props nil)
    (kz skolem-const-decl "nat" more_polynomial_props nil)
    (n skolem-const-decl "nat" more_polynomial_props nil)
    (a skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (mn skolem-const-decl "{k: nat | k <= ar AND k <= br}"
     more_polynomial_props nil)
    (neg_polynomial formula-decl nil polynomials nil)
    (pz5 skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (D10 skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (pz9 skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (F8 skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (TRUE const-decl "bool" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil)
  (root_degree_division-1 nil 3617015130
   ("" (skeep)
    (("" (label "hp" 1)
      (("" (copy "hp")
        (("" (hide "hp")
          (("" (assert)
            (("" (name "ar" "root_degree(a,n)(y)")
              (("" (replaces -1)
                (("" (name "br" "root_degree(b,m)(y)")
                  (("" (replaces -1)
                    (("" (name "hr" "root_degree(h,p)(y)")
                      (("" (replaces -1)
                        (("" (lemma "root_degree_lower_bound")
                          (("" (inst - "h" "min(ar,br)" "p" "y" _)
                            ((""
                              (case "(EXISTS (bb: [nat -> real],kz:nat):
                                                                                             bb(kz) /= 0 AND
                                                                                              (FORALL (x):
                                                                                                 polynomial(h, p)(x) =
                                                                                                  (x - y) ^ min(ar,br) * polynomial(bb, kz)(x)))")
                              (("1"
                                (case "NOT hr>=min(ar,br)")
                                (("1"
                                  (hide 4)
                                  (("1"
                                    (skeep -)
                                    (("1"
                                      (inst -2 "kz")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (lemma "hr")
                                            (("1" (ground) nil nil))
                                            nil)
                                           ("2"
                                            (inst + "bb")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "min")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case "NOT hr > ar")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide -2)
                                            (("2"
                                              (hide 3)
                                              (("2"
                                                (lemma
                                                 "root_degree_lower_bound")
                                                (("2"
                                                  (case
                                                   "EXISTS (bb: [nat -> real],kzz:nat):
                                                                            bb(kzz) /= 0 AND
                                                                             (FORALL (x):
                                                                                polynomial(a, n)(x) =
                                                                                 (x - y) ^ min(hr, br) * polynomial(bb, kzz)(x))")
                                                  (("1"
                                                    (skeep -)
                                                    (("1"
                                                      (inst
                                                       -
                                                       "a"
                                                       "min(hr,br)"
                                                       "n"
                                                       "y"
                                                       "kzz")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "ar")
                                                              (("1"
                                                                (expand
                                                                 "min")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             +
                                                             "bb")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1)
                                                    (("2"
                                                      (case
                                                       "EXISTS (bbr: [nat -> real],kzzr:nat):
                                            (FORALL (x):
                                                polynomial(a, n)(x) =
                                                 (x - y) ^ min(hr, br) * polynomial(bbr, kzzr)(x))")
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 1 3))
                                                        (("1"
                                                          (skolem
                                                           -
                                                           ("bbb"
                                                            "kzzz"))
                                                          (("1"
                                                            (case
                                                             "EXISTS (kp: nat): kp<=kzzz AND bbb(kp)/=0 AND (FORALL (i:nat): i>kp AND i<kzzz IMPLIES bbb(i)=0)")
                                                            (("1"
                                                              (skeep -)
                                                              (("1"
                                                                (case
                                                                 "polynomial(bbb,kp) = polynomial(bbb,kzzz)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "bbb"
                                                                     "kp")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -2
                                                                    1))
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "FORALL (zp:nat): kp+zp<=kzzz IMPLIES polynomial(bbb,kp+zp)=polynomial(bbb,kp)")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "kzzz-kp")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (induct
                                                                           "zp")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 +)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "polynomial_rec")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "1+j+kp")
                                                                                    (("2"
                                                                                      (postpone)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (postpone)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (postpone) nil nil)
                               ("3" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (signs_swap_division 0
  (signs_swap_division-3 nil 3617632914
   ("" (skeep)
    (("" (label "aor" -1)
      (("" (label "bor" -2)
        (("" (label "hor" -3)
          (("" (name "d" "root_degree(a,n)(z)")
            (("" (replace -1)
              (("" (name "bd" " root_degree(b, m)(z)")
                (("" (name "hd" "root_degree(h,p)(z)")
                  (("" (typepred "d")
                    (("" (assert)
                      (("" (flatten)
                        (("" (hide (-3 -4))
                          (("" (skolem - "Ba")
                            (("" (flatten)
                              ((""
                                (typepred "bd")
                                ((""
                                  (assert)
                                  ((""
                                    (flatten)
                                    ((""
                                      (hide (-3 -4))
                                      ((""
                                        (skolem - "Bb")
                                        ((""
                                          (flatten)
                                          ((""
                                            (typepred "hd")
                                            ((""
                                              (assert)
                                              ((""
                                                (flatten)
                                                ((""
                                                  (hide (-3 -4))
                                                  ((""
                                                    (skolem - "Bh")
                                                    ((""
                                                      (flatten)
                                                      ((""
                                                        (assert)
                                                        ((""
                                                          (case
                                                           "bd = d")
                                                          (("1"
                                                            (lemma
                                                             "even_or_odd")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "d")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "even?(d)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "1")
                                                                      (("1"
                                                                        (lemma
                                                                         "root_degree_even")
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (split
                                                                             -)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "a"
                                                                                     "n"
                                                                                     "x"
                                                                                     "y"
                                                                                     "z")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "b"
                                                                                 "m"
                                                                                 "x"
                                                                                 "y"
                                                                                 "z")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (inst
                                                                                 -
                                                                                 "h"
                                                                                 "p"
                                                                                 "x"
                                                                                 "y"
                                                                                 "z")
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "-1")
                                                                      (("2"
                                                                        (lemma
                                                                         "root_degree_odd")
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (split
                                                                             -)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "a"
                                                                                 "n"
                                                                                 "x"
                                                                                 "y"
                                                                                 "z")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "b"
                                                                                   "m"
                                                                                   "x"
                                                                                   "y"
                                                                                   "z")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (inst
                                                                                 -
                                                                                 "h"
                                                                                 "p"
                                                                                 "x"
                                                                                 "y"
                                                                                 "z")
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "FORALL (x:real): polynomial(Ba, n - d)(x) = polynomial(Bh, p - hd)(x) + polynomial(g,k)(x)*(x-z)^(bd-d)*polynomial(Bb,m-bd)(x)")
                                                            (("1"
                                                              (hide 12)
                                                              (("1"
                                                                (case
                                                                 "sign_ext(polynomial(Ba,n-d)(z))*sign_ext(polynomial(Bh,p-hd)(z))=1")
                                                                (("1"
                                                                  (case
                                                                   "FORALL (r:real): x<=r AND r<=y IMPLIES sign_ext(polynomial(Ba, n - d)(r))*sign_ext(polynomial(Ba, n - d)(z))=1")
                                                                  (("1"
                                                                    (case
                                                                     "FORALL (r:real): x<=r AND r<=y IMPLIES sign_ext(polynomial(Bh, p-hd)(r)) * sign_ext(polynomial(Bh, p-hd)(z))=1")
                                                                    (("1"
                                                                      (split
                                                                       +)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "x")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "x")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (case
                                                                               "x<=y")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "x")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "x")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "x")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "x")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -11
                                                                                             1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -7
                                                                                               1)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "sign_ext_mult")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "sign_ext_mult")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "sign_ext"
                                                                                                     (-1
                                                                                                      -2
                                                                                                      -3
                                                                                                      -4))
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "sign_ext((x - z) ^ d) * sign_ext((x - z) ^ hd)=1")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "sign_ext"
                                                                                                         +
                                                                                                         4)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "sign_ext"
                                                                                                           +
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (lift-if)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (lift-if)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (lift-if)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (lift-if)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (ground)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         (-1
                                                                                                          -2
                                                                                                          -3
                                                                                                          -4
                                                                                                          2))
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "nzreal_expt")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "d"
                                                                                                             "x-z")
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "^"
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "sign_ext"
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (lift-if)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "only_root_between?")
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "only_root_between?")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         -
                                                                         "y")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "y")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "y")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "y")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "y")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "y")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "x<y")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -11
                                                                                           1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -7
                                                                                             +)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "sign_ext_mult")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "sign_ext_mult")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "sign_ext((y - z) ^ d) * sign_ext((y - z) ^ d) = 1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "sign_ext"
                                                                                                       (-1
                                                                                                        -2
                                                                                                        -3
                                                                                                        -4
                                                                                                        -5
                                                                                                        1))
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lift-if)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (lift-if)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (lift-if)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (lift-if)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (lift-if)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (lift-if)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (lift-if)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (ground)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "nzreal_expt")
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "expt(y-z,d)/=0")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "^"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "sign_ext"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (case
                                                                                                           "z < y")
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              -2
                                                                                                              1))
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "posreal_expt")
                                                                                                              (("1"
                                                                                                                (inst?
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "only_root_between?")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "only_root_between?")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       12)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (case
                                                                           "polynomial(Bh, p - hd)(r) = 0 OR r = z")
                                                                          (("1"
                                                                            (case
                                                                             "r = z")
                                                                            (("1"
                                                                              (hide
                                                                               -2)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "sign_ext"
                                                                                   1)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 -8
                                                                                 "r")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (copy
                                                                                         "hor")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "only_root_between?"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "r")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "sign_ext"
                                                                                 3)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (ground)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "z < r")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "poly_intermediate_value_dec")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "Bh"
                                                                                                     "0"
                                                                                                     "p-hd"
                                                                                                     "z"
                                                                                                     "r")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (copy
                                                                                                           "hor")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "only_root_between?"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "cc!1")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "cc!1")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -14
                                                                                                                       "cc!1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   "poly_intermediate_value_inc")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "Bh"
                                                                                                     "0"
                                                                                                     "p-hd"
                                                                                                     "r"
                                                                                                     "z")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (copy
                                                                                                           "hor")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "only_root_between?"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -13
                                                                                                                 "cc!1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "cc!1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "z < r")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "poly_intermediate_value_inc")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "Bh"
                                                                                                     "0"
                                                                                                     "p-hd"
                                                                                                     "z"
                                                                                                     "r")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (copy
                                                                                                           "hor")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "only_root_between?"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "cc!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -14
                                                                                                                     "cc!1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   "poly_intermediate_value_dec")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "Bh"
                                                                                                     "0"
                                                                                                     "p-hd"
                                                                                                     "r"
                                                                                                     "z")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (copy
                                                                                                           "hor")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "only_root_between?"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "cc!1")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -13
                                                                                                                   "cc!1")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     12)
                                                                    (("2"
                                                                      (hide
                                                                       -15)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (case
                                                                           "r = z")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "sign_ext"
                                                                               1)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (copy
                                                                             "aor")
                                                                            (("2"
                                                                              (expand
                                                                               "only_root_between?"
                                                                               -1)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (inst-cp
                                                                                   -
                                                                                   "r")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "sign_ext"
                                                                                           3)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lift-if)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (ground)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "z < r")
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "poly_intermediate_value_dec")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "Ba"
                                                                                                                 "0"
                                                                                                                 "n-d"
                                                                                                                 "z"
                                                                                                                 "r")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -18
                                                                                                                       "cc!1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (copy
                                                                                                                           "aor")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "cc!1")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (lemma
                                                                                                               "poly_intermediate_value_inc")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "Ba"
                                                                                                                 "0"
                                                                                                                 "n-d"
                                                                                                                 "r"
                                                                                                                 "z")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "cc!1")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "cc!1")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "cc!1")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "cc!1")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "cc!1")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (case
                                                                                                             "z < r")
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "poly_intermediate_value_inc")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "Ba"
                                                                                                                 "0"
                                                                                                                 "n-d"
                                                                                                                 "z"
                                                                                                                 "r")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "cc!1")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "cc!1")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "cc!1")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "cc!1")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "cc!1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "poly_intermediate_value_dec")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "Ba"
                                                                                                                   "0"
                                                                                                                   "n-d"
                                                                                                                   "r"
                                                                                                                   "z")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "cc!1")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "cc!1")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "cc!1")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "cc!1")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "cc!1")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "r")
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "r")
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "r")
                                                                                                                (("3"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "r")
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "r")
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   -
                                                                   "z")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "^"
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "expt"
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "sign_ext"
                                                                           1)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               (12 13))
                                                              (("2"
                                                                (name
                                                                 "PL"
                                                                 "power_linear(-z,1,bd-d)")
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (lemma
                                                                     "power_linear_polynomial")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "-z"
                                                                       "bd-d"
                                                                       "1"
                                                                       "x!1"
                                                                       "bd-d")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (replace
                                                                           -2)
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (rewrite
                                                                               "polynomial_prod_def"
                                                                               1)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "polynomial_prod_def"
                                                                                 1)
                                                                                (("2"
                                                                                  (name
                                                                                   "P"
                                                                                   "polynomial_prod(polynomial_prod(Bb, m - bd, g, k),
                                   k - bd + m, PL, bd - d)")
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (name
                                                                                       "Bhnew"
                                                                                       "LAMBDA (i:nat): IF i>p-hd THEN 0 ELSE Bh(i) ENDIF")
                                                                                      (("2"
                                                                                        (name
                                                                                         "Pnew"
                                                                                         "LAMBDA (i:nat): IF i>k-d+m THEN 0 ELSE P(i) ENDIF")
                                                                                        (("2"
                                                                                          (case
                                                                                           "polynomial(Bh,p-hd) = polynomial(Bhnew,p-hd)")
                                                                                          (("1"
                                                                                            (case
                                                                                             "polynomial(P,k-d+m) = polynomial(Pnew,k-d+m)")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "sum_polynomial")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "Bhnew"
                                                                                                     "Pnew"
                                                                                                     _
                                                                                                     _)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "k-d+m"
                                                                                                       "p-hd")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (decompose-equality
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "x!1")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "+")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "poly_cancel")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "Ba"
                                                                                                                         "LAMBDA (i: nat): Bhnew(i) + Pnew(i)"
                                                                                                                         "power_linear(-z,1,d)"
                                                                                                                         "max(p - hd, k - d + m)"
                                                                                                                         "n-d"
                                                                                                                         "d")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 +
                                                                                                                                 "d")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "power_linear"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "expt_1n_aux")
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "d")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "^"
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "expt"
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (lemma
                                                                                                                                 "power_linear_polynomial")
                                                                                                                                (("2"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "power_linear_polynomial"
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "x!2")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "x!2")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "x!2")
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -14
                                                                                                                                             :dir
                                                                                                                                             rl)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "sum_polynomial")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "+")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "Bhnew"
                                                                                                                                                     "Pnew"
                                                                                                                                                     "k-d+m"
                                                                                                                                                     "p-hd")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (split
                                                                                                                                                         -)
                                                                                                                                                        (("1"
                                                                                                                                                          (decompose-equality
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -
                                                                                                                                                             "x!2")
                                                                                                                                                            (("1"
                                                                                                                                                              (replaces
                                                                                                                                                               -1
                                                                                                                                                               :dir
                                                                                                                                                               rl)
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -2
                                                                                                                                                                 :dir
                                                                                                                                                                 rl)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -3
                                                                                                                                                                   :dir
                                                                                                                                                                   rl)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "P"
                                                                                                                                                                       +)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (rewrite
                                                                                                                                                                         "polynomial_prod_def"
                                                                                                                                                                         1
                                                                                                                                                                         :dir
                                                                                                                                                                         rl)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (rewrite
                                                                                                                                                                           "polynomial_prod_def"
                                                                                                                                                                           1
                                                                                                                                                                           :dir
                                                                                                                                                                           rl)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (case
                                                                                                                                                                               "NOT hd = d")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -11
                                                                                                                                                                                     :dir
                                                                                                                                                                                     rl)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "PL"
                                                                                                                                                                                         1)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (rewrite
                                                                                                                                                                                           "power_linear_polynomial"
                                                                                                                                                                                           :dir
                                                                                                                                                                                           rl)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "expt_plus")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -
                                                                                                                                                                                                 "d"
                                                                                                                                                                                                 "bd-d"
                                                                                                                                                                                                 "x!2-z")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (inst
                                                                                                                                                                                                     -
                                                                                                                                                                                                     "x!2")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -1)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (case
                                                                                                                                                                                                         "FORALL (kp:posnat): 0^kp=0")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (inst-cp
                                                                                                                                                                                                           -
                                                                                                                                                                                                           "bd")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (inst
                                                                                                                                                                                                             -
                                                                                                                                                                                                             "bd-d")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                 -
                                                                                                                                                                                                                 "x!2")
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (hide-all-but
                                                                                                                                                                                                           1)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (grind)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "Bhnew"
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("3"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("3"
                                                                                                                                                            (expand
                                                                                                                                                             "Pnew"
                                                                                                                                                             1)
                                                                                                                                                            (("3"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (skosimp*)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "Bhnew"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (skosimp*)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "Pnew"
                                                                                                               1)
                                                                                                              (("3"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "poly_eq_le_degree")
                                                                                              (("2"
                                                                                                (decompose-equality
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (inst?
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (skosimp*)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "Pnew"
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "poly_eq_le_degree")
                                                                                            (("2"
                                                                                              (decompose-equality
                                                                                               1)
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (skosimp*)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "Bhnew"
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even? const-decl "bool" integers nil)
    (Sign type-eq-decl nil sign nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (root_degree_even formula-decl nil more_polynomial_props nil)
    (root_degree_odd formula-decl nil more_polynomial_props nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (polynomial_prod_def formula-decl nil polynomials nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (poly_eq_le_degree formula-decl nil polynomials nil)
    (sum_polynomial formula-decl nil polynomials nil)
    (poly_cancel formula-decl nil more_polynomial_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (expt_1n_aux formula-decl nil exponentiation nil)
    (Pnew skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (Bhnew skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (P skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (PL skolem-const-decl "[nat -> real]" more_polynomial_props nil)
    (x!2 skolem-const-decl "real" more_polynomial_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (+ const-decl "[T -> real]" real_fun_ops nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (polynomial_prod const-decl "real" polynomials nil)
    (power_linear_polynomial formula-decl nil polynomials nil)
    (power_linear const-decl "real" polynomials nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (poly_intermediate_value_inc formula-decl nil polynomials nil)
    (poly_intermediate_value_dec formula-decl nil polynomials nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_expt judgement-tcc nil exponentiation nil)
    (only_root_between? const-decl "bool" more_polynomial_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (z skolem-const-decl "real" more_polynomial_props nil)
    (x skolem-const-decl "real" more_polynomial_props nil)
    (sign_ext_mult formula-decl nil sign nil)
    (< const-decl "bool" reals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (negint_times_negint_is_posint application-judgement "posint"
     integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posreal_expt judgement-tcc nil exponentiation nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (y skolem-const-decl "real" more_polynomial_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt def-decl "real" exponentiation nil)
    (sign_ext const-decl
     "{sig: real | (sig = -1 OR sig = 1 OR sig = 0) AND sig * x = abs(x)}"
     sign nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (poly_deriv const-decl "real" polynomials nil)
    (root_degree def-decl "{m |
   m <= n AND
    (a(n) /= 0 IMPLIES
      ((EXISTS (b: [nat -> real]):
          (FORALL (x):
             polynomial(a, n)(x) = (x - y) ^ m * polynomial(b, n - m)(x))
           AND polynomial(b, n - m)(y) /= 0 AND b(n - m) /= 0)
        AND
        (polynomial(a, n)(y) = 0 IMPLIES m > 0) AND
         ((n > 0 AND m > 0) IMPLIES
           (EXISTS (q: [nat -> real]):
              (FORALL (x):
                 polynomial(poly_deriv(a), n - 1)(x) =
                  (x - y) ^ (m - 1) * polynomial(q, n - m)(x))
               AND polynomial(q, n - m)(y) /= 0))))}"
     more_polynomial_props nil))
   nil)
  (signs_swap_division-2 nil 3617632242
   ("" (skeep)
    (("" (name "d" "root_degree(a,n)(z)")
      (("" (replace -1)
        (("" (name "bd" " root_degree(b, m)(z)")
          (("" (name "hd" "root_degree(h,p)(z)")
            (("" (typepred "d")
              (("" (assert)
                (("" (flatten)
                  (("" (hide (-3 -4))
                    (("" (skolem - "Ba")
                      (("" (flatten)
                        (("" (typepred "bd")
                          (("" (assert)
                            (("" (flatten)
                              ((""
                                (hide (-3 -4))
                                ((""
                                  (skolem - "Bb")
                                  ((""
                                    (flatten)
                                    ((""
                                      (typepred "hd")
                                      ((""
                                        (assert)
                                        ((""
                                          (flatten)
                                          ((""
                                            (hide (-3 -4))
                                            ((""
                                              (skolem - "Bh")
                                              ((""
                                                (flatten)
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (case "bd = d")
                                                    (("1"
                                                      (lemma
                                                       "even_or_odd")
                                                      (("1"
                                                        (inst - "d")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "even?(d)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "1")
                                                                (("1"
                                                                  (lemma
                                                                   "root_degree_even")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "a"
                                                                               "n"
                                                                               "x"
                                                                               "y"
                                                                               "z")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "b"
                                                                           "m"
                                                                           "x"
                                                                           "y"
                                                                           "z")
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (replace
                                                                               -2)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (flatten)
                                                                        (("3"
                                                                          (inst
                                                                           -
                                                                           "h"
                                                                           "p"
                                                                           "x"
                                                                           "y"
                                                                           "z")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "-1")
                                                                (("2"
                                                                  (lemma
                                                                   "root_degree_odd")
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "a"
                                                                           "n"
                                                                           "x"
                                                                           "y"
                                                                           "z")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "b"
                                                                             "m"
                                                                             "x"
                                                                             "y"
                                                                             "z")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (flatten)
                                                                        (("3"
                                                                          (inst
                                                                           -
                                                                           "h"
                                                                           "p"
                                                                           "x"
                                                                           "y"
                                                                           "z")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "FORALL (x:real): polynomial(Ba, n - d)(x) = polynomial(Bh, p - hd)(x) + polynomial(g,k)(x)*(x-z)^(bd-d)*polynomial(Bb,m-bd)(x)")
                                                      (("1"
                                                        (hide 12)
                                                        (("1"
                                                          (case
                                                           "sign_ext(polynomial(Ba,n-d)(z))*sign_ext(polynomial(Bh,p-hd)(z))=1")
                                                          (("1"
                                                            (case
                                                             "FORALL (r:real): x<=r AND r<=y IMPLIES sign_ext(polynomial(Ba, n - d)(r))*sign_ext(polynomial(Ba, n - d)(z))=1")
                                                            (("1"
                                                              (case
                                                               "FORALL (r:real): x<=r AND r<=y IMPLIES sign_ext(polynomial(Bh, p-hd)(r)) * sign_ext(polynomial(Bh, p-hd)(z))=1")
                                                              (("1"
                                                                (split
                                                                 +)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "x")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "x")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "x<=y")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "x")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "x")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "x")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "x")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -11
                                                                                       1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -7
                                                                                         1)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "sign_ext_mult")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "sign_ext_mult")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "sign_ext"
                                                                                               (-1
                                                                                                -2
                                                                                                -3
                                                                                                -4))
                                                                                              (("1"
                                                                                                (case
                                                                                                 "sign_ext((x - z) ^ d) * sign_ext((x - z) ^ hd)=1")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "sign_ext"
                                                                                                   +
                                                                                                   4)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "sign_ext"
                                                                                                     +
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lift-if)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   (-1
                                                                                                    -2
                                                                                                    -3
                                                                                                    -4
                                                                                                    2))
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "nzreal_expt")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "d"
                                                                                                       "x-z")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "^"
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "sign_ext"
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "only_root_between?")
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "only_root_between?")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   -
                                                                   "y")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "y")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "y")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "y")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "y")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "y")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (case
                                                                                 "x<y")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -11
                                                                                     1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -7
                                                                                       +)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "sign_ext_mult")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "sign_ext_mult")
                                                                                          (("1"
                                                                                            (case
                                                                                             "sign_ext((y - z) ^ d) * sign_ext((y - z) ^ d) = 1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "sign_ext"
                                                                                                 (-1
                                                                                                  -2
                                                                                                  -3
                                                                                                  -4
                                                                                                  -5
                                                                                                  1))
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lift-if)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (lift-if)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (lift-if)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (ground)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "nzreal_expt")
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "expt(y-z,d)/=0")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "^"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "sign_ext"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (case
                                                                                                     "z < y")
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (-1
                                                                                                        -2
                                                                                                        1))
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "posreal_expt")
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "only_root_between?")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "only_root_between?")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (signs_swap_division-1 nil 3617620708
   ("" (skeep)
    (("" (name "d" "root_degree(a,n)(z)")
      (("" (replace -1)
        (("" (name "bd" " root_degree(b, m)(z)")
          (("" (name "hd" "root_degree(h,p)(z)")
            (("" (typepred "d")
              (("" (assert)
                (("" (flatten)
                  (("" (hide (-3 -4))
                    (("" (skolem - "Ba")
                      (("" (flatten)
                        (("" (typepred "bd")
                          (("" (assert)
                            (("" (flatten)
                              ((""
                                (hide (-3 -4))
                                ((""
                                  (skolem - "Bb")
                                  ((""
                                    (flatten)
                                    ((""
                                      (typepred "hd")
                                      ((""
                                        (assert)
                                        ((""
                                          (flatten)
                                          ((""
                                            (hide (-3 -4))
                                            ((""
                                              (skolem - "Bh")
                                              ((""
                                                (flatten)
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (case "bd = d")
                                                    (("1"
                                                      (lemma
                                                       "even_or_odd")
                                                      (("1"
                                                        (inst - "d")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "even?(d)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "1")
                                                                (("1"
                                                                  (lemma
                                                                   "root_degree_even")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "a"
                                                                               "n"
                                                                               "x"
                                                                               "y"
                                                                               "z")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "b"
                                                                           "m"
                                                                           "x"
                                                                           "y"
                                                                           "z")
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (replace
                                                                               -2)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (flatten)
                                                                        (("3"
                                                                          (inst
                                                                           -
                                                                           "h"
                                                                           "p"
                                                                           "x"
                                                                           "y"
                                                                           "z")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "-1")
                                                                (("2"
                                                                  (lemma
                                                                   "root_degree_odd")
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "a"
                                                                           "n"
                                                                           "x"
                                                                           "y"
                                                                           "z")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "b"
                                                                             "m"
                                                                             "x"
                                                                             "y"
                                                                             "z")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (flatten)
                                                                        (("3"
                                                                          (inst
                                                                           -
                                                                           "h"
                                                                           "p"
                                                                           "x"
                                                                           "y"
                                                                           "z")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "FORALL (x:real): polynomial(Ba, n - d)(x) = polynomial(Bh, p - hd)(x) + polynomial(g,k)(x)*(x-z)^(bd-d)*polynomial(Bb,m-bd)(x)")
                                                      (("1"
                                                        (hide 12)
                                                        (("1"
                                                          (case
                                                           "sign_ext(polynomial(Ba,n-d)(z))*sign_ext(polynomial(Bh,p-hd)(z))=1")
                                                          (("1"
                                                            (case
                                                             "FORALL (r:real): x<=r AND r<=y IMPLIES sign_ext(polynomial(Ba, n - d)(x))*sign_ext(polynomial(Ba, n - d)(z))=1")
                                                            (("1"
                                                              (case
                                                               "FORALL (r:real): x<=r AND r<=y IMPLIES sign_ext(polynomial(Bh, p-hd)(x)) * sign_ext(polynomial(Bh, p-hd)(z))=1")
                                                              (("1"
                                                                (split
                                                                 +)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "x")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "x")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "x<=y")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "x")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "x")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "x")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "x")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -11
                                                                                       1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -7
                                                                                         1)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "sign_ext_mult")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "sign_ext_mult")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "sign_ext"
                                                                                               (-1
                                                                                                -2
                                                                                                -3
                                                                                                -4))
                                                                                              (("1"
                                                                                                (case
                                                                                                 "sign_ext((x - z) ^ d) * sign_ext((x - z) ^ hd)=1")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "sign_ext"
                                                                                                   +
                                                                                                   4)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "sign_ext"
                                                                                                     +
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lift-if)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   (-1
                                                                                                    -2
                                                                                                    -3
                                                                                                    -4
                                                                                                    2))
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "nzreal_expt")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "d"
                                                                                                       "x-z")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "^"
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "sign_ext"
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "only_root_between?")
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "only_root_between?")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   -
                                                                   "y")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "y")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "y")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "y")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "y")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "y")
                                                                            (("2"
                                                                              (postpone)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))


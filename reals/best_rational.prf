(best_rational
 (exp_lower_bd_TCC1 0
  (exp_lower_bd_TCC1-1 nil 3627654631 ("" (subtype-tcc) nil nil) nil nil
   (exp_lower_bd subtype "best_rational.k"
    "{i: integers.int | booleans.OR(best_rational.epsil /= 0, reals.>=(i, 0))}")))
 (exp_lower_bd 0
  (exp_lower_bd-1 nil 3627654633
   ("" (induct "k")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst - "epsil")
          (("2" (expand "^")
            (("2" (expand "expt" +)
              (("2" (assert)
                (("2" (mult-by -1 "epsil")
                  (("2" (assert)
                    (("2"
                      (case "epsil * epsil * j - epsil * j + epsil>=epsil * j - j + epsil")
                      (("1" (assert) nil nil)
                       ("2" (hide (-1 2))
                        (("2" (typepred "epsil")
                          (("2" (mult-by -3 "epsil*j-j")
                            (("1" (assert) nil nil)
                             ("2" (mult-by -3 "j") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (epsil skolem-const-decl "{r: posreal | r >= 1}" best_rational nil)
    (j skolem-const-decl "nat" best_rational nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (expt def-decl "real" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (min_pow_ge_TCC1 0
  (min_pow_ge_TCC1-1 nil 3627730729 ("" (subtype-tcc) nil nil) nil nil
   (min_pow_ge subtype "best_rational.k"
    "{i: integers.int | booleans.OR(best_rational.epsil /= 0, reals.>=(i, 0))}")))
 (min_pow_ge_TCC2 0
  (min_pow_ge_TCC2-1 nil 3627730729 ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)) nil
   (min_pow_ge subtype "best_rational.d"
    "{i: integers.int | booleans.OR(best_rational.epsil /= 0, reals.>=(i, 0))}")))
 (min_pow_ge_TCC3 0
  (min_pow_ge_TCC3-1 nil 3627730729
   (""
    (name "Aset"
          "LAMBDA (epsil:{r:posreal|r>1},D:posreal,p:nat): (LAMBDA (nn:nat): (nn>=p AND epsil^nn>=D))")
    ((""
      (name "F"
            "LAMBDA (epsil: {r: posreal | r > 1}, D: posreal, p: nat): glb(Aset(epsil,D,p))")
      (("1" (inst + "F")
        (("1" (skolem 1 "iggy")
          (("1" (name "epsil" "iggy`1")
            (("1" (replaces -1)
              (("1" (name "D" "iggy`2")
                (("1" (replaces -1)
                  (("1" (name "p" "iggy`3")
                    (("1" (replaces -1)
                      (("1" (assert)
                        (("1" (lemma "glb_nat")
                          (("1" (inst - "Aset(iggy)")
                            (("1" (skeep)
                              (("1" (case "n = F(iggy)")
                                (("1" (assert)
                                  (("1" (replace -1 :dir rl)
                                    (("1" (typepred "n")
                                      (("1"
                                        (expand "Aset" -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (lemma "epsil")
                                            (("1"
                                              (replaces -1 :dir rl)
                                              (("1"
                                                (lemma "D")
                                                (("1"
                                                  (replaces -1 :dir rl)
                                                  (("1"
                                                    (lemma "p")
                                                    (("1"
                                                      (replaces -1 :dir rl)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "Aset(iggy)(d)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "greatest_lower_bound?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "lower_bound?")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "d")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "extend")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "Aset"
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "epsil")
                                                                  (("2"
                                                                    (replaces
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (lemma
                                                                       "D")
                                                                      (("2"
                                                                        (replaces
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (lemma
                                                                           "p")
                                                                          (("2"
                                                                            (replaces
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2" (lemma "glb_lem")
                                    (("2" (inst - "Aset(iggy)" "n")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "F" 1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "bounded_below?")
                                        (("2"
                                          (inst + "0")
                                          (("2"
                                            (expand "lower_bound?")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (typepred "s!1")
                                                (("2"
                                                  (expand "extend")
                                                  (("2"
                                                    (expand "Aset")
                                                    (("2" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2" (lemma "exp_lower_bd")
                                (("2"
                                  (case "EXISTS (k:nat):k>=p AND  1 + k * (epsil - 1)>=D")
                                  (("1" (skeep)
                                    (("1" (inst - "epsil" "k")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "nonempty?")
                                          (("1"
                                            (expand "empty?")
                                            (("1"
                                              (inst - "k")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (expand "Aset")
                                                  (("1"
                                                    (lemma "epsil")
                                                    (("1"
                                                      (replaces -1 :dir rl)
                                                      (("1"
                                                        (lemma "D")
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (lemma "p")
                                                            (("1"
                                                              (replaces
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but 1)
                                    (("2"
                                      (case
                                       "EXISTS (k: nat): 1 + k * (epsil - 1) >= D")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst + "max(k,p)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split)
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (case "max(k,p)>=k")
                                                (("1"
                                                  (mult-by -1 "epsil-1")
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (inst
                                           +
                                           "max(0,ceiling((D-1)/(epsil-1)))")
                                          (("1"
                                            (expand "max")
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (typepred
                                                   "ceiling((D-1)/(epsil-1))")
                                                  (("1"
                                                    (cross-mult -1)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "(D-1)/(epsil-1)>0")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (cross-mult 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil)
                                           ("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (assert)
          (("2" (skeep)
            (("2"
              (typepred "glb(extend[real, nat, bool, FALSE]
                                        (Aset(epsil, D, p)))")
              (("2" (expand "greatest_lower_bound?")
                (("2" (flatten)
                  (("2" (assert)
                    (("2" (split)
                      (("1" (expand "lower_bound?")
                        (("1" (skeep)
                          (("1" (inst - "s")
                            (("1" (expand "extend") (("1" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst - "y")
                          (("2" (assert)
                            (("2" (hide 1)
                              (("2" (expand "lower_bound?")
                                (("2" (skeep)
                                  (("2" (inst - "s")
                                    (("2" (assert)
                                      (("2"
                                        (typepred "s")
                                        (("2"
                                          (expand "extend" -1)
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (skeep)
          (("3" (expand "extend")
            (("3" (split)
              (("1" (expand "nonempty?")
                (("1" (expand "empty?")
                  (("1"
                    (case "EXISTS (k:nat):k>=p AND  1 + k * (epsil - 1)>=D")
                    (("1" (skeep)
                      (("1" (inst - "k")
                        (("1" (expand "member")
                          (("1" (expand "Aset")
                            (("1" (assert)
                              (("1" (lemma "exp_lower_bd")
                                (("1" (inst?) (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (case "EXISTS (k: nat): 1 + k * (epsil - 1) >= D")
                        (("1" (skeep)
                          (("1" (inst + "max(k,p)")
                            (("1" (assert)
                              (("1" (split)
                                (("1" (grind) nil nil)
                                 ("2" (case "max(k,p)>=k")
                                  (("1" (mult-by -1 "epsil-1")
                                    (("1" (assert) nil nil)) nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (inst + "max(0,ceiling((D-1)/(epsil-1)))")
                            (("1" (expand "max")
                              (("1" (lift-if)
                                (("1" (ground)
                                  (("1" (typepred "ceiling((D-1)/(epsil-1))")
                                    (("1" (cross-mult -1) nil nil)) nil)
                                   ("2" (case "(D-1)/(epsil-1)>0")
                                    (("1" (assert) nil nil)
                                     ("2" (cross-mult 1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "bounded_below?")
                  (("2" (inst + "0")
                    (("2" (expand "lower_bound?")
                      (("2" (skosimp*)
                        (("2" (assert)
                          (("2" (typepred "s!1") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((glb const-decl "{x | greatest_lower_bound?(x, SB)}" bounded_real_defs
     nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (TRUE const-decl "bool" booleans nil)
    (glb_nat formula-decl nil integer_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}" real_defs
     nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}" real_defs
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (exp_lower_bd formula-decl nil best_rational nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (glb_lem formula-decl nil bounded_real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (d skolem-const-decl "nat" best_rational nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (p skolem-const-decl "nat" best_rational nil)
    (D skolem-const-decl "posreal" best_rational nil)
    (epsil skolem-const-decl "{r: posreal | r > 1}" best_rational nil)
    (iggy skolem-const-decl "[{r: posreal | r > 1}, posreal, nat]"
     best_rational nil)
    (Aset skolem-const-decl
     "[[{r: posreal | r > 1}, posreal, nat] -> [nat -> boolean]]"
     best_rational nil)
    (F skolem-const-decl "[d: [{r: posreal | r > 1}, posreal, nat] ->
   {x |
      greatest_lower_bound?(x,
                            extend[real, nat, bool, FALSE]
                                (Aset(d`1, d`2, d`3)))}]" best_rational nil)
    (s skolem-const-decl "(Aset(epsil, D, p))" best_rational nil)
    (p skolem-const-decl "nat" best_rational nil)
    (D skolem-const-decl "posreal" best_rational nil)
    (epsil skolem-const-decl "{r: posreal | r > 1}" best_rational nil)
    (s skolem-const-decl "(extend[real, nat, bool, FALSE](Aset(epsil, D, p)))"
     best_rational nil)
    (epsil skolem-const-decl "{r: posreal | r > 1}" best_rational nil)
    (D skolem-const-decl "posreal" best_rational nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil))
   nil
   (min_pow_ge existence ""
    "[d1: [{r: real_types.posreal | reals.>(r, 1)}, posreal, nat] -> {k: naturalnumbers.nat | booleans.AND(reals.>=(k, d1`3), booleans.AND(reals.>=(exponentiation.^(d1`1, k), d1`2), FORALL (d: naturalnumbers.nat): booleans.IMPLIES((booleans.AND(reals.>=(d, d1`3), reals.>=(exponentiation.^(d1`1, d), d1`2))), reals.>=(d, k))))}]")))
 (frac_nn_meas_TCC1 0
  (frac_nn_meas_TCC1-1 nil 3627733223 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (frac_nn_meas subtype "((number_fields.-)(1, best_rational.epsil))"
    "nznum")))
 (frac_nn_meas_TCC2 0
  (frac_nn_meas_TCC2-1 nil 3627733223
   ("" (skeep)
    (("" (assert) (("" (grind-reals) (("" (cross-mult 2) nil nil)) nil)) nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (pos_div_gt formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (frac_nn_meas subtype
    "number_fields./(1, ((number_fields.-)(1, best_rational.epsil)))"
    "{r: real_types.posreal | reals.>(r, 1)}")))
 (frac_nn_meas_decreasing_TCC1 0
  (frac_nn_meas_decreasing_TCC1-1 nil 3627733995 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (frac_nn_meas_decreasing subtype
    "(number_fields.-)(best_rational.y, best_rational.x)" "posreal")))
 (frac_nn_meas_decreasing_TCC2 0
  (frac_nn_meas_decreasing_TCC2-1 nil 3627733995
   ("" (skeep)
    (("" (assert)
      (("" (case "1/x>1/y")
        (("1" (assert) nil nil) ("2" (cross-mult 1) nil nil)) nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil))
   nil
   (frac_nn_meas_decreasing subtype
    "(number_fields.-)(number_fields./(1, best_rational.x), number_fields./(1, best_rational.y))"
    "posreal")))
 (frac_nn_meas_decreasing_TCC3 0
  (frac_nn_meas_decreasing_TCC3-1 nil 3627733995
   ("" (skeep)
    (("" (case "1/x>1/y")
      (("1" (assert) nil nil)
       ("2" (cross-mult 1) (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil
   (frac_nn_meas_decreasing subtype
    "(number_fields.-)(number_fields./(1, best_rational.x), number_fields./(1, best_rational.y))"
    "posreal")))
 (frac_nn_meas_decreasing 0
  (frac_nn_meas_decreasing-1 nil 3627734202
   ("" (skeep)
    (("" (case "frac_nn_meas(y-x) = 0")
      (("1" (assert)
        (("1" (hide 2)
          (("1" (expand "frac_nn_meas")
            (("1" (lift-if)
              (("1" (ground)
                (("1" (name "G" "min_pow_ge(1 / (1 - y + x), 1/(y-x), 0)")
                  (("1" (replaces -1)
                    (("1"
                      (name "H"
                            "min_pow_ge(1 / (1 + 1 / y - 1 / x), 1 / (1 / x - 1 / y), 0)")
                      (("1" (replaces -1)
                        (("1" (typepred "H")
                          (("1" (typepred "G")
                            (("1" (inst -4 "G")
                              (("1" (assert)
                                (("1"
                                  (case "NOT 1 / (y - x)>=1 / (1 / x - 1 / y)")
                                  (("1" (case "NOT 1/(1/x - 1/y) = x*y/(y-x)")
                                    (("1" (hide-all-but 1)
                                      (("1" (field) nil nil)) nil)
                                     ("2" (replaces -1 +)
                                      (("2"
                                        (case "1>=x*y")
                                        (("1"
                                          (mult-by -1 "1/(y-x)")
                                          (("1" (assert) nil nil)
                                           ("2" (cross-mult 1) nil nil))
                                          nil)
                                         ("2"
                                          (case "1>=x AND 1>=y")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (mult-ineq -1 -2)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (replace -5)
                                    (("2" (assert)
                                      (("2"
                                        (expand "^" (-2 +))
                                        (("2"
                                          (expand "expt")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (cross-mult 1)
                        (("2" (ground)
                          (("2" (case "1/x>1/y")
                            (("1" (assert) nil nil)
                             ("2" (cross-mult 1) nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (cross-mult 1) nil nil))
                      nil))
                    nil)
                   ("2" (cross-mult 1) nil nil) ("3" (cross-mult 1) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (hide 2)
          (("2" (expand "frac_nn_meas")
            (("2" (lift-if)
              (("2" (ground)
                (("2" (name "G" "min_pow_ge(1 / (1 - y + x), 1/(y-x), 0)")
                  (("1" (replaces -1)
                    (("1"
                      (name "H"
                            "min_pow_ge(1 / (1 + 1 / y - 1 / x), 1 / (1 / x - 1 / y), 0)")
                      (("1" (replaces -1)
                        (("1" (typepred "H")
                          (("1" (typepred "G")
                            (("1" (case "G>=H AND G/=H")
                              (("1" (flatten) (("1" (assert) nil nil)) nil)
                               ("2" (case "G/=H")
                                (("1" (replace -1)
                                  (("1" (inst -5 "G")
                                    (("1" (assert)
                                      (("1"
                                        (case "NOT 1/(1/x - 1/y) = x*y/(y-x)")
                                        (("1"
                                          (hide-all-but 1)
                                          (("1" (field) nil nil))
                                          nil)
                                         ("2"
                                          (replaces -1)
                                          (("2"
                                            (case "NOT 1/(y-x)>=x*y/(y-x)")
                                            (("1"
                                              (case "1>=x AND 1>=y")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (mult-ineq -1 -2)
                                                  (("1"
                                                    (mult-by -1 "1/(y-x)")
                                                    (("1" (assert) nil nil)
                                                     ("2"
                                                      (cross-mult 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "both_sides_expt_pos_le_aux")
                                              (("2"
                                                (inst
                                                 -
                                                 "G-1"
                                                 "(1 / (1 - y + x))"
                                                 "(1 / (1 + 1 / y - 1 / x))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "^")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "NOT 1/(1+1/y-1/x) = (x*y)/(x*y + x - y)")
                                                        (("1"
                                                          (cross-mult 1)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (cross-mult 1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "NOT (x*y - y + x > 0)")
                                                                (("1"
                                                                  (hide 2)
                                                                  (("1"
                                                                    (case
                                                                     "NOT 1/x - 1/y = (y-x)/(x*y)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (replaces
                                                                       -1
                                                                       +)
                                                                      (("2"
                                                                        (cross-mult
                                                                         4)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (case
                                                                     "x*y<=1")
                                                                    (("1"
                                                                      (mult-by
                                                                       -1
                                                                       "y-x")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "1>=x AND 1>=y")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (mult-ineq
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (assert)
                                                          (("3"
                                                            (field 4)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "(1 / (1 + 1 / y - 1 / x)) > 0")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (cross-mult 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (case "1/(1-y+x)>0")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (cross-mult 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert)
                                  (("2" (hide 2)
                                    (("2" (flatten)
                                      (("2"
                                        (case
                                         "(1/(1-y+x))^G = (1/(1-y+x))^(G-1)*((1/(1-y+x)))")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (inst -5 "G-1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "NOT (1 / (1 - y + x)) ^ (G - 1)  >= (1 - y + x) / (y - x)")
                                                (("1" (cross-mult -2) nil nil)
                                                 ("2"
                                                  (case
                                                   "(1 / (1 + 1 / y - 1 / x)) ^ (G - 1)>=(1 / (1 - y + x)) ^ (G - 1)")
                                                  (("1"
                                                    (case "1-y+x>=x*y")
                                                    (("1"
                                                      (mult-by -1 "1/(y-x)")
                                                      (("1"
                                                        (case
                                                         "1/(1/x-1/y) = (x*y)/(y-x)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replaces -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (field 1)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (cross-mult 1)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "(1-y)*(1+x)>=0")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (lemma
                                                         "nnreal_times_nnreal_is_nnreal")
                                                        (("2"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "both_sides_expt_pos_le_aux")
                                                    (("2"
                                                      (expand "^" 1)
                                                      (("2"
                                                        (case "G-1 = 0")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (expand "expt" +)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           -
                                                           "G-2"
                                                           "(1 / (1 - y + x))"
                                                           "(1 / (1 + 1 / y - 1 / x))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "NOT 1/(1+1/y-1/x) = (x*y)/(x*y + x - y)")
                                                              (("1"
                                                                (field 1)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (replaces -1)
                                                                (("2"
                                                                  (cross-mult
                                                                   2)
                                                                  (("2"
                                                                    (case
                                                                     "1/x - 1/y = (y-x)/(x*y)")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (cross-mult
                                                                         5)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "x*y<=1")
                                                                            (("1"
                                                                              (mult-by
                                                                               -1
                                                                               "y-x")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "1>=x AND 1>=y")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (mult-ineq
                                                                                   -1
                                                                                   -2)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (field
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (assert)
                                                                (("3"
                                                                  (case
                                                                   "1/x - 1/y = (y-x)/(x*y)")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (cross-mult
                                                                       5)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (field
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "(1 / (1 + 1 / y - 1 / x)) > 0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (cross-mult 1)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (case
                                                             "(1 / (1 - y + x)) > 0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (cross-mult 1)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "^" 1)
                                          (("2"
                                            (expand "expt" + 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (cross-mult 1)
                        (("2" (ground)
                          (("2" (case "1/x>1/y")
                            (("1" (assert) nil nil)
                             ("2" (cross-mult 1) nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (cross-mult 1) nil nil))
                      nil))
                    nil)
                   ("2" (cross-mult 1) nil nil) ("3" (cross-mult 1) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (assert) nil nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (frac_nn_meas const-decl "nat" best_rational nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (min_pow_ge const-decl "{k: nat |
   k >= p AND
    epsil ^ k >= D AND
     (FORALL (d: nat): (d >= p AND epsil ^ d >= D) IMPLIES d >= k)}"
     best_rational nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (x skolem-const-decl "posreal" best_rational nil)
    (y skolem-const-decl "posreal" best_rational nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt def-decl "real" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_neg_ge1 formula-decl nil extra_real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (G skolem-const-decl "{k: nat |
   (1 / (1 - y + x)) ^ k >= 1 / (y - x) AND
    FORALL (d: nat): (1 / (1 - y + x)) ^ d >= 1 / (y - x) IMPLIES d >= k}"
     best_rational nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (fdx_176 skolem-const-decl "real" best_rational nil)
    (fdx_175 skolem-const-decl "real" best_rational nil)
    (nonzero_times3 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (times_div1 formula-decl nil real_props nil)
    (both_sides_expt_pos_le_aux formula-decl nil exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (<= const-decl "bool" reals nil)
    (div_mult_pos_neg_le2 formula-decl nil extra_real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (frac_nn_int_TCC1 0
  (frac_nn_int_TCC1-1 nil 3627733223 ("" (subtype-tcc) nil nil) nil nil
   (frac_nn_int subtype "(number_fields.-)(best_rational.y, best_rational.x)"
    "posreal")))
 (frac_nn_int_TCC2 0
  (frac_nn_int_TCC2-1 nil 3627733223 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (frac_nn_int subtype
    "(number_fields.-)(best_rational.z`2, best_rational.z`1)" "posreal")))
 (frac_nn_int_TCC3 0
  (frac_nn_int_TCC3-1 nil 3627733223 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (frac_nn_int subtype "best_rational.Fy"
    "{r: rationals.posrat | booleans.AND(reals.<=(best_rational.x, r), reals.<=(r, best_rational.y))}")))
 (frac_nn_int_TCC4 0
  (frac_nn_int_TCC4-1 nil 3627733223 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (frac_nn_int subtype "best_rational.Fx"
    "{r: rationals.posrat | booleans.AND(reals.<=(best_rational.x, r), reals.<=(r, best_rational.y))}")))
 (frac_nn_int_TCC5 0
  (frac_nn_int_TCC5-1 nil 3627733223 ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (frac_nn_int subtype
    "((number_fields.-)(best_rational.y, best_rational.Fy))" "nznum")))
 (frac_nn_int_TCC6 0
  (frac_nn_int_TCC6-1 nil 3627733223
   ("" (skeep*)
    (("" (assert)
      (("" (split) (("1" (cross-mult 1) nil nil) ("2" (cross-mult 1) nil nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (frac_nn_int subtype
    "number_fields./(1, ((number_fields.-)(best_rational.y, best_rational.Fy)))"
    "posreal")))
 (frac_nn_int_TCC7 0
  (frac_nn_int_TCC7-2 "" 3790089378
   ("" (skeep) (("" (skeep) (("" (ground) nil nil)) nil)) nil) nil shostak
   (frac_nn_int subtype
    "((number_fields.-)(best_rational.x, best_rational.Fx))" "nznum"))
  (frac_nn_int_TCC7-1 nil 3627733223
   ("" (skeep)
    (("" (skeep)
      (("" (ground)
        (("1" (cross-mult 1) nil nil) ("2" (cross-mult 1) nil nil)) nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil))
   nil
   (frac_nn_int subtype
    "((number_fields.-)(best_rational.x, best_rational.Fx))" "nznum")))
 (frac_nn_int_TCC8 0
  (frac_nn_int_TCC8-1 nil 3627733223
   ("" (skeep*)
    (("" (split)
      (("1" (cross-mult 1) nil nil) ("2" (cross-mult 1) nil nil)
       ("3" (cross-mult 1) (("3" (assert) nil nil)) nil))
      nil))
    nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Fx skolem-const-decl "{i | i <= x & x < 1 + i}" best_rational nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (x skolem-const-decl "posreal" best_rational nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Fy skolem-const-decl "{i | i <= y & y < 1 + i}" best_rational nil)
    (y skolem-const-decl "{y | x < y}" best_rational nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (frac_nn_int subtype
    "number_fields./(1, ((number_fields.-)(best_rational.x, best_rational.Fx)))"
    "{y_1 | reals.<(number_fields./(1, ((number_fields.-)(best_rational.y, best_rational.Fy))), y_1)}")))
 (frac_nn_int_TCC9 0
  (frac_nn_int_TCC9-1 nil 3627733223
   ("" (skeep*)
    (("" (lemma "frac_nn_meas_decreasing")
      (("" (inst - "x-Fx" "y-Fy")
        (("1" (assert)
          (("1" (flatten)
            (("1" (assert)
              (("1" (replace -5 -1)
                (("1" (assert)
                  (("1" (expand "frac_nn_meas" -1)
                    (("1"
                      (typepred "min_pow_ge(1 / (1 - y + x), 1 / (y - x), 0)")
                      (("1" (replace -3)
                        (("1" (assert)
                          (("1" (expand "^" -1)
                            (("1" (expand "expt")
                              (("1" (cross-mult -1) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (cross-mult 1) nil nil)
                       ("3" (cross-mult 1) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (cross-mult 1) (("2" (assert) nil nil)) nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((frac_nn_meas_decreasing formula-decl nil best_rational nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (min_pow_ge const-decl "{k: nat |
   k >= p AND
    epsil ^ k >= D AND
     (FORALL (d: nat): (d >= p AND epsil ^ d >= D) IMPLIES d >= k)}"
     best_rational nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (frac_nn_meas const-decl "nat" best_rational nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (y skolem-const-decl "{y | x < y}" best_rational nil)
    (Fy skolem-const-decl "{i | i <= y & y < 1 + i}" best_rational nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (x skolem-const-decl "posreal" best_rational nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Fx skolem-const-decl "{i | i <= x & x < 1 + i}" best_rational nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (frac_nn_int termination
    "best_rational.frac_nn_int(number_fields./(1, ((number_fields.-)(best_rational.y, best_rational.Fy))), number_fields./(1, ((number_fields.-)(best_rational.x, best_rational.Fx))))"
    "nil")))
 (frac_nn_int_TCC10 0
  (frac_nn_int_TCC10-1 nil 3627733223
   ("" (skeep*)
    (("" (name "G" "v(1 / (y - Fy), 1 / (x - Fx))")
      (("1" (replaces -1)
        (("1" (assert)
          (("1" (typepred "G")
            (("1" (split)
              (("1" (cross-mult -4)
                (("1" (both-sides "-" "Fx" 1) (("1" (assert) nil nil)) nil))
                nil)
               ("2" (assert) nil nil)
               ("3" (assert)
                (("3" (cross-mult -4)
                  (("3" (assert)
                    (("3" (both-sides "-" "Fx" 1)
                      (("3" (assert) (("3" (cross-mult 1) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (both-sides "-" "Fx" 1)
                (("4" (assert)
                  (("4" (cross-mult 1) (("4" (cross-mult -3) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (lemma "frac_nn_meas_decreasing")
          (("2" (inst - "x-Fx" "y-Fy")
            (("2" (assert)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (replace -5 -1)
                    (("2" (assert)
                      (("2" (expand "frac_nn_meas" -1)
                        (("2"
                          (typepred
                           "min_pow_ge(1 / (1 - y + x), 1 / (y - x), 0)")
                          (("1" (replace -3)
                            (("1" (assert)
                              (("1" (expand "^" -1)
                                (("1" (expand "expt")
                                  (("1" (cross-mult -1) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (cross-mult 1) nil nil)
                           ("3" (cross-mult 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (split 1)
        (("1" (cross-mult 1) nil nil) ("2" (cross-mult 1) nil nil)
         ("3" (cross-mult 1) (("3" (assert) nil nil)) nil))
        nil)
       ("4" (assert) nil nil)
       ("5" (split 1)
        (("1" (cross-mult 1) nil nil) ("2" (cross-mult 1) nil nil)) nil)
       ("6" (assert) nil nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (frac_nn_meas const-decl "nat" best_rational nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (both_sides_minus_ge1 formula-decl nil real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (both_sides_minus_le1 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (frac_nn_meas_decreasing formula-decl nil best_rational nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (min_pow_ge const-decl "{k: nat |
   k >= p AND
    epsil ^ k >= D AND
     (FORALL (d: nat): (d >= p AND epsil ^ d >= D) IMPLIES d >= k)}"
     best_rational nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (Fy skolem-const-decl "{i | i <= y & y < 1 + i}" best_rational nil)
    (y skolem-const-decl "{y | x < y}" best_rational nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (Fx skolem-const-decl "{i | i <= x & x < 1 + i}" best_rational nil)
    (x skolem-const-decl "posreal" best_rational nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (frac_nn_int subtype
    "(number_fields.+)(best_rational.Fx, number_fields./(1, best_rational.frac_nn_int(number_fields./(1, ((number_fields.-)(best_rational.y, best_rational.Fy))), number_fields./(1, ((number_fields.-)(best_rational.x, best_rational.Fx))))))"
    "{r: rationals.posrat | booleans.AND(reals.<=(best_rational.x, r), reals.<=(r, best_rational.y))}")))
 (frac_nn_int_TCC11 0
  (frac_nn_int_TCC11-1 nil 3627733269
   ("" (skeep*) (("" (cross-mult 3) nil nil)) nil)
   ((div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (frac_nn_int subtype "number_fields./(1, best_rational.x)"
    "{y_1 | reals.<(number_fields./(1, best_rational.y), y_1)}")))
 (frac_nn_int_TCC12 0
  (frac_nn_int_TCC12-1 nil 3627733269
   ("" (skeep*)
    (("" (lemma "frac_nn_meas_decreasing")
      (("" (inst - "x" "y")
        (("" (assert)
          (("" (flatten)
            (("" (expand "frac_nn_meas" -1)
              (("" (typepred "min_pow_ge(1 / (1 - y + x), 1 / (y - x), 0)")
                (("1" (replace -3)
                  (("1" (expand "^" -1)
                    (("1" (expand "expt") (("1" (cross-mult -1) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (cross-mult 1) nil nil) ("3" (cross-mult 1) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((frac_nn_meas_decreasing formula-decl nil best_rational nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (frac_nn_meas const-decl "nat" best_rational nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (expt def-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (min_pow_ge const-decl "{k: nat |
   k >= p AND
    epsil ^ k >= D AND
     (FORALL (d: nat): (d >= p AND epsil ^ d >= D) IMPLIES d >= k)}"
     best_rational nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (frac_nn_int termination
    "best_rational.frac_nn_int(number_fields./(1, best_rational.y), number_fields./(1, best_rational.x))"
    "nil")))
 (frac_nn_int_TCC13 0
  (frac_nn_int_TCC13-1 nil 3627733995
   ("" (skeep*)
    (("" (name "G" "v(1/y,1/x)")
      (("1" (replaces -1)
        (("1" (assert)
          (("1" (typepred "G")
            (("1" (cross-mult -3)
              (("1" (assert)
                (("1" (cross-mult -4)
                  (("1" (split)
                    (("1" (cross-mult 1) nil nil)
                     ("2" (cross-mult 1) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "frac_nn_meas_decreasing")
        (("2" (inst - "x" "y")
          (("2" (assert)
            (("2" (flatten)
              (("2" (expand "frac_nn_meas" -1)
                (("2" (typepred "min_pow_ge(1 / (1 - y + x), 1 / (y - x), 0)")
                  (("1" (replace -3)
                    (("1" (expand "^" -1)
                      (("1" (expand "expt") (("1" (cross-mult -1) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (cross-mult 1) nil nil) ("3" (cross-mult 1) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (cross-mult 1) nil nil))
      nil))
    nil)
   ((/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (frac_nn_meas const-decl "nat" best_rational nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (min_pow_ge const-decl "{k: nat |
   k >= p AND
    epsil ^ k >= D AND
     (FORALL (d: nat): (d >= p AND epsil ^ d >= D) IMPLIES d >= k)}"
     best_rational nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (frac_nn_meas_decreasing formula-decl nil best_rational nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (frac_nn_int subtype
    "number_fields./(1, best_rational.frac_nn_int(number_fields./(1, best_rational.y), number_fields./(1, best_rational.x)))"
    "{r: rationals.posrat | booleans.AND(reals.<=(best_rational.x, r), reals.<=(r, best_rational.y))}")))
 (floors_neq_diff_1 0
  (floors_neq_diff_1-1 nil 3627747177 ("" (skeep) (("" (assert) nil nil)) nil)
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak))
 (frac_nn_int_increasing 0
  (frac_nn_int_increasing-1 nil 3627746760
   (""
    (case "FORALL (x,y,z,w:posreal,
                       ix,iy,iz,iw:nat):
                      iy <= y AND  y < 1 + iy AND  ix <= x
                      AND  x < 1 + ix AND  iz <= z AND  z < 1 + iz
                      AND  iw <= w AND  w < 1 + iw AND  iz = iy
                      AND ix = iy AND x <= z AND z <= y AND y <= w
                      IMPLIES
                      (y <= iw OR iz = iw)")
    (("1" (label "hyplem" -1)
      (("1" (hide "hyplem")
        (("1"
          (case "FORALL (x, y, z, w: posreal):
                                                                    x < y AND z < w AND x <= z AND y <= w AND x<=z AND z<=y AND y<=w
                                                                IMPLIES frac_nn_int(x, y) <= frac_nn_int(z, w)")
          (("1" (skeep) (("1" (insteep -1) (("1" (assert) nil nil)) nil)) nil)
           ("2" (hide 2)
            (("2"
              (case "FORALL (x, y, z, w: posreal,p:nat):
                                                                                  x < y AND z < w AND x <= z AND y <= w
                                                                              AND x <= z AND z <= y AND y <= w AND frac_nn_meas(y-x)<=p AND frac_nn_meas(w-z)<=p
                                                                              IMPLIES frac_nn_int(x, y) <= frac_nn_int(z, w)")
              (("1" (skeep)
                (("1" (inst?)
                  (("1" (inst - "max(frac_nn_meas(y-x),frac_nn_meas(w-z))")
                    (("1" (assert) (("1" (assert) nil nil)) nil)
                     ("2" (hide 2) (("2" (assert) nil nil)) nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (induct "p")
                  (("1" (skeep)
                    (("1" (assert)
                      (("1" (case "NOT y-x>=1")
                        (("1" (expand "frac_nn_meas")
                          (("1" (assert)
                            (("1"
                              (typepred
                               "min_pow_ge(1 / (1 - y + x), 1 / (y - x), 0)")
                              (("1" (expand "^" -1)
                                (("1" (expand "expt")
                                  (("1" (cross-mult -1) nil nil)) nil))
                                nil)
                               ("2" (cross-mult 1) nil nil)
                               ("3" (cross-mult 1) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "NOT w-z>=1")
                          (("1" (expand "frac_nn_meas")
                            (("1" (assert)
                              (("1"
                                (typepred
                                 "min_pow_ge(1 / (1 - w + z), 1 / (w-z), 0)")
                                (("1" (expand "^" -1)
                                  (("1" (expand "expt")
                                    (("1" (cross-mult -1) nil nil)) nil))
                                  nil)
                                 ("2" (cross-mult 1) nil nil)
                                 ("3" (cross-mult 1) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (lemma "floors_neq_diff_1")
                              (("2" (inst-cp - "x" "y")
                                (("2" (inst - "z" "w")
                                  (("2" (assert)
                                    (("2" (flatten)
                                      (("2"
                                        (expand "frac_nn_int")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skolem 1 "p")
                    (("2" (flatten)
                      (("2" (skeep)
                        (("2" (expand "frac_nn_int" +)
                          (("2" (lift-if)
                            (("2" (lift-if)
                              (("2" (lift-if)
                                (("2" (lift-if)
                                  (("2" (lift-if)
                                    (("2" (assert)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (name "fz" "floor(z)")
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (name "fw" "floor(w)")
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (name "fx" "floor(x)")
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (name "fy" "floor(y)")
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (split +)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split +)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split
                                                                       +)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "fx")
                                                                            (("1"
                                                                              (expand
                                                                               "fy")
                                                                              (("1"
                                                                                (expand
                                                                                 "fz")
                                                                                (("1"
                                                                                  (expand
                                                                                   "fw")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (case
                                                                           "fy = fz")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (split
                                                                                 +)
                                                                                (("1"
                                                                                  (case
                                                                                   "1 / frac_nn_int(1 / (w - fw), 1 / (z - fz))>=0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (cross-mult
                                                                                     1)
                                                                                    nil
                                                                                    nil)
                                                                                   ("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (cross-mult
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (cross-mult
                                                                                     1)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (case
                                                                                     "fz = 0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "fz"
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             3)
                                                                            (("2"
                                                                              (expand
                                                                               "fy")
                                                                              (("2"
                                                                                (expand
                                                                                 "fz")
                                                                                (("2"
                                                                                  (expand
                                                                                   "fx")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "fw")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "NOT fz = fy")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide 2)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "fy")
                                                                          (("1"
                                                                            (expand
                                                                             "fz")
                                                                            (("1"
                                                                              (expand
                                                                               "fx")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split
                                                                       +)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             +)
                                                                            (("1"
                                                                              (split
                                                                               +)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-11
                                                                                    2))
                                                                                  (("1"
                                                                                    (expand
                                                                                     "fy")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "fw")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     +)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split
                                                                             +)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   +)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (case
                                                                                       "1 / frac_nn_int(1 / (y - fy), 1 / (x - fx)) + fx <= fx+1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (both-sides
                                                                                         "-"
                                                                                         "fx"
                                                                                         1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (cross-mult
                                                                                             1)
                                                                                            (("1"
                                                                                              (case
                                                                                               "1/(y-fy)>=1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (cross-mult
                                                                                                 1)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (cross-mult
                                                                                               1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (cross-mult
                                                                                         1)
                                                                                        nil
                                                                                        nil)
                                                                                       ("4"
                                                                                        (cross-mult
                                                                                         1)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (case
                                                                                       "1 / frac_nn_int(1 / (y - fy), 1 / (x - fx)) <=
                                                             1 / frac_nn_int(1 / (w - fw), 1 / (z - fz))")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (name
                                                                                           "BB"
                                                                                           "frac_nn_int(1 / (y - fy), 1 / (x - fx))")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (name
                                                                                               "AA"
                                                                                               "frac_nn_int(1 / (w - fw), 1 / (z - fz))")
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (cross-mult
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "1/(w-fw)"
                                                                                                     "1/(z-fz)"
                                                                                                     "1/(y-fy)"
                                                                                                     "1/(x-fx)")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         +)
                                                                                                        (("1"
                                                                                                          (cross-mult
                                                                                                           1)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (cross-mult
                                                                                                           1)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (cross-mult
                                                                                                           1)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("4"
                                                                                                          (cross-mult
                                                                                                           1)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("5"
                                                                                                          (assert)
                                                                                                          (("5"
                                                                                                            (lemma
                                                                                                             "frac_nn_meas_decreasing")
                                                                                                            (("5"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "z-fz"
                                                                                                               "w-fw")
                                                                                                              (("5"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("6"
                                                                                                          (assert)
                                                                                                          (("6"
                                                                                                            (lemma
                                                                                                             "frac_nn_meas_decreasing")
                                                                                                            (("6"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "x-fx"
                                                                                                               "y-fy")
                                                                                                              (("6"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (cross-mult
                                                                                                       1)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (cross-mult
                                                                                                       1)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (cross-mult
                                                                                         1)
                                                                                        nil
                                                                                        nil)
                                                                                       ("4"
                                                                                        (cross-mult
                                                                                         1)
                                                                                        nil
                                                                                        nil)
                                                                                       ("5"
                                                                                        (cross-mult
                                                                                         1)
                                                                                        nil
                                                                                        nil)
                                                                                       ("6"
                                                                                        (cross-mult
                                                                                         1)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (split
                                                                                 +)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "1 / frac_nn_int(1 / y, 1 / x)<=y")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "y<=fw")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (case
                                                                                             "fy<fw")
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                1))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "fy")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "fw")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case
                                                                                               "fz<=fw")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "fz < fw")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -4
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      1
                                                                                                      4))
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "FORALL (aa,bb:real): aa<=bb IMPLIES (aa<bb OR aa=bb)")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "NOT z<=w")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "fz")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "fw")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "frac_nn_int(1/y,1/x)")
                                                                                        (("2"
                                                                                          (cross-mult
                                                                                           -3)
                                                                                          (("2"
                                                                                            (cross-mult
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (cross-mult
                                                                                       1)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "1/w"
                                                                                         "1/z"
                                                                                         "1/y"
                                                                                         "1/x")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             +)
                                                                                            (("1"
                                                                                              (cross-mult
                                                                                               1)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (cross-mult
                                                                                               1)
                                                                                              nil
                                                                                              nil)
                                                                                             ("3"
                                                                                              (cross-mult
                                                                                               1)
                                                                                              nil
                                                                                              nil)
                                                                                             ("4"
                                                                                              (cross-mult
                                                                                               1)
                                                                                              nil
                                                                                              nil)
                                                                                             ("5"
                                                                                              (cross-mult
                                                                                               1)
                                                                                              nil
                                                                                              nil)
                                                                                             ("6"
                                                                                              (cross-mult
                                                                                               1)
                                                                                              nil
                                                                                              nil)
                                                                                             ("7"
                                                                                              (lemma
                                                                                               "frac_nn_meas_decreasing")
                                                                                              (("7"
                                                                                                (inst
                                                                                                 -
                                                                                                 "z"
                                                                                                 "w")
                                                                                                (("7"
                                                                                                  (assert)
                                                                                                  (("7"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      -2
                                                                                                      -3
                                                                                                      4))
                                                                                                    (("7"
                                                                                                      (expand
                                                                                                       "fx")
                                                                                                      (("7"
                                                                                                        (expand
                                                                                                         "fy")
                                                                                                        (("7"
                                                                                                          (expand
                                                                                                           "fz")
                                                                                                          (("7"
                                                                                                            (expand
                                                                                                             "fw")
                                                                                                            (("7"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("8"
                                                                                              (lemma
                                                                                               "frac_nn_meas_decreasing")
                                                                                              (("8"
                                                                                                (inst
                                                                                                 -
                                                                                                 "x"
                                                                                                 "y")
                                                                                                (("8"
                                                                                                  (split
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "FORALL (i1,i2:int): i1<i2 AND i2<=1+p IMPLIES i1<=p")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (skeep)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("4"
                                                                                                    (hide-all-but
                                                                                                     (-3
                                                                                                      1))
                                                                                                    (("4"
                                                                                                      (expand
                                                                                                       "fx")
                                                                                                      (("4"
                                                                                                        (expand
                                                                                                         "fy")
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("5"
                                                                                                    (hide-all-but
                                                                                                     (-3
                                                                                                      1
                                                                                                      4))
                                                                                                    (("5"
                                                                                                      (expand
                                                                                                       "fx")
                                                                                                      (("5"
                                                                                                        (expand
                                                                                                         "fy")
                                                                                                        (("5"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2) (("3" (skeep) (("3" (assert) nil nil)) nil))
                    nil)
                   ("4" (hide 2) (("4" (skeep) (("4" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2) (("3" (skeep) (("3" (assert) nil nil)) nil)) nil)
               ("4" (hide 2) (("4" (skeep) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (skeep) (("2" (assert) nil nil)) nil)) nil))
    nil)
   ((nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (frac_nn_int def-decl "{r: posrat | x <= r AND r <= y}" best_rational nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (frac_nn_meas const-decl "nat" best_rational nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (z skolem-const-decl "posreal" best_rational nil)
    (w skolem-const-decl "posreal" best_rational nil)
    (x skolem-const-decl "posreal" best_rational nil)
    (y skolem-const-decl "posreal" best_rational nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (floors_neq_diff_1 formula-decl nil best_rational nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (min_pow_ge const-decl "{k: nat |
   k >= p AND
    epsil ^ k >= D AND
     (FORALL (d: nat): (d >= p AND epsil ^ d >= D) IMPLIES d >= k)}"
     best_rational nil)
    (expt def-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (y skolem-const-decl "posreal" best_rational nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_neg_le1 formula-decl nil extra_real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (both_sides_minus_le1 formula-decl nil real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (frac_nn_meas_decreasing formula-decl nil best_rational nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (fy skolem-const-decl "{i | i <= y & y < 1 + i}" best_rational nil)
    (fw skolem-const-decl "{i | i <= w & w < 1 + i}" best_rational nil)
    (fz skolem-const-decl "{i | i <= z & z < 1 + i}" best_rational nil)
    (fx skolem-const-decl "{i | i <= x & x < 1 + i}" best_rational nil)
    (w skolem-const-decl "posreal" best_rational nil)
    (z skolem-const-decl "posreal" best_rational nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (best_rational_TCC1 0
  (best_rational_TCC1-1 nil 3627821509 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (best_rational subtype "0"
    "{q: rationals.rat | booleans.AND(reals.<=(best_rational.r1, q), reals.<=(q, best_rational.r2))}")))
 (best_rational_TCC2 0
  (best_rational_TCC2-1 nil 3627821509 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (best_rational subtype "best_rational.r1" "posreal")))
 (best_rational_TCC3 0
  (best_rational_TCC3-1 nil 3627821509 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (best_rational subtype "best_rational.r2"
    "{y | reals.<(best_rational.r1, best_rational.y)}")))
 (best_rational_TCC4 0
  (best_rational_TCC4-1 nil 3627821509 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (best_rational subtype "(number_fields.-)(best_rational.r2)" "posreal")))
 (best_rational_TCC5 0
  (best_rational_TCC5-1 nil 3627821509 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (best_rational subtype "(number_fields.-)(best_rational.r1)"
    "{y | reals.<((number_fields.-)(best_rational.r2), best_rational.y)}")))
 (best_rational_TCC6 0
  (best_rational_TCC6-1 nil 3627821509 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (best_rational subtype
    "(number_fields.-)(best_rational.frac_nn_int((number_fields.-)(best_rational.r2), (number_fields.-)(best_rational.r1)))"
    "{q: rationals.rat | booleans.AND(reals.<=(best_rational.r1, q), reals.<=(q, best_rational.r2))}")))
 (best_rational_increasing 0
  (best_rational_increasing-1 nil 3627821599
   ("" (skeep)
    (("" (lemma "frac_nn_int_increasing")
      (("" (expand "best_rational")
        (("" (lift-if)
          (("" (lift-if)
            (("" (lift-if)
              (("" (lift-if)
                (("" (assert)
                  (("" (ground)
                    (("1" (inst?) (("1" (assert) nil nil)) nil)
                     ("2" (neg-formula 2)
                      (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((frac_nn_int_increasing formula-decl nil best_rational nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (both_sides_times_neg_le1 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (frac_nn_int def-decl "{r: posrat | x <= r AND r <= y}" best_rational nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (best_rational const-decl "{q: rat | r1 <= q AND q <= r2}" best_rational
     nil))
   shostak))
 (best_rational_ub_TCC1 0
  (best_rational_ub_TCC1-1 nil 3706698858 ("" (subtype-tcc) nil nil) nil nil
   (best_rational_ub subtype
    "(number_fields.+)(best_rational.r, best_rational.eps)"
    "{r2 | reals.<(best_rational.r, best_rational.r2)}")))
 (best_rational_ub_TCC2 0
  (best_rational_ub_TCC2-1 nil 3706698858 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (best_rational_ub subtype
    "best_rational.best_rational(best_rational.r, (number_fields.+)(best_rational.r, best_rational.eps))"
    "{x: reals.real | reals.>=(x, best_rational.r)}")))
 (best_rational_lb_TCC1 0
  (best_rational_lb_TCC1-1 nil 3706698858 ("" (subtype-tcc) nil nil) nil nil
   (best_rational_lb subtype "best_rational.r"
    "{r2 | reals.<((number_fields.-)(best_rational.r, best_rational.eps), best_rational.r2)}"))))


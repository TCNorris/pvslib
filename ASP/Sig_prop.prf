(Sig_prop
 (I_TCC1 0
  (I_TCC1-1 nil 3635757021
   ("" (inst 1 "LAMBDA(x:T):0") (("" (grind) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil Sig_prop nil))
   nil (I existence "" "[Sig_prop.T -> S3]")))
 (RH_TCC1 0
  (RH_TCC1-1 nil 3627665452 ("" (subtype-tcc) nil nil)
   ((s3? const-decl "bool" Sig_prop nil)) nil (RH subtype "2" "S3")))
 (RH_TCC2 0
  (RH_TCC2-1 nil 3636463704 ("" (subtype-tcc) nil nil)
   ((s3? const-decl "bool" Sig_prop nil)) nil (RH subtype "0" "S3")))
 (RH_TCC3 0
  (RH_TCC3-1 nil 3636463704 ("" (subtype-tcc) nil nil) nil nil
   (RH subtype
    "LAMBDA (t: Sig_prop.T): IF Sig_prop.i(t) = 2 THEN 2 ELSE 0 ENDIF" "IC")))
 (RT_TCC1 0
  (RT_TCC1-1 nil 3627665452 ("" (subtype-tcc) nil nil)
   ((s3? const-decl "bool" Sig_prop nil)) nil (RT subtype "0" "S3")))
 (RT_TCC2 0
  (RT_TCC2-1 nil 3636463704 ("" (subtype-tcc) nil nil)
   ((s3? const-decl "bool" Sig_prop nil)) nil (RT subtype "2" "S3")))
 (RT_TCC3 0
  (RT_TCC3-1 nil 3636463704 ("" (subtype-tcc) nil nil) nil nil
   (RT subtype
    "LAMBDA (t: Sig_prop.T): IF Sig_prop.i(t) = 0 THEN 0 ELSE 2 ENDIF" "IC")))
 (product_TCC1 0
  (product_TCC1-1 nil 3636463704 ("" (subtype-tcc) nil nil)
   ((s3? const-decl "bool" Sig_prop nil)) nil (product subtype "1" "S3")))
 (R_reflexive 0
  (R_reflexive-1 nil 3623671571
   ("" (skosimp) (("" (expand "R_ord") (("" (propax) nil nil)) nil)) nil)
   ((R_ord const-decl "bool" Sig_prop nil)) shostak))
 (R_antisymmetric 0
  (R_antisymmetric-1 nil 3623671438
   ("" (skosimp)
    (("" (expand "R_ord")
      (("" (grind)
        (("" (apply-extensionality)
          (("" (inst -1 "x!1")
            (("" (inst -3 "x!1") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((R_ord const-decl "bool" Sig_prop nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak))
 (R_transitive 0
  (R_transitive-1 nil 3623671704
   ("" (skosimp) (("" (expand "R_ord") (("" (grind) nil nil)) nil)) nil)
   ((R_ord const-decl "bool" Sig_prop nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak))
 (R_partial_order 0
  (thm "fin" 3623671399
   ("" (expand "partial_order?")
    (("" (expand "preorder?")
      (("" (split)
        (("1" (lemma "R_reflexive")
          (("1" (expand "reflexive?") (("1" (propax) nil nil)) nil)) nil)
         ("2" (lemma "R_transitive")
          (("2" (expand "transitive?") (("2" (propax) nil nil)) nil)) nil)
         ("3" (lemma "R_antisymmetric")
          (("3" (expand "antisymmetric?") (("3" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((preorder? const-decl "bool" orders nil)
    (R_antisymmetric formula-decl nil Sig_prop nil)
    (antisymmetric? const-decl "bool" relations nil)
    (R_transitive formula-decl nil Sig_prop nil)
    (transitive? const-decl "bool" relations nil)
    (R_reflexive formula-decl nil Sig_prop nil)
    (reflexive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil))
   shostak)
  (R_partial_order-1 nil 3623671278
   ("" (expand "partial_order?")
    (("" (expand "preorder?")
      (("" (split)
        (("1" (lemma "R_reflexive")
          (("1" (expand "reflexive?") (("1" (propax) nil nil)) nil)) nil)
         ("2" (lemma "R_transitive")
          (("2" (expand "transitive?") (("2" (propax) nil nil)) nil)) nil)
         ("3" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (RT_ord 0
  (thm "fin" 3623759824
   ("" (skosimp)
    (("" (expand "R_ord")
      (("" (expand "RT")
        (("" (grind)
          (("1" (apply-extensionality)
            (("1" (hide 2) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred "i!1(t!1)") (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((R_ord const-decl "bool" Sig_prop nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (RT const-decl "IC" Sig_prop nil))
   shostak)
  (RT_ord-1 nil 3623758902
   ("" (skosimp)
    (("" (expand "R_ord")
      (("" (expand "RT")
        (("" (grind)
          (("1" (apply-extensionality)
            (("1" (hide 2) (("1" (grind) nil nil)) nil)) nil)
           ("2" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (RT_classic 0
  (RT_classic-1 nil 3634376214
   ("" (skeep)
    (("" (expand "RT")
      (("" (grind)
        (("" (typepred "i")
          (("" (apply-extensionality)
            (("" (inst?) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((RT const-decl "IC" Sig_prop nil) (IC type-eq-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil))
   shostak))
 (RT_ord_mon 0
  (RT_ord_mon-1 nil 3634376443 ("" (skeep) (("" (grind) nil nil)) nil)
   ((R_ord const-decl "bool" Sig_prop nil)) shostak))
 (RT_ord_uniq 0
  (thm "fin" 3634393107
   ("" (skeep)
    (("" (expand "RT")
      (("" (expand "R_ord")
        (("" (grind)
          (("" (typepred "j")
            (("" (expand "RT")
              (("" (replace -3)
                (("" (grind)
                  (("" (apply-extensionality)
                    (("" (hide 2)
                      (("" (case "j(x!1)=0")
                        (("1" (assert) nil nil)
                         ("2" (case "j(x!1) /= 0")
                          (("1" (assert)
                            (("1" (inst -2 "x!1") (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RT const-decl "IC" Sig_prop nil) (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (IC type-eq-decl nil Sig_prop nil) (R_ord const-decl "bool" Sig_prop nil))
   shostak)
  (RT_ord_uniq-1 nil 3634367904
   ("" (skeep)
    (("" (expand "RT")
      (("" (expand "R_ord")
        (("" (grind)
          (("" (typepred "j")
            (("" (expand "RT")
              (("" (replace -3) (("" (grind) (("" (postpone) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (R_ord_same 0
  (R_ord_same-1 nil 3624713299
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "R_ord")
          (("1" (expand "R_ord2")
            (("1" (grind)
              (("1" (expand "RT")
                (("1" (grind)
                  (("1" (decompose-equality -2)
                    (("1" (inst - "t!1") (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "R_ord")
          (("2" (expand "R_ord2")
            (("2" (grind)
              (("2" (expand "RT")
                (("2" (apply-extensionality)
                  (("2" (hide 2)
                    (("2" (inst -1 "x!1") (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((R_ord const-decl "bool" Sig_prop nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (RT const-decl "IC" Sig_prop nil) (R_ord2 const-decl "bool" Sig_prop nil))
   shostak))
 (comp_eq_complement 0
  (comp_eq_complement-1 nil 3638855106
   ("" (skeep)
    (("" (expand "comp")
      (("" (expand "complement") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((comp const-decl "set[I]" Sig_prop nil)
    (complement const-decl "set" sets nil))
   shostak))
 (classic_charact 0
  (classic_charact-1 nil 3638797856
   ("" (skeep)
    (("" (apply-extensionality)
      (("" (hide 2)
        (("" (grind)
          (("" (typepred "x!1")
            (("" (inst -1 "t!1") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil Sig_prop nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IC type-eq-decl nil Sig_prop nil) (fullset const-decl "set" sets nil)
    (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil)
    (intersection const-decl "set" sets nil)
    (restrict const-decl "R" restrict nil)
    (classic const-decl "set[IC]" Sig_prop nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (subset_comp 0
  (subset_comp-1 nil 3635750384
   ("" (skeep)
    (("" (expand "comp")
      (("" (expand "subset?")
        (("" (expand "member")
          (("" (split)
            (("1" (flatten) (("1" (skeep) (("1" (grind) nil nil)) nil)) nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((comp const-decl "set[I]" Sig_prop nil)
    (member const-decl "bool" sets nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (subset_classic 0
  (subset_classic-1 nil 3637584622
   ("" (skeep)
    (("" (apply-extensionality)
      (("" (hide 2)
        (("" (iff)
          (("" (split)
            (("1" (flatten) (("1" (grind) nil nil)) nil)
             ("2" (flatten)
              (("2" (typepred "x!1")
                (("2" (expand "classic") (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil Sig_prop nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IC type-eq-decl nil Sig_prop nil) (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (classic const-decl "set[IC]" Sig_prop nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil))
   shostak))
 (union_classic 0
  (union_classic-1 nil 3634980930
   ("" (skeep)
    (("" (grind)
      (("" (expand "classic")
        (("" (expand "union") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((union const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (classic const-decl "set[IC]" Sig_prop nil))
   shostak))
 (intersection_classic 0
  (intersection_classic-1 nil 3638766178
   ("" (skeep)
    (("" (apply-extensionality)
      (("" (hide 2)
        (("" (iff)
          (("" (split)
            (("1" (flatten) (("1" (grind) nil nil)) nil)
             ("2" (flatten) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil Sig_prop nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IC type-eq-decl nil Sig_prop nil)
    (intersection const-decl "set" sets nil)
    (classic const-decl "set[IC]" Sig_prop nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil))
   shostak))
 (union_bottom 0
  (union_bottom-1 nil 3634980848
   ("" (skeep)
    (("" (expand "bottom")
      (("" (expand "union")
        (("" (apply-extensionality)
          (("" (hide 2)
            (("" (iff)
              (("" (split)
                (("1" (flatten)
                  (("1" (skeep)
                    (("1" (expand "member" -1)
                      (("1" (expand "member" 1)
                        (("1" (inst 1 "j")
                          (("1" (split)
                            (("1" (split)
                              (("1" (propax) nil nil) ("2" (propax) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (expand "member" -1)
                      (("1" (skeep) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (expand "member" -1)
                      (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bottom const-decl "set[I]" Sig_prop nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (R_ord2 const-decl "bool" Sig_prop nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (union const-decl "set" sets nil))
   shostak))
 (union_top 0
  (union_top-1 nil 3637567100
   ("" (skeep)
    (("" (expand "top")
      (("" (expand "union")
        (("" (apply-extensionality)
          (("" (hide 2)
            (("" (iff)
              (("" (split)
                (("1" (flatten)
                  (("1" (skeep)
                    (("1" (expand "member" -1)
                      (("1" (expand "member" 1)
                        (("1" (inst 1 "j")
                          (("1" (split)
                            (("1" (split)
                              (("1" (propax) nil nil) ("2" (propax) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (expand "member" -1)
                      (("1" (skeep) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (expand "member" -1)
                      (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((top const-decl "set[I]" Sig_prop nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (R_ord2 const-decl "bool" Sig_prop nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (union const-decl "set" sets nil))
   shostak))
 (union_bottom_cla 0
  (union_bottom_cla-1 nil 3636790038
   ("" (skeep)
    (("" (expand "bottom")
      (("" (expand "union")
        (("" (apply-extensionality)
          (("" (hide 2)
            (("" (iff)
              (("" (split)
                (("1" (flatten)
                  (("1" (skeep)
                    (("1" (expand "member" -1)
                      (("1" (expand "member" 1)
                        (("1" (inst 1 "j")
                          (("1" (split)
                            (("1" (grind) nil nil) ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (expand "member" -1)
                      (("1" (skeep) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (expand "member" -1)
                      (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bottom const-decl "set[I]" Sig_prop nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (R_ord2 const-decl "bool" Sig_prop nil) (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil) (IC type-eq-decl nil Sig_prop nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (union const-decl "set" sets nil))
   shostak))
 (union_bottom_classic 0
  (union_bottom_classic-1 nil 3636103958
   ("" (skeep)
    (("" (lemma "union_classic")
      (("" (lemma "union_bottom")
        (("" (inst -2 "X" "Y")
          (("" (inst -1 "classic(X)" "classic(Y)")
            (("" (replaces -1 :dir rl)
              (("" (replaces -1)
                (("" (decompose-equality)
                  (("" (iff)
                    (("" (split)
                      (("1" (flatten)
                        (("1" (expand "bottom")
                          (("1" (skeep)
                            (("1" (insteep) (("1" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "bottom")
                          (("2" (skeep)
                            (("2" (insteep) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((union_classic formula-decl nil Sig_prop nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil) (set type-eq-decl nil sets nil)
    (TRUE const-decl "bool" booleans nil) (union const-decl "set" sets nil)
    (bottom const-decl "set[I]" Sig_prop nil)
    (member const-decl "bool" sets nil)
    (R_ord2 const-decl "bool" Sig_prop nil)
    (classic const-decl "set[IC]" Sig_prop nil)
    (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil)
    (IC type-eq-decl nil Sig_prop nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (union_bottom formula-decl nil Sig_prop nil))
   shostak))
 (union_top_classic 0
  (union_top_classic-1 nil 3637567586
   ("" (skeep)
    (("" (lemma "union_classic")
      (("" (lemma "union_top")
        (("" (inst -2 "X" "Y")
          (("" (inst -1 "classic(X)" "classic(Y)")
            (("" (replaces -1 :dir rl)
              (("" (replaces -1)
                (("" (decompose-equality)
                  (("" (iff)
                    (("" (split)
                      (("1" (flatten)
                        (("1" (expand "top")
                          (("1" (skeep)
                            (("1" (insteep) (("1" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "top")
                          (("2" (skeep)
                            (("2" (insteep) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((union_classic formula-decl nil Sig_prop nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil) (set type-eq-decl nil sets nil)
    (TRUE const-decl "bool" booleans nil) (union const-decl "set" sets nil)
    (top const-decl "set[I]" Sig_prop nil) (member const-decl "bool" sets nil)
    (R_ord2 const-decl "bool" Sig_prop nil)
    (classic const-decl "set[IC]" Sig_prop nil)
    (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil)
    (IC type-eq-decl nil Sig_prop nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (union_top formula-decl nil Sig_prop nil))
   shostak))
 (intersection_bottom 0
  (intersection_bottom-1 nil 3637568252
   ("" (skeep)
    (("" (expand "bottom")
      (("" (expand "intersection")
        (("" (expand "subset?")
          (("" (skeep)
            (("" (expand "member")
              (("" (split)
                (("1" (skeep)
                  (("1" (inst 1 "j") (("1" (assert) nil nil)) nil)) nil)
                 ("2" (skeep)
                  (("2" (inst 1 "j") (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bottom const-decl "set[I]" Sig_prop nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (intersection const-decl "set" sets nil))
   shostak))
 (intersection_top 0
  (intersection_top-1 nil 3637568260
   ("" (skeep)
    (("" (expand "top")
      (("" (expand "intersection")
        (("" (expand "subset?")
          (("" (skeep)
            (("" (expand "member")
              (("" (split)
                (("1" (skeep)
                  (("1" (inst 1 "j") (("1" (assert) nil nil)) nil)) nil)
                 ("2" (skeep)
                  (("2" (inst 1 "j") (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((top const-decl "set[I]" Sig_prop nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (intersection const-decl "set" sets nil))
   shostak))
 (classic_include 0
  (classic_include-1 nil 3637647720 ("" (skeep) (("" (grind) nil nil)) nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (restrict const-decl "R" restrict nil)
    (classic const-decl "set[IC]" Sig_prop nil)
    (member const-decl "bool" sets nil) (IC type-eq-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (classic_monot 0
  (classic_monot-1 nil 3635598753
   ("" (skeep) (("" (expand "classic") (("" (grind) nil nil)) nil)) nil)
   ((classic const-decl "set[IC]" Sig_prop nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (IC type-eq-decl nil Sig_prop nil) (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak))
 (bottom_include 0
  (bottom_include-1 nil 3637645526 ("" (skeep) (("" (grind) nil nil)) nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (bottom const-decl "set[I]" Sig_prop nil)
    (R_ord2 const-decl "bool" Sig_prop nil)
    (member const-decl "bool" sets nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil))
   shostak))
 (bottom_subset 0
  (bottom_subset-1 nil 3637559643
   ("" (skeep)
    (("" (expand "bottom")
      (("" (expand "subset?")
        (("" (skeep)
          (("" (expand "member")
            (("" (skeep)
              (("" (inst -1 "j")
                (("" (assert) (("" (inst 1 "j") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bottom const-decl "set[I]" Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil))
   shostak))
 (bottom_monot 0
  (bottom_monot-1 nil 3635598849
   ("" (skeep) (("" (expand "classic") (("" (grind) nil nil)) nil)) nil)
   ((classic const-decl "set[IC]" Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (extend const-decl "R" extend nil) (R_ord2 const-decl "bool" Sig_prop nil)
    (bottom const-decl "set[I]" Sig_prop nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak))
 (classic_bottom_classic 0
  (classic_bottom_classic-1 nil 3638689933
   ("" (skeep)
    (("" (apply-extensionality)
      (("" (hide 2)
        (("" (iff)
          (("" (split)
            (("1" (flatten)
              (("1" (expand "classic" -1)
                (("1" (expand "member")
                  (("1" (expand "bottom")
                    (("1" (skeep)
                      (("1" (lemma "R_ord_same")
                        (("1" (inst -1 "x!1" "j")
                          (("1" (flatten)
                            (("1" (hide -1)
                              (("1" (assert)
                                (("1" (hide -3)
                                  (("1" (lemma "RT_classic")
                                    (("1" (inst-cp -1 "j")
                                      (("1"
                                        (inst-cp -1 "x!1")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma "RT_ord_mon")
                                            (("1"
                                              (inst -1 "x!1" "j")
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (lemma "bottom_include")
                (("2" (inst -1 "classic(X)")
                  (("2" (expand "subset?")
                    (("2" (inst -1 "x!1")
                      (("2" (expand "member")
                        (("2" (assert)
                          (("2" (expand "classic" -2)
                            (("2" (assert)
                              (("2" (grind)
                                (("2" (typepred "x!1")
                                  (("2" (inst -1 "t!1")
                                    (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil Sig_prop nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IC type-eq-decl nil Sig_prop nil) (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (bottom const-decl "set[I]" Sig_prop nil)
    (classic const-decl "set[IC]" Sig_prop nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (R_ord2 const-decl "bool" Sig_prop nil)
    (subset? const-decl "bool" sets nil)
    (bottom_include formula-decl nil Sig_prop nil)
    (member const-decl "bool" sets nil) (j skolem-const-decl "I" Sig_prop nil)
    (R_ord const-decl "bool" Sig_prop nil)
    (RT_ord_mon formula-decl nil Sig_prop nil)
    (RT_classic formula-decl nil Sig_prop nil)
    (R_ord_same formula-decl nil Sig_prop nil))
   shostak))
 (top_include 0
  (top_include-1 nil 3637645569 ("" (skeep) (("" (grind) nil nil)) nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (top const-decl "set[I]" Sig_prop nil)
    (R_ord2 const-decl "bool" Sig_prop nil)
    (member const-decl "bool" sets nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil))
   shostak))
 (top_subset 0
  (top_subset-1 nil 3637566600
   ("" (skeep)
    (("" (expand "subset?")
      (("" (skeep)
        (("" (expand "member")
          (("" (expand "top")
            (("" (skeep)
              (("" (inst -1 "j")
                (("" (expand "member" -2)
                  (("" (assert) (("" (inst 1 "j") (("" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (R_ord2 const-decl "bool" Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (top const-decl "set[I]" Sig_prop nil))
   shostak))
 (top_monot 0
  (top_monot-1 nil 3637566795
   ("" (skeep) (("" (expand "classic") (("" (grind) nil nil)) nil)) nil)
   ((classic const-decl "set[IC]" Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (extend const-decl "R" extend nil) (R_ord2 const-decl "bool" Sig_prop nil)
    (top const-decl "set[I]" Sig_prop nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak))
 (simplificat 0
  (simplificat-1 nil 3636720659
   ("" (skeep)
    (("" (lemma "intersection_subset1[I]")
      (("" (inst -1 "X" "Y")
        (("" (lemma "intersection_commutative[I]")
          (("" (inst -1 "Y" "X")
            (("" (replace -1)
              (("" (hide -1)
                (("" (lemma "union_subset2[I]")
                  (("" (lemma "union_commutative[I]")
                    (("" (inst -1 "X" "intersection(X, Y)")
                      (("" (replace -1)
                        (("" (inst -2 "intersection(X, Y)" "X")
                          (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((I nonempty-type-eq-decl nil Sig_prop nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (intersection_subset1 formula-decl nil sets_lemmas nil)
    (intersection_commutative formula-decl nil sets_lemmas nil)
    (union_subset2 formula-decl nil sets_lemmas nil)
    (intersection const-decl "set" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (union_commutative formula-decl nil sets_lemmas nil)
    (set type-eq-decl nil sets nil))
   shostak))
 (union_monot 0
  (union_monot-1 nil 3637385958
   ("" (skeep) (("" (expand "union") (("" (grind) nil nil)) nil)) nil)
   ((union const-decl "set" sets nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak))
 (union_sub_tot 0
  (union_sub_tot-1 nil 3637908953
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (cut "member(i,Y) OR NOT(member(i,Y))")
            (("1" (split) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "subset?")
          (("2" (skeep) (("2" (inst -1 "x") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (union const-decl "set" sets nil) (comp const-decl "set[I]" Sig_prop nil)
    (subset? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (charact_sub 0
  (charact_sub-1 nil 3638190377
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "subset?")
          (("1" (apply-extensionality)
            (("1" (hide 2) (("1" (inst -1 "x!1") (("1" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "subset?")
          (("2" (skeep)
            (("2" (cut "member(x, Y) OR member(x, comp(Y))")
              (("1" (split)
                (("1" (propax) nil nil)
                 ("2" (cut "member(x,intersection(X, comp(Y)))")
                  (("1" (expand "member")
                    (("1" (expand "intersection" -1)
                      (("1" (flatten)
                        (("1" (lemma "empty_no_members[I]")
                          (("1" (inst -1 "x")
                            (("1" (assert)
                              (("1" (replace -4 1 :dir rl)
                                (("1" (hide 2) (("1" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil)
               ("2" (flatten) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (I nonempty-type-eq-decl nil Sig_prop nil) (set type-eq-decl nil sets nil)
    (intersection const-decl "set" sets nil)
    (comp const-decl "set[I]" Sig_prop nil)
    (emptyset const-decl "set" sets nil) (S3 type-eq-decl nil Sig_prop nil)
    (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (empty_no_members formula-decl nil sets_lemmas nil))
   shostak))
 (intersection_monot2 0
  (intersection_monot2-1 nil 3637387103
   ("" (skeep) (("" (expand "intersection") (("" (grind) nil nil)) nil)) nil)
   ((intersection const-decl "set" sets nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak))
 (classic_top_uni 0
  (classic_top_uni-1 nil 3637568416
   ("" (skeep)
    (("" (apply-extensionality)
      (("" (hide 2)
        (("" (iff)
          (("" (split)
            (("1" (flatten)
              (("1" (expand "classic")
                (("1" (expand "top")
                  (("1" (expand "member")
                    (("1" (skeep)
                      (("1" (lemma "R_ord_same")
                        (("1" (inst -1 "j" "x!1")
                          (("1" (flatten)
                            (("1" (lemma "RT_ord_mon")
                              (("1" (inst -1 "j" "x!1")
                                (("1" (assert)
                                  (("1" (expand "singleton")
                                    (("1" (assert)
                                      (("1"
                                        (replace -4 -1)
                                        (("1"
                                          (typepred "x!1")
                                          (("1"
                                            (lemma "RT_classic")
                                            (("1"
                                              (inst -1 "x!1")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (typepred "x!1")
                (("2" (lemma "RT_ord")
                  (("2" (inst -1 "i")
                    (("2" (expand "top")
                      (("2" (lemma "R_ord_same")
                        (("2" (inst -1 "i" "RT(i)")
                          (("2" (assert)
                            (("2" (expand "classic")
                              (("2" (expand "member")
                                (("2" (inst 1 "i") (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil Sig_prop nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IC type-eq-decl nil Sig_prop nil) (RT const-decl "IC" Sig_prop nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (top const-decl "set[I]" Sig_prop nil)
    (classic const-decl "set[IC]" Sig_prop nil)
    (set type-eq-decl nil sets nil)
    (nonempty_singleton_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (RT_ord formula-decl nil Sig_prop nil)
    (R_ord2 const-decl "bool" Sig_prop nil)
    (R_ord const-decl "bool" Sig_prop nil)
    (RT_ord_mon formula-decl nil Sig_prop nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (RT_classic formula-decl nil Sig_prop nil)
    (R_ord_same formula-decl nil Sig_prop nil)
    (member const-decl "bool" sets nil))
   shostak))
 (classic_total 0
  (classic_total-1 nil 3634367499
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "member")
          (("1" (expand "bottom")
            (("1" (lemma "RT_classic")
              (("1" (skeep)
                (("1" (inst -1 "j")
                  (("1" (lemma "RT_ord_mon")
                    (("1" (inst -1 "i" "j")
                      (("1" (lemma "R_ord_same")
                        (("1" (inst -1 "i" "j")
                          (("1" (split)
                            (("1" (grind) nil nil) ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "member" 1)
          (("2" (expand "bottom")
            (("2" (inst 1 "RT(i)")
              (("2" (split)
                (("1" (expand "member") (("1" (grind) nil nil)) nil)
                 ("2" (lemma "R_ord_same")
                  (("2" (inst -1 "i" "RT(i)")
                    (("2" (flatten)
                      (("2" (grind)
                        (("1" (typepred "i(t!1)") (("1" (grind) nil nil)) nil)
                         ("2" (typepred "i(t!1)") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (RT_classic formula-decl nil Sig_prop nil)
    (j skolem-const-decl "I" Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (IC type-eq-decl nil Sig_prop nil) (extend const-decl "R" extend nil)
    (classic const-decl "set[IC]" Sig_prop nil)
    (R_ord2 const-decl "bool" Sig_prop nil)
    (R_ord const-decl "bool" Sig_prop nil)
    (R_ord_same formula-decl nil Sig_prop nil)
    (RT_ord_mon formula-decl nil Sig_prop nil)
    (bottom const-decl "set[I]" Sig_prop nil)
    (RT const-decl "IC" Sig_prop nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak))
 (classic_top 0
  (nueva "para acabar" 3637585350
   ("" (skeep)
    (("" (lemma "subset_classic")
      (("" (inst -1 "S")
        (("" (lemma "classic_total")
          (("" (inst -1 "S" "i")
            (("" (replace -2 -1)
              (("" (assert)
                (("" (expand "member")
                  (("" (split)
                    (("1" (flatten) (("1" (grind) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_classic formula-decl nil Sig_prop nil)
    (classic_total formula-decl nil Sig_prop nil)
    (member const-decl "bool" sets nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (R_ord2 const-decl "bool" Sig_prop nil)
    (bottom const-decl "set[I]" Sig_prop nil)
    (RT const-decl "IC" Sig_prop nil) (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil) (set type-eq-decl nil sets nil)
    (IC type-eq-decl nil Sig_prop nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil Sig_prop nil))
   shostak)
  (classic_top-1 nil 3637568478
   ("" (skeep)
    (("" (expand "bottom")
      (("" (split)
        (("1" (flatten)
          (("1" (expand "member")
            (("1" (skeep)
              (("1" (lemma "classic_top_uni")
                (("1" (inst -1 "S" "i")
                  (("1" (expand "singleton") (("1" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (total_closed_1 0
  (total_closed_1-1 nil 3637587804
   ("" (skeep)
    (("" (expand "total_closed?")
      (("" (expand "subset?")
        (("" (skeep)
          (("" (lemma "classic_total")
            (("" (inst?) (("" (inst -2 "x") (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((total_closed? const-decl "bool" Sig_prop nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil) (set type-eq-decl nil sets nil)
    (classic_total formula-decl nil Sig_prop nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (total_closed_2 0
  (total_closed_2-1 nil 3637587843
   ("" (skeep)
    (("" (apply-extensionality)
      (("" (hide 2)
        (("" (iff)
          (("" (split)
            (("1" (flatten)
              (("1" (expand "classic" -1)
                (("1" (expand "member" -1)
                  (("1" (expand "top")
                    (("1" (skeep)
                      (("1" (lemma "R_ord_same")
                        (("1" (inst -1 "j" "x!1")
                          (("1" (flatten)
                            (("1" (assert)
                              (("1" (lemma "RT_ord_uniq")
                                (("1" (inst -1 "j" "x!1")
                                  (("1" (assert)
                                    (("1" (expand "subset?")
                                      (("1"
                                        (inst -6 "j")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" -6)
                                            (("1"
                                              (expand "bottom" -6)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand "member" -6)
                                                  (("1"
                                                    (lemma "RT_ord_uniq")
                                                    (("1"
                                                      (inst -1 "j" "j_1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma "R_ord_same")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "j"
                                                             "j_1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 -3)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (lemma "top_include")
                (("2" (inst -1 "S")
                  (("2" (lemma "classic_monot")
                    (("2" (inst -1 "S" "top(S)")
                      (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil Sig_prop nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IC type-eq-decl nil Sig_prop nil) (top const-decl "set[I]" Sig_prop nil)
    (classic const-decl "set[IC]" Sig_prop nil)
    (set type-eq-decl nil sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (classic_monot formula-decl nil Sig_prop nil)
    (top_include formula-decl nil Sig_prop nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (bottom const-decl "set[I]" Sig_prop nil)
    (j_1 skolem-const-decl "I" Sig_prop nil)
    (extend const-decl "R" extend nil) (R_ord2 const-decl "bool" Sig_prop nil)
    (R_ord const-decl "bool" Sig_prop nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (RT_ord_uniq formula-decl nil Sig_prop nil)
    (R_ord_same formula-decl nil Sig_prop nil))
   shostak))
 (total_closed_3 0
  (total_closed_3-1 nil 3637587891
   ("" (skeep)
    (("" (expand "total_closed?")
      (("" (skeep)
        (("" (lemma "singleton_subset[I]")
          (("" (inst -1 "S" "i")
            (("" (assert)
              (("" (lemma "top_subset")
                (("" (inst -1 "singleton(i)" "S" "i")
                  (("" (assert)
                    (("" (lemma "classic_monot")
                      (("" (inst -1 "top(singleton(i))" "top(S)")
                        (("" (assert)
                          (("" (lemma "classic_top_uni")
                            (("" (inst -1 "i")
                              (("" (replace -1 -2)
                                (("" (replace -5 -2)
                                  (("" (lemma "classic_include")
                                    (("" (inst -1 "S")
                                      ((""
                                        (hide -4 -5 -6 -7)
                                        ((""
                                          (hide -2)
                                          (("" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((total_closed? const-decl "bool" Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (singleton_subset formula-decl nil sets_lemmas nil)
    (nonempty_singleton_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (classic_monot formula-decl nil Sig_prop nil)
    (RT const-decl "IC" Sig_prop nil) (IC type-eq-decl nil Sig_prop nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (restrict const-decl "R" restrict nil)
    (classic const-decl "set[IC]" Sig_prop nil)
    (member const-decl "bool" sets nil)
    (classic_include formula-decl nil Sig_prop nil)
    (classic_top_uni formula-decl nil Sig_prop nil)
    (top const-decl "set[I]" Sig_prop nil)
    (top_subset formula-decl nil Sig_prop nil)
    (set type-eq-decl nil sets nil))
   shostak))
 (total_closed_caract1 0
  (total_closed_caract1-1 nil 3637648881
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (lemma "total_closed_1")
          (("1" (inst -1 "S") (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "total_closed_2")
          (("2" (lemma "total_closed_3")
            (("2" (inst -1 "S")
              (("2" (inst -2 "S") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((total_closed_1 formula-decl nil Sig_prop nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (set type-eq-decl nil sets nil) (I nonempty-type-eq-decl nil Sig_prop nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (total_closed_2 formula-decl nil Sig_prop nil)
    (total_closed_3 formula-decl nil Sig_prop nil))
   shostak))
 (total_closed_caract2 0
  (total_closed_caract2-1 nil 3637649088
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (lemma "total_closed_1")
          (("1" (lemma "total_closed_2")
            (("1" (inst -1 "S")
              (("1" (inst -2 "S") (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "total_closed_3")
          (("2" (inst -1 "S") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((total_closed_1 formula-decl nil Sig_prop nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (s3? const-decl "bool" Sig_prop nil) (S3 type-eq-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil) (set type-eq-decl nil sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (total_closed_2 formula-decl nil Sig_prop nil)
    (total_closed_3 formula-decl nil Sig_prop nil))
   shostak))
 (total_closed_caract4 0
  (total_closed_caract4-1 nil 3638518194
   ("" (skeep)
    (("" (expand "total_closed?")
      (("" (skeep)
        (("" (lemma "RT_ord")
          (("" (inst -1 "i!1")
            (("" (expand "member" 1)
              (("" (expand "subset?")
                (("" (inst -2 "RT(i!1)")
                  (("" (lemma "R_ord_same")
                    (("" (inst -1 "i!1" "RT(i!1)")
                      (("" (flatten)
                        (("" (assert)
                          (("" (hide -2 -3) (("" (grind) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((total_closed? const-decl "bool" Sig_prop nil)
    (RT_ord formula-decl nil Sig_prop nil) (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IC type-eq-decl nil Sig_prop nil) (RT const-decl "IC" Sig_prop nil)
    (restrict const-decl "R" restrict nil)
    (R_ord2 const-decl "bool" Sig_prop nil)
    (classic const-decl "set[IC]" Sig_prop nil)
    (top const-decl "set[I]" Sig_prop nil)
    (R_ord_same formula-decl nil Sig_prop nil)
    (subset? const-decl "bool" sets nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil Sig_prop nil))
   shostak))
 (total_closed_caract5 0
  (total_closed_caract5-1 nil 3638519301
   ("" (skeep)
    (("" (split)
      (("1" (expand "total_closed?")
        (("1" (flatten)
          (("1" (skeep)
            (("1" (lemma "RT_ord")
              (("1" (inst -1 "i!1")
                (("1" (expand "member" 1)
                  (("1" (expand "subset?")
                    (("1" (inst -2 "RT(i!1)")
                      (("1" (lemma "R_ord_same")
                        (("1" (inst -1 "i!1" "RT(i!1)")
                          (("1" (flatten)
                            (("1" (assert)
                              (("1" (hide -2 -3) (("1" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "total_closed_caract2")
          (("2" (inst -1 "S")
            (("2" (flatten)
              (("2" (hide -2)
                (("2" (assert)
                  (("2" (replace -1) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RT_ord formula-decl nil Sig_prop nil) (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IC type-eq-decl nil Sig_prop nil) (RT const-decl "IC" Sig_prop nil)
    (classic const-decl "set[IC]" Sig_prop nil)
    (R_ord2 const-decl "bool" Sig_prop nil)
    (top const-decl "set[I]" Sig_prop nil)
    (R_ord_same formula-decl nil Sig_prop nil)
    (subset? const-decl "bool" sets nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (total_closed? const-decl "bool" Sig_prop nil)
    (total_closed_caract2 formula-decl nil Sig_prop nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil))
   shostak))
 (bottom_classic_com_1 0
  (bottom_classic_com_1-1 nil 3637648592
   ("" (skeep)
    (("" (expand "subset?")
      (("" (skeep)
        (("" (expand "member")
          (("" (expand "bottom")
            (("" (skeep)
              (("" (expand "comp")
                (("" (expand "member")
                  (("" (skeep)
                    (("" (lemma "R_ord_same")
                      (("" (inst-cp -1 "x" "j")
                        (("" (assert)
                          (("" (inst -1 "x" "j!1")
                            (("" (assert)
                              (("" (lemma "RT_ord_mon")
                                (("" (inst-cp -1 "x" "j")
                                  (("" (inst -1 "x" "j!1")
                                    (("" (assert)
                                      ((""
                                        (hide -3 -4 -6 -8)
                                        ((""
                                          (replace -1)
                                          ((""
                                            (lemma "RT_classic")
                                            ((""
                                              (inst-cp -1 "j")
                                              (("1"
                                                (inst -1 "j!1")
                                                (("1" (grind) nil nil)
                                                 ("2" (grind) nil nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (R_ord_same formula-decl nil Sig_prop nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (j skolem-const-decl "I" Sig_prop nil) (IC type-eq-decl nil Sig_prop nil)
    (classic const-decl "set[IC]" Sig_prop nil)
    (extend const-decl "R" extend nil)
    (j!1 skolem-const-decl "I" Sig_prop nil)
    (RT_classic formula-decl nil Sig_prop nil)
    (RT_ord_mon formula-decl nil Sig_prop nil)
    (I nonempty-type-eq-decl nil Sig_prop nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil Sig_prop nil)
    (comp const-decl "set[I]" Sig_prop nil)
    (bottom const-decl "set[I]" Sig_prop nil))
   shostak))
 (bottom_classic_com_2 0
  (bottom_classic_com_2-1 nil 3637648599
   ("" (skeep)
    (("" (lemma "total_closed_caract1")
      (("" (inst -1 "S")
        (("" (flatten)
          (("" (assert)
            (("" (hide -2)
              (("" (lemma "subset_comp")
                ((""
                  (inst -1 "bottom(extend[I, IC, bool, FALSE](classic(S)))"
                   "S")
                  (("" (flatten)
                    (("" (assert)
                      (("" (hide -1 -4 -3)
                        (("" (lemma "bottom_classic_com_1")
                          (("" (inst -1 "S" "i")
                            (("" (assert)
                              (("" (lemma "subset_transitive[I]")
                                ((""
                                  (inst -1
                                   "bottom(extend[I, IC, bool, FALSE](classic(comp(S))))"
                                   "comp(bottom(extend[I, IC, bool, FALSE](classic(S))))"
                                   "comp(S)")
                                  (("" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((total_closed_caract1 formula-decl nil Sig_prop nil)
    (bottom const-decl "set[I]" Sig_prop nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IC type-eq-decl nil Sig_prop nil) (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (classic const-decl "set[IC]" Sig_prop nil)
    (bottom_classic_com_1 formula-decl nil Sig_prop nil)
    (comp const-decl "set[I]" Sig_prop nil)
    (subset_transitive formula-decl nil sets_lemmas nil)
    (subset_comp formula-decl nil Sig_prop nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (set type-eq-decl nil sets nil) (I nonempty-type-eq-decl nil Sig_prop nil)
    (S3 type-eq-decl nil Sig_prop nil) (s3? const-decl "bool" Sig_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil Sig_prop nil))
   shostak)))


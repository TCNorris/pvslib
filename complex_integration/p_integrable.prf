(p_integrable
 (mu_TCC1 0
  (mu_TCC1-1 nil 3477417010
   ("" (typepred "S")
    (("" (expand "sigma_algebra?")
      (("" (expand "subset_algebra_empty?")
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((finite_emptyset name-judgement "finite_set" finite_sets nil) nil
    nil (member const-decl "bool" sets nil)
    (subset_algebra_empty? const-decl "bool" subset_algebra_def
     measure_integration)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil p_integrable nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (S formal-const-decl "sigma_algebra[T]" p_integrable nil))
   nil
   (mu assuming
    "measure_integration@generalized_measure_def[p_integrable.T, p_integrable.S].generalized_measure_def"
    "S_empty: ASSUMPTION generalized_measure_def.S(sets[generalized_measure_def.T].emptyset)")))
 (scal_p_integrable 0
  (scal_p_integrable-1 nil 3477417010
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "p_integrable?")
        (("" (flatten)
          (("" (lemma "scal_complex_measurable")
            (("" (inst? -1 :where 1)
              (("" (hide -2)
                ((""
                  (lemma "integral.integrable_scal"
                   ("c" "abs(c!1)^p" "f" "abs(f!1)^p"))
                  (("1"
                    (case-replace
                     "(*[T](abs(c!1) ^ p, abs(f!1) ^ p))=(abs(*[T](c!1, f!1)) ^ p)")
                    (("1" (apply-extensionality :hide? t)
                      (("1" (hide-all-but 1)
                        (("1" (expand "*" 1 1)
                          (("1" (expand "^" 1 2)
                            (("1" (expand "abs" 1 2)
                              (("1"
                                (expand "^" 1 3)
                                (("1"
                                  (expand "abs" 1 3)
                                  (("1"
                                    (expand "*" 1 2)
                                    (("1"
                                      (rewrite "abs_mult")
                                      (("1"
                                        (lemma
                                         "mult_real_expt"
                                         ("x"
                                          "abs(c!1)"
                                          "y"
                                          "abs(f!1(x!1))"
                                          "a"
                                          "p"))
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil) ("3" (assert) nil nil)
                   ("4" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p_integrable nonempty-type-eq-decl nil p_integrable_def nil)
    (p_integrable? const-decl "bool" p_integrable_def nil)
    (p formal-const-decl "{a: real | a >= 1}" p_integrable nil)
    (mu formal-const-decl "measure_type[T, S]" p_integrable nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra[T]" p_integrable nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (real nonempty-type-from-decl nil reals nil)
    (T formal-type-decl nil p_integrable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex_measurable nonempty-type-eq-decl nil complex_measurable
     nil)
    (complex_measurable? const-decl "bool" complex_measurable nil)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (^ const-decl "[T -> nnreal]" real_fun_power power)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (integrable nonempty-type-eq-decl nil integral measure_integration)
    (integrable? const-decl "bool" integral measure_integration)
    (abs const-decl "nnreal" polar complex_alt)
    (^ const-decl "nnreal" real_expt power)
    (> const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integrable_scal judgement-tcc nil integral measure_integration)
    (abs_complex_measurable application-judgement "measurable_function"
     p_integrable nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (complex_measurable_def formula-decl nil complex_measurable nil)
    (Im_fun_mul2 formula-decl nil complex_fun_ops complex_alt)
    (Re_fun_mul2 formula-decl nil complex_fun_ops complex_alt)
    (abs_mult formula-decl nil polar complex_alt)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (mult_real_expt formula-decl nil real_expt power)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> complex]" complex_fun_ops complex_alt)
    (scal_complex_measurable judgement-tcc nil complex_measurable nil)
    (scal_complex_measurable application-judgement "complex_measurable"
     p_integrable nil))
   nil
   (scal_p_integrable subtype
    "complex_fun_ops[p_integrable.T].*(p_integrable.c, p_integrable.f)"
    "p_integrable[T, S, mu, p]")))
 (sum_p_integrable 0
  (sum_p_integrable-1 nil 3477417965
   ("" (skosimp)
    (("" (typepred "f1!1")
      (("" (typepred "f0!1")
        (("" (lemma "minkowski_scaf" ("f" "f0!1" "g" "f1!1"))
          (("" (flatten) nil nil)) nil))
        nil))
      nil))
    nil)
   ((p_integrable nonempty-type-eq-decl nil p_integrable_def nil)
    (p_integrable? const-decl "bool" p_integrable_def nil)
    (p formal-const-decl "{a: real | a >= 1}" p_integrable nil)
    (mu formal-const-decl "measure_type[T, S]" p_integrable nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra[T]" p_integrable nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (real nonempty-type-from-decl nil reals nil)
    (T formal-type-decl nil p_integrable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minkowski_scaf formula-decl nil minkowski_scaf nil))
   nil
   (sum_p_integrable subtype
    "(complex_fun_ops[p_integrable.T].+)(p_integrable.f0, p_integrable.f1)"
    "p_integrable[T, S, mu, p]")))
 (opp_p_integrable 0
  (opp_p_integrable-2 "" 3789905806
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "p_integrable?")
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((p_integrable nonempty-type-eq-decl nil p_integrable_def nil)
    (p_integrable? const-decl "bool" p_integrable_def nil)
    (p formal-const-decl "{a: real | a >= 1}" p_integrable nil)
    (mu formal-const-decl "measure_type[T, S]" p_integrable nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra[T]" p_integrable nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (real nonempty-type-from-decl nil reals nil)
    (T formal-type-decl nil p_integrable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil
    (complex_abs_neg formula-decl nil complex_fun_ops complex_alt)
    (complex_measurable_def formula-decl nil complex_measurable nil)
    nil)
   shostak
   (opp_p_integrable subtype
    "(complex_fun_ops[p_integrable.T].-)(p_integrable.f)"
    "p_integrable[T, S, mu, p]"))
  (opp_p_integrable-1 nil 3477417010
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "p_integrable?")
        (("" (flatten)
          (("" (rewrite "opp_complex_measurable")
            (("" (assert)
              (("" (case-replace "abs(-f!1)=abs(f!1)")
                (("" (apply-extensionality :hide? t)
                  (("" (hide-all-but 1)
                    (("" (expand "abs")
                      (("" (expand "-")
                        (("" (expand "abs")
                          (("" (expand "sq_abs")
                            (("" (assert)
                              ((""
                                (expand "sq")
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p_integrable nonempty-type-eq-decl nil p_integrable_def nil)
    (p_integrable? const-decl "bool" p_integrable_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (complex_abs_neg formula-decl nil complex_fun_ops complex_alt)
    (complex_measurable_def formula-decl nil complex_measurable nil))
   nil
   (opp_p_integrable subtype
    "(complex_fun_ops[p_integrable.T].-)(p_integrable.f)"
    "p_integrable[T, S, mu, p]")))
 (diff_p_integrable 0
  (diff_p_integrable-1 nil 3477417010
   ("" (skosimp)
    (("" (lemma "opp_p_integrable" ("f" "f1!1"))
      (("" (lemma "sum_p_integrable" ("f0" "f0!1" "f1" "-f1!1"))
        (("" (case-replace "(+[T])(f0!1, -f1!1)=(-[T])(f0!1, f1!1)")
          (("1" (hide-all-but 1)
            (("1" (typepred "f0!1")
              (("1" (typepred "f1!1")
                (("1" (lemma "opp_p_integrable" ("f" "f1!1"))
                  (("1"
                    (lemma "sum_p_integrable"
                     ("f0" "f0!1" "f1" "-f1!1"))
                    (("1" (hide -2 -3 -4)
                      (("1" (expand "+")
                        (("1" (expand "-")
                          (("1" (expand "p_integrable?")
                            (("1" (flatten)
                              (("1"
                                (expand "complex_measurable?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "Re")
                                      (("1"
                                        (expand "Im")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -1 -2)
                                            (("1"
                                              (expand "abs")
                                              (("1"
                                                (expand "abs")
                                                (("1"
                                                  (expand "sq_abs")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (expand "+")
              (("2" (expand "-")
                (("2" (expand "=")
                  (("2" (split)
                    (("1" (apply-extensionality :hide? t) nil nil)
                     ("2" (apply-extensionality :hide? t) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p_integrable nonempty-type-eq-decl nil p_integrable_def nil)
    (p_integrable? const-decl "bool" p_integrable_def nil)
    (p formal-const-decl "{a: real | a >= 1}" p_integrable nil)
    (mu formal-const-decl "measure_type[T, S]" p_integrable nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra[T]" p_integrable nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (real nonempty-type-from-decl nil reals nil)
    (T formal-type-decl nil p_integrable nil)
    (opp_p_integrable judgement-tcc nil p_integrable nil) nil
    (+ const-decl "[T -> complex]" complex_fun_ops complex_alt)
    (= const-decl "bool" complex_fun_ops complex_alt) nil
    (sum_p_integrable application-judgement "p_integrable" p_integrable
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Re const-decl "[T -> real]" complex_fun_ops complex_alt)
    (minus_real_is_real application-judgement "real" reals nil)
    (Re_neg1 formula-decl nil complex_types complex_alt)
    (Re_add1 formula-decl nil complex_types complex_alt)
    (Im_neg1 formula-decl nil complex_types complex_alt)
    (Im_add1 formula-decl nil complex_types complex_alt)
    (Re_sub1 formula-decl nil complex_types complex_alt)
    (Im_sub1 formula-decl nil complex_types complex_alt)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (sq_abs const-decl "nnreal" complex_types complex_alt)
    (abs const-decl "nnreal" polar complex_alt)
    (Im const-decl "[T -> real]" complex_fun_ops complex_alt)
    (complex_measurable? const-decl "bool" complex_measurable nil)
    (Im_fun_rew formula-decl nil complex_fun_ops complex_alt) nil nil
    (+ const-decl "complex" complex_types complex_alt)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Re_fun_rew formula-decl nil complex_fun_ops complex_alt)
    (opp_p_integrable application-judgement "p_integrable" p_integrable
     nil)
    (sum_p_integrable judgement-tcc nil p_integrable nil) nil)
   nil
   (diff_p_integrable subtype
    "(complex_fun_ops[p_integrable.T].-)(p_integrable.f0, p_integrable.f1)"
    "p_integrable[T, S, mu, p]")))
 (norm_scal 0
  (norm_scal-1 nil 3477454646
   ("" (skosimp)
    (("" (expand "norm")
      ((""
        (case-replace "(abs(c!1 * f!1) ^ p)=abs(c!1)^p * abs(f!1)^p")
        (("1" (hide -1)
          (("1" (rewrite "integral.integral_scal")
            (("1"
              (name-replace "INT" "integral.integral(abs(f!1) ^ p)")
              (("1" (rewrite "mult_real_expt")
                (("1"
                  (lemma "real_expt_times"
                   ("x" "abs(c!1)" "a" "p" "b" "1/p"))
                  (("1" (replace -1 1 rl)
                    (("1" (rewrite "div_cancel1")
                      (("1" (rewrite "real_expt_x1") nil nil)) nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2"
                    (lemma "posreal_div_posreal_is_posreal"
                     ("px" "1" "py" "p"))
                    (("2" (assert) nil nil)) nil))
                  nil)
                 ("3" (expand "INT")
                  (("3" (hide 2)
                    (("3"
                      (lemma "integral_nonneg" ("f" "abs(f!1) ^ p"))
                      (("3" (split)
                        (("1" (propax) nil nil)
                         ("2" (hide 2)
                          (("2" (skosimp)
                            (("2" (expand "^")
                              (("2"
                                (expand "abs")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (apply-extensionality :hide? t)
            (("1" (expand "^" 1 1)
              (("1" (expand "^" 1 3)
                (("1" (expand "*" 1)
                  (("1" (expand "abs" 1 1)
                    (("1" (rewrite "abs_mult")
                      (("1" (expand "abs" 1 4)
                        (("1" (rewrite "mult_real_expt") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem + "x!1")
              (("2" (expand "*")
                (("2" (expand "^" 1 2)
                  (("2" (expand "abs" 1 2)
                    (("2" (rewrite "mult_real_expt" + :dir rl)
                      (("2"
                        (lemma "abs_mult" ("z1" "c!1" "z2" "f!1(x!1)"))
                        (("2" (replace -1 1 rl)
                          (("2" (hide -1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (assert) nil nil) ("4" (assert) nil nil))
        nil))
      nil))
    nil)
   ((norm const-decl "nnreal" p_integrable_def nil)
    (abs_mult formula-decl nil polar complex_alt)
    (integral const-decl "real" integral measure_integration)
    (integral_nonneg formula-decl nil integral measure_integration)
    (real_expt_times formula-decl nil real_expt power)
    (real_expt_x1 formula-decl nil real_expt power)
    (mult_real_expt formula-decl nil real_expt power)
    (integral_scal formula-decl nil integral measure_integration)
    (integrable? const-decl "bool" integral measure_integration)
    (integrable nonempty-type-eq-decl nil integral measure_integration)
    (abs const-decl "nnreal" polar complex_alt)
    (^ const-decl "nnreal" real_expt power)
    (p_integrable nonempty-type-eq-decl nil p_integrable_def nil)
    (p_integrable? const-decl "bool" p_integrable_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (complex type-eq-decl nil complex_types complex_alt)
    (^ const-decl "[T -> nnreal]" real_fun_power power))
   shostak))
 (norm_add 0
  (norm_add-1 nil 3477590515
   ("" (skosimp)
    (("" (lemma "minkowski_scaf" ("f" "f0!1" "g" "f1!1"))
      (("" (flatten) nil nil)) nil))
    nil)
   ((p formal-const-decl "{a: real | a >= 1}" p_integrable nil)
    (mu formal-const-decl "measure_type[T, S]" p_integrable nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra[T]" p_integrable nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil p_integrable nil)
    (p_integrable nonempty-type-eq-decl nil p_integrable_def nil)
    (p_integrable? const-decl "bool" p_integrable_def nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (minkowski_scaf formula-decl nil minkowski_scaf nil))
   shostak))
 (norm_opp 0
  (norm_opp-2 "" 3789905807
   ("" (skosimp) (("" (expand "norm") (("" (assert) nil nil)) nil))
    nil)
   ((norm const-decl "nnreal" p_integrable_def nil)
    (opp_p_integrable application-judgement "p_integrable" p_integrable
     nil)
    nil
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (complex_abs_neg formula-decl nil complex_fun_ops complex_alt))
   shostak)
  (norm_opp-1 nil 3477455430
   ("" (skosimp)
    (("" (expand "norm")
      (("" (assert)
        (("" (case-replace "abs(-f!1)=abs(f!1)")
          (("" (hide 2)
            (("" (apply-extensionality :hide? t) (("" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm const-decl "nnreal" p_integrable_def nil)
    (complex_abs_neg formula-decl nil complex_fun_ops complex_alt))
   shostak))
 (norm_diff 0
  (norm_diff-1 nil 3477455509
   ("" (skosimp)
    (("" (lemma "norm_add" ("f0" "f0!1" "f1" "-f1!1"))
      (("" (rewrite "norm_opp")
        (("" (name-replace "RHS" "norm(f0!1) + norm(f1!1)")
          (("" (expand "norm")
            (("" (expand "abs")
              (("" (expand "+ ")
                (("" (expand "-")
                  (("" (assert)
                    (("" (expand "-")
                      (("" (expand "abs")
                        ((""
                          (expand "+
")
                          (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (p_integrable nonempty-type-eq-decl nil p_integrable_def nil)
    (p_integrable? const-decl "bool" p_integrable_def nil)
    (p formal-const-decl "{a: real | a >= 1}" p_integrable nil)
    (mu formal-const-decl "measure_type[T, S]" p_integrable nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra[T]" p_integrable nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (real nonempty-type-from-decl nil reals nil)
    (T formal-type-decl nil p_integrable nil)
    (norm_add formula-decl nil p_integrable nil)
    (opp_p_integrable application-judgement "p_integrable" p_integrable
     nil)
    (norm const-decl "nnreal" p_integrable_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    nil nil nil (+ const-decl "complex" complex_types complex_alt)
    (minus_real_is_real application-judgement "real" reals nil)
    (Im_rew formula-decl nil complex_types complex_alt)
    (Re_rew formula-decl nil complex_types complex_alt)
    (abs const-decl "nnreal" polar complex_alt)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (+ const-decl "[T -> complex]" complex_fun_ops complex_alt)
    (norm_opp formula-decl nil p_integrable nil))
   shostak)))


(essentially_bounded
 (mu_TCC1 0
  (mu_TCC1-1 nil 3477287079
   ("" (typepred "S")
    (("" (expand "sigma_algebra?")
      (("" (flatten)
        (("" (expand "subset_algebra_empty?") (("" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_algebra_empty? const-decl "bool" subset_algebra_def
     measure_integration)
    (finite_emptyset name-judgement "finite_set" finite_sets nil) nil
    nil (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil essentially_bounded nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (S formal-const-decl "sigma_algebra[T]" essentially_bounded nil))
   nil
   (mu assuming
    "measure_integration@generalized_measure_def[essentially_bounded.T, essentially_bounded.S].generalized_measure_def"
    "S_empty: ASSUMPTION generalized_measure_def.S(sets[generalized_measure_def.T].emptyset)")))
 (essentially_bounded_TCC1 0
  (essentially_bounded_TCC1-1 nil 3477287079
   ("" (expand "essentially_bounded?")
    (("" (rewrite "const_measurable")
      (("" (expand "ae_bounded?")
        (("" (inst + "0")
          (("" (expand "abs")
            (("" (expand "abs")
              (("" (expand "sq_abs")
                (("" (assert)
                  (("" (expand "ae_le?")
                    (("" (expand "pointwise_ae?")
                      (("" (expand "ae?")
                        (("" (expand "ae_in?")
                          (("" (inst + "emptyset[T]")
                            (("" (skosimp) (("" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((const_measurable formula-decl nil complex_measurable nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (complex_ const-decl "complex" complex_types complex_alt)
    (T formal-type-decl nil essentially_bounded nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (S formal-const-decl "sigma_algebra[T]" essentially_bounded nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (abs const-decl "nnreal" polar complex_alt)
    (Im_rew formula-decl nil complex_types complex_alt)
    (sq_0 formula-decl nil sq reals)
    (Re_rew formula-decl nil complex_types complex_alt)
    (sqrt_0 formula-decl nil sqrt reals)
    (pointwise_ae? const-decl "bool" measure_theory
     measure_integration)
    (ae_in? const-decl "bool" measure_theory measure_integration)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (mu formal-const-decl "measure_type[T, S]" essentially_bounded nil)
    (negligible_set? const-decl "bool" measure_theory
     measure_integration)
    (negligible nonempty-type-eq-decl nil measure_theory
     measure_integration)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil) nil
    nil nil nil nil nil nil
    (ae_le? const-decl "bool" measure_theory measure_integration)
    (sq_abs const-decl "nnreal" complex_types complex_alt)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (ae_bounded? const-decl "bool" complex_measure_theory nil)
    (essentially_bounded? const-decl "bool" essentially_bounded nil))
   nil
   (essentially_bounded subtype
    "(LAMBDA x: complex_types.complex_(0, 0))" "essentially_bounded")))
 (essential_bound_TCC1 0
  (essential_bound_TCC1-1 nil 3477287079
   ("" (skosimp)
    (("" (split)
      (("1" (typepred "f!1")
        (("1" (expand "essentially_bounded?")
          (("1" (flatten)
            (("1" (expand "ae_bounded?")
              (("1" (skosimp)
                (("1" (expand "extend")
                  (("1" (expand "nonempty?")
                    (("1" (expand "empty?")
                      (("1" (expand "member")
                        (("1" (inst - "K!1") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "extend")
        (("2" (expand "below_bounded")
          (("2" (inst + "0")
            (("2" (expand "lower_bound") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ae_bounded? const-decl "bool" complex_measure_theory nil)
    (extend const-decl "R" extend nil)
    (empty? const-decl "bool" sets nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (complex_measurable_def formula-decl nil complex_measurable nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (S formal-const-decl "sigma_algebra[T]" essentially_bounded nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil essentially_bounded nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (essentially_bounded? const-decl "bool" essentially_bounded nil)
    (essentially_bounded nonempty-type-eq-decl nil essentially_bounded
     nil)
    (below_bounded const-decl "bool" bounded_reals reals)
    (lower_bound const-decl "bool" bound_defs reals))
   nil
   (essential_bound subtype
    "extend[real, nnreal, booleans.bool, booleans.FALSE].extend({K | measure_theory[essentially_bounded.T, essentially_bounded.S, essentially_bounded.mu].ae_le?(complex_fun_ops[essentially_bounded.T].abs(essentially_bounded.f), LAMBDA x: essentially_bounded.K)})"
    "inf_set[real]")))
 (essential_bound_TCC2 0
  (essential_bound_TCC2-1 nil 3477287079
   ("" (skosimp)
    (("" (lemma "essential_bound_TCC1" ("f" "f!1"))
      (("" (flatten)
        ((""
          (typepred "inf[real]
          (extend[real, nnreal, bool, FALSE]
               ({K | ae_le?[T, S, mu](abs[T](f!1), LAMBDA x: K)}))")
          ((""
            (name-replace "INF" "inf[real]
          (extend[real, nnreal, bool, FALSE]
               ({K | ae_le?[T, S, mu](abs[T](f!1), LAMBDA x: K)}))")
            (("" (hide -2 -3)
              (("" (expand "greatest_lower_bound")
                (("" (flatten)
                  (("" (expand "lower_bound")
                    (("" (inst -2 "0")
                      (("" (split -2)
                        (("1" (assert) nil nil) ("2" (assert) nil nil)
                         ("3" (skosimp)
                          (("3" (typepred "z!1")
                            (("3" (case "z!1<0")
                              (("1"
                                (hide 1)
                                (("1"
                                  (expand "extend")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((essentially_bounded nonempty-type-eq-decl nil essentially_bounded
     nil)
    (essentially_bounded? const-decl "bool" essentially_bounded nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (real nonempty-type-from-decl nil reals nil)
    (T formal-type-decl nil essentially_bounded nil)
    (essential_bound_TCC1 subtype-tcc nil essentially_bounded nil)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (ae_le? const-decl "bool" measure_theory measure_integration)
    (mu formal-const-decl "measure_type[T, S]" essentially_bounded nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (S formal-const-decl "sigma_algebra[T]" essentially_bounded nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals reals)
    (below_bounded const-decl "bool" bounded_reals reals)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (inf_set type-eq-decl nil bounded_reals reals)
    (<= const-decl "bool" reals nil)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (pred type-eq-decl nil defined_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lower_bound const-decl "bool" bound_defs reals)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil
   (essential_bound subtype
    "bounded_reals[real].inf(extend[real, nnreal, booleans.bool, booleans.FALSE].extend({K | measure_theory[essentially_bounded.T, essentially_bounded.S, essentially_bounded.mu].ae_le?(complex_fun_ops[essentially_bounded.T].abs(essentially_bounded.f), LAMBDA x: essentially_bounded.K)}))"
    "nnreal")))
 (essential_bound_def1 0
  (essential_bound_def1-1 nil 3477311458
   ("" (skosimp)
    (("" (expand "essential_bound")
      (("" (lemma "essential_bound_TCC1" ("f" "f!1"))
        ((""
          (typepred "inf(extend[real, nnreal, bool, FALSE]
              ({K | ae_le?(abs(f!1), LAMBDA x: K)}))")
          ((""
            (name-replace "INF" "inf(extend[real, nnreal, bool, FALSE]
              ({K | ae_le?(abs(f!1), LAMBDA x: K)}))")
            (("" (expand "greatest_lower_bound")
              (("" (flatten)
                (("" (expand "lower_bound")
                  (("" (inst - "K!1")
                    (("" (hide -1 -2 -3 2)
                      (("" (expand "extend") (("" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((essential_bound const-decl "nnreal" essentially_bounded nil)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (ae_le? const-decl "bool" measure_theory measure_integration)
    (mu formal-const-decl "measure_type[T, S]" essentially_bounded nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (S formal-const-decl "sigma_algebra[T]" essentially_bounded nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals reals)
    (below_bounded const-decl "bool" bounded_reals reals)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (inf_set type-eq-decl nil bounded_reals reals)
    (<= const-decl "bool" reals nil)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (pred type-eq-decl nil defined_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lower_bound const-decl "bool" bound_defs reals) nil nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (essential_bound_TCC1 subtype-tcc nil essentially_bounded nil)
    (T formal-type-decl nil essentially_bounded nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (essentially_bounded? const-decl "bool" essentially_bounded nil)
    (essentially_bounded nonempty-type-eq-decl nil essentially_bounded
     nil))
   shostak))
 (essential_bound_def2 0
  (essential_bound_def2-2 "" 3789905812
   ("" (skosimp)
    (("" (lemma "essential_bound_TCC1" ("f" "f!1"))
      (("" (expand "essential_bound")
        ((""
          (typepred "inf(extend[real, nnreal, bool, FALSE]
                       ({K | ae_le?(abs(f!1), LAMBDA x: K)}))")
          (("1"
            (name-replace "INF" "inf(extend[real, nnreal, bool, FALSE]
                       ({K | ae_le?(abs(f!1), LAMBDA x: K)}))")
            (("1" (flatten)
              (("1"
                (name "X"
                      "{a:real | a >= 0 & ae_le?(abs(f!1), LAMBDA x: a)}")
                (("1" (case "nonempty?[real](X)")
                  (("1" (case "below_bounded[real](X)")
                    (("1" (hide -5 -6)
                      (("1" (name "M" "lambda (n:posnat): inf(X)+1/n")
                        (("1" (case "forall (n:posnat): X(M(n))")
                          (("1" (case-replace "inf(X)=INF")
                            (("1" (hide -1)
                              (("1"
                                (expand "greatest_lower_bound")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (case
                                     "convergence?(lambda (n:nat): M(n+1),INF)")
                                    (("1"
                                      (expand "lower_bound")
                                      (("1"
                                        (name
                                         "E"
                                         "lambda (n:nat): choose({N:null_set[T,S,mu] | FORALL x: (not N(x)) => abs(f!1(x)) <= M(1+n)})")
                                        (("1"
                                          (case "null_set?(IUnion(E))")
                                          (("1"
                                            (case
                                             "forall x: (not IUnion(E)(x)) => abs(f!1(x)) <= INF")
                                            (("1"
                                              (expand "ae_le?")
                                              (("1"
                                                (expand
                                                 "pointwise_ae?")
                                                (("1"
                                                  (expand "ae?")
                                                  (("1"
                                                    (expand "fullset")
                                                    (("1"
                                                      (expand "ae_in?")
                                                      (("1"
                                                        (inst
                                                         +
                                                         "IUnion(E)")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (expand
                                                             "member")
                                                            (("1"
                                                              (expand
                                                               "abs"
                                                               2)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "x!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (expand "IUnion" 1)
                                                    (("2"
                                                      (inst
                                                       -9
                                                       "abs(f!1(x!1))")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -9)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               2
                                                               rl)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (case
                                                               "z!1<abs(f!1(x!1))")
                                                              (("1"
                                                                (hide
                                                                 1)
                                                                (("1"
                                                                  (typepred
                                                                   "z!1")
                                                                  (("1"
                                                                    (expand
                                                                     "extend"
                                                                     -1)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst
                                                                         -11
                                                                         "z!1")
                                                                        (("1"
                                                                          (expand
                                                                           "<="
                                                                           -11)
                                                                          (("1"
                                                                            (split
                                                                             -11)
                                                                            (("1"
                                                                              (name
                                                                               "EPS"
                                                                               "z!1-INF")
                                                                              (("1"
                                                                                (case
                                                                                 "EPS>0")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "archimedean"
                                                                                   ("px"
                                                                                    "EPS"))
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -10
                                                                                       "n!1+1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "X"
                                                                                         -10)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (case
                                                                                             "INF < M(1 + n!1) & M(1 + n!1) < z!1")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 +
                                                                                                 "n!1")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "E"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "choose_member"
                                                                                                     ("a"
                                                                                                      "{N: null_set[T, S, mu] |
                FORALL x: (NOT N(x)) => abs(f!1(x)) <= M(1 + n!1)}"))
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "EE"
                                                                                                       "choose({N: null_set[T, S, mu] |
                FORALL x: (NOT N(x)) => abs(f!1(x)) <= M(1 + n!1)})")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "x!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "empty?")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "member")
                                                                                                              (("2"
                                                                                                                (hide-all-but
                                                                                                                 (-1
                                                                                                                  -14))
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "ae_le?")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "pointwise_ae?")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "ae?")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "fullset")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "ae_in?")
                                                                                                                          (("2"
                                                                                                                            (skosimp)
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "E!1")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "negligible_set?")
                                                                                                                                (("2"
                                                                                                                                  (skosimp)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "X!1")
                                                                                                                                    (("2"
                                                                                                                                      (skosimp)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "x!2")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "abs"
                                                                                                                                           -3)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "subset?")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "x!2")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         (1
                                                                                                          -14))
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "nonempty?")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "ae_le?")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "empty?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "pointwise_ae?")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "ae?")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "fullset")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "ae_in?")
                                                                                                                      (("2"
                                                                                                                        (skosimp)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "E!1")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "negligible_set?")
                                                                                                                            (("2"
                                                                                                                              (skosimp)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -3
                                                                                                                                 "X!1")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "subset?")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "member")
                                                                                                                                    (("2"
                                                                                                                                      (skosimp)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "x!2")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "x!2")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "abs"
                                                                                                                                             -3)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -12
                                                                                               *
                                                                                               rl)
                                                                                              (("2"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  -2
                                                                                                  -3
                                                                                                  -4
                                                                                                  -5
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "posreal_div_posreal_is_posreal"
                                                                                                     ("px"
                                                                                                      "1"
                                                                                                      "py"
                                                                                                      "1+n!1"))
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -4
                                                                                                         -2
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "both_sides_div_pos_lt2"
                                                                                                           ("pz"
                                                                                                            "1"
                                                                                                            "py"
                                                                                                            "n!1"
                                                                                                            "px"
                                                                                                            "1+n!1"))
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (reveal
                                                                               2)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "null_IUnion")
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst -2 "1+n!1")
                                            (("2"
                                              (expand "X" -2)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (hide-all-but
                                                   (-2 -3 1))
                                                  (("2"
                                                    (expand
                                                     "nonempty?")
                                                    (("2"
                                                      (expand "empty?")
                                                      (("2"
                                                        (expand
                                                         "ae_le?")
                                                        (("2"
                                                          (expand
                                                           "pointwise_ae?")
                                                          (("2"
                                                            (expand
                                                             "ae?")
                                                            (("2"
                                                              (expand
                                                               "fullset")
                                                              (("2"
                                                                (expand
                                                                 "ae_in?")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (typepred
                                                                       "E!1")
                                                                      (("2"
                                                                        (expand
                                                                         "negligible_set?")
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (inst
                                                                             -3
                                                                             "X!1")
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (expand
                                                                                 "subset?"
                                                                                 -2)
                                                                                (("2"
                                                                                  (inst
                                                                                   -2
                                                                                   "x!1")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -4
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "abs"
                                                                                         -4)
                                                                                        (("2"
                                                                                          (replace
                                                                                           2)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite
                                       "metric_convergence_def")
                                      (("2"
                                        (replace -2 1 rl)
                                        (("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (expand
                                             "metric_converges_to")
                                            (("2"
                                              (expand "ball")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (lemma
                                                     "archimedean"
                                                     ("px" "r!1"))
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst
                                                         +
                                                         "n!1-1")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (rewrite
                                                             "real_props.abs_mult")
                                                            (("2"
                                                              (lemma
                                                               "posreal_div_posreal_is_posreal"
                                                               ("px"
                                                                "1"
                                                                "py"
                                                                "1+i!1"))
                                                              (("2"
                                                                (expand
                                                                 "abs")
                                                                (("2"
                                                                  (rewrite
                                                                   "one_times")
                                                                  (("2"
                                                                    (rewrite
                                                                     "div_mult_pos_lt1"
                                                                     -)
                                                                    (("2"
                                                                      (rewrite
                                                                       "div_mult_pos_lt1"
                                                                       +)
                                                                      (("2"
                                                                        (lemma
                                                                         "both_sides_times_pos_le1"
                                                                         ("pz"
                                                                          "r!1"
                                                                          "x"
                                                                          "n!1"
                                                                          "y"
                                                                          "1+i!1"))
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (1 -6 -3 -4))
                              (("2"
                                (typepred "inf(X)")
                                (("2"
                                  (expand "extend")
                                  (("2"
                                    (expand "greatest_lower_bound")
                                    (("2"
                                      (expand "lower_bound")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (inst -2 "INF")
                                          (("2"
                                            (replace 1)
                                            (("2"
                                              (split -2)
                                              (("1"
                                                (inst -6 "inf(X)")
                                                (("1"
                                                  (split -6)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (skosimp)
                                                    (("3"
                                                      (typepred "z!1")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (case
                                                           "z!1<inf(X)")
                                                          (("1"
                                                            (hide 1)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "z!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "X"
                                                                 1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (case "z!1<INF")
                                                  (("1"
                                                    (typepred "z!1")
                                                    (("1"
                                                      (expand "X" -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide 1)
                                                          (("1"
                                                            (hide -8)
                                                            (("1"
                                                              (inst
                                                               -7
                                                               "z!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (1 -1 -2 -3))
                            (("2" (typepred "inf(X)")
                              (("2"
                                (expand "greatest_lower_bound")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "lower_bound")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (lemma
                                         "posreal_div_posreal_is_posreal"
                                         ("px" "1" "py" "n!1"))
                                        (("2"
                                          (inst -3 "inf(X) + 1 / n!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (case "z!1<M(n!1)")
                                                (("1"
                                                  (typepred "z!1")
                                                  (("1"
                                                    (hide 1)
                                                    (("1"
                                                      (expand "X")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide-all-but
                                                               (-2
                                                                -3
                                                                1))
                                                              (("1"
                                                                (expand
                                                                 "ae_le?")
                                                                (("1"
                                                                  (expand
                                                                   "pointwise_ae?")
                                                                  (("1"
                                                                    (expand
                                                                     "ae?")
                                                                    (("1"
                                                                      (expand
                                                                       "fullset")
                                                                      (("1"
                                                                        (expand
                                                                         "ae_in?")
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "E!1")
                                                                            (("1"
                                                                              (skosimp)
                                                                              (("1"
                                                                                (expand
                                                                                 "member")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "x!1")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "abs")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "M")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-1 -5 1))
                      (("2" (expand "below_bounded")
                        (("2" (skosimp)
                          (("2" (expand "X")
                            (("2" (inst + "n!1")
                              (("2"
                                (expand "extend")
                                (("2"
                                  (expand "lower_bound")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (typepred "z!1")
                                      (("2" (inst - "z!1") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (1 -3))
                    (("2" (expand "extend")
                      (("2" (expand "nonempty?")
                        (("2" (expand "empty?")
                          (("2" (expand "member")
                            (("2" (skosimp)
                              (("2"
                                (inst - "x!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (prop)
                                    (("2"
                                      (expand "X")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((essentially_bounded nonempty-type-eq-decl nil essentially_bounded
     nil)
    (essentially_bounded? const-decl "bool" essentially_bounded nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (real nonempty-type-from-decl nil reals nil)
    (T formal-type-decl nil essentially_bounded nil)
    (essential_bound_TCC1 subtype-tcc nil essentially_bounded nil)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (ae_le? const-decl "bool" measure_theory measure_integration)
    (mu formal-const-decl "measure_type[T, S]" essentially_bounded nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (S formal-const-decl "sigma_algebra[T]" essentially_bounded nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals reals)
    (below_bounded const-decl "bool" bounded_reals reals)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (inf_set type-eq-decl nil bounded_reals reals)
    (<= const-decl "bool" reals nil)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (pred type-eq-decl nil defined_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil) nil nil nil
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (one_times formula-decl nil extra_tegies nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (abs_mult formula-decl nil real_props nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (lower_bound const-decl "bool" bound_defs reals) nil
    (IUnion const-decl "set[T]" indexed_sets nil)
    (< const-decl "bool" reals nil)
    (archimedean formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_div_pos_lt2 formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    nil (int_minus_int_is_int application-judgement "int" integers nil)
    nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    nil (empty? const-decl "bool" sets nil) nil
    (choose_member formula-decl nil sets_lemmas nil) nil nil nil nil
    (ae_in? const-decl "bool" measure_theory measure_integration)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (member const-decl "bool" sets nil)
    (negligible_set? const-decl "bool" measure_theory
     measure_integration)
    (negligible nonempty-type-eq-decl nil measure_theory
     measure_integration)
    nil (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory
     measure_integration)
    (null_IUnion judgement-tcc nil measure_theory measure_integration)
    (choose const-decl "(p)" sets nil)
    (abs const-decl "nnreal" polar complex_alt)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (null_set nonempty-type-eq-decl nil measure_theory
     measure_integration)
    (null_set? const-decl "bool" measure_theory measure_integration)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (convergence? const-decl "bool" topological_convergence topology)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     metric_space)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology metric_space)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    nil
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (essential_bound const-decl "nnreal" essentially_bounded nil))
   shostak)
  (essential_bound_def2-1 nil 3477312383
   ("" (skosimp)
    (("" (lemma "essential_bound_TCC1" ("f" "f!1"))
      (("" (expand "essential_bound")
        ((""
          (typepred "inf(extend[real, nnreal, bool, FALSE]
                       ({K | ae_le?(abs(f!1), LAMBDA x: K)}))")
          (("1"
            (name-replace "INF" "inf(extend[real, nnreal, bool, FALSE]
                       ({K | ae_le?(abs(f!1), LAMBDA x: K)}))")
            (("1" (flatten)
              (("1"
                (name "X"
                      "{a:real | a >= 0 & ae_le?(abs(f!1), LAMBDA x: a)}")
                (("1" (case "nonempty?[real](X)")
                  (("1" (case "below_bounded[real](X)")
                    (("1" (hide -5 -6)
                      (("1" (name "M" "lambda (n:posnat): inf(X)+1/n")
                        (("1" (case "forall (n:posnat): X(M(n))")
                          (("1" (case-replace "inf(X)=INF")
                            (("1" (hide -1)
                              (("1"
                                (expand "greatest_lower_bound")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (case
                                     "convergence?(lambda (n:nat): M(n+1),INF)")
                                    (("1"
                                      (expand "lower_bound")
                                      (("1"
                                        (name
                                         "E"
                                         "lambda (n:nat): choose({N:null_set[T,S,mu] | FORALL x: (not N(x)) => abs(f!1(x)) <= M(1+n)})")
                                        (("1"
                                          (case "null_set?(IUnion(E))")
                                          (("1"
                                            (case
                                             "forall x: (not IUnion(E)(x)) => abs(f!1(x)) <= INF")
                                            (("1"
                                              (expand "ae_le?")
                                              (("1"
                                                (expand
                                                 "pointwise_ae?")
                                                (("1"
                                                  (expand "ae?")
                                                  (("1"
                                                    (expand "fullset")
                                                    (("1"
                                                      (expand "ae_in?")
                                                      (("1"
                                                        (inst
                                                         +
                                                         "IUnion(E)")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (expand
                                                             "member")
                                                            (("1"
                                                              (expand
                                                               "abs"
                                                               2)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "x!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (expand "IUnion" 1)
                                                    (("2"
                                                      (inst
                                                       -9
                                                       "abs(f!1(x!1))")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -9)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               2
                                                               rl)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (case
                                                               "z!1<abs(f!1(x!1))")
                                                              (("1"
                                                                (hide
                                                                 1)
                                                                (("1"
                                                                  (typepred
                                                                   "z!1")
                                                                  (("1"
                                                                    (expand
                                                                     "extend"
                                                                     -1)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst
                                                                         -11
                                                                         "z!1")
                                                                        (("1"
                                                                          (expand
                                                                           "<="
                                                                           -11)
                                                                          (("1"
                                                                            (split
                                                                             -11)
                                                                            (("1"
                                                                              (name
                                                                               "EPS"
                                                                               "z!1-INF")
                                                                              (("1"
                                                                                (case
                                                                                 "EPS>0")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "archimedean"
                                                                                   ("px"
                                                                                    "EPS"))
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -10
                                                                                       "n!1+1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "X"
                                                                                         -10)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (case
                                                                                             "INF < M(1 + n!1) & M(1 + n!1) < z!1")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 +
                                                                                                 "n!1")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "E"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "choose_member"
                                                                                                     ("a"
                                                                                                      "{N: null_set[T, S, mu] |
                FORALL x: (NOT N(x)) => abs(f!1(x)) <= M(1 + n!1)}"))
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "EE"
                                                                                                       "choose({N: null_set[T, S, mu] |
                FORALL x: (NOT N(x)) => abs(f!1(x)) <= M(1 + n!1)})")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "x!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "empty?")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "member")
                                                                                                              (("2"
                                                                                                                (hide-all-but
                                                                                                                 (-1
                                                                                                                  -14))
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "ae_le?")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "pointwise_ae?")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "ae?")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "fullset")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "ae_in?")
                                                                                                                          (("2"
                                                                                                                            (skosimp)
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "E!1")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "negligible_set?")
                                                                                                                                (("2"
                                                                                                                                  (skosimp)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "X!1")
                                                                                                                                    (("2"
                                                                                                                                      (skosimp)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "x!2")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "abs"
                                                                                                                                           -3)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "subset?")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "x!2")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         (1
                                                                                                          -14))
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "nonempty?")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "ae_le?")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "empty?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "pointwise_ae?")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "ae?")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "fullset")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "ae_in?")
                                                                                                                      (("2"
                                                                                                                        (skosimp)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "E!1")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "negligible_set?")
                                                                                                                            (("2"
                                                                                                                              (skosimp)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -3
                                                                                                                                 "X!1")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "subset?")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "member")
                                                                                                                                    (("2"
                                                                                                                                      (skosimp)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "x!2")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "x!2")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "abs"
                                                                                                                                             -3)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -12
                                                                                               *
                                                                                               rl)
                                                                                              (("2"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  -2
                                                                                                  -3
                                                                                                  -4
                                                                                                  -5
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "posreal_div_posreal_is_posreal"
                                                                                                     ("px"
                                                                                                      "1"
                                                                                                      "py"
                                                                                                      "1+n!1"))
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -4
                                                                                                         -2
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "both_sides_div_pos_lt2"
                                                                                                           ("pz"
                                                                                                            "1"
                                                                                                            "py"
                                                                                                            "n!1"
                                                                                                            "px"
                                                                                                            "1+n!1"))
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (reveal
                                                                               2)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "null_IUnion")
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (inst -2 "1+n!1")
                                            (("2"
                                              (expand "X" -2)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (hide-all-but
                                                   (-2 -3 1))
                                                  (("2"
                                                    (expand
                                                     "nonempty?")
                                                    (("2"
                                                      (expand "empty?")
                                                      (("2"
                                                        (expand
                                                         "ae_le?")
                                                        (("2"
                                                          (expand
                                                           "pointwise_ae?")
                                                          (("2"
                                                            (expand
                                                             "ae?")
                                                            (("2"
                                                              (expand
                                                               "fullset")
                                                              (("2"
                                                                (expand
                                                                 "ae_in?")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (typepred
                                                                       "E!1")
                                                                      (("2"
                                                                        (expand
                                                                         "negligible_set?")
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (inst
                                                                             -3
                                                                             "X!1")
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (expand
                                                                                 "subset?"
                                                                                 -2)
                                                                                (("2"
                                                                                  (inst
                                                                                   -2
                                                                                   "x!1")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -4
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "abs"
                                                                                         -4)
                                                                                        (("2"
                                                                                          (replace
                                                                                           2)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite
                                       "metric_convergence_def")
                                      (("2"
                                        (replace -2 1 rl)
                                        (("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (expand
                                             "metric_converges_to")
                                            (("2"
                                              (expand "ball")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (lemma
                                                     "archimedean"
                                                     ("px" "r!1"))
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst
                                                         +
                                                         "n!1-1")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (rewrite
                                                             "real_props.abs_mult")
                                                            (("2"
                                                              (lemma
                                                               "posreal_div_posreal_is_posreal"
                                                               ("px"
                                                                "1"
                                                                "py"
                                                                "1+i!1"))
                                                              (("2"
                                                                (expand
                                                                 "abs")
                                                                (("2"
                                                                  (rewrite
                                                                   "neg_neg")
                                                                  (("2"
                                                                    (rewrite
                                                                     "one_times")
                                                                    (("2"
                                                                      (rewrite
                                                                       "div_mult_pos_lt1"
                                                                       -)
                                                                      (("2"
                                                                        (rewrite
                                                                         "div_mult_pos_lt1"
                                                                         +)
                                                                        (("2"
                                                                          (lemma
                                                                           "both_sides_times_pos_le1"
                                                                           ("pz"
                                                                            "r!1"
                                                                            "x"
                                                                            "n!1"
                                                                            "y"
                                                                            "1+i!1"))
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (1 -6 -3 -4))
                              (("2"
                                (typepred "inf(X)")
                                (("2"
                                  (expand "extend")
                                  (("2"
                                    (expand "greatest_lower_bound")
                                    (("2"
                                      (expand "lower_bound")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (inst -2 "INF")
                                          (("2"
                                            (replace 1)
                                            (("2"
                                              (split -2)
                                              (("1"
                                                (inst -6 "inf(X)")
                                                (("1"
                                                  (split -6)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (skosimp)
                                                    (("3"
                                                      (typepred "z!1")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (case
                                                           "z!1<inf(X)")
                                                          (("1"
                                                            (hide 1)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "z!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "X"
                                                                 1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (case "z!1<INF")
                                                  (("1"
                                                    (typepred "z!1")
                                                    (("1"
                                                      (expand "X" -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide 1)
                                                          (("1"
                                                            (hide -8)
                                                            (("1"
                                                              (inst
                                                               -7
                                                               "z!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (1 -1 -2 -3))
                            (("2" (typepred "inf(X)")
                              (("2"
                                (expand "greatest_lower_bound")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "lower_bound")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (lemma
                                         "posreal_div_posreal_is_posreal"
                                         ("px" "1" "py" "n!1"))
                                        (("2"
                                          (inst -3 "inf(X) + 1 / n!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (case "z!1<M(n!1)")
                                                (("1"
                                                  (typepred "z!1")
                                                  (("1"
                                                    (hide 1)
                                                    (("1"
                                                      (expand "X")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide-all-but
                                                               (-2
                                                                -3
                                                                1))
                                                              (("1"
                                                                (expand
                                                                 "ae_le?")
                                                                (("1"
                                                                  (expand
                                                                   "pointwise_ae?")
                                                                  (("1"
                                                                    (expand
                                                                     "ae?")
                                                                    (("1"
                                                                      (expand
                                                                       "fullset")
                                                                      (("1"
                                                                        (expand
                                                                         "ae_in?")
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "E!1")
                                                                            (("1"
                                                                              (skosimp)
                                                                              (("1"
                                                                                (expand
                                                                                 "member")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "x!1")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "abs")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "M")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-1 -5 1))
                      (("2" (expand "below_bounded")
                        (("2" (skosimp)
                          (("2" (expand "X")
                            (("2" (inst + "n!1")
                              (("2"
                                (expand "extend")
                                (("2"
                                  (expand "lower_bound")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (typepred "z!1")
                                      (("2" (inst - "z!1") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (1 -3))
                    (("2" (expand "extend")
                      (("2" (expand "nonempty?")
                        (("2" (expand "empty?")
                          (("2" (expand "member")
                            (("2" (skosimp)
                              (("2"
                                (inst - "x!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (prop)
                                    (("2"
                                      (expand "X")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((complex type-eq-decl nil complex_types complex_alt)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (ae_le? const-decl "bool" measure_theory measure_integration)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals reals)
    (below_bounded const-decl "bool" bounded_reals reals)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (inf_set type-eq-decl nil bounded_reals reals)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (metric_convergence_def formula-decl nil metric_space metric_space)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (lower_bound const-decl "bool" bound_defs reals)
    (subset? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (ae_in? const-decl "bool" measure_theory measure_integration)
    (member const-decl "bool" sets nil)
    (negligible_set? const-decl "bool" measure_theory
     measure_integration)
    (negligible nonempty-type-eq-decl nil measure_theory
     measure_integration)
    (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory
     measure_integration)
    (null_IUnion judgement-tcc nil measure_theory measure_integration)
    (choose const-decl "(p)" sets nil)
    (abs const-decl "nnreal" polar complex_alt)
    (null_set nonempty-type-eq-decl nil measure_theory
     measure_integration)
    (null_set? const-decl "bool" measure_theory measure_integration)
    (convergence? const-decl "bool" topological_convergence topology)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     metric_space)
    (sequence type-eq-decl nil sequences nil)
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology metric_space))
   shostak))
 (scal_essentially_bounded 0
  (scal_essentially_bounded-2 "" 3789905812
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "essentially_bounded?")
        (("" (flatten)
          (("" (hide -1)
            (("" (expand "ae_bounded?")
              (("" (skosimp)
                (("" (inst + "abs(c!1)*K!1")
                  (("" (expand "ae_le?")
                    (("" (expand "pointwise_ae?")
                      (("" (expand "ae?")
                        (("" (expand "fullset")
                          (("" (expand "ae_in?")
                            (("" (skosimp)
                              ((""
                                (inst + "E!1")
                                ((""
                                  (skosimp)
                                  ((""
                                    (inst - "x!1")
                                    ((""
                                      (assert)
                                      ((""
                                        (hide 1)
                                        ((""
                                          (expand "abs" -1)
                                          ((""
                                            (expand "abs" 1 1)
                                            ((""
                                              (expand "*")
                                              ((""
                                                (rewrite "abs_mult")
                                                ((""
                                                  (typepred "abs(c!1)")
                                                  ((""
                                                    (expand ">=")
                                                    ((""
                                                      (expand "<=" -1)
                                                      ((""
                                                        (split)
                                                        (("1"
                                                          (lemma
                                                           "both_sides_times_pos_le1"
                                                           ("pz"
                                                            "abs(c!1)"
                                                            "x"
                                                            "abs(f!1(x!1))"
                                                            "y"
                                                            "K!1"))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -1
                                                           *
                                                           rl)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((essentially_bounded nonempty-type-eq-decl nil essentially_bounded
     nil)
    (essentially_bounded? const-decl "bool" essentially_bounded nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (real nonempty-type-from-decl nil reals nil)
    (T formal-type-decl nil essentially_bounded nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ae_bounded? const-decl "bool" complex_measure_theory nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "nnreal" polar complex_alt)
    (pointwise_ae? const-decl "bool" measure_theory
     measure_integration)
    (fullset const-decl "set" sets nil) nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    nil (<= const-decl "bool" reals nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs_mult formula-decl nil polar complex_alt)
    (TRUE const-decl "bool" booleans nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (S formal-const-decl "sigma_algebra[T]" essentially_bounded nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (mu formal-const-decl "measure_type[T, S]" essentially_bounded nil)
    (negligible_set? const-decl "bool" measure_theory
     measure_integration)
    (negligible nonempty-type-eq-decl nil measure_theory
     measure_integration)
    (ae_in? const-decl "bool" measure_theory measure_integration) nil
    nil nil
    (ae_le? const-decl "bool" measure_theory measure_integration) nil)
   shostak
   (scal_essentially_bounded subtype
    "complex_fun_ops[essentially_bounded.T].*(essentially_bounded.c, essentially_bounded.f)"
    "essentially_bounded"))
  (scal_essentially_bounded-1 nil 3477802082
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "essentially_bounded?")
        (("" (flatten)
          (("" (rewrite "scal_complex_measurable")
            (("" (hide -1)
              (("" (expand "ae_bounded?")
                (("" (skosimp)
                  (("" (inst + "abs(c!1)*K!1")
                    (("" (expand "ae_le?")
                      (("" (expand "pointwise_ae?")
                        (("" (expand "ae?")
                          (("" (expand "fullset")
                            (("" (expand "ae_in?")
                              ((""
                                (skosimp)
                                ((""
                                  (inst + "E!1")
                                  ((""
                                    (skosimp)
                                    ((""
                                      (inst - "x!1")
                                      ((""
                                        (assert)
                                        ((""
                                          (hide 1)
                                          ((""
                                            (expand "abs" -1)
                                            ((""
                                              (expand "abs" 1 1)
                                              ((""
                                                (expand "*")
                                                ((""
                                                  (rewrite "abs_mult")
                                                  ((""
                                                    (typepred
                                                     "abs(c!1)")
                                                    ((""
                                                      (expand ">=")
                                                      ((""
                                                        (expand
                                                         "<="
                                                         -1)
                                                        ((""
                                                          (split)
                                                          (("1"
                                                            (lemma
                                                             "both_sides_times_pos_le1"
                                                             ("pz"
                                                              "abs(c!1)"
                                                              "x"
                                                              "abs(f!1(x!1))"
                                                              "y"
                                                              "K!1"))
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -1
                                                             *
                                                             rl)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complex type-eq-decl nil complex_types complex_alt)
    (ae_bounded? const-decl "bool" complex_measure_theory nil)
    (abs const-decl "nnreal" polar complex_alt)
    (pointwise_ae? const-decl "bool" measure_theory
     measure_integration)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (abs_mult formula-decl nil polar complex_alt)
    (set type-eq-decl nil sets nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (negligible_set? const-decl "bool" measure_theory
     measure_integration)
    (negligible nonempty-type-eq-decl nil measure_theory
     measure_integration)
    (ae_in? const-decl "bool" measure_theory measure_integration)
    (ae_le? const-decl "bool" measure_theory measure_integration))
   nil
   (scal_essentially_bounded subtype
    "complex_fun_ops[essentially_bounded.T].*(essentially_bounded.c, essentially_bounded.f)"
    "essentially_bounded")))
 (add_essentially_bounded 0
  (add_essentially_bounded-2 "" 3789905813
   ("" (skosimp)
    (("" (typepred "f0!1")
      (("" (typepred "f1!1")
        (("" (expand "essentially_bounded?")
          (("" (flatten)
            (("" (hide -1 -3)
              (("" (expand "ae_bounded?")
                (("" (skosimp*)
                  (("" (inst + "K!1+K!2")
                    (("" (expand "ae_le?")
                      (("" (expand "pointwise_ae?")
                        (("" (expand "ae?")
                          (("" (expand "fullset")
                            (("" (expand "ae_in?")
                              ((""
                                (skosimp*)
                                ((""
                                  (inst + "union(E!1,E!2)")
                                  ((""
                                    (skosimp)
                                    ((""
                                      (inst - "x!1")
                                      ((""
                                        (inst - "x!1")
                                        ((""
                                          (expand "union")
                                          ((""
                                            (expand "member")
                                            ((""
                                              (flatten)
                                              ((""
                                                (assert)
                                                ((""
                                                  (hide 1 2)
                                                  ((""
                                                    (expand "abs")
                                                    ((""
                                                      (expand "+")
                                                      ((""
                                                        (lemma
                                                         "abs_triangle"
                                                         ("z1"
                                                          "f0!1(x!1)"
                                                          "z2"
                                                          "f1!1(x!1)"))
                                                        ((""
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((essentially_bounded nonempty-type-eq-decl nil essentially_bounded
     nil)
    (essentially_bounded? const-decl "bool" essentially_bounded nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (real nonempty-type-from-decl nil reals nil)
    (T formal-type-decl nil essentially_bounded nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil
    (ae_le? const-decl "bool" measure_theory measure_integration) nil
    nil nil
    (ae_in? const-decl "bool" measure_theory measure_integration) nil
    (union const-decl "set" sets nil)
    (negligible nonempty-type-eq-decl nil measure_theory
     measure_integration)
    (negligible_set? const-decl "bool" measure_theory
     measure_integration)
    (mu formal-const-decl "measure_type[T, S]" essentially_bounded nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (S formal-const-decl "sigma_algebra[T]" essentially_bounded nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (TRUE const-decl "bool" booleans nil)
    (+ const-decl "[T -> complex]" complex_fun_ops complex_alt)
    (abs_triangle formula-decl nil polar complex_alt)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory
     measure_integration)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (ae_bounded? const-decl "bool" complex_measure_theory nil))
   shostak
   (add_essentially_bounded subtype
    "(complex_fun_ops[essentially_bounded.T].+)(essentially_bounded.f0, essentially_bounded.f1)"
    "essentially_bounded"))
  (add_essentially_bounded-1 nil 3477802082
   ("" (skosimp)
    (("" (typepred "f0!1")
      (("" (typepred "f1!1")
        (("" (expand "essentially_bounded?")
          (("" (flatten)
            (("" (rewrite "sum_complex_measurable")
              (("" (hide -1 -3)
                (("" (expand "ae_bounded?")
                  (("" (skosimp*)
                    (("" (inst + "K!1+K!2")
                      (("" (expand "ae_le?")
                        (("" (expand "pointwise_ae?")
                          (("" (expand "ae?")
                            (("" (expand "fullset")
                              ((""
                                (expand "ae_in?")
                                ((""
                                  (skosimp*)
                                  ((""
                                    (inst + "union(E!1,E!2)")
                                    ((""
                                      (skosimp)
                                      ((""
                                        (inst - "x!1")
                                        ((""
                                          (inst - "x!1")
                                          ((""
                                            (expand "union")
                                            ((""
                                              (expand "member")
                                              ((""
                                                (flatten)
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (hide 1 2)
                                                    ((""
                                                      (expand "abs")
                                                      ((""
                                                        (expand "+")
                                                        ((""
                                                          (lemma
                                                           "abs_triangle"
                                                           ("z1"
                                                            "f0!1(x!1)"
                                                            "z2"
                                                            "f1!1(x!1)"))
                                                          ((""
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complex type-eq-decl nil complex_types complex_alt)
    (ae_le? const-decl "bool" measure_theory measure_integration)
    (ae_in? const-decl "bool" measure_theory measure_integration)
    (union const-decl "set" sets nil)
    (negligible nonempty-type-eq-decl nil measure_theory
     measure_integration)
    (negligible_set? const-decl "bool" measure_theory
     measure_integration)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (set type-eq-decl nil sets nil)
    (+ const-decl "[T -> complex]" complex_fun_ops complex_alt)
    (abs_triangle formula-decl nil polar complex_alt)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory
     measure_integration)
    (ae_bounded? const-decl "bool" complex_measure_theory nil))
   nil
   (add_essentially_bounded subtype
    "(complex_fun_ops[essentially_bounded.T].+)(essentially_bounded.f0, essentially_bounded.f1)"
    "essentially_bounded")))
 (opp_essentially_bounded 0
  (opp_essentially_bounded-2 "" 3789905813
   ("" (skosimp)
    ((""
      (lemma "scal_essentially_bounded"
       ("c" "complex_(-1,0)" "f" "f!1"))
      (("" (case-replace "*[T](complex_(-1, 0), f!1)=-f!1")
        (("1" (hide-all-but 1)
          (("1"
            (lemma "scal_essentially_bounded"
             ("c" "complex_(-1,0)" "f" "f!1"))
            (("1" (expand "*")
              (("1" (expand "-")
                (("1" (expand "essentially_bounded?")
                  (("1" (flatten)
                    (("1" (expand "-")
                      (("1" (expand "*")
                        (("1" (assert)
                          (("1" (flatten) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide -1 2)
          (("2" (expand "-")
            (("2" (expand "=")
              (("2" (expand "*")
                (("2" (expand "-")
                  (("2" (expand "Re")
                    (("2" (expand "Im")
                      (("2" (split)
                        (("1" (apply-extensionality :hide? t) nil nil)
                         ("2" (apply-extensionality :hide? t) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((essentially_bounded nonempty-type-eq-decl nil essentially_bounded
     nil)
    (essentially_bounded? const-decl "bool" essentially_bounded nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-type-decl nil essentially_bounded nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (complex_ const-decl "complex" complex_types complex_alt)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (real nonempty-type-from-decl nil reals nil)
    (scal_essentially_bounded judgement-tcc nil essentially_bounded
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Im const-decl "[T -> real]" complex_fun_ops complex_alt)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Im_mul1 formula-decl nil complex_types complex_alt)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Re_mul1 formula-decl nil complex_types complex_alt)
    (Re const-decl "[T -> real]" complex_fun_ops complex_alt) nil
    (Re_rew formula-decl nil complex_types complex_alt)
    (Im_rew formula-decl nil complex_types complex_alt)
    (S formal-const-decl "sigma_algebra[T]" essentially_bounded nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (complex_measurable_def formula-decl nil complex_measurable nil)
    (* const-decl "complex" complex_types complex_alt)
    (real_times_real_is_real application-judgement "real" reals nil)
    (scal_essentially_bounded application-judgement
     "essentially_bounded" essentially_bounded nil)
    nil (= const-decl "bool" complex_fun_ops complex_alt) nil nil)
   shostak
   (opp_essentially_bounded subtype
    "(complex_fun_ops[essentially_bounded.T].-)(essentially_bounded.f)"
    "essentially_bounded"))
  (opp_essentially_bounded-1 nil 3477802082
   ("" (skosimp)
    ((""
      (lemma "scal_essentially_bounded"
       ("c" "complex_(-1,0)" "f" "f!1"))
      (("" (case-replace "*[T](complex_(-1, 0), f!1)=-f!1")
        (("1" (hide-all-but 1)
          (("1"
            (lemma "scal_essentially_bounded"
             ("c" "complex_(-1,0)" "f" "f!1"))
            (("1" (expand "*")
              (("1" (expand "-")
                (("1" (expand "essentially_bounded?")
                  (("1" (flatten)
                    (("1" (expand "-")
                      (("1" (expand "Re")
                        (("1" (expand "Im")
                          (("1" (expand "*")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "Re")
                                    (("1"
                                      (expand "Im")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide -1 2)
          (("2" (expand "-")
            (("2" (expand "=")
              (("2" (expand "*")
                (("2" (expand "-")
                  (("2" (expand "Re")
                    (("2" (expand "Re")
                      (("2" (expand "Im")
                        (("2" (expand "Im")
                          (("2" (split)
                            (("1" (apply-extensionality :hide? t)
                              (("1" (grind) nil nil)) nil)
                             ("2" (apply-extensionality :hide? t)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complex_ const-decl "complex" complex_types complex_alt)
    (complex type-eq-decl nil complex_types complex_alt)
    (Im const-decl "[T -> real]" complex_fun_ops complex_alt)
    (Im_mul1 formula-decl nil complex_types complex_alt)
    (Re_mul1 formula-decl nil complex_types complex_alt)
    (Re const-decl "[T -> real]" complex_fun_ops complex_alt)
    (Re_rew formula-decl nil complex_types complex_alt)
    (Im_rew formula-decl nil complex_types complex_alt)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (complex_measurable_def formula-decl nil complex_measurable nil)
    (* const-decl "complex" complex_types complex_alt)
    (= const-decl "bool" complex_fun_ops complex_alt))
   nil
   (opp_essentially_bounded subtype
    "(complex_fun_ops[essentially_bounded.T].-)(essentially_bounded.f)"
    "essentially_bounded")))
 (diff_essentially_bounded 0
  (diff_essentially_bounded-1 nil 3477802082
   ("" (skosimp)
    (("" (typepred "f0!1")
      (("" (typepred "f1!1")
        (("" (lemma "opp_essentially_bounded" ("f" "f1!1"))
          ((""
            (lemma "add_essentially_bounded"
             ("f0" "f0!1" "f1" "-f1!1"))
            (("" (hide -2 -3 -4)
              (("" (expand "+")
                (("" (expand "-")
                  (("" (expand "essentially_bounded?")
                    (("" (flatten)
                      (("" (expand "complex_measurable?")
                        (("" (flatten)
                          (("" (assert)
                            (("" (expand "+ ")
                              ((""
                                (expand "-")
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((essentially_bounded nonempty-type-eq-decl nil essentially_bounded
     nil)
    (essentially_bounded? const-decl "bool" essentially_bounded nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (real nonempty-type-from-decl nil reals nil)
    (T formal-type-decl nil essentially_bounded nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (opp_essentially_bounded judgement-tcc nil essentially_bounded nil)
    nil (+ const-decl "complex" complex_types complex_alt)
    (Re_rew formula-decl nil complex_types complex_alt)
    (Im_rew formula-decl nil complex_types complex_alt)
    (minus_real_is_real application-judgement "real" reals nil) nil nil
    (complex_measurable? const-decl "bool" complex_measurable nil)
    (+ const-decl "[T -> complex]" complex_fun_ops complex_alt) nil
    (add_essentially_bounded judgement-tcc nil essentially_bounded nil)
    (opp_essentially_bounded application-judgement
     "essentially_bounded" essentially_bounded nil))
   nil
   (diff_essentially_bounded subtype
    "(complex_fun_ops[essentially_bounded.T].-)(essentially_bounded.f0, essentially_bounded.f1)"
    "essentially_bounded")))
 (prod_essentially_bounded 0
  (prod_essentially_bounded-2 "" 3789905814
   ("" (skosimp)
    (("" (typepred "f0!1")
      (("" (typepred "f1!1")
        (("" (expand "essentially_bounded?")
          (("" (flatten)
            (("" (hide -1 -3)
              (("" (expand "ae_bounded?")
                (("" (skosimp*)
                  (("" (inst + "K!1*K!2")
                    (("" (assert)
                      (("" (expand "ae_le?")
                        (("" (expand "pointwise_ae?")
                          (("" (expand "ae?")
                            (("" (expand "fullset")
                              ((""
                                (expand "ae_in?")
                                ((""
                                  (skosimp*)
                                  ((""
                                    (inst + "union(E!1,E!2)")
                                    ((""
                                      (skosimp)
                                      ((""
                                        (inst - "x!1")
                                        ((""
                                          (inst - "x!1")
                                          ((""
                                            (expand "member")
                                            ((""
                                              (expand "union")
                                              ((""
                                                (expand "member")
                                                ((""
                                                  (flatten)
                                                  ((""
                                                    (assert)
                                                    ((""
                                                      (expand "abs")
                                                      ((""
                                                        (expand "*")
                                                        ((""
                                                          (hide 1 2)
                                                          ((""
                                                            (lemma
                                                             "le_times_le_pos"
                                                             ("nnx"
                                                              "abs(f0!1(x!1))"
                                                              "nnz"
                                                              "abs(f1!1(x!1))"
                                                              "w"
                                                              "K!1"
                                                              "y"
                                                              "K!2"))
                                                            ((""
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((essentially_bounded nonempty-type-eq-decl nil essentially_bounded
     nil)
    (essentially_bounded? const-decl "bool" essentially_bounded nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (real nonempty-type-from-decl nil reals nil)
    (T formal-type-decl nil essentially_bounded nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil nil nil
    (complex_abs_mul formula-decl nil complex_fun_ops complex_alt)
    (pointwise_ae? const-decl "bool" measure_theory
     measure_integration)
    (fullset const-decl "set" sets nil)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (abs const-decl "nnreal" polar complex_alt)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (le_times_le_pos formula-decl nil real_props nil) nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (S formal-const-decl "sigma_algebra[T]" essentially_bounded nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (mu formal-const-decl "measure_type[T, S]" essentially_bounded nil)
    (negligible_set? const-decl "bool" measure_theory
     measure_integration)
    (negligible nonempty-type-eq-decl nil measure_theory
     measure_integration)
    (union const-decl "set" sets nil) nil
    (ae_in? const-decl "bool" measure_theory measure_integration) nil
    nil nil
    (ae_le? const-decl "bool" measure_theory measure_integration)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (ae_bounded? const-decl "bool" complex_measure_theory nil))
   shostak
   (prod_essentially_bounded subtype
    "complex_fun_ops[essentially_bounded.T].*(essentially_bounded.f0, essentially_bounded.f1)"
    "essentially_bounded"))
  (prod_essentially_bounded-1 nil 3477802082
   ("" (skosimp)
    (("" (typepred "f0!1")
      (("" (typepred "f1!1")
        (("" (expand "essentially_bounded?")
          (("" (rewrite "prod_complex_measurable")
            (("1" (flatten)
              (("1" (hide -1 -3)
                (("1" (expand "ae_bounded?")
                  (("1" (skosimp*)
                    (("1" (inst + "K!1*K!2")
                      (("1" (assert)
                        (("1" (expand "ae_le?")
                          (("1" (expand "pointwise_ae?")
                            (("1" (expand "ae?")
                              (("1"
                                (expand "fullset")
                                (("1"
                                  (expand "ae_in?")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (inst + "union(E!1,E!2)")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst - "x!1")
                                          (("1"
                                            (inst - "x!1")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (expand "union")
                                                (("1"
                                                  (expand "member")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "abs")
                                                        (("1"
                                                          (expand "*")
                                                          (("1"
                                                            (hide 1 2)
                                                            (("1"
                                                              (lemma
                                                               "le_times_le_pos"
                                                               ("nnx"
                                                                "abs(f0!1(x!1))"
                                                                "nnz"
                                                                "abs(f1!1(x!1))"
                                                                "w"
                                                                "K!1"
                                                                "y"
                                                                "K!2"))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten) (("2" (assert) nil nil)) nil)
             ("3" (flatten) (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complex type-eq-decl nil complex_types complex_alt)
    (complex_abs_mul formula-decl nil complex_fun_ops complex_alt)
    (pointwise_ae? const-decl "bool" measure_theory
     measure_integration)
    (fullset const-decl "set" sets nil)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (abs const-decl "nnreal" polar complex_alt)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (negligible_set? const-decl "bool" measure_theory
     measure_integration)
    (negligible nonempty-type-eq-decl nil measure_theory
     measure_integration)
    (union const-decl "set" sets nil)
    (ae_in? const-decl "bool" measure_theory measure_integration)
    (ae_le? const-decl "bool" measure_theory measure_integration)
    (ae_bounded? const-decl "bool" complex_measure_theory nil))
   nil
   (prod_essentially_bounded subtype
    "complex_fun_ops[essentially_bounded.T].*(essentially_bounded.f0, essentially_bounded.f1)"
    "essentially_bounded")))
 (essential_bound_scal 0
  (essential_bound_scal-1 nil 3477805086
   ("" (skosimp)
    ((""
      (lemma "essential_bound_def1"
       ("f" "c!1*f!1" "K" "abs(c!1) * essential_bound(f!1)"))
      (("" (split -1)
        (("1" (typepred "abs(c!1)")
          (("1" (expand ">=")
            (("1" (expand "<=" -1)
              (("1" (split)
                (("1"
                  (lemma "essential_bound_def1"
                   ("f" "f!1" "K" "essential_bound(c!1*f!1)/abs(c!1)"))
                  (("1" (split)
                    (("1" (rewrite "div_mult_pos_le2" -1)
                      (("1" (assert) nil nil)) nil)
                     ("2" (hide -2 2)
                      (("2"
                        (lemma "essential_bound_def2" ("f" "c!1*f!1"))
                        (("2" (expand "ae_le?")
                          (("2" (expand "pointwise_ae?")
                            (("2" (expand "ae?")
                              (("2"
                                (expand "fullset")
                                (("2"
                                  (expand "ae_in?")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (inst + "E!1")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst - "x!1")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "abs" -1)
                                                (("2"
                                                  (expand "abs" 2 1)
                                                  (("2"
                                                    (hide 1)
                                                    (("2"
                                                      (expand "*" -1 1)
                                                      (("2"
                                                        (rewrite
                                                         "abs_mult"
                                                         -1)
                                                        (("2"
                                                          (rewrite
                                                           "div_mult_pos_le2")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (rewrite "div_mult_pos_ge1") nil nil)) nil)
                   ("3" (assert) nil nil))
                  nil)
                 ("2" (replace -1 * rl) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "essential_bound_def2" ("f" "f!1"))
            (("2" (expand "ae_le?")
              (("2" (expand "pointwise_ae?")
                (("2" (expand "ae?")
                  (("2" (expand "fullset")
                    (("2" (expand "ae_in?")
                      (("2" (skosimp)
                        (("2" (inst + "E!1")
                          (("2" (skosimp)
                            (("2" (inst - "x!1")
                              (("2"
                                (expand "member")
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide 1)
                                    (("2"
                                      (expand "abs" -1)
                                      (("2"
                                        (expand "abs" 1 1)
                                        (("2"
                                          (expand "*" 1 1)
                                          (("2"
                                            (rewrite "abs_mult")
                                            (("2"
                                              (typepred "abs(c!1)")
                                              (("2"
                                                (expand ">=")
                                                (("2"
                                                  (expand "<=" -1)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (lemma
                                                       "both_sides_times_pos_le1"
                                                       ("pz"
                                                        "abs(c!1)"
                                                        "x"
                                                        "abs(f!1(x!1))"
                                                        "y"
                                                        "essential_bound(f!1)"))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (essential_bound const-decl "nnreal" essentially_bounded nil)
    (essentially_bounded nonempty-type-eq-decl nil essentially_bounded
     nil)
    (essentially_bounded? const-decl "bool" essentially_bounded nil)
    (T formal-type-decl nil essentially_bounded nil)
    (abs const-decl "nnreal" polar complex_alt)
    (complex type-eq-decl nil complex_types complex_alt)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (essential_bound_def1 formula-decl nil essentially_bounded nil)
    (scal_essentially_bounded application-judgement
     "essentially_bounded" essentially_bounded nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ae_le? const-decl "bool" measure_theory measure_integration) nil
    nil nil
    (ae_in? const-decl "bool" measure_theory measure_integration)
    (negligible nonempty-type-eq-decl nil measure_theory
     measure_integration)
    (negligible_set? const-decl "bool" measure_theory
     measure_integration)
    (mu formal-const-decl "measure_type[T, S]" essentially_bounded nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (S formal-const-decl "sigma_algebra[T]" essentially_bounded nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (TRUE const-decl "bool" booleans nil) nil
    (abs_mult formula-decl nil polar complex_alt)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory
     measure_integration)
    (essential_bound_def2 formula-decl nil essentially_bounded nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil))
   shostak))
 (essential_bound_add 0
  (essential_bound_add-1 nil 3477806906
   ("" (skosimp)
    ((""
      (lemma "essential_bound_def1"
       ("f" "f0!1+f1!1" "K"
        "essential_bound(f0!1) + essential_bound(f1!1)"))
      (("" (assert)
        (("" (hide 2)
          (("" (lemma "essential_bound_def2" ("f" "f0!1"))
            (("" (lemma "essential_bound_def2" ("f" "f1!1"))
              (("" (expand "ae_le?")
                (("" (expand "pointwise_ae?")
                  (("" (expand "ae?")
                    (("" (expand "fullset")
                      (("" (expand "ae_in?")
                        (("" (skosimp*)
                          (("" (inst + "union(E!1,E!2)")
                            (("" (skosimp)
                              ((""
                                (inst - "x!1")
                                ((""
                                  (inst - "x!1")
                                  ((""
                                    (expand "union")
                                    ((""
                                      (assert)
                                      ((""
                                        (flatten)
                                        ((""
                                          (assert)
                                          ((""
                                            (expand "abs")
                                            ((""
                                              (hide 1 2)
                                              ((""
                                                (expand "+")
                                                ((""
                                                  (lemma
                                                   "abs_triangle"
                                                   ("z1"
                                                    "f0!1(x!1)"
                                                    "z2"
                                                    "f1!1(x!1)"))
                                                  ((""
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[T -> complex]" complex_fun_ops complex_alt)
    (essential_bound const-decl "nnreal" essentially_bounded nil)
    (essentially_bounded nonempty-type-eq-decl nil essentially_bounded
     nil)
    (essentially_bounded? const-decl "bool" essentially_bounded nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (T formal-type-decl nil essentially_bounded nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (essential_bound_def1 formula-decl nil essentially_bounded nil)
    (add_essentially_bounded application-judgement
     "essentially_bounded" essentially_bounded nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (pointwise_ae? const-decl "bool" measure_theory
     measure_integration)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (abs_triangle formula-decl nil polar complex_alt)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (TRUE const-decl "bool" booleans nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (S formal-const-decl "sigma_algebra[T]" essentially_bounded nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (mu formal-const-decl "measure_type[T, S]" essentially_bounded nil)
    (negligible_set? const-decl "bool" measure_theory
     measure_integration)
    (negligible nonempty-type-eq-decl nil measure_theory
     measure_integration)
    (union const-decl "set" sets nil) nil
    (ae_in? const-decl "bool" measure_theory measure_integration) nil
    nil nil
    (ae_le? const-decl "bool" measure_theory measure_integration)
    (essential_bound_def2 formula-decl nil essentially_bounded nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil)
   shostak))
 (essential_bound_opp 0
  (essential_bound_opp-2 "" 3789905815
   ("" (skosimp)
    ((""
      (lemma "essential_bound_scal" ("c" "complex_(-1,0)" "f" "f!1"))
      (("" (expand "abs")
        (("" (expand "sq_abs")
          (("" (expand "-")
            (("" (expand "*")
              (("" (expand "-")
                (("" (expand "*") (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((essentially_bounded nonempty-type-eq-decl nil essentially_bounded
     nil)
    (essentially_bounded? const-decl "bool" essentially_bounded nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-type-decl nil essentially_bounded nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (complex_ const-decl "complex" complex_types complex_alt)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (real nonempty-type-from-decl nil reals nil)
    (essential_bound_scal formula-decl nil essentially_bounded nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sq_abs const-decl "nnreal" complex_types complex_alt) nil
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "complex" complex_types complex_alt)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqrt_sq_neg formula-decl nil sqrt reals)
    (sq_0 formula-decl nil sq reals)
    (Im_rew formula-decl nil complex_types complex_alt)
    (Re_rew formula-decl nil complex_types complex_alt) nil nil
    (abs const-decl "nnreal" polar complex_alt))
   shostak)
  (essential_bound_opp-1 nil 3477806078
   ("" (skosimp)
    ((""
      (lemma "essential_bound_scal" ("c" "complex_(-1,0)" "f" "f!1"))
      (("" (expand "abs")
        (("" (expand "sq_abs")
          (("" (expand "Im")
            (("" (expand "Re")
              (("" (rewrite "sq_0")
                (("" (rewrite "sq_neg")
                  (("" (rewrite "sqrt_1")
                    (("" (rewrite "one_times")
                      (("" (expand "-")
                        (("" (expand "*")
                          (("" (expand "-")
                            (("" (expand "Re")
                              ((""
                                (expand "*")
                                ((""
                                  (expand "Re")
                                  ((""
                                    (expand "Im")
                                    (("" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complex_ const-decl "complex" complex_types complex_alt)
    (complex type-eq-decl nil complex_types complex_alt)
    (sq_abs const-decl "nnreal" complex_types complex_alt)
    (* const-decl "complex" complex_types complex_alt)
    (sqrt_sq_neg formula-decl nil sqrt reals)
    (sq_0 formula-decl nil sq reals)
    (Im_rew formula-decl nil complex_types complex_alt)
    (Re_rew formula-decl nil complex_types complex_alt)
    (abs const-decl "nnreal" polar complex_alt))
   shostak))
 (essential_bound_diff 0
  (essential_bound_diff-2 "" 3789905815
   ("" (skosimp)
    (("" (lemma "essential_bound_add" ("f0" "f0!1" "f1" "-f1!1"))
      (("" (rewrite "essential_bound_opp")
        ((""
          (name-replace "RHS"
           "essential_bound(f0!1) + essential_bound(f1!1)")
          (("" (expand "essential_bound")
            (("" (expand "-")
              (("" (expand "+ ")
                (("" (expand "abs")
                  (("" (assert)
                    (("" (expand "abs")
                      (("" (expand "sq_abs") (("" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil
    (essentially_bounded nonempty-type-eq-decl nil essentially_bounded
     nil)
    (essentially_bounded? const-decl "bool" essentially_bounded nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (real nonempty-type-from-decl nil reals nil)
    (T formal-type-decl nil essentially_bounded nil)
    (essential_bound_add formula-decl nil essentially_bounded nil)
    (opp_essentially_bounded application-judgement
     "essentially_bounded" essentially_bounded nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (essential_bound const-decl "nnreal" essentially_bounded nil) nil
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (abs const-decl "nnreal" polar complex_alt)
    (Im_neg1 formula-decl nil complex_types complex_alt)
    (Im_add1 formula-decl nil complex_types complex_alt)
    (Re_neg1 formula-decl nil complex_types complex_alt)
    (Re_add1 formula-decl nil complex_types complex_alt)
    (Im_sub1 formula-decl nil complex_types complex_alt)
    (Re_sub1 formula-decl nil complex_types complex_alt)
    (minus_real_is_real application-judgement "real" reals nil)
    (sq_abs const-decl "nnreal" complex_types complex_alt)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[T -> complex]" complex_fun_ops complex_alt)
    (essential_bound_opp formula-decl nil essentially_bounded nil))
   shostak)
  (essential_bound_diff-1 nil 3477806152
   ("" (skosimp)
    (("" (lemma "essential_bound_add" ("f0" "f0!1" "f1" "-f1!1"))
      (("" (rewrite "essential_bound_opp")
        ((""
          (name-replace "RHS"
           "essential_bound(f0!1) + essential_bound(f1!1)")
          (("" (expand "essential_bound")
            (("" (expand "-")
              (("" (expand "+ ")
                (("" (expand "abs")
                  (("" (assert)
                    (("" (expand "abs")
                      (("" (expand "sq_abs")
                        (("" (expand "Re")
                          (("" (expand "Im")
                            (("" (assert)
                              ((""
                                (expand "sq")
                                ((""
                                  (expand "+ ")
                                  ((""
                                    (expand "-")
                                    ((""
                                      (expand "Im")
                                      ((""
                                        (expand "Re")
                                        (("" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complex type-eq-decl nil complex_types complex_alt)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (abs const-decl "nnreal" polar complex_alt)
    (Im_neg1 formula-decl nil complex_types complex_alt)
    (Im_add1 formula-decl nil complex_types complex_alt)
    (Re_neg1 formula-decl nil complex_types complex_alt)
    (Re_add1 formula-decl nil complex_types complex_alt)
    (Im_sub1 formula-decl nil complex_types complex_alt)
    (Re_sub1 formula-decl nil complex_types complex_alt)
    (sq_abs const-decl "nnreal" complex_types complex_alt)
    (+ const-decl "[T -> complex]" complex_fun_ops complex_alt))
   shostak))
 (essential_bound_eq_0 0
  (essential_bound_eq_0-2 "" 3789905815
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "essentially_bounded?")
        (("" (flatten)
          (("" (expand "cal_N?")
            (("" (replace -1)
              (("" (split)
                (("1" (flatten)
                  (("1" (lemma "essential_bound_def2" ("f" "f!1"))
                    (("1" (replace -2)
                      (("1" (hide-all-but (-1 1))
                        (("1" (expand "ae_le?")
                          (("1" (expand "ae_0?")
                            (("1" (expand "pointwise_ae?")
                              (("1"
                                (expand "ae?")
                                (("1"
                                  (expand "fullset")
                                  (("1"
                                    (expand "ae_in?")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (inst + "E!1")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst - "x!1")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (replace 1)
                                                (("1"
                                                  (expand "abs" -1)
                                                  (("1"
                                                    (expand "<=" -1)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "abs_is_0")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2"
                    (lemma "essential_bound_def1" ("f" "f!1" "K" "0"))
                    (("2" (split)
                      (("1" (assert) nil nil)
                       ("2" (hide-all-but (-1 1))
                        (("2" (expand "ae_0?")
                          (("2" (expand "ae_le?")
                            (("2" (expand "pointwise_ae?")
                              (("2"
                                (expand "ae?")
                                (("2"
                                  (expand "fullset")
                                  (("2"
                                    (expand "ae_in?")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (inst + "E!1")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "x!1")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (replace 1)
                                                (("2"
                                                  (expand "abs")
                                                  (("2"
                                                    (expand "<=")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (rewrite
                                                         "abs_is_0")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((essentially_bounded nonempty-type-eq-decl nil essentially_bounded
     nil)
    (essentially_bounded? const-decl "bool" essentially_bounded nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (real nonempty-type-from-decl nil reals nil)
    (T formal-type-decl nil essentially_bounded nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (essential_bound_def1 formula-decl nil essentially_bounded nil)
    (ae_le? const-decl "bool" measure_theory measure_integration)
    (pointwise_ae? const-decl "bool" complex_measure_theory nil)
    (pointwise_ae? const-decl "bool" measure_theory
     measure_integration)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs_is_0 formula-decl nil polar complex_alt)
    (<= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (negligible nonempty-type-eq-decl nil measure_theory
     measure_integration)
    (negligible_set? const-decl "bool" measure_theory
     measure_integration)
    (mu formal-const-decl "measure_type[T, S]" essentially_bounded nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra[T]" essentially_bounded nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (ae_in? const-decl "bool" measure_theory measure_integration) nil
    nil nil (ae_0? const-decl "bool" complex_measure_theory nil)
    (essential_bound_def2 formula-decl nil essentially_bounded nil)
    (cal_N? const-decl "bool" complex_measure_theory nil))
   shostak)
  (essential_bound_eq_0-1 nil 3477806280
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "essentially_bounded?")
        (("" (flatten)
          (("" (expand "cal_N?")
            (("" (replace -1)
              (("" (split)
                (("1" (flatten)
                  (("1" (lemma "essential_bound_def2" ("f" "f!1"))
                    (("1" (replace -2)
                      (("1" (hide-all-but (-1 1))
                        (("1" (expand "ae_le?")
                          (("1" (expand "ae_0?")
                            (("1" (expand "pointwise_ae?")
                              (("1"
                                (expand "ae?")
                                (("1"
                                  (expand "fullset")
                                  (("1"
                                    (expand "ae_in?")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (inst + "E!1")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst - "x!1")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (replace 1)
                                                (("1"
                                                  (expand "abs" -1)
                                                  (("1"
                                                    (expand "<=" -1)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "abs_is_0")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2"
                    (lemma "essential_bound_def1" ("f" "f!1" "K" "0"))
                    (("2" (split)
                      (("1" (assert) nil nil)
                       ("2" (hide-all-but (-1 1))
                        (("2" (expand "ae_0?")
                          (("2" (expand "ae_le?")
                            (("2" (expand "pointwise_ae?")
                              (("2"
                                (expand "ae?")
                                (("2"
                                  (expand "fullset")
                                  (("2"
                                    (expand "ae_in?")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (inst + "E!1")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "x!1")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (replace 1)
                                                (("2"
                                                  (expand "abs")
                                                  (("2"
                                                    (expand "<=")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (rewrite
                                                         "abs_is_0")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complex type-eq-decl nil complex_types complex_alt)
    (ae_le? const-decl "bool" measure_theory measure_integration)
    (pointwise_ae? const-decl "bool" complex_measure_theory nil)
    (pointwise_ae? const-decl "bool" measure_theory
     measure_integration)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (abs_is_0 formula-decl nil polar complex_alt)
    (negligible nonempty-type-eq-decl nil measure_theory
     measure_integration)
    (negligible_set? const-decl "bool" measure_theory
     measure_integration)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (set type-eq-decl nil sets nil)
    (ae_in? const-decl "bool" measure_theory measure_integration)
    (ae_0? const-decl "bool" complex_measure_theory nil)
    (cal_N? const-decl "bool" complex_measure_theory nil))
   shostak))
 (essential_bound_prod 0
  (essential_bound_prod-2 "" 3789905816
   ("" (skosimp)
    ((""
      (lemma "essential_bound_def1"
       ("f" "f0!1*f1!1" "K"
        "essential_bound(f0!1) * essential_bound(f1!1)"))
      (("" (split -1)
        (("1" (propax) nil nil)
         ("2" (hide 2)
          (("2" (lemma "essential_bound_def2" ("f" "f0!1"))
            (("2" (lemma "essential_bound_def2" ("f" "f1!1"))
              (("2" (expand "ae_le?")
                (("2" (expand "pointwise_ae?")
                  (("2" (expand "ae?")
                    (("2" (expand "fullset")
                      (("2" (expand "ae_in?")
                        (("2" (skosimp*)
                          (("2" (inst + "union(E!1,E!2)")
                            (("2" (skosimp)
                              (("2"
                                (inst - "x!1")
                                (("2"
                                  (inst - "x!1")
                                  (("2"
                                    (expand "union")
                                    (("2"
                                      (expand "member")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "abs")
                                            (("2"
                                              (expand "*")
                                              (("2"
                                                (lemma
                                                 "le_times_le_pos"
                                                 ("nnx"
                                                  "abs(f0!1(x!1))"
                                                  "y"
                                                  "essential_bound(f0!1)"
                                                  "nnz"
                                                  "abs(f1!1(x!1))"
                                                  "w"
                                                  "essential_bound(f1!1)"))
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (essential_bound const-decl "nnreal" essentially_bounded nil)
    (essentially_bounded nonempty-type-eq-decl nil essentially_bounded
     nil)
    (essentially_bounded? const-decl "bool" essentially_bounded nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (T formal-type-decl nil essentially_bounded nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (essential_bound_def1 formula-decl nil essentially_bounded nil)
    (prod_essentially_bounded application-judgement
     "essentially_bounded" essentially_bounded nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (pointwise_ae? const-decl "bool" measure_theory
     measure_integration)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil) nil nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (complex_abs_mul formula-decl nil complex_fun_ops complex_alt) nil
    (abs const-decl "nnreal" polar complex_alt)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (TRUE const-decl "bool" booleans nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (S formal-const-decl "sigma_algebra[T]" essentially_bounded nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (mu formal-const-decl "measure_type[T, S]" essentially_bounded nil)
    (negligible_set? const-decl "bool" measure_theory
     measure_integration)
    (negligible nonempty-type-eq-decl nil measure_theory
     measure_integration)
    (union const-decl "set" sets nil) nil
    (ae_in? const-decl "bool" measure_theory measure_integration) nil
    nil nil
    (ae_le? const-decl "bool" measure_theory measure_integration)
    (essential_bound_def2 formula-decl nil essentially_bounded nil))
   shostak)
  (essential_bound_prod-1 nil 3477806660
   ("" (skosimp)
    ((""
      (lemma "essential_bound_def1"
       ("f" "f0!1*f1!1" "K"
        "essential_bound(f0!1) * essential_bound(f1!1)"))
      (("" (split -1)
        (("1" (propax) nil nil)
         ("2" (hide 2)
          (("2" (lemma "essential_bound_def2" ("f" "f0!1"))
            (("2" (lemma "essential_bound_def2" ("f" "f1!1"))
              (("2" (expand "ae_le?")
                (("2" (expand "pointwise_ae?")
                  (("2" (expand "ae?")
                    (("2" (expand "fullset")
                      (("2" (expand "ae_in?")
                        (("2" (skosimp*)
                          (("2" (inst + "union(E!1,E!2)")
                            (("2" (skosimp)
                              (("2"
                                (inst - "x!1")
                                (("2"
                                  (inst - "x!1")
                                  (("2"
                                    (expand "union")
                                    (("2"
                                      (expand "member")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "abs")
                                            (("2"
                                              (expand "*")
                                              (("2"
                                                (rewrite "abs_mult")
                                                (("2"
                                                  (lemma
                                                   "le_times_le_pos"
                                                   ("nnx"
                                                    "abs(f0!1(x!1))"
                                                    "y"
                                                    "essential_bound(f0!1)"
                                                    "nnz"
                                                    "abs(f1!1(x!1))"
                                                    "w"
                                                    "essential_bound(f1!1)"))
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complex type-eq-decl nil complex_types complex_alt)
    (pointwise_ae? const-decl "bool" measure_theory
     measure_integration)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (complex_abs_mul formula-decl nil complex_fun_ops complex_alt)
    (abs const-decl "nnreal" polar complex_alt)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (set type-eq-decl nil sets nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (negligible_set? const-decl "bool" measure_theory
     measure_integration)
    (negligible nonempty-type-eq-decl nil measure_theory
     measure_integration)
    (union const-decl "set" sets nil)
    (ae_in? const-decl "bool" measure_theory measure_integration)
    (ae_le? const-decl "bool" measure_theory measure_integration))
   shostak))
 (holder_judge_infty_1 0
  (holder_judge_infty_1-2 "" 3789905816
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (typepred "g!1")
        (("" (expand "p_integrable?")
          (("" (expand "essentially_bounded?")
            (("" (flatten)
              ((""
                (lemma "prod_complex_measurable"
                 ("g1" "f!1" "g2" "g!1"))
                (("" (lemma "abs_complex_measurable" ("g" "f!1*g!1"))
                  (("" (case "forall h: abs(h)^1 = abs(h)")
                    (("1" (inst-cp - "f!1*g!1")
                      (("1" (inst - "g!1")
                        (("1" (replace -1)
                          (("1" (replace -2)
                            (("1" (hide -1 -2)
                              (("1"
                                (lemma
                                 "abs_complex_measurable"
                                 ("g" "f!1"))
                                (("1"
                                  (expand "ae_bounded?")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (lemma
                                       "integral_prod"
                                       ("h"
                                        "abs(f!1)"
                                        "nnc"
                                        "K!1"
                                        "f"
                                        "abs(g!1)"))
                                      (("1"
                                        (case-replace
                                         "(abs(g!1) * abs(f!1))=abs(f!1 * g!1)")
                                        (("1"
                                          (split -2)
                                          (("1" (flatten) nil nil)
                                           ("2"
                                            (hide-all-but (-8 1))
                                            (("2"
                                              (case-replace
                                               "abs(abs(f!1))=abs(f!1)")
                                              (("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (apply-extensionality
                                                   :hide?
                                                   t)
                                                  (("2"
                                                    (expand "abs")
                                                    (("2"
                                                      (typepred
                                                       "abs(f!1(x!1))")
                                                      (("2"
                                                        (expand
                                                         "abs"
                                                         1
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply-extensionality
                                           :hide?
                                           t)
                                          (("2"
                                            (expand "*" 1)
                                            (("2"
                                              (expand "abs" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (skosimp)
                        (("2" (apply-extensionality :hide? t)
                          (("2" (expand "^")
                            (("2" (expand "abs")
                              (("2" (rewrite "real_expt_x1") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((essentially_bounded nonempty-type-eq-decl nil essentially_bounded
     nil)
    (essentially_bounded? const-decl "bool" essentially_bounded nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (real nonempty-type-from-decl nil reals nil)
    (T formal-type-decl nil essentially_bounded nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil
    (abs_complex_measurable judgement-tcc nil complex_measurable nil)
    nil (real_expt_x1 formula-decl nil real_expt power)
    (ae_bounded? const-decl "bool" complex_measure_theory nil) nil
    (integral_prod formula-decl nil integral measure_integration)
    (integrable? const-decl "bool" integral measure_integration)
    (integrable nonempty-type-eq-decl nil integral measure_integration)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     measure_integration)
    (complex_abs_mul formula-decl nil complex_fun_ops complex_alt)
    (complex_measurable_def formula-decl nil complex_measurable nil)
    (Im_fun_mul1 formula-decl nil complex_fun_ops complex_alt)
    (Re_fun_mul1 formula-decl nil complex_fun_ops complex_alt)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals) nil
    (abs const-decl "nnreal" polar complex_alt)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    nil nil
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (^ const-decl "[T -> nnreal]" real_fun_power power)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (prod_complex_measurable judgement-tcc nil complex_measurable nil)
    (complex_measurable? const-decl "bool" complex_measurable nil)
    (complex_measurable nonempty-type-eq-decl nil complex_measurable
     nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (S formal-const-decl "sigma_algebra[T]" essentially_bounded nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (mu formal-const-decl "measure_type[T, S]" essentially_bounded nil)
    (p_integrable? const-decl "bool" p_integrable_def nil)
    (p_integrable nonempty-type-eq-decl nil p_integrable_def nil))
   shostak
   (holder_judge_infty_1 subtype
    "complex_fun_ops[essentially_bounded.T].*(essentially_bounded.f, essentially_bounded.g)"
    "p_integrable[T, S, mu, 1]"))
  (holder_judge_infty_1-1 nil 3477802082
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (typepred "g!1")
        (("" (expand "p_integrable?")
          (("" (expand "essentially_bounded?")
            (("" (flatten)
              ((""
                (lemma "prod_complex_measurable"
                 ("g1" "f!1" "g2" "g!1"))
                (("1" (replace -1)
                  (("1"
                    (lemma "abs_complex_measurable" ("g" "f!1*g!1"))
                    (("1" (case "forall h: abs(h)^1 = abs(h)")
                      (("1" (inst-cp - "f!1*g!1")
                        (("1" (inst - "g!1")
                          (("1" (replace -1)
                            (("1" (replace -2)
                              (("1"
                                (hide -1 -2)
                                (("1"
                                  (lemma
                                   "abs_complex_measurable"
                                   ("g" "f!1"))
                                  (("1"
                                    (expand "ae_bounded?")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (lemma
                                         "integral_prod"
                                         ("h"
                                          "abs(f!1)"
                                          "nnc"
                                          "K!1"
                                          "f"
                                          "abs(g!1)"))
                                        (("1"
                                          (case-replace
                                           "(abs(g!1) * abs(f!1))=abs(f!1 * g!1)")
                                          (("1"
                                            (split -2)
                                            (("1" (flatten) nil nil)
                                             ("2"
                                              (hide-all-but (-8 1))
                                              (("2"
                                                (case-replace
                                                 "abs(abs(f!1))=abs(f!1)")
                                                (("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (apply-extensionality
                                                     :hide?
                                                     t)
                                                    (("2"
                                                      (expand "abs")
                                                      (("2"
                                                        (typepred
                                                         "abs(f!1(x!1))")
                                                        (("2"
                                                          (expand
                                                           "abs"
                                                           1
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply-extensionality
                                             :hide?
                                             t)
                                            (("2"
                                              (expand "*" 1)
                                              (("2"
                                                (expand "abs" 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (skosimp)
                          (("2" (apply-extensionality :hide? t)
                            (("2" (expand "^")
                              (("2"
                                (expand "abs")
                                (("2"
                                  (rewrite "real_expt_x1")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil) ("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complex type-eq-decl nil complex_types complex_alt)
    (abs_complex_measurable judgement-tcc nil complex_measurable nil)
    (real_expt_x1 formula-decl nil real_expt power)
    (ae_bounded? const-decl "bool" complex_measure_theory nil)
    (integral_prod formula-decl nil integral measure_integration)
    (integrable? const-decl "bool" integral measure_integration)
    (integrable nonempty-type-eq-decl nil integral measure_integration)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     measure_integration)
    (complex_abs_mul formula-decl nil complex_fun_ops complex_alt)
    (complex_measurable_def formula-decl nil complex_measurable nil)
    (Im_fun_mul1 formula-decl nil complex_fun_ops complex_alt)
    (Re_fun_mul1 formula-decl nil complex_fun_ops complex_alt)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (abs const-decl "nnreal" polar complex_alt)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (^ const-decl "[T -> nnreal]" real_fun_power power)
    (prod_complex_measurable judgement-tcc nil complex_measurable nil)
    (complex_measurable? const-decl "bool" complex_measurable nil)
    (complex_measurable nonempty-type-eq-decl nil complex_measurable
     nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (p_integrable? const-decl "bool" p_integrable_def nil)
    (p_integrable nonempty-type-eq-decl nil p_integrable_def nil))
   nil
   (holder_judge_infty_1 subtype
    "complex_fun_ops[essentially_bounded.T].*(essentially_bounded.f, essentially_bounded.g)"
    "p_integrable[T, S, mu, 1]")))
 (holder_judge_infty_2 0
  (holder_judge_infty_2-2 "" 3789905817
   ("" (skosimp)
    (("" (lemma "holder_judge_infty_1" ("f" "f!1" "g" "g!1"))
      (("" (case-replace "(*[T](f!1, g!1))=(*[T](g!1, f!1))")
        (("1" (expand "*")
          (("1" (assert)
            (("1" (hide-all-but 1)
              (("1" (typepred "f!1")
                (("1" (typepred "g!1")
                  (("1" (expand "p_integrable?")
                    (("1" (expand "essentially_bounded?")
                      (("1" (flatten)
                        (("1" (split)
                          (("1"
                            (lemma "prod_complex_measurable"
                             ("g1" "g!1" "g2" "f!1"))
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "Re")
                                    (("1"
                                      (expand "*")
                                      (("1"
                                        (expand "-")
                                        (("1"
                                          (expand "Im")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "+
")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (case "forall (f:[T->nnreal]): f^1 = f")
                            (("1" (inst-cp - "abs(g!1)")
                              (("1"
                                (replace -2)
                                (("1"
                                  (inst - "abs(g!1*f!1)")
                                  (("1"
                                    (expand "*" -1 1)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide -1 -2)
                                        (("1"
                                          (lemma
                                           "integral_prod"
                                           ("h"
                                            "abs(f!1)"
                                            "f"
                                            "abs(g!1)"))
                                          (("1"
                                            (expand "ae_bounded?")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst - "K!1")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1 -2 -3 2)
                                                    (("2"
                                                      (expand "ae_le?")
                                                      (("2"
                                                        (expand
                                                         "pointwise_ae?")
                                                        (("2"
                                                          (expand
                                                           "ae?")
                                                          (("2"
                                                            (expand
                                                             "fullset")
                                                            (("2"
                                                              (expand
                                                               "ae_in?")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "E!1")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "x!1")
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "abs")
                                                                            (("2"
                                                                              (rewrite
                                                                               "abs_abs")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (skosimp)
                                (("2"
                                  (apply-extensionality :hide? t)
                                  (("2"
                                    (expand "^")
                                    (("2"
                                      (rewrite "real_expt_x1")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (expand "*")
            (("2" (assert)
              (("2" (split)
                (("1" (apply-extensionality :hide? t) nil nil)
                 ("2" (apply-extensionality :hide? t) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p_integrable nonempty-type-eq-decl nil p_integrable_def nil)
    (p_integrable? const-decl "bool" p_integrable_def nil)
    (mu formal-const-decl "measure_type[T, S]" essentially_bounded nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra[T]" essentially_bounded nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (essentially_bounded nonempty-type-eq-decl nil essentially_bounded
     nil)
    (essentially_bounded? const-decl "bool" essentially_bounded nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (real nonempty-type-from-decl nil reals nil)
    (T formal-type-decl nil essentially_bounded nil)
    (holder_judge_infty_1 judgement-tcc nil essentially_bounded nil)
    (Im_fun_rew formula-decl nil complex_fun_ops complex_alt)
    (Im_mul1 formula-decl nil complex_types complex_alt)
    (Re_fun_rew formula-decl nil complex_fun_ops complex_alt)
    (Re_mul1 formula-decl nil complex_types complex_alt) nil
    (Re_fun_mul1 formula-decl nil complex_fun_ops complex_alt)
    (Im_fun_mul1 formula-decl nil complex_fun_ops complex_alt)
    (complex_measurable_def formula-decl nil complex_measurable nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "complex" complex_types complex_alt) nil
    (Im const-decl "[T -> real]" complex_fun_ops complex_alt) nil
    (Im_rew formula-decl nil complex_types complex_alt)
    (Re_rew formula-decl nil complex_types complex_alt)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil) nil
    (Re const-decl "[T -> real]" complex_fun_ops complex_alt)
    (complex_measurable nonempty-type-eq-decl nil complex_measurable
     nil)
    (complex_measurable? const-decl "bool" complex_measurable nil)
    (prod_complex_measurable judgement-tcc nil complex_measurable nil)
    (real_expt_x1 formula-decl nil real_expt power)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (integral_prod formula-decl nil integral measure_integration)
    (integrable? const-decl "bool" integral measure_integration)
    (integrable nonempty-type-eq-decl nil integral measure_integration)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     measure_integration)
    (complex_abs_mul formula-decl nil complex_fun_ops complex_alt) nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (ae_le? const-decl "bool" measure_theory measure_integration)
    nil nil nil
    (ae_in? const-decl "bool" measure_theory measure_integration)
    (negligible nonempty-type-eq-decl nil measure_theory
     measure_integration)
    (negligible_set? const-decl "bool" measure_theory
     measure_integration)
    (set type-eq-decl nil sets nil)
    (TRUE const-decl "bool" booleans nil)
    (abs_abs formula-decl nil polar complex_alt)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory
     measure_integration)
    (ae_bounded? const-decl "bool" complex_measure_theory nil)
    (^ const-decl "[T -> nnreal]" real_fun_power power)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (c_fun_eq1 formula-decl nil complex_fun_ops complex_alt)
    (holder_judge_infty_1 application-judgement "p_integrable"
     essentially_bounded nil)
    nil (= const-decl "bool" complex_fun_ops complex_alt) nil)
   shostak
   (holder_judge_infty_2 subtype
    "complex_fun_ops[essentially_bounded.T].*(essentially_bounded.g, essentially_bounded.f)"
    "p_integrable[T, S, mu, 1]"))
  (holder_judge_infty_2-1 nil 3477802082
   ("" (skosimp)
    (("" (lemma "holder_judge_infty_1" ("f" "f!1" "g" "g!1"))
      (("" (case-replace "(*[T](f!1, g!1))=(*[T](g!1, f!1))")
        (("1" (expand "*")
          (("1" (assert)
            (("1" (hide-all-but 1)
              (("1" (typepred "f!1")
                (("1" (typepred "g!1")
                  (("1" (expand "p_integrable?")
                    (("1" (expand "essentially_bounded?")
                      (("1" (flatten)
                        (("1" (split)
                          (("1"
                            (lemma "prod_complex_measurable"
                             ("g1" "g!1" "g2" "f!1"))
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "Re")
                                    (("1"
                                      (expand "*")
                                      (("1"
                                        (expand "-")
                                        (("1"
                                          (expand "Re")
                                          (("1"
                                            (expand "Im")
                                            (("1"
                                              (expand "Im")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "+
")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "complex_measurable?")
                              (("2" (propax) nil nil)) nil)
                             ("3" (expand "complex_measurable?")
                              (("3" (propax) nil nil)) nil))
                            nil)
                           ("2"
                            (case "forall (f:[T->nnreal]): f^1 = f")
                            (("1" (inst-cp - "abs(g!1)")
                              (("1"
                                (replace -2)
                                (("1"
                                  (inst - "abs(g!1*f!1)")
                                  (("1"
                                    (expand "*" -1 1)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide -1 -2)
                                        (("1"
                                          (lemma
                                           "integral_prod"
                                           ("h"
                                            "abs(f!1)"
                                            "f"
                                            "abs(g!1)"))
                                          (("1"
                                            (expand "ae_bounded?")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst - "K!1")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1 -2 -3 2)
                                                    (("2"
                                                      (expand "ae_le?")
                                                      (("2"
                                                        (expand
                                                         "pointwise_ae?")
                                                        (("2"
                                                          (expand
                                                           "ae?")
                                                          (("2"
                                                            (expand
                                                             "fullset")
                                                            (("2"
                                                              (expand
                                                               "ae_in?")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "E!1")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "x!1")
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "abs")
                                                                            (("2"
                                                                              (rewrite
                                                                               "abs_abs")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2 -1 -2)
                                            (("2"
                                              (lemma
                                               "abs_complex_measurable"
                                               ("g" "f!1"))
                                              (("1" (propax) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (skosimp)
                                (("2"
                                  (apply-extensionality :hide? t)
                                  (("2"
                                    (expand "^")
                                    (("2"
                                      (rewrite "real_expt_x1")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (expand "*")
            (("2" (assert)
              (("2" (split)
                (("1" (apply-extensionality :hide? t) nil nil)
                 ("2" (apply-extensionality :hide? t) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p_integrable nonempty-type-eq-decl nil p_integrable_def nil)
    (p_integrable? const-decl "bool" p_integrable_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (Im_fun_rew formula-decl nil complex_fun_ops complex_alt)
    (Im_mul1 formula-decl nil complex_types complex_alt)
    (Re_fun_rew formula-decl nil complex_fun_ops complex_alt)
    (Re_mul1 formula-decl nil complex_types complex_alt)
    (Re_fun_mul1 formula-decl nil complex_fun_ops complex_alt)
    (Im_fun_mul1 formula-decl nil complex_fun_ops complex_alt)
    (complex_measurable_def formula-decl nil complex_measurable nil)
    (* const-decl "complex" complex_types complex_alt)
    (Im const-decl "[T -> real]" complex_fun_ops complex_alt)
    (Im_rew formula-decl nil complex_types complex_alt)
    (Re_rew formula-decl nil complex_types complex_alt)
    (Re const-decl "[T -> real]" complex_fun_ops complex_alt)
    (complex_measurable nonempty-type-eq-decl nil complex_measurable
     nil)
    (complex_measurable? const-decl "bool" complex_measurable nil)
    (prod_complex_measurable judgement-tcc nil complex_measurable nil)
    (real_expt_x1 formula-decl nil real_expt power)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (integral_prod formula-decl nil integral measure_integration)
    (integrable? const-decl "bool" integral measure_integration)
    (integrable nonempty-type-eq-decl nil integral measure_integration)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     measure_integration)
    (complex_abs_mul formula-decl nil complex_fun_ops complex_alt)
    (ae_le? const-decl "bool" measure_theory measure_integration)
    (ae_in? const-decl "bool" measure_theory measure_integration)
    (negligible nonempty-type-eq-decl nil measure_theory
     measure_integration)
    (negligible_set? const-decl "bool" measure_theory
     measure_integration)
    (set type-eq-decl nil sets nil)
    (abs_abs formula-decl nil polar complex_alt)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory
     measure_integration)
    (ae_bounded? const-decl "bool" complex_measure_theory nil)
    (^ const-decl "[T -> nnreal]" real_fun_power power)
    (c_fun_eq1 formula-decl nil complex_fun_ops complex_alt)
    (= const-decl "bool" complex_fun_ops complex_alt))
   nil
   (holder_judge_infty_2 subtype
    "complex_fun_ops[essentially_bounded.T].*(essentially_bounded.g, essentially_bounded.f)"
    "p_integrable[T, S, mu, 1]")))
 (holder_infty_1 0
  (holder_infty_1-2 "" 3789905821
   ("" (skosimp)
    (("" (lemma "holder_judge_infty_1" ("f" "f!1" "g" "g!1"))
      (("" (typepred "f!1")
        (("" (typepred "g!1")
          (("" (expand "norm")
            ((""
              (case "forall h: abs(h)^1 = abs(h) & forall x: abs(h)(x)>=0")
              (("1" (inst-cp - "f!1*g!1")
                (("1" (inst - "g!1")
                  (("1" (flatten)
                    (("1" (expand "essentially_bounded?")
                      (("1" (expand "p_integrable?")
                        (("1" (flatten)
                          (("1" (replace -1)
                            (("1" (replace -3)
                              (("1"
                                (hide -1 -3)
                                (("1"
                                  (lemma
                                   "integral_nonneg"
                                   ("f" "abs(g!1)"))
                                  (("1"
                                    (lemma
                                     "integral_nonneg"
                                     ("f" "abs(f!1*g!1)"))
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (replace -4)
                                        (("1"
                                          (hide -3 -4)
                                          (("1"
                                            (lemma
                                             "abs_complex_measurable"
                                             ("g" "f!1"))
                                            (("1"
                                              (lemma
                                               "integral_prod"
                                               ("h"
                                                "abs(f!1)"
                                                "nnc"
                                                "essential_bound(f!1)"
                                                "f"
                                                "abs(g!1)"))
                                              (("1"
                                                (case
                                                 "forall h: abs(abs(h)) = abs(h)")
                                                (("1"
                                                  (inst-cp - "f!1")
                                                  (("1"
                                                    (inst-cp - "g!1")
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (rewrite
                                                           "essential_bound_def2")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (case-replace
                                                               "abs(g!1) * abs(f!1)=abs(f!1*g!1)")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "f!1*g!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (rewrite
                                                                     "real_expt_x1")
                                                                    (("1"
                                                                      (rewrite
                                                                       "real_expt_x1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (apply-extensionality
                                                                   :hide?
                                                                   t)
                                                                  (("2"
                                                                    (expand
                                                                     "*")
                                                                    (("2"
                                                                      (expand
                                                                       "abs")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (apply-extensionality
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (expand "abs")
                                                        (("2"
                                                          (typepred
                                                           "abs(h!1(x!1))")
                                                          (("2"
                                                            (expand
                                                             "abs"
                                                             1
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (skosimp)
                  (("2" (split)
                    (("1" (apply-extensionality :hide? t)
                      (("1" (expand "^")
                        (("1" (expand "abs")
                          (("1" (rewrite "real_expt_x1") nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp)
                      (("2" (expand "abs") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p_integrable nonempty-type-eq-decl nil p_integrable_def nil)
    (p_integrable? const-decl "bool" p_integrable_def nil)
    (mu formal-const-decl "measure_type[T, S]" essentially_bounded nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra[T]" essentially_bounded nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (essentially_bounded nonempty-type-eq-decl nil essentially_bounded
     nil)
    (essentially_bounded? const-decl "bool" essentially_bounded nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (real nonempty-type-from-decl nil reals nil)
    (T formal-type-decl nil essentially_bounded nil)
    (holder_judge_infty_1 judgement-tcc nil essentially_bounded nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (^ const-decl "[T -> nnreal]" real_fun_power power)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (abs_complex_measurable application-judgement "measurable_function"
     essentially_bounded nil)
    (integral_nonneg formula-decl nil integral measure_integration)
    (integrable? const-decl "bool" integral measure_integration)
    (integrable nonempty-type-eq-decl nil integral measure_integration)
    (integral_prod formula-decl nil integral measure_integration)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     measure_integration)
    (essential_bound const-decl "nnreal" essentially_bounded nil)
    (abs const-decl "nnreal" polar complex_alt)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (essential_bound_def2 formula-decl nil essentially_bounded nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (prod_measurable application-judgement "measurable_function[T, S]"
     essentially_bounded nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs_measurable application-judgement "measurable_function[T, S]"
     essentially_bounded nil)
    (complex_abs_mul formula-decl nil complex_fun_ops complex_alt)
    (complex_measurable_def formula-decl nil complex_measurable nil)
    (Re_fun_mul1 formula-decl nil complex_fun_ops complex_alt)
    (Im_fun_mul1 formula-decl nil complex_fun_ops complex_alt)
    (integral const-decl "real" integral measure_integration)
    (real_expt_x1 formula-decl nil real_expt power)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (complex_measurable nonempty-type-eq-decl nil complex_measurable
     nil)
    (complex_measurable? const-decl "bool" complex_measurable nil)
    (abs_complex_measurable judgement-tcc nil complex_measurable nil)
    (holder_judge_infty_1 application-judgement "p_integrable"
     essentially_bounded nil)
    (* const-decl "[T -> complex]" complex_fun_ops complex_alt)
    (norm const-decl "nnreal" p_integrable_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak)
  (holder_infty_1-1 nil 3477804007
   ("" (skosimp)
    (("" (lemma "holder_judge_infty_1" ("f" "f!1" "g" "g!1"))
      (("" (typepred "f!1")
        (("" (typepred "g!1")
          (("" (expand "norm")
            ((""
              (case "forall h: abs(h)^1 = abs(h) & forall x: abs(h)(x)>=0")
              (("1" (inst-cp - "f!1*g!1")
                (("1" (inst - "g!1")
                  (("1" (flatten)
                    (("1" (expand "essentially_bounded?")
                      (("1" (expand "p_integrable?")
                        (("1" (flatten)
                          (("1" (replace -1)
                            (("1" (replace -3)
                              (("1"
                                (hide -1 -3)
                                (("1"
                                  (lemma
                                   "integral_nonneg"
                                   ("f" "abs(g!1)"))
                                  (("1"
                                    (lemma
                                     "integral_nonneg"
                                     ("f" "abs(f!1*g!1)"))
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (replace -4)
                                        (("1"
                                          (hide -3 -4)
                                          (("1"
                                            (rewrite "real_expt_x1" 1)
                                            (("1"
                                              (rewrite
                                               "real_expt_x1"
                                               1)
                                              (("1"
                                                (lemma
                                                 "abs_complex_measurable"
                                                 ("g" "f!1"))
                                                (("1"
                                                  (lemma
                                                   "integral_prod"
                                                   ("h"
                                                    "abs(f!1)"
                                                    "nnc"
                                                    "essential_bound(f!1)"
                                                    "f"
                                                    "abs(g!1)"))
                                                  (("1"
                                                    (case
                                                     "forall h: abs(abs(h)) = abs(h)")
                                                    (("1"
                                                      (inst-cp - "f!1")
                                                      (("1"
                                                        (inst-cp
                                                         -
                                                         "g!1")
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (replace
                                                             -3)
                                                            (("1"
                                                              (rewrite
                                                               "essential_bound_def2")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case-replace
                                                                   "abs(g!1) * abs(f!1)=abs(f!1*g!1)")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "f!1*g!1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (apply-extensionality
                                                                       :hide?
                                                                       t)
                                                                      (("2"
                                                                        (expand
                                                                         "*")
                                                                        (("2"
                                                                          (expand
                                                                           "abs")
                                                                          (("2"
                                                                            (rewrite
                                                                             "abs_mult")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (expand
                                                             "abs")
                                                            (("2"
                                                              (typepred
                                                               "abs(h!1(x!1))")
                                                              (("2"
                                                                (expand
                                                                 "abs"
                                                                 1
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (skosimp)
                  (("2" (split)
                    (("1" (apply-extensionality :hide? t)
                      (("1" (expand "^")
                        (("1" (expand "abs")
                          (("1" (rewrite "real_expt_x1") nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp)
                      (("2" (expand "abs") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p_integrable nonempty-type-eq-decl nil p_integrable_def nil)
    (p_integrable? const-decl "bool" p_integrable_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (^ const-decl "[T -> nnreal]" real_fun_power power)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (integral_nonneg formula-decl nil integral measure_integration)
    (integrable? const-decl "bool" integral measure_integration)
    (integrable nonempty-type-eq-decl nil integral measure_integration)
    (integral_prod formula-decl nil integral measure_integration)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     measure_integration)
    (abs const-decl "nnreal" polar complex_alt)
    (complex_abs_mul formula-decl nil complex_fun_ops complex_alt)
    (complex_measurable_def formula-decl nil complex_measurable nil)
    (Re_fun_mul1 formula-decl nil complex_fun_ops complex_alt)
    (Im_fun_mul1 formula-decl nil complex_fun_ops complex_alt)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (complex_measurable nonempty-type-eq-decl nil complex_measurable
     nil)
    (complex_measurable? const-decl "bool" complex_measurable nil)
    (abs_complex_measurable judgement-tcc nil complex_measurable nil)
    (real_expt_x1 formula-decl nil real_expt power)
    (norm const-decl "nnreal" p_integrable_def nil))
   shostak))
 (holder_infty_2 0
  (holder_infty_2-2 "" 3789905821
   ("" (skosimp)
    (("" (lemma "holder_infty_1" ("f" "f!1" "g" "g!1"))
      (("" (case-replace "norm(g!1 * f!1)=norm(f!1 * g!1)")
        (("1" (assert) nil nil)
         ("2" (hide-all-but 1)
          (("2" (expand "norm")
            (("2" (assert)
              (("2"
                (case-replace
                 "abs(g!1) * abs(f!1)=abs(f!1) * abs(g!1)")
                (("2" (expand "abs")
                  (("2" (expand "*") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p_integrable nonempty-type-eq-decl nil p_integrable_def nil)
    (p_integrable? const-decl "bool" p_integrable_def nil)
    (mu formal-const-decl "measure_type[T, S]" essentially_bounded nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra[T]" essentially_bounded nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (essentially_bounded nonempty-type-eq-decl nil essentially_bounded
     nil)
    (essentially_bounded? const-decl "bool" essentially_bounded nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (real nonempty-type-from-decl nil reals nil)
    (T formal-type-decl nil essentially_bounded nil)
    (holder_infty_1 formula-decl nil essentially_bounded nil) nil nil
    (complex_abs_mul formula-decl nil complex_fun_ops complex_alt)
    (expt_x1 formula-decl nil exponentiation nil) nil
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (norm const-decl "nnreal" p_integrable_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (holder_judge_infty_1 application-judgement "p_integrable"
     essentially_bounded nil)
    (holder_judge_infty_2 application-judgement "p_integrable"
     essentially_bounded nil))
   shostak)
  (holder_infty_2-1 nil 3477803870
   ("" (skosimp)
    (("" (lemma "holder_infty_1" ("f" "f!1" "g" "g!1"))
      (("" (case-replace "norm(g!1 * f!1)=norm(f!1 * g!1)")
        (("1" (assert) nil nil)
         ("2" (hide-all-but 1)
          (("2" (expand "norm")
            (("2" (assert)
              (("2"
                (case-replace
                 "abs(g!1) * abs(f!1)=abs(f!1) * abs(g!1)")
                (("1" (expand "abs")
                  (("1" (expand "*") (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (assert)
                    (("2" (expand "*")
                      (("2" (apply-extensionality :hide? t) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p_integrable nonempty-type-eq-decl nil p_integrable_def nil)
    (p_integrable? const-decl "bool" p_integrable_def nil)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (complex type-eq-decl nil complex_types complex_alt)
    (complex_abs_mul formula-decl nil complex_fun_ops complex_alt)
    (abs const-decl "[T -> nonneg_real]" complex_fun_ops complex_alt)
    (norm const-decl "nnreal" p_integrable_def nil))
   shostak)))


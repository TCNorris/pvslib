pvsio_checker : THEORY
BEGIN

  IMPORTING time_fun,
            pathname,
            reals@sqrt

  % Rounding Modes
  RoundingMode : TYPE = {TowardsZero,TowardsInfnty,TowardsNegInfnty,TowardsPosInfnty} 
  AwayFromZero : MACRO RoundingMode = TowardsInfnty
  Ceiling      : MACRO RoundingMode = TowardsPosInfnty
  Floor        : MACRO RoundingMode = TowardsNegInfnty

  % Global variables

  Records      : Global[nat,0]
  Fails        : Global[nat,0]
  CurrentLine  : Global[nat,0]
  Frequency    : Global[posnat,10]
  OutExtension : Global[string,"out"]

  % Default Tolerance for almost equal of real numbers
  DefaultTolerance : Global[nnreal,0.001]

  % Default precision. n = val(Precision) represents a precision of 10^-n
  DefaultPrecision : Global[int,5]  
  % Default rounding mode
  DefaultMode      : Global[RoundingMode,TowardsZero] 

  % r is a real number, n represents the precision 10^-n, and m is the rounding mode 
  real2str(r:real,n:int,m:RoundingMode) : string

  to_str(r:real) : string = real2str(r,DefaultPrecision,DefaultMode)

  % Generic checker: 
  % Iterates check on a file until maxr (or end of file if maxr = 0)

  IMPORTING reals@reals_safe_ops

  print_etc(fin:IStream,maxr:nat) : void =
    IF mod(val[nat](Records),val[posnat](Frequency)) = 0 THEN
      LET is   = IF maxr = 0 THEN div_safe(flength(fin),fgetpos(fin))
                 ELSE div_safe(maxr,val[nat](Records)) ENDIF,
          per  = floor(100*div_safe(1,is)),
          time = toc`1*(is-1) IN
        printf("[~d% - Line: ~d, Records: ~a] Estimated Time of Completion: ~a~%",
              (per,val(CurrentLine),val(Records),hms(time)))
    ELSE
      skip
    ENDIF 

  checker_with_header_fout(
   file    : string,
   check   : [[IStream,OStream]->bool],
   head    : [[IStream,OStream]->void],
   maxr    : nat,
   nameout : string) : void =
    IF file = "" OR fexists(file) THEN
      LET fin     = IF file = "" THEN stdin ELSE fopenin(file) ENDIF,
          fout    = IF file = "" THEN stdout ELSE fopenout(create,nameout) ENDIF IN
        IF file /= "" THEN 
          printf("Reading: ~a. Writing: ~a~%",(file,nameout)) 
        ELSE skip ENDIF &
        set[nat](Records,0) &
        set[nat](Fails,0) &
        set[nat](CurrentLine,0) &
        tic & 
        head(fin,fout) &
        while(NOT eof?(fin) AND maxr <= 0 OR val[nat](Records) < maxr,
              catch[void]
	        ((:"EmptyInput":),
	        IF check(fin,fout) THEN skip ELSE set[nat](Fails,val[nat](Fails)+1) ENDIF &
		set[nat](Records,val[nat](Records)+1) &
		IF file /= "" THEN print_etc(fin,maxr) ELSE skip ENDIF,
	      	skip)) &
        LET msg = format("~a~%Lines: ~a. Records: ~a. Fails: ~a~%",
                        (str_toc,val[nat](CurrentLine),val[nat](Records),val[nat](Fails))) IN
        printf(msg) & 
        IF file /= "" THEN fprintf(fout,msg) ELSE skip ENDIF &
        fclose(fin) &
        fclose(fout) 
    ELSE
      printf("File ~a doesn't exist",file)
    ENDIF

  checker_with_header(file:string,check:[[IStream,OStream]->bool],head:[[IStream,OStream]->void],maxr:nat) : void =
    LET nameout = IF maxr = 0 THEN format("~a~a.~a",
                                 (pathname_dir(file),pathname_name(file),val(OutExtension))) 
          ELSE format("~a~a-~a.~a",
                     (pathname_dir(file),pathname_name(file),maxr,val(OutExtension))) ENDIF
    IN checker_with_header_fout(file,check,head,maxr,nameout)

  checker(file:string,check:[[IStream,OStream]->bool],maxr:nat) : void =
    checker_with_header(file,check,LAMBDA(io:[IStream,OStream]):fprintf(io`2,"Date: ~a~%",date) &
          fprintf(io`2,"Input file: ~a~%",file),maxr)

  checker(file:string,check:[[IStream,OStream]->bool],maxr:nat,nameout:string) : void =
    checker_with_header_fout(file,check,LAMBDA(io:[IStream,OStream]):skip,maxr,nameout)

  empty_line(line:string) : bool =
    LET trln = trim(line) IN
      trln = "" OR strfind("%",trln) = 0

  readln_checker(fin:IStream):string =
    LET lvar = ref[string]("") IN
      prog(while (NOT eof?(fin) AND empty_line(val(lvar)),
             set[nat](CurrentLine,val[nat](CurrentLine)+1) &
             set[string](lvar,fread_line(fin))),
           LET result = val(lvar) IN
	   IF result="" THEN throw("EmptyInput") ELSE result ENDIF)

  almost_equal_prec?(r1,r2:real,prec:nnreal) : bool =
    abs(r1-r2) <= prec

  almost_equal?(r1,r2:real) : bool =
    almost_equal_prec?(r1,r2,val(DefaultTolerance))

  check_real_prec(fout:OStream,msg:string,pvs,io:real,prec:nnreal) : bool =
    IF NOT almost_equal_prec?(pvs,io,prec) THEN
      fprintf(fout,"*** ERROR~a. Line: ~a. Record: ~a. PVS: ~a vs. Input: ~a~%",
             (msg,val(CurrentLine),val(Records),to_str(pvs),to_str(io))) &
      FALSE
    ELSE
      TRUE
    ENDIF

  check_real(fout:OStream,msg:string,pvs,io:real) : bool =
    check_real_prec(fout,msg,io,pvs,val(DefaultTolerance))

  check_bool(fout:OStream,msg:string,pvs,io:bool) : bool =
    IF pvs /= io THEN
      fprintf(fout,"*** ERROR~a. Line: ~a. Record: ~a. PVS: ~a vs. Input: ~a~%",
             (msg,val(CurrentLine),val(Records),pvs,io)) &
      FALSE
    ELSE
      TRUE
    ENDIF

  check_int(fout:OStream,msg:string,pvs,io:int) : bool =
    IF pvs /= io THEN
      fprintf(fout,"*** ERROR~a. Line: ~a. Record: ~a. PVS: ~a vs. Input: ~a~%",
             (msg,val(CurrentLine),val(Records),pvs,io)) &
      FALSE
    ELSE
      TRUE
    ENDIF

END pvsio_checker

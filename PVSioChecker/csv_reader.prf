(csv_reader
 (CSVDataFromSpec_TCC1 0
  (CSVDataFromSpec_TCC1-1 nil 3778337968 ("" (subtype-tcc) nil nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (CSVDataFromSpec_TCC2 0
  (CSVDataFromSpec_TCC2-1 nil 3778337968 ("" (subtype-tcc) nil nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (CSVDataFromSpec_TCC3 0
  (CSVDataFromSpec_TCC3-1 nil 3778337968 ("" (subtype-tcc) nil nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (CSVDataFromSpec_TCC4 0
  (CSVDataFromSpec_TCC4-1 nil 3778338467
   ("" (induct "spec")
    (("1" (inst 1 "null") (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("x" "xs"))
      (("2" (flatten)
        (("2" (skolem -1 "data" :skolem-typepreds? t)
          (("2"
            (inst 1 "cons( CASES x
          OF String: str_field(\"\"),
             Integer: int_field(0),
             Rational: rat_field(0)
          ENDCASES , data)")
            (("2" (split 1)
              (("1" (grind) nil nil)
               ("2" (skeep* :preds? t)
                (("2" (case "i=0")
                  (("1" (replace -1 :hide? t)
                    (("1" (expand "nth" 1) (("1" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil)
     ("5" (hide 2) (("5" (grind) nil nil)) nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_field adt-constructor-decl "[real -> (rat?)]" csv_reader nil)
    (int_field adt-constructor-decl "[int -> (int?)]" csv_reader nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (str_field adt-constructor-decl "[string -> (str?)]" csv_reader
     nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (TRUE const-decl "bool" booleans nil)
    (rat? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (int? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (str? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Rational? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (Rational adt-constructor-decl "(Rational?)" csv_reader nil)
    (Integer? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (Integer adt-constructor-decl "(Integer?)" csv_reader nil)
    (list type-decl nil list_adt nil)
    (CSVData type-decl nil csv_reader nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (String? adt-recognizer-decl "[CSVFieldSpec -> boolean]" csv_reader
     nil)
    (String adt-constructor-decl "(String?)" csv_reader nil))
   nil))
 (getField_TCC1 0
  (getField_TCC1-1 nil 3778340295 ("" (subtype-tcc) nil nil) nil nil))
 (getField_TCC2 0
  (getField_TCC2-1 nil 3778340295 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CSVData type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (String? adt-recognizer-decl "[CSVFieldSpec -> boolean]" csv_reader
     nil)
    (String adt-constructor-decl "(String?)" csv_reader nil)
    (str? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Integer? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (Integer adt-constructor-decl "(Integer?)" csv_reader nil)
    (int? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Rational? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (Rational adt-constructor-decl "(Rational?)" csv_reader nil)
    (rat? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (csv_data_from_spec_field_rat 0
  (csv_data_from_spec_field_rat-1 nil 3778341814 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CSVData type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (String? adt-recognizer-decl "[CSVFieldSpec -> boolean]" csv_reader
     nil)
    (String adt-constructor-decl "(String?)" csv_reader nil)
    (str? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Integer? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (Integer adt-constructor-decl "(Integer?)" csv_reader nil)
    (int? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Rational? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (Rational adt-constructor-decl "(Rational?)" csv_reader nil)
    (rat? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (getField const-decl "{d: CSVData |
         CASES nth(spec, i)
           OF String: str?(d), Integer: int?(d), Rational: rat?(d)
           ENDCASES}" csv_reader nil))
   shostak))
 (csv_data_from_spec_field_int 0
  (csv_data_from_spec_field_int-1 nil 3778342003 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CSVData type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (String? adt-recognizer-decl "[CSVFieldSpec -> boolean]" csv_reader
     nil)
    (String adt-constructor-decl "(String?)" csv_reader nil)
    (str? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Integer? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (Integer adt-constructor-decl "(Integer?)" csv_reader nil)
    (int? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Rational? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (Rational adt-constructor-decl "(Rational?)" csv_reader nil)
    (rat? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (getField const-decl "{d: CSVData |
         CASES nth(spec, i)
           OF String: str?(d), Integer: int?(d), Rational: rat?(d)
           ENDCASES}" csv_reader nil))
   shostak))
 (csv_data_from_spec_field_str 0
  (csv_data_from_spec_field_str-1 nil 3778342008 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CSVData type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (String? adt-recognizer-decl "[CSVFieldSpec -> boolean]" csv_reader
     nil)
    (String adt-constructor-decl "(String?)" csv_reader nil)
    (str? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Integer? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (Integer adt-constructor-decl "(Integer?)" csv_reader nil)
    (int? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Rational? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (Rational adt-constructor-decl "(Rational?)" csv_reader nil)
    (rat? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (getField const-decl "{d: CSVData |
         CASES nth(spec, i)
           OF String: str?(d), Integer: int?(d), Rational: rat?(d)
           ENDCASES}" csv_reader nil))
   shostak))
 (processCSVLine_TCC1 0
  (processCSVLine_TCC1-1 nil 3778255305 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (processCSVLine_TCC2 0
  (processCSVLine_TCC2-1 nil 3778255305 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (processCSVLine_TCC3 0
  (processCSVLine_TCC3-1 nil 3778255305
   ("" (skeep* :preds? t)
    (("" (expand "length" -1)
      (("" (assert)
        (("" (lift-if -1)
          (("" (split -1)
            (("1" (flatten) (("1" (assert) nil nil)) nil)
             ("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (processCSVLine_TCC4 0
  (processCSVLine_TCC4-1 nil 3778255305
   ("" (skeep* :preds? t)
    (("" (expand "length" -1)
      (("" (assert) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (processCSVLine_TCC5 0
  (processCSVLine_TCC5-1 nil 3778255305
   ("" (skeep* :preds? t)
    (("" (expand "<<") (("" (grind) nil nil)) nil)) nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (processCSVLine_TCC6 0
  (processCSVLine_TCC6-1 nil 3778327599
   ("" (skeep* :preds? t)
    (("" (typepred "v(cdr(spec), cdr(strs))")
      (("1" (split 2)
        (("1" (expand "length" 1)
          (("1" (replace -6 :hide? t)
            (("1" (replace -1 :hide? t) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (skeep :preds? t)
          (("2" (case "i=0")
            (("1" (replace -1 :hide? t)
              (("1" (expand "nth" 1)
                (("1" (replace -5 :hide? t :dir rl)
                  (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (expand "nth" 2)
              (("2" (assert)
                (("2" (lift-if 2)
                  (("2" (assert)
                    (("2" (inst -3 "i-1")
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "length" -1) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil)
    (rat? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Rational adt-constructor-decl "(Rational?)" csv_reader nil)
    (Rational? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (int? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Integer adt-constructor-decl "(Integer?)" csv_reader nil)
    (Integer? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (str? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (String adt-constructor-decl "(String?)" csv_reader nil)
    (String? adt-recognizer-decl "[CSVFieldSpec -> boolean]" csv_reader
     nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (<= const-decl "bool" reals nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (list type-decl nil list_adt nil)
    (CSVData type-decl nil csv_reader nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (processCSVLine_TCC7 0
  (processCSVLine_TCC7-1 nil 3778327599 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (readCSVRecord_TCC1 0
  (readCSVRecord_TCC1-1 nil 3778255305 ("" (subtype-tcc) nil nil)
   ((IStream nonempty-type-from-decl nil stdio nil)
    (IStream_pred const-decl "[Stream -> boolean]" stdio nil)
    (Stream nonempty-type-decl nil stdio nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (empty_line const-decl "bool" pvsio_checker nil)
    (skip const-decl "void" stdlang nil)
    (set const-decl "void" stdprog nil)
    (ClosedStream const-decl "ExceptionTag[string]" stdio nil)
    (make_exc const-decl "Exception" stdexc nil)
    (EndOfFile const-decl "ExceptionTag[string]" stdio nil)
    (fcheck const-decl "bool" stdio nil)
    (prog const-decl
          "T"
     stdprog nil)
    (fread_line const-decl "string" stdio nil)
    (fail const-decl "void" stdlang nil)
    (return const-decl "void" stdprog nil)
    (readln_checker const-decl "string" pvsio_checker nil))
   nil))
 (ex1_TCC1 0
  (ex1_TCC1-1 nil 3778327599
   ("" (skeep*)
    (("" (typepred "readCSVRecord(fin, MSEXCEL_DIALECT, spec)")
      (("" (replace -5 :hide? t)
        (("" (replace -4 :hide? t)
          (("" (expand "length" -1 2)
            (("" (expand "length" -1 2)
              (("" (expand "length" -1 2)
                (("" (expand "length" -1 2)
                  (("" (expand "length")
                    (("" (lift-if -1)
                      (("" (split -1)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((MSEXCEL_DIALECT const-decl "CSVDialect" csv_writer nil)
    (readCSVRecord const-decl "CSVDataFromSpec(data_spec)" csv_reader
     nil)
    (CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil)
    (rat? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Rational adt-constructor-decl "(Rational?)" csv_reader nil)
    (Rational? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (int? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Integer adt-constructor-decl "(Integer?)" csv_reader nil)
    (Integer? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (str? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (String adt-constructor-decl "(String?)" csv_reader nil)
    (String? adt-recognizer-decl "[CSVFieldSpec -> boolean]" csv_reader
     nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (CSVDialect type-eq-decl nil csv_writer nil)
    (QuoteChar type-decl nil csv_writer nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (IStream nonempty-type-from-decl nil stdio nil)
    (IStream_pred const-decl "[Stream -> boolean]" stdio nil)
    (Stream nonempty-type-decl nil stdio nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (list type-decl nil list_adt nil)
    (CSVData type-decl nil csv_reader nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (ex1_TCC2 0
  (ex1_TCC2-1 nil 3778327599
   ("" (skeep* :preds? t)
    (("" (expand "length" -1)
      (("" (lift-if -1)
        (("" (split -1)
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (flatten) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (ex1_TCC3 0
  (ex1_TCC3-1 nil 3778327599 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (MSEXCEL_DIALECT const-decl "CSVDialect" csv_writer nil)
    (empty_line const-decl "bool" pvsio_checker nil)
    (skip const-decl "void" stdlang nil)
    (set const-decl "void" stdprog nil)
    (ClosedStream const-decl "ExceptionTag[string]" stdio nil)
    (make_exc const-decl "Exception" stdexc nil)
    (EndOfFile const-decl "ExceptionTag[string]" stdio nil)
    (fcheck const-decl "bool" stdio nil)
    (prog const-decl
          "T"
     stdprog nil)
    (fread_line const-decl "string" stdio nil)
    (fail const-decl "void" stdlang nil)
    (return const-decl "void" stdprog nil)
    (readln_checker const-decl "string" pvsio_checker nil))
   shostak))
 (ex1_TCC4 0
  (ex1_TCC4-1 nil 3778327599 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (MSEXCEL_DIALECT const-decl "CSVDialect" csv_writer nil)
    (empty_line const-decl "bool" pvsio_checker nil)
    (skip const-decl "void" stdlang nil)
    (set const-decl "void" stdprog nil)
    (ClosedStream const-decl "ExceptionTag[string]" stdio nil)
    (make_exc const-decl "Exception" stdexc nil)
    (EndOfFile const-decl "ExceptionTag[string]" stdio nil)
    (fcheck const-decl "bool" stdio nil)
    (prog const-decl
          "T"
     stdprog nil)
    (fread_line const-decl "string" stdio nil)
    (fail const-decl "void" stdlang nil)
    (return const-decl "void" stdprog nil)
    (readln_checker const-decl "string" pvsio_checker nil))
   shostak)))


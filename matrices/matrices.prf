(matrices
 (IMP_sigma_swap_TCC1 0
  (IMP_sigma_swap_TCC1-1 nil 3621252270 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (IMP_sigma_swap assuming "reals@sigma_swap[nat].sigma_swap"
    "connected_domain: ASSUMPTION (FORALL (x, y: sigma_swap.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma_swap.T_pred(z)))")))
 (length_matrix_eq 0
  (length_matrix_eq-1 nil 3618314996
   ("" (skeep :but "LL") (("" (induct-and-simplify "LL") nil nil)) nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn structures)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (nth_matrix_eq 0
  (nth_matrix_eq-2 "" 3790097122
   (""
    (case "FORALL (i,nn: nat, LL: list[listn[real](nn)]) : i < length[list[real]](LL) IMPLIES  nth[listn[real](nn)](LL, i) = nth[list[real]](LL, i)")
    (("1" (skeep) nil nil)
     ("2" (hide 2)
      (("2" (induct "i") (("1" (grind) nil nil) ("2" (skeep*) nil nil)) nil))
      nil))
    nil)
   nil shostak)
  (nth_matrix_eq-1 nil 3618315013
   (""
    (case "FORALL (i,nn: nat, LL: list[listn[real](nn)]) : i < length[list[real]](LL) IMPLIES  nth[listn[real](nn)](LL, i) = nth[list[real]](LL, i)")
    (("1" (skeep) (("1" (insteep) (("1" (assert) nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct "i")
        (("1" (grind) nil nil)
         ("2" (skeep*)
          (("2" (expand "nth" 1)
            (("2" (inst -1 "nn" "cdr(LL)")
              (("2" (assert)
                (("2" (hide 2)
                  (("2" (expand "length" -1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep) (("3" (rewrite "length_matrix_eq") nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "length_matrix_eq") nil nil)) nil)) nil))
    nil)
   ((nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil))
   nil))
 (length_matrix_equiv 0
  (length_matrix_equiv-2 "" 3790097122
   ("" (skolem 1 ("nn" _)) (("" (induct "LL") (("" (grind) nil nil)) nil))
    nil)
   nil shostak)
  (length_matrix_equiv-1 nil 3613207327
   ("" (skolem 1 ("nn" _))
    (("" (induct "LL")
      (("1" (grind) nil nil)
       ("2" (skolem 1 ("v" "L"))
        (("2" (flatten)
          (("2" (expand "length" +) (("2" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (listn type-eq-decl nil listn structures)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (length_matrix_nth 0
  (length_matrix_nth-2 "" 3790097123
   ("" (skolem 1 ("nn" _ _))
    (("" (induct "LL")
      (("1" (grind) nil nil)
       ("2" (skolem 1 ("v" "L"))
        (("2" (flatten)
          (("2" (assert)
            (("2" (skeep)
              (("2" (expand "length" +)
                (("2" (lift-if)
                  (("2" (ground)
                    (("1" (typepred "L")
                      (("1" (rewrite "every_nth")
                        (("1" (expand "nth" -2)
                          (("1" (lift-if)
                            (("1" (ground)
                              (("1" (typepred "v") (("1" (grind) nil nil))
                                nil)
                               ("2" (inst - "i-1")
                                (("2" (flatten)
                                  (("2" (assert) (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "nth" 2)
                      (("2" (lift-if)
                        (("2" (ground)
                          (("1" (typepred "v")
                            (("1" (expand "length" -2)
                              (("1" (lift-if)
                                (("1" (ground) (("1" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst - "i-1")
                            (("2" (expand "length" -1)
                              (("2" (lift-if)
                                (("2" (ground) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (length_matrix_nth-1 nil 3613210127
   ("" (skolem 1 ("nn" _ _))
    (("" (induct "LL")
      (("1" (grind) nil nil)
       ("2" (skolem 1 ("v" "L"))
        (("2" (flatten)
          (("2" (assert)
            (("2" (skeep)
              (("2" (expand "length" +)
                (("2" (lift-if)
                  (("2" (ground)
                    (("1" (typepred "L")
                      (("1" (rewrite "every_nth")
                        (("1" (expand "nth" -2)
                          (("1" (lift-if)
                            (("1" (ground)
                              (("1" (typepred "v") (("1" (grind) nil nil))
                                nil)
                               ("2" (inst - "i-1")
                                (("1" (flatten)
                                  (("1" (assert) (("1" (grind) nil nil)) nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "nth" 2)
                      (("2" (lift-if)
                        (("2" (ground)
                          (("1" (typepred "v")
                            (("1" (expand "length" -2)
                              (("1" (lift-if)
                                (("1" (ground) (("1" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst - "i-1")
                            (("2" (expand "length" -1)
                              (("2" (lift-if)
                                (("2" (ground) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (listn type-eq-decl nil listn structures)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (every_nth formula-decl nil list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   shostak))
 (matrix_listn_nth 0
  (matrix_listn_nth-3 "" 3790097123 ("" (skeep) nil nil) nil shostak)
  (matrix_listn_nth-2 nil 3618315031
   ("" (skeep) (("" (rewrite "nth_matrix_eq") nil nil)) nil) nil nil)
  (matrix_listn_nth-1 nil 3613218443 ("" (postpone) nil nil) nil shostak))
 (length_rows 0
  (length_rows-1 nil 3615893404
   ("" (skeep) (("" (expand "rows") (("" (propax) nil nil)) nil)) nil)
   ((rows const-decl "nat" matrices nil)) shostak))
 (columns_TCC1 0
  (columns_TCC1-1 nil 3613146060
   ("" (skeep)
    (("" (assert)
      (("" (skosimp*)
        (("" (typepred "i!1") (("" (hide +) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (columns subtype "0"
            "{c: naturalnumbers.nat | booleans.AND(FORALL (i: naturalnumbers.below(list_props[list[real]].length(matrices.M))): reals.<=(list_props[real].length(list_props[list[real]].nth(matrices.M, i)), c), (booleans.OR(booleans.AND(list_adt[list[real]].null?(matrices.M), c = 0), EXISTS (i: naturalnumbers.below(list_props[list[real]].length(matrices.M))): list_props[real].length(list_props[list[real]].nth(matrices.M, i)) = c)))}")))
 (columns_TCC2 0
  (columns_TCC2-1 nil 3613146060 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices nil))
   nil (columns subtype "matrices.M" "(list_adt[list[real]].cons?)")))
 (columns_TCC3 0
  (columns_TCC3-1 nil 3613228106 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (columns termination
            "matrices.columns(list_adt[list[real]].cdr(matrices.M))" "nil")))
 (columns_TCC4 0
  (columns_TCC4-1 nil 3613228106
   ("" (skeep)
    (("" (assert)
      (("" (split)
        (("1" (expand "max")
          (("1"
            (case "length[real](car[list[real]](M)) < v(cdr[list[real]](M))")
            (("1" (assert)
              (("1" (typepred "v(cdr[list[real]](M))")
                (("1" (skeep)
                  (("1" (typepred "i")
                    (("1" (case "i = 0")
                      (("1" (expand "nth" 1) (("1" (assert) nil nil)) nil)
                       ("2" (assert)
                        (("2" (inst - "i-1")
                          (("1" (assert)
                            (("1" (expand "nth" +) (("1" (propax) nil nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (expand "length" -1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (skeep)
                (("2" (case "i = 0")
                  (("1" (expand "nth" 2) (("1" (assert) nil nil)) nil)
                   ("2" (assert)
                    (("2" (typepred "v(cdr[list[real]](M))")
                      (("2" (inst - "i-1")
                        (("1" (assert)
                          (("1" (expand "nth" 3) (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (typepred "i")
                          (("2" (expand "length" -1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "length" 1 2) (("3" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (expand "max" 1)
          (("2"
            (case "length[real](car[list[real]](M)) < v(cdr[list[real]](M))")
            (("1" (assert)
              (("1" (typepred "v(cdr[list[real]](M))")
                (("1" (assert)
                  (("1" (skosimp*)
                    (("1" (inst + "i!1+1")
                      (("1" (expand "nth" 1) (("1" (propax) nil nil)) nil)
                       ("2" (typepred "i!1")
                        (("2" (expand "length" 1) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (inst + "0")
                (("1" (expand "nth" 2) (("1" (propax) nil nil)) nil)
                 ("2" (assert) (("2" (hide 2) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (assert)
              (("3" (expand "length" 1 2) (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i!1 skolem-const-decl "below(length(cdr[list[real]](M)))" matrices nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (i skolem-const-decl "below(length(M))" matrices nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (M skolem-const-decl "Matrix" matrices nil)
    (i skolem-const-decl "below(length(M))" matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil))
   nil
   (columns subtype
            "real_defs.max(list_props[real].length(list_adt[list[real]].car(matrices.M)), matrices.columns(list_adt[list[real]].cdr(matrices.M)))"
            "{c: naturalnumbers.nat | booleans.AND(FORALL (i: naturalnumbers.below(list_props[list[real]].length(matrices.M))): reals.<=(list_props[real].length(list_props[list[real]].nth(matrices.M, i)), c), (booleans.OR(booleans.AND(list_adt[list[real]].null?(matrices.M), c = 0), EXISTS (i: naturalnumbers.below(list_props[list[real]].length(matrices.M))): list_props[real].length(list_props[list[real]].nth(matrices.M, i)) = c)))}")))
 (row_TCC1 0
  (row_TCC1-1 nil 3613147893 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (row subtype "matrices.i" "below[length[list[real]](M)]")))
 (col_TCC1 0
  (col_TCC1-1 nil 3613147893 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (length def-decl "nat" list_props nil)
    (rows const-decl "nat" matrices nil))
   nil
   (col subtype "list_adt[real].null"
        "matrices.VectorN(matrices.rows(matrices.M))")))
 (col_TCC2 0
  (col_TCC2-1 nil 3613147893
   ("" (skeep)
    (("" (expand "rows" +)
      (("" (expand "length" + 2)
        (("" (assert)
          (("" (expand "length" + 1)
            (("" (typepred "v(cdr[list[real]](M))(i)")
              (("" (replaces -2)
                (("" (expand "rows") (("" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rows const-decl "nat" matrices nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (VectorN type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (length def-decl "nat" list_props nil))
   nil
   (col subtype
        "list_adt[real].cons(matrices.access(list_adt[list[real]].car(matrices.M))(matrices.i), matrices.col(list_adt[list[real]].cdr(matrices.M))(matrices.i))"
        "matrices.VectorN(matrices.rows(matrices.M))")))
 (col_def_TCC1 0
  (col_def_TCC1-1 nil 3613306052 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (rows const-decl "nat" matrices nil))
   nil (col_def subtype "matrices.j" "below[length[real](col(M)(i))]")))
 (col_def_TCC2 0
  (col_def_TCC2-1 nil 3613306052 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (rows const-decl "nat" matrices nil))
   nil (col_def subtype "matrices.j" "below[length[list[real]](M)]")))
 (col_def 0
  (col_def-1 nil 3613306076
   ("" (induct "M")
    (("1" (skeep) (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
     ("2" (skolem 1 ("v" "M"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (assert)
            (("2" (splash +)
              (("1" (skeep)
                (("1" (typepred "j")
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (case "j = 0")
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (expand "nth" + 1)
                              (("1" (expand "col" + 1)
                                (("1" (expand "nth" + 2)
                                  (("1" (expand "access")
                                    (("1" (lift-if)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "nth" -2)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "nth" + 1)
                            (("2" (expand "nth" + 3)
                              (("2" (expand "col" +)
                                (("2" (inst - "i")
                                  (("2" (flatten)
                                    (("2" (inst - "j-1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (expand "nth" -2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "rows" -2)
                                        (("2"
                                          (expand "length" -2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "rows" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst - "i")
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (expand "col" +)
                              (("2" (expand "nth" 2)
                                (("2" (lift-if)
                                  (("2" (ground)
                                    (("1" (replaces -1)
                                      (("1"
                                        (expand "access" 1)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (expand "nth" 2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (inst - "j-1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replaces -4)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (expand "nth" 3)
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "rows" (-1 1))
                                        (("2"
                                          (expand "length" -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "col(cons(v,M))(i)") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (skosimp*)
          (("3" (typepred "j!1")
            (("3" (expand "rows") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skosimp*)
        (("4" (typepred "j!1")
          (("4" (expand "rows") (("4" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skosimp*)
        (("5" (typepred "j!1")
          (("5" (expand "rows") (("5" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (v skolem-const-decl "list[real]" matrices nil)
    (M skolem-const-decl "list[list[real]]" matrices nil)
    (j skolem-const-decl "below(rows(cons(v, M)))" matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (access const-decl "real" matrices nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (Matrix type-eq-decl nil matrices nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (rows const-decl "nat" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (col def-decl "VectorN(rows(M))" matrices nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (col_zero 0
  (col_zero-1 nil 3613380700
   ("" (skeep)
    (("" (rewrite "list_extensionality[real]")
      (("" (splash)
        (("1" (skeep)
          (("1" (typepred "n")
            (("1" (lemma "col_def")
              (("1" (inst - "M" "i")
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (inst - "n")
                      (("1" (replaces -2)
                        (("1" (assert)
                          (("1" (typepred "columns(M)")
                            (("1" (inst - "n")
                              (("1" (assert)
                                (("1" (expand "zero" 1)
                                  (("1"
                                    (typepred
                                     "array2list[real](rows(M))(LAMBDA (p: nat): 0)")
                                    (("1" (inst - "n") nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (assert)
                                (("2" (typepred "col(M)(i)")
                                  (("2" (expand "rows")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "col(M)(i)") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((list_extensionality formula-decl nil more_list_props structures)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (rows const-decl "nat" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (col def-decl "VectorN(rows(M))" matrices nil)
    (zero const-decl "VectorN(n)" matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (col_def formula-decl nil matrices nil)
    (M skolem-const-decl "Matrix" matrices nil)
    (i skolem-const-decl "nat" matrices nil)
    (n skolem-const-decl "below(length(col(M)(i)))" matrices nil)
    (array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (listn type-eq-decl nil listn structures)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (access_zero 0
  (access_zero-1 nil 3615738110
   ("" (skeep)
    (("" (expand "access")
      (("" (lift-if)
        (("" (ground)
          (("" (expand "zero" 1)
            (("" (typepred "array2list[real](n)(LAMBDA (p: nat): 0)")
              (("" (inst - "i") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((access const-decl "real" matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (listn type-eq-decl nil listn structures)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (zero const-decl "VectorN(n)" matrices nil))
   shostak))
 (entry_test 0
  (entry_test-1 nil 3614700058 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (access_row 0
  (access_row-1 nil 3615133327
   ("" (skeep) (("" (expand "entry") (("" (propax) nil nil)) nil)) nil)
   ((entry const-decl "real" matrices nil)) shostak))
 (access_col 0
  (access_col-1 nil 3615801371
   ("" (skeep)
    (("" (lemma "col_def")
      (("" (inst?)
        (("" (flatten)
          (("" (assert)
            (("" (expand "access" 1)
              (("" (lift-if)
                (("" (ground)
                  (("1" (inst - "i")
                    (("1" (assert)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (replaces -2)
                            (("1" (expand "entry")
                              (("1" (expand "access")
                                (("1" (expand "row")
                                  (("1" (assert)
                                    (("1" (copy -3)
                                      (("1"
                                        (expand "rows" -1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replaces -1)
                            (("2" (expand "entry" 2)
                              (("2" (expand "row" 2)
                                (("2" (copy -2)
                                  (("2" (expand "rows" -1)
                                    (("2" (assert)
                                      (("2"
                                        (expand "access" 2)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "entry" 2)
                    (("2" (copy -1)
                      (("2" (expand "rows" -1)
                        (("2" (expand "row" 2)
                          (("2" (assert)
                            (("2" (expand "access" 2)
                              (("2" (expand "length" 2)
                                (("2" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((col_def formula-decl nil matrices nil)
    (access const-decl "real" matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (entry const-decl "real" matrices nil)
    (row const-decl "Vector" matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (TRUE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (rows const-decl "nat" matrices nil) (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (coltest 0
  (coltest-1 nil 3613147897 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (full_matrix_columns_TCC1 0
  (full_matrix_columns_TCC1-1 nil 3613226737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil))
   nil
   (full_matrix_columns subtype "matrices.SM"
    "(list_adt[list[real]].cons?)")))
 (full_matrix_columns 0
  (full_matrix_columns-1 nil 3613226737
   ("" (skeep)
    (("" (case "null?(SM)")
      (("1" (hide 2) (("1" (grind) nil nil)) nil)
       ("2" (assert)
        (("2" (hide 2)
          (("2" (typepred "columns(SM)")
            (("2" (assert)
              (("2" (skosimp*)
                (("2" (typepred "SM")
                  (("2" (assert)
                    (("2" (inst - "0" "i!1")
                      (("2" (expand "nth" -2 1) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FullMatrix type-eq-decl nil matrices nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil))
   shostak))
 (rows_mn 0
  (rows_mn-1 nil 3614001127
   ("" (skeep) (("" (expand "rows") (("" (assert) nil nil)) nil)) nil)
   ((rows const-decl "nat" matrices nil)) shostak))
 (columns_mn 0
  (columns_mn-1 nil 3614001169
   ("" (skeep)
    (("" (typepred "M")
      (("" (typepred "columns(M)")
        (("" (assert)
          (("" (split)
            (("1" (flatten)
              (("1" (hide-all-but (-1 -5)) (("1" (grind) nil nil)) nil)) nil)
             ("2" (skosimp*)
              (("2" (inst - "i!1")
                (("2" (inst - "i!1") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((MatrixMN type-eq-decl nil matrices nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil))
   shostak))
 (length_row 0
  (length_row-1 nil 3614003138
   ("" (skeep)
    (("" (typepred "SM")
      (("" (assert)
        (("" (split -)
          (("1" (hide-all-but (-1 -3)) (("1" (grind) nil nil)) nil)
           ("2" (expand "row")
            (("2" (typepred "columns(SM)")
              (("2" (assert)
                (("2" (split -)
                  (("1" (hide-all-but (-1 -5)) (("1" (grind) nil nil)) nil)
                   ("2" (skosimp*)
                    (("2" (inst - "i" "i!1") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FullMatrix type-eq-decl nil matrices nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (<= const-decl "bool" reals nil) (row const-decl "Vector" matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (length_col 0
  (length_col-1 nil 3614003247
   ("" (skeep)
    (("" (lemma "col_def") (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((col_def formula-decl nil matrices nil)
    (FullMatrix type-eq-decl nil matrices nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (columns_0_entry 0
  (columns_0_entry-2 "" 3750621702
   ("" (skeep)
    (("" (expand "entry")
      (("" (expand "row")
        (("" (expand "access")
          (("" (lift-if)
            (("" (typepred "columns(M)")
              (("" (ground)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((entry const-decl "real" matrices nil)
    (access const-decl "real" matrices nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (row const-decl "Vector" matrices nil))
   shostak)
  (columns_0_entry-1 nil 3614083194
   ("" (skeep)
    (("" (expand "entry")
      (("" (expand "row")
        (("" (expand "access")
          (("" (lift-if)
            (("" (typepred "columns(M)")
              (("" (ground)
                (("1" (inst - "i") (("1" (assert) nil nil)) nil)
                 ("2" (inst - "i") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rows_0_entry 0
  (rows_0_entry-1 nil 3614083501 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (rows const-decl "nat" matrices nil)
    (row const-decl "Vector" matrices nil)
    (length def-decl "nat" list_props nil)
    (access const-decl "real" matrices nil)
    (entry const-decl "real" matrices nil))
   shostak))
 (entry_eq_0 0
  (entry_eq_0-1 nil 3614090600
   ("" (skeep)
    (("" (expand "entry")
      (("" (expand "rows")
        (("" (expand "row")
          (("" (expand "access")
            (("" (lift-if)
              (("" (assert)
                (("" (ground)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (typepred "columns(M)")
                    (("3" (inst - "i") (("3" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((entry const-decl "real" matrices nil)
    (row const-decl "Vector" matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (access const-decl "real" matrices nil)
    (rows const-decl "nat" matrices nil))
   shostak))
 (add_TCC1 0
  (add_TCC1-1 nil 3613147199
   ("" (skeep)
    (("" (expand "length" + 2)
      (("" (assert)
        (("" (expand "max") (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (add subtype "matrices.v2"
        "matrices.VectorN(real_defs.max(list_props[real].length(matrices.v1), list_props[real].length(matrices.v2)))")))
 (add_TCC2 0
  (add_TCC2-1 nil 3613147199
   ("" (skeep)
    (("" (expand "length" + 3)
      (("" (assert) (("" (expand "max") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   nil
   (add subtype "matrices.v1"
        "matrices.VectorN(real_defs.max(list_props[real].length(matrices.v1), list_props[real].length(matrices.v2)))")))
 (add_TCC3 0
  (add_TCC3-1 nil 3613147199 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices nil))
   nil (add subtype "matrices.v1" "(list_adt[real].cons?)")))
 (add_TCC4 0
  (add_TCC4-1 nil 3613147199 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices nil))
   nil (add subtype "matrices.v2" "(list_adt[real].cons?)")))
 (add_TCC5 0
  (add_TCC5-1 nil 3613147199 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (add termination
        "matrices.add(list_adt[real].cdr(matrices.v1), list_adt[real].cdr(matrices.v2))"
        "nil")))
 (add_TCC6 0
  (add_TCC6-1 nil 3613147199
   ("" (skeep)
    (("" (expand "length" + 1)
      (("" (typepred "v(cdr[real](v1), cdr[real](v2))")
        (("" (assert)
          (("" (replaces -2)
            (("" (expand "length" + 3)
              (("" (expand "length" + 4)
                (("" (expand "max" +)
                  (("" (lift-if)
                    (("" (lift-if)
                      (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (VectorN type-eq-decl nil matrices nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil))
   nil
   (add subtype
        "list_adt[real].cons((number_fields.+)(list_adt[real].car(matrices.v1), list_adt[real].car(matrices.v2)), matrices.add(list_adt[real].cdr(matrices.v1), list_adt[real].cdr(matrices.v2)))"
        "matrices.VectorN(real_defs.max(list_props[real].length(matrices.v1), list_props[real].length(matrices.v2)))")))
 (scal_TCC1 0
  (scal_TCC1-1 nil 3613147199 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices nil))
   nil (scal subtype "matrices.v2" "(list_adt[real].cons?)")))
 (scal_TCC2 0
  (scal_TCC2-1 nil 3613147199 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (scal termination
         "matrices.scal(matrices.r, list_adt[real].cdr(matrices.v2))" "nil")))
 (scal_TCC3 0
  (scal_TCC3-1 nil 3613147199
   ("" (skeep)
    (("" (typepred "v(r, cdr[real](v2))")
      (("" (expand "length" + 1)
        (("" (expand "length" + 2) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (VectorN type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil) (Vector type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   nil
   (scal subtype
         "list_adt[real].cons(number_fields.*(matrices.r, list_adt[real].car(matrices.v2)), matrices.scal(matrices.r, list_adt[real].cdr(matrices.v2)))"
         "matrices.VectorN(list_props[real].length(matrices.v2))")))
 (sub_TCC1 0
  (sub_TCC1-1 nil 3613147199 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (sub subtype
        "matrices.add(matrices.v1, matrices.scal((number_fields.-)(1), matrices.v2))"
        "matrices.VectorN(real_defs.max(list_props[real].length(matrices.v1), list_props[real].length(matrices.v2)))")))
 (super_dot_TCC1 0
  (super_dot_TCC1-1 nil 3621252270 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices nil) (dot def-decl "real" matrices nil))
   nil
   (super_dot subtype "0"
    "{rr: reals.real | rr = matrices.dot(matrices.v1, matrices.v2)}")))
 (super_dot_TCC2 0
  (super_dot_TCC2-1 nil 3621252270 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices nil) (dot def-decl "real" matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (super_dot subtype
    "matrices.dot(list_adt[real].cdr(matrices.v1), list_adt[real].cdr(matrices.v2))"
    "{rr: reals.real | rr = matrices.dot(matrices.v1, matrices.v2)}")))
 (super_dot_TCC3 0
  (super_dot_TCC3-1 nil 3621252270 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices nil) (dot def-decl "real" matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (super_dot subtype
    "(number_fields.+)(number_fields.*(list_adt[real].car(matrices.v1), list_adt[real].car(matrices.v2)), matrices.dot(list_adt[real].cdr(matrices.v1), list_adt[real].cdr(matrices.v2)))"
    "{rr: reals.real | rr = matrices.dot(matrices.v1, matrices.v2)}")))
 (super_duper_dot_TCC1 0
  (super_duper_dot_TCC1-1 nil 3621961564 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (super_duper_dot subtype "(number_fields.-)(matrices.kz, 1)" "nat")))
 (super_duper_dot_TCC2 0
  (super_duper_dot_TCC2-1 nil 3621961564 ("" (termination-tcc) nil nil) nil
   nil
   (super_duper_dot termination
    "matrices.super_duper_dot(matrices.FF, matrices.GG, (number_fields.-)(matrices.kz, 1))"
    "nil")))
 (access_sum 0
  (access_sum-1 nil 3614958801
   ("" (induct "v1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("r" "v"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (expand "+")
            (("2" (expand "access" +)
              (("2" (lift-if)
                (("2" (lift-if)
                  (("2" (lift-if)
                    (("2" (lift-if)
                      (("2" (lift-if)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (lift-if)
                              (("2" (ground)
                                (("1" (expand "add" +)
                                  (("1" (lift-if)
                                    (("1" (ground)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (expand "nth" + 1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (expand "nth" +)
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst - "i-1" "cdr(v2)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "nth" + 2)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "access")
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (ground)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("4"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("5"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("6"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("7"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("8"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "add" +)
                                  (("2" (lift-if)
                                    (("2" (ground)
                                      (("2"
                                        (expand "nth" + 1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (expand "nth" + 1)
                                                (("1"
                                                  (expand "length" 3)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst - "i-1" "cdr(v2)")
                                              (("2"
                                                (expand "access" -)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (ground)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("4"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("5"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("6"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("7"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("8"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (expand "add" +)
                                  (("3" (lift-if)
                                    (("3" (ground)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (expand "nth" + 1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (inst - "i-1" "cdr(v2)")
                                              (("2"
                                                (expand "access")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4" (typepred "add(cons(r,v),v2)")
                                  (("4" (expand "max")
                                    (("4" (lift-if) (("4" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("5" (typepred "add(cons(r,v),v2)")
                                  (("5" (expand "max")
                                    (("5" (lift-if) (("5" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("6" (typepred "add(cons(r,v),v2)")
                                  (("6" (expand "max")
                                    (("6" (ground) nil nil)) nil))
                                  nil)
                                 ("7" (typepred "add(cons(r,v),v2)")
                                  (("7" (expand "max")
                                    (("7" (ground) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (access const-decl "real" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Vector type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (access_scal 0
  (access_scal-1 nil 3614962946
   ("" (induct "v")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("r" "v"))
      (("2" (flatten)
        (("2" (skosimp*)
          (("2" (expand "*")
            (("2" (expand "scal" +)
              (("2" (expand "access" +)
                (("2" (lift-if)
                  (("2" (lift-if)
                    (("2" (lift-if)
                      (("2" (ground)
                        (("1" (expand "nth" + 1)
                          (("1" (lift-if)
                            (("1" (ground)
                              (("1" (replaces -1)
                                (("1" (expand "nth" +)
                                  (("1" (propax) nil nil)) nil))
                                nil)
                               ("2" (inst - "i!1-1" "r!1")
                                (("2" (expand "access")
                                  (("2" (assert)
                                    (("2" (lift-if)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (ground)
                                              (("1"
                                                (replaces -2)
                                                (("1"
                                                  (expand "nth" + 2)
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "scal" 1)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (expand "length" -2)
                                                      (("1" (assert) nil nil))
                                                      nil)
                                                     ("2"
                                                      (expand "length" 2)
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "length" -1) (("2" (grind) nil nil))
                          nil)
                         ("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (scal def-decl "VectorN(length(v2))" matrices nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "VectorN(length(v2))" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (length def-decl "nat" list_props nil)
    (access const-decl "real" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Vector type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (vect_scal_1 0
  (vect_scal_1-1 nil 3615126795
   ("" (skeep)
    (("" (lemma "list_extensionality[real]")
      (("" (inst?)
        (("" (assert)
          (("" (hide 2)
            (("" (skosimp*)
              (("" (lemma "access_scal")
                (("" (inst - "n!1" "1" "v")
                  (("" (expand "access") (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (access const-decl "real" matrices nil)
    (access_scal formula-decl nil matrices nil)
    (* const-decl "VectorN(length(v2))" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (dot_eq_sigma 0
  (dot_eq_sigma-3 "" 3750622730
   ("" (induct "v1")
    (("1" (expand "length" 1 1)
      (("1" (expand "min")
        (("1" (assert)
          (("1" (skeep)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (expand "dot") (("1" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("r" "l"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (expand "dot" +)
            (("2" (lift-if)
              (("2" (ground)
                (("1" (case "NOT v2 = null")
                  (("1" (assert) nil nil)
                   ("2" (replaces -1)
                    (("2" (expand "length" + 2)
                      (("2" (expand "min" +)
                        (("2" (assert)
                          (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "length" + 1)
                  (("2" (assert)
                    (("2" (inst - "cdr(v2)")
                      (("2" (expand "length" + 1)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (ground)
                              (("1" (case "NOT l = null")
                                (("1" (assert) nil nil)
                                 ("2" (replaces -1)
                                  (("2" (assert)
                                    (("2" (expand "dot" 1 1)
                                      (("2"
                                        (expand "length" 1 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "min" 1)
                                            (("2"
                                              (expand "sigma")
                                              (("2"
                                                (expand "sigma")
                                                (("2"
                                                  (expand "access" + 1)
                                                  (("2"
                                                    (expand "length" 1)
                                                    (("2"
                                                      (expand "nth" 1 1)
                                                      (("2"
                                                        (expand "access")
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "length"
                                                               -1
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 1
                                                                 1)
                                                                (("2"
                                                                  (hide -2)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide -1)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("5"
                                                              (hide -2)
                                                              (("5"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("6"
                                                              (hide -1)
                                                              (("6"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "length" -1 1)
                                (("2" (expand "length" + 2)
                                  (("2"
                                    (case "NOT min(1 + length[real](cdr(l)), length[real](cdr(v2))) = min(length[real](cdr(l)), length(cdr(v2)) - 1) + 1")
                                    (("1" (hide-all-but 1)
                                      (("1"
                                        (expand "min")
                                        (("1"
                                          (lift-if)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (replace -1)
                                      (("2"
                                        (invoke (name "S" "%1") (! -2 2 2))
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (rewrite "sigma_first" +)
                                            (("2"
                                              (lemma "sigma_shift")
                                              (("2"
                                                (inst
                                                 -
                                                 "LAMBDA (k: nat): access(cons(r, l))(k) * access(v2)(k)"
                                                 "S"
                                                 "0"
                                                 "1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "access" + 3)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            (("1"
                                                              (expand "nth" +)
                                                              (("1"
                                                                (expand
                                                                 "access"
                                                                 +
                                                                 3)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       +)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replaces
                                                                           -5)
                                                                          (("1"
                                                                            (rewrite
                                                                             "sigma_eq")
                                                                            (("1"
                                                                              (hide
                                                                               2)
                                                                              (("1"
                                                                                (skolem
                                                                                 1
                                                                                 "nn")
                                                                                (("1"
                                                                                  (expand
                                                                                   "access")
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       +
                                                                                                       3)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         +
                                                                                                         4)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       2)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("4"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       3)
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("5"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       -1)
                                                                                                      (("5"
                                                                                                        (assert)
                                                                                                        (("5"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           2)
                                                                                                          (("5"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "length"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "length"
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}" real_defs
     nil)
    (nth def-decl "T" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (sigma_shift formula-decl nil sigma_nat reals)
    (sigma_eq formula-decl nil sigma reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (sigma_first formula-decl nil sigma reals)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma_0_neg formula-decl nil sigma_nat reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (access const-decl "real" matrices nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals) (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dot def-decl "real" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak)
  (dot_eq_sigma-2 nil 3613746369
   ("" (induct "v1")
    (("1" (expand "length" 1 1)
      (("1" (expand "min")
        (("1" (assert)
          (("1" (skeep)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (expand "dot") (("1" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("r" "l"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (expand "dot" +)
            (("2" (lift-if)
              (("2" (ground)
                (("1" (case "NOT v2 = null")
                  (("1" (assert) nil nil)
                   ("2" (replaces -1)
                    (("2" (expand "length" + 2)
                      (("2" (expand "min" +)
                        (("2" (assert)
                          (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "length" + 1)
                  (("2" (assert)
                    (("2" (inst - "cdr(v2)")
                      (("2" (expand "length" + 1)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (ground)
                              (("1" (case "NOT l = null")
                                (("1" (assert) nil nil)
                                 ("2" (replaces -1)
                                  (("2" (assert)
                                    (("2" (expand "dot" 1 1)
                                      (("2"
                                        (expand "length" 1 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "min" 1)
                                            (("2"
                                              (expand "sigma")
                                              (("2"
                                                (expand "sigma")
                                                (("2"
                                                  (expand "access" + 1)
                                                  (("2"
                                                    (expand "length" 1)
                                                    (("2"
                                                      (expand "nth" 1 1)
                                                      (("2"
                                                        (expand "access")
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            (("1"
                                                              (expand "nth")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "length"
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "length" -1 1)
                                (("2" (expand "length" + 2)
                                  (("2"
                                    (case "NOT min(1 + length[real](cdr(l)), length[real](cdr(v2))) = min(length[real](cdr(l)), length(cdr(v2)) - 1) + 1")
                                    (("1" (hide-all-but 1)
                                      (("1"
                                        (expand "min")
                                        (("1"
                                          (lift-if)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (replace -1)
                                      (("2"
                                        (invoke (name "S" "%1") (! -2 2 2))
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (rewrite "sigma_first" +)
                                            (("2"
                                              (lemma "sigma_shift")
                                              (("2"
                                                (inst
                                                 -
                                                 "LAMBDA (k: nat): access(cons(r, l))(k) * access(v2)(k)"
                                                 "S"
                                                 "0"
                                                 "1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "access" + 3)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            (("1"
                                                              (expand "nth" +)
                                                              (("1"
                                                                (expand
                                                                 "access"
                                                                 +
                                                                 3)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       +)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replaces
                                                                           -5)
                                                                          (("1"
                                                                            (rewrite
                                                                             "sigma_eq")
                                                                            (("1"
                                                                              (hide
                                                                               2)
                                                                              (("1"
                                                                                (skolem
                                                                                 1
                                                                                 "nn")
                                                                                (("1"
                                                                                  (expand
                                                                                   "access")
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       +
                                                                                                       3)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         +
                                                                                                         4)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       2)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("4"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       3)
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("5"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       -1)
                                                                                                      (("5"
                                                                                                        (assert)
                                                                                                        (("5"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           2)
                                                                                                          (("5"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "length"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "length"
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (inst + "min(length[real](v1), length[real](v2)) + 5")
          (("3" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((sigma_shift formula-decl nil sigma_nat reals)
    (sigma_eq formula-decl nil sigma reals)
    (sigma_first formula-decl nil sigma reals)
    (sigma_0_neg formula-decl nil sigma_nat reals)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals))
   nil)
  (dot_eq_sigma-1 nil 3613318241
   ("" (induct "v1")
    (("1" (skeep)
      (("1" (expand "*" + 1)
        (("1" (expand "dot")
          (("1" (expand "length" + 1)
            (("1" (expand "min")
              (("1" (assert)
                (("1" (lift-if)
                  (("1" (assert)
                    (("1" (expand "sigma")
                      (("1" (expand "sigma")
                        (("1" (expand "access" + 1)
                          (("1" (expand "length" + 1) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("r" "l"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (expand "*" + 1)
            (("2" (expand "dot")
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (case "NOT v2 = null")
                    (("1" (assert) nil nil)
                     ("2" (replaces -1)
                      (("2" (expand "length" + 2)
                        (("2" (expand "min" +)
                          (("2" (assert)
                            (("2" (expand "length" + 1)
                              (("2" (assert)
                                (("2" (lift-if)
                                  (("2" (assert)
                                    (("2" (expand "sigma" +)
                                      (("2"
                                        (expand "sigma" +)
                                        (("2"
                                          (expand "access" + 2)
                                          (("2"
                                            (expand "length" + 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst - "cdr(v2)")
                    (("2" (expand "length" + 1)
                      (("2" (expand "length" + 2)
                        (("2"
                          (case "NOT min(1 + length[real](l), 1 + length[real](cdr(v2))) = 1+min(length[real](l), length[real](cdr(v2)))")
                          (("1" (expand "min" 1)
                            (("1" (lift-if)
                              (("1" (lift-if)
                                (("1" (lift-if) (("1" (ground) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replaces -1)
                            (("2" (rewrite "sigma_first" +)
                              (("2" (lemma "sigma_shift")
                                (("2"
                                  (inst -
                                   "LAMBDA (k: nat): access(cons(r, l))(k) * access(v2)(k)"
                                   " min(length[real](l), length[real](cdr(v2)))"
                                   "0" "1")
                                  (("2" (replaces -1)
                                    (("2" (assert)
                                      (("2"
                                        (expand "access" + 3)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("1"
                                              (expand "nth" +)
                                              (("1"
                                                (expand "access" + 3)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand "nth" +)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand "*" -3 1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replaces -3)
                                                              (("1"
                                                                (rewrite
                                                                 "sigma_eq")
                                                                (("1"
                                                                  (hide 2)
                                                                  (("1"
                                                                    (skolem
                                                                     1
                                                                     "nn")
                                                                    (("1"
                                                                      (expand
                                                                       "access")
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (lift-if)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (ground)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "nth"
                                                                                                           +
                                                                                                           3)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nth"
                                                                                                             +
                                                                                                             4)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           2)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("4"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           3)
                                                                                                          (("4"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("5"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -1)
                                                                                                          (("5"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("6"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -2)
                                                                                                          (("6"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("7"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -1)
                                                                                                          (("7"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but (1 3))
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (inst + "min(length[real](v1), length[real](v2)) + 5")
          (("3" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((sigma_first formula-decl nil sigma reals)
    (sigma_eq formula-decl nil sigma reals)
    (sigma_shift formula-decl nil sigma_nat reals)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals))
   shostak))
 (dot_zero_right 0
  (dot_zero_right-1 nil 3613381095
   ("" (skeep)
    (("" (expand "*")
      (("" (rewrite "dot_eq_sigma")
        (("" (rewrite "sigma_restrict_eq_0")
          (("" (hide 2)
            (("" (skosimp*)
              (("" (expand "access" + 2)
                (("" (ground)
                  (("" (expand "zero")
                    (("" (typepred "array2list[real](n)(LAMBDA (p: nat): 0)")
                      (("" (inst - "i!1") (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "real" matrices nil)
    (sigma_restrict_eq_0 formula-decl nil sigma reals)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (access const-decl "real" matrices nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_high type-eq-decl nil sigma reals)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_low type-eq-decl nil sigma reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn type-eq-decl nil listn structures) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (subrange type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero const-decl "VectorN(n)" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (length def-decl "nat" list_props nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Vector type-eq-decl nil matrices nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (dot_eq_sigma formula-decl nil matrices nil))
   shostak))
 (dot_commutes 0
  (dot_commutes-1 nil 3613381325
   ("" (induct "v1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("r" "l"))
      (("2" (flatten)
        (("2" (assert)
          (("2" (skeep)
            (("2" (expand "*")
              (("2" (expand "dot" +)
                (("2" (lift-if)
                  (("2" (ground)
                    (("2" (inst - "cdr(v2)") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (dot def-decl "real" matrices nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (* const-decl "real" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (dot_zero_left 0
  (dot_zero_left-1 nil 3613381393
   ("" (skeep)
    (("" (rewrite "dot_commutes") (("" (rewrite "dot_zero_right") nil nil))
      nil))
    nil)
   ((dot_commutes formula-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices nil)
    (zero const-decl "VectorN(n)" matrices nil)
    (dot_zero_right formula-decl nil matrices nil))
   shostak))
 (length_add_vect 0
  (length_add_vect-1 nil 3615541943 ("" (skeep) (("" (assert) nil nil)) nil)
   ((nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil))
   shostak))
 (length_add_vect_same 0
  (length_add_vect_same-1 nil 3615541963
   ("" (skeep)
    (("" (rewrite "length_add_vect") (("" (grind :exclude "length") nil nil))
      nil))
    nil)
   ((length_add_vect formula-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (length_scal_vect 0
  (length_scal_vect-1 nil 3615541978 ("" (skeep) (("" (assert) nil nil)) nil)
   nil shostak))
 (form_matrix_TCC1 0
  (form_matrix_TCC1-1 nil 3613150030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (row const-decl "Vector" matrices nil))
   nil (form_matrix subtype "matrices.j" "below[length[real](row(M)(i))]")))
 (form_matrix_TCC2 0
  (form_matrix_TCC2-2 "" 3750622812
   ("" (induct "n")
    (("1" (inst + "null") (("1" (grind) nil nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst + "cons(0,x)")
          (("2" (expand "length") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (x skolem-const-decl "listn[real](j)" matrices nil)
    (j skolem-const-decl "nat" matrices nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (listn type-eq-decl nil listn structures)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak (form_matrix existence "" "listn[real].listn(matrices.n)"))
  (form_matrix_TCC2-1 nil 3613150030
   ("" (case "FORALL (n: nat): EXISTS (x: listn[real](n)): TRUE")
    (("1" (skeep) (("1" (inst - "n") nil nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (inst + "null") nil nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (inst + "cons(0,x)")
              (("2" (expand "length") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn type-eq-decl nil listn structures)) nil
   (form_matrix existence "" "listn[real].listn(matrices.n)")))
 (form_matrix_TCC3 0
  (form_matrix_TCC3-2 "" 3750627399
   ("" (skeep)
    (("" (invoke (case "NOT (%1)") (! 1 1 1))
      (("1" (hide 2) (("1" (grind) nil nil)) nil)
       ("2" (assert)
        (("2" (invoke (case "NOT (%1)") (! 1 1))
          (("1" (hide 2)
            (("1" (skeep)
              (("1"
                (typepred "array2list[listn[real](n)]
                         (m)
                         (LAMBDA (k: nat):
                            array2list[real](n)(LAMBDA (p: nat): F(k, p)))")
                (("1" (inst - "i") (("1" (assert) nil nil)) nil)
                 ("2" (inst 1 "array2list[real](n)(LAMBDA (p: nat): 0)") nil
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (replace -1)
              (("2" (expand "row")
                (("2" (skeep)
                  (("2"
                    (typepred "array2list[listn[real](n)]
                         (m)
                         (LAMBDA (k: nat):
                            array2list[real](n)(LAMBDA (p: nat): F(k, p)))")
                    (("1" (inst - "i")
                      (("1" (assert)
                        (("1" (lemma "matrix_listn_nth")
                          (("1" (assert)
                            (("1" (replace -4 :dir rl)
                              (("1"
                                (typepred
                                 "array2list[real](n)(LAMBDA (p: nat): F(i, p))")
                                (("1" (inst - "j") (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst 1 "array2list[real](n)(LAMBDA (p: nat): 0)")
                      nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skeep)
              (("3" (inst 1 "array2list[real](n)(LAMBDA (p: nat): 0)") nil
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (inst 1 "array2list[real](n)(LAMBDA (p: nat): 0)") nil nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn structures) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (matrix_listn_nth formula-decl nil matrices nil)
    (row const-decl "Vector" matrices nil))
   shostak
   (form_matrix subtype
                "array2list[listn[real].listn(matrices.n)].array2list(matrices.m)(LAMBDA (k: naturalnumbers.nat): array2list[real].array2list(matrices.n)(LAMBDA (p: naturalnumbers.nat): matrices.F(k, p)))"
                "{M: matrices.MatrixMN(matrices.m, matrices.n) | FORALL (i: naturalnumbers.below(matrices.m), j: naturalnumbers.below(matrices.n)): list_props[real].nth(matrices.row(M)(i), j) = matrices.F(i, j)}"))
  (form_matrix_TCC3-1 nil 3613217047
   ("" (skeep)
    (("" (invoke (case "NOT (%1)") (! 1 1 1))
      (("1" (hide 2)
        (("1" (lemma "length_matrix_equiv")
          (("1"
            (inst - "n" "array2list[listn[real](n)]
                (m)
                (LAMBDA (k: nat):
                   array2list[real](n)(LAMBDA (p: nat): F(k, p)))")
            (("1" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (invoke (case "NOT (%1)") (! 1 1))
          (("1" (hide 2)
            (("1" (skosimp*)
              (("1" (lemma "length_matrix_nth")
                (("1"
                  (inst - "n" "array2list[listn[real](n)]
                    (m)
                    (LAMBDA (k: nat):
                       array2list[real](n)(LAMBDA (p: nat): F(k, p)))" "i!1")
                  nil nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (replace -1)
              (("2" (expand "row")
                (("2" (skeep)
                  (("2"
                    (typepred "array2list[listn[real](n)]
                   (m)
                   (LAMBDA (k: nat):
                      array2list[real](n)(LAMBDA (p: nat): F(k, p)))")
                    (("2" (inst - "i")
                      (("2" (assert)
                        (("2" (lemma "matrix_listn_nth")
                          (("2"
                            (inst - "n" "array2list[listn[real](n)]
                   (m)
                   (LAMBDA (k: nat):
                      array2list[real](n)(LAMBDA (p: nat): F(k, p)))" "i" "j")
                            (("2" (assert)
                              (("2" (replace -4 :dir rl)
                                (("2" (replace -1 :dir rl)
                                  (("2"
                                    (typepred
                                     "array2list[real](n)(LAMBDA (p: nat): F(i, p))")
                                    (("2" (inst - "j")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn type-eq-decl nil listn structures)
    (array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures))
   nil
   (form_matrix subtype
                "array2list[listn[real].listn(matrices.n)].array2list(matrices.m)(LAMBDA (k: naturalnumbers.nat): array2list[real].array2list(matrices.n)(LAMBDA (p: naturalnumbers.nat): matrices.F(k, p)))"
                "{M: matrices.MatrixMN(matrices.m, matrices.n) | FORALL (i: naturalnumbers.below(matrices.m), j: naturalnumbers.below(matrices.n)): list_props[real].nth(matrices.row(M)(i), j) = matrices.F(i, j)}")))
 (columns_form_matrix 0
  (columns_form_matrix-1 nil 3613747835
   ("" (skeep)
    (("" (invoke (name "KV" "%1") (! 2 1 1))
      (("" (replaces -1)
        (("" (typepred "KV")
          (("" (typepred "columns(KV)")
            (("" (split -)
              (("1" (flatten)
                (("1" (case "NOT m = 0")
                  (("1" (hide-all-but (-1 -5 1)) (("1" (grind) nil nil)) nil)
                   ("2" (propax) nil nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (inst - "i!1")
                  (("2" (inst - "i!1") (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (Vector type-eq-decl nil matrices nil)
    (row const-decl "Vector" matrices nil)
    (form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" matrices
                 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (rows_form_matrix 0
  (rows_form_matrix-1 nil 3613750191
   ("" (skeep) (("" (expand "rows") (("" (assert) nil nil)) nil)) nil)
   ((rows const-decl "nat" matrices nil)) shostak))
 (form_matrix_empty 0
  (form_matrix_empty-1 nil 3615045475
   ("" (skosimp*)
    (("" (replace -1) (("" (expand "form_matrix") (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (array2list_it def-decl
                   "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
                   array2list structures)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" matrices
                 nil))
   shostak))
 (form_matrix_test1 0
  (form_matrix_test1-1 nil 3613150439 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (full_matrix_eq 0
  (full_matrix_eq-1 nil 3613230474
   ("" (skeep)
    (("" (split)
      (("1" (flatten) (("1" (assert) nil nil)) nil)
       ("2" (flatten)
        (("2" (case "null?(SM1) OR null?(SM2)")
          (("1" (hide (-3 -4)) (("1" (grind) nil nil)) nil)
           ("2" (flatten)
            (("2" (copy 3)
              (("2" (label "ans" 4)
                (("2" (hide "ans")
                  (("2" (rewrite "list_extensionality[list[real]]" 1)
                    (("2" (reveal "ans")
                      (("2" (copy -1)
                        (("2" (expand "rows" -1)
                          (("2" (assert)
                            (("2" (skolem 2 "i")
                              (("2" (rewrite "list_extensionality[real]" 2)
                                (("2" (lemma "full_matrix_columns")
                                  (("2" (inst-cp - "SM1")
                                    (("2" (inst - "SM2")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred "SM1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (inst - "i" "0")
                                                (("2"
                                                  (typepred "SM2")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (inst - "i" "0")
                                                        (("2"
                                                          (expand "nth" -1 2)
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             -2
                                                             2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (skolem + "j")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "i"
                                                                   "j")
                                                                  (("1"
                                                                    (expand
                                                                     "entry")
                                                                    (("1"
                                                                      (expand
                                                                       "access")
                                                                      (("1"
                                                                        (expand
                                                                         "row")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "i")
                                                                      (("2"
                                                                        (expand
                                                                         "rows"
                                                                         1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FullMatrix type-eq-decl nil matrices nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Matrix type-eq-decl nil matrices nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (rows const-decl "nat" matrices nil)
    (full_matrix_columns formula-decl nil matrices nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (SM1 skolem-const-decl "FullMatrix" matrices nil)
    (i skolem-const-decl "below(length(SM1))" matrices nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (<= const-decl "bool" reals nil) (access const-decl "real" matrices nil)
    (row const-decl "Vector" matrices nil)
    (entry const-decl "real" matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_extensionality formula-decl nil more_list_props structures))
   shostak))
 (matrix2array 0
  (matrix2array-2 "" 3750627565
   ("" (skeep)
    (("" (case "null?(SM)")
      (("1" (grind) nil nil)
       ("2" (rewrite "full_matrix_eq")
        (("1" (name "FM" "form_matrix(entry(SM), rows(SM), columns(SM))")
          (("1" (assert)
            (("1" (replace -1)
              (("1"
                (case "NOT (rows(SM) = rows(FM) AND
                            columns(SM) = columns(FM))")
                (("1" (hide 3)
                  (("1" (split)
                    (("1" (typepred "FM")
                      (("1" (expand "rows") (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (typepred "FM")
                      (("2" (typepred "columns(FM)")
                        (("2" (assert)
                          (("2" (case "null?(FM)")
                            (("1" (hide-all-but (-1 -5 2))
                              (("1" (grind) nil nil)) nil)
                             ("2" (assert)
                              (("2" (skosimp*)
                                (("2" (inst -5 "i!1") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (typepred "FM")
                      (("2" (skeep)
                        (("2" (inst - "i" "j")
                          (("2" (assert)
                            (("2" (expand "entry")
                              (("2" (expand "row")
                                (("2" (expand "access")
                                  (("2" (assert)
                                    (("2" (lift-if)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (ground)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil)
                                               ("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (skosimp*)
              (("2"
                (name "FM" "form_matrix(entry(SM), rows(SM), columns(SM))")
                (("2" (replaces -1)
                  (("2" (typepred "FM")
                    (("2" (inst-cp - "i!1")
                      (("2" (inst - "j!1") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FullMatrix type-eq-decl nil matrices nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" matrices
                 nil)
    (array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (array2list_it def-decl
                   "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
                   array2list structures)
    (entry const-decl "real" matrices nil)
    (access const-decl "real" matrices nil)
    (row const-decl "Vector" matrices nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (rows const-decl "nat" matrices nil) (TRUE const-decl "bool" booleans nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (Vector type-eq-decl nil matrices nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (full_matrix_eq formula-decl nil matrices nil))
   shostak)
  (matrix2array-1 nil 3613232644
   ("" (skeep)
    (("" (case "null?(SM)")
      (("1" (grind) nil nil)
       ("2" (rewrite "full_matrix_eq")
        (("1" (name "FM" "form_matrix(entry(SM), rows(SM), columns(SM))")
          (("1" (assert)
            (("1" (replace -1)
              (("1"
                (case "NOT (rows(SM) = rows(FM) AND
                 columns(SM) = columns(FM))")
                (("1" (hide 3)
                  (("1" (split)
                    (("1" (typepred "FM")
                      (("1" (expand "rows") (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (typepred "FM")
                      (("2" (typepred "columns(FM)")
                        (("2" (assert)
                          (("2" (case "null?(FM)")
                            (("1" (hide-all-but (-1 -5 2))
                              (("1" (grind) nil nil)) nil)
                             ("2" (assert)
                              (("2" (skosimp*)
                                (("2" (inst -5 "i!1") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (typepred "FM")
                      (("2" (skeep)
                        (("2" (inst - "i" "j")
                          (("2" (assert)
                            (("2" (expand "entry")
                              (("2" (expand "row")
                                (("2" (expand "access")
                                  (("2" (assert)
                                    (("2" (lift-if)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (ground)
                                                (("2"
                                                  (copy -5)
                                                  (("2"
                                                    (expand "rows" -1)
                                                    (("2"
                                                      (assert)
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (skosimp*)
              (("2"
                (name "FM" "form_matrix(entry(SM), rows(SM), columns(SM))")
                (("2" (replaces -1)
                  (("2" (typepred "FM")
                    (("2" (inst-cp - "i!1")
                      (("2" (inst - "j!1") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (array2list_it def-decl
                   "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
                   array2list structures))
   shostak))
 (entry_form_matrix 0
  (entry_form_matrix-3 "" 3750627792
   ("" (skeep)
    (("" (name "FM" "form_matrix(F,m,n)")
      (("" (replaces -1)
        (("" (typepred "FM")
          (("" (expand "entry")
            (("" (expand "row")
              (("" (assert)
                (("" (expand "access")
                  (("" (lift-if)
                    (("" (lift-if)
                      (("" (lift-if)
                        (("" (lift-if)
                          (("" (ground)
                            (("1" (expand "length" -1)
                              (("1" (assert) nil nil)) nil)
                             ("2" (expand "length" -1)
                              (("2" (assert) nil nil)) nil)
                             ("3" (hide -4 -6) (("3" (inst?) nil nil)) nil)
                             ("4" (inst -4 "i") (("4" (assert) nil nil)) nil)
                             ("5" (inst -3 "i") (("5" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" matrices
                 nil)
    (row const-decl "Vector" matrices nil)
    (Vector type-eq-decl nil matrices nil)
    (MatrixMN type-eq-decl nil matrices nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (access const-decl "real" matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (entry const-decl "real" matrices nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)
  (entry_form_matrix-2 nil 3613825301
   ("" (skeep)
    (("" (name "FM" "form_matrix(F,m,n)")
      (("" (replaces -1)
        (("" (typepred "FM")
          (("" (expand "entry")
            (("" (expand "row")
              (("" (assert)
                (("" (expand "access")
                  (("" (assert)
                    (("" (lift-if)
                      (("" (lift-if)
                        (("" (lift-if)
                          (("" (lift-if)
                            (("" (ground)
                              (("1" (inst - "i")
                                (("1" (inst - "i" "j") nil nil)) nil)
                               ("2" (inst - "i") (("2" (assert) nil nil)) nil)
                               ("3" (inst - "i") (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (entry_form_matrix-1 nil 3613290911
   ("" (skeep)
    (("" (name "FM" "form_matrix(F,m,n)")
      (("" (replaces -1)
        (("" (typepred "FM")
          (("" (expand "entry")
            (("" (expand "row")
              (("" (assert)
                (("" (expand "access")
                  (("" (assert)
                    (("" (inst -3 "i")
                      (("" (assert) (("" (inst - "i" "j") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (entry_form_matrix2 0
  (entry_form_matrix2-1 nil 3613826303
   ("" (skeep)
    (("" (name "FM" "form_matrix(F,m,n)")
      (("" (replaces -1)
        (("" (typepred "FM")
          (("" (expand "entry")
            (("" (expand "row")
              (("" (assert)
                (("" (expand "access")
                  (("" (assert)
                    (("" (lift-if)
                      (("" (ground)
                        (("1" (inst - "i") (("1" (inst - "i" "j") nil nil))
                          nil)
                         ("2" (inst - "i") (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" matrices
                 nil)
    (row const-decl "Vector" matrices nil)
    (Vector type-eq-decl nil matrices nil)
    (MatrixMN type-eq-decl nil matrices nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (access const-decl "real" matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (entry const-decl "real" matrices nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (form_matrix_eq 0
  (form_matrix_eq-1 nil 3613924751
   ("" (skeep)
    (("" (ground)
      (("1" (skeep)
        (("1" (lemma "entry_form_matrix2")
          (("1" (inst - "F" "i" "j" "m" "n")
            (("1" (assert)
              (("1" (lemma "entry_form_matrix2")
                (("1" (inst - "G" "i" "j" "m" "n") (("1" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (name "f" "form_matrix(F, m, n)")
        (("2" (replaces -1)
          (("2" (name "g" "form_matrix(G, m, n)")
            (("2" (replaces -1)
              (("2" (rewrite "full_matrix_eq")
                (("1" (case "NOT rows(f) = rows(g)")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (expand "rows") (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (copy -1)
                    (("2" (expand "rows" -1)
                      (("2" (assert)
                        (("2" (case "NOT columns(f)=columns(g)")
                          (("1" (hide 2)
                            (("1" (expand "f" 1)
                              (("1" (expand "g" 1)
                                (("1" (lemma "columns_form_matrix")
                                  (("1" (inst?)
                                    (("1" (assert)
                                      (("1"
                                        (split -)
                                        (("1"
                                          (typepred "form_matrix(F,0,n)")
                                          (("1"
                                            (case
                                             "NOT form_matrix(F,0,n)=null")
                                            (("1"
                                              (expand "length" -2)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (replace -1)
                                              (("2"
                                                (typepred
                                                 "form_matrix(G,0,n)")
                                                (("2"
                                                  (case
                                                   "NOT form_matrix(G,0,n)=null")
                                                  (("1"
                                                    (expand "length" -2)
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (lemma "columns_form_matrix")
                                            (("2"
                                              (inst - "m" "n" "G")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (typepred
                                                     "form_matrix(F,0,n)")
                                                    (("2"
                                                      (case
                                                       "NOT form_matrix(F,0,n)=null")
                                                      (("1"
                                                        (expand "length" -2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (typepred
                                                           "form_matrix(G,0,n)")
                                                          (("2"
                                                            (case
                                                             "NOT form_matrix(G,0,n)=null")
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (copy -3)
                              (("2" (expand "rows" -1)
                                (("2" (skeep)
                                  (("2" (expand "f" 1)
                                    (("2" (expand "g" 1)
                                      (("2"
                                        (rewrite "entry_form_matrix2" 1)
                                        (("1"
                                          (rewrite "entry_form_matrix2" 1)
                                          (("1"
                                            (inst - "i" "j")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (typepred "i")
                                                (("1"
                                                  (expand "rows" -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (typepred "j")
                                                      (("1"
                                                        (expand "f" -1)
                                                        (("1"
                                                          (lemma
                                                           "columns_form_matrix")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "i")
                                            (("2"
                                              (expand "rows" -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (typepred "j")
                                            (("3"
                                              (expand "f" -1)
                                              (("3"
                                                (lemma "columns_form_matrix")
                                                (("3"
                                                  (inst?)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (typepred "i")
                                                      (("3"
                                                        (expand "rows" -1)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "i")
                                          (("2"
                                            (expand "rows" -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (typepred "j")
                                          (("3"
                                            (expand "f" -1)
                                            (("3"
                                              (lemma "columns_form_matrix")
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (typepred "i")
                                                    (("3"
                                                      (expand "rows" -1)
                                                      (("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (typepred "g")
                    (("2" (skeep)
                      (("2" (inst-cp - "i")
                        (("2" (inst - "j") (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (flatten)
                  (("3" (typepred "f")
                    (("3" (skeep)
                      (("3" (inst-cp - "i")
                        (("3" (inst - "j") (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((entry_form_matrix2 formula-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rows const-decl "nat" matrices nil) (<= const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (f skolem-const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" matrices
     nil)
    (columns_form_matrix formula-decl nil matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (FALSE const-decl "bool" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (g skolem-const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = G(i, j)}" matrices
     nil)
    (FullMatrix type-eq-decl nil matrices nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (full_matrix_eq formula-decl nil matrices nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (Vector type-eq-decl nil matrices nil)
    (row const-decl "Vector" matrices nil)
    (form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" matrices
                 nil))
   shostak))
 (matrix_reduce_prop 0
  (matrix_reduce_prop-1 nil 3613998916
   ("" (skeep)
    (("" (case "m = 0")
      (("1" (skeep)
        (("1" (case "NOT M = null")
          (("1" (typepred "M") (("1" (grind) nil nil)) nil)
           ("2" (inst - "LAMBDA (i,j): 0")
            (("2" (case "NOT form_matrix(LAMBDA (i,j):0,m,n)=null")
              (("1" (replaces -2)
                (("1" (typepred "form_matrix(LAMBDA (i, j): 0, 0, n)")
                  (("1" (expand "length" -2) (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (case "M = null")
          (("1" (typepred "M")
            (("1" (expand "length" -2) (("1" (assert) nil nil)) nil)) nil)
           ("2" (lemma "matrix2array")
            (("2" (inst - "M")
              (("1" (case "rows(M) = m and columns(M)=n")
                (("1" (inst?) (("1" (ground) nil nil)) nil)
                 ("2" (split +)
                  (("1" (expand "rows" 1) (("1" (assert) nil nil)) nil)
                   ("2" (typepred "columns(M)")
                    (("2" (assert)
                      (("2" (skosimp*)
                        (("2" (typepred "M")
                          (("2" (inst - "i!1") (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (skeep)
                  (("2" (typepred "M")
                    (("2" (inst-cp - "i")
                      (("2" (inst - "j") (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MatrixMN type-eq-decl nil matrices nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" matrices
                 nil)
    (array2list_it def-decl
                   "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
                   array2list structures)
    (array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (row const-decl "Vector" matrices nil)
    (Vector type-eq-decl nil matrices nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (M skolem-const-decl "MatrixMN(m, n)" matrices nil)
    (n skolem-const-decl "nat" matrices nil)
    (m skolem-const-decl "nat" matrices nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (FullMatrix type-eq-decl nil matrices nil)
    (entry const-decl "real" matrices nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (<= const-decl "bool" reals nil) (rows const-decl "nat" matrices nil)
    (matrix2array formula-decl nil matrices nil))
   shostak))
 (mult_TCC1 0
  (mult_TCC1-1 nil 3613219504
   ("" (skeep)
    (("" (skosimp*)
      (("" (rewrite "entry_form_matrix")
        (("" (expand "*")
          (("" (lift-if)
            (("" (ground)
              (("1" (rewrite "dot_eq_sigma")
                (("1" (rewrite "sigma_restrict_eq_0")
                  (("1" (skosimp*)
                    (("1" (expand "row" + 1)
                      (("1" (copy 2)
                        (("1" (expand "rows" 1)
                          (("1" (assert)
                            (("1" (expand "access" 2 1)
                              (("1" (expand "length" 2 1)
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (rewrite "dot_eq_sigma")
                (("2" (rewrite "sigma_restrict_eq_0")
                  (("2" (skosimp*)
                    (("2" (rewrite "col_zero" 1)
                      (("2" (rewrite "access_zero") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "real" matrices nil) (T_low type-eq-decl nil sigma reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (T_high type-eq-decl nil sigma reals)
    (access const-decl "real" matrices nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma_restrict_eq_0 formula-decl nil sigma reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (dot_eq_sigma formula-decl nil matrices nil)
    (col_zero formula-decl nil matrices nil)
    (access_zero formula-decl nil matrices nil)
    (subrange type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (col def-decl "VectorN(rows(M))" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (rows const-decl "nat" matrices nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (row const-decl "Vector" matrices nil)
    (Matrix type-eq-decl nil matrices nil) (dot def-decl "real" matrices nil)
    (Vector type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (entry_form_matrix formula-decl nil matrices nil))
   nil
   (mult subtype
    "matrices.form_matrix(LAMBDA (i, j: naturalnumbers.nat): matrices.dot(matrices.row(matrices.M)(i), matrices.col(matrices.N)(j)), matrices.rows(matrices.M), matrices.columns(matrices.N))"
    "{A: matrices.MatrixMN(matrices.rows(matrices.M), matrices.columns(matrices.N)) | FORALL (i, j): matrices.entry(A)(matrices.i, matrices.j) = matrices.*(matrices.row(matrices.M)(matrices.i), matrices.col(matrices.N)(matrices.j))}")))
 (mult_full 0
  (mult_full-1 nil 3613231597
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "M*N")
        (("" (inst-cp - "i") (("" (inst - "j") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (rows const-decl "nat" matrices nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (entry const-decl "real" matrices nil)
    (Vector type-eq-decl nil matrices nil) (* const-decl "real" matrices nil)
    (row const-decl "Vector" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (col def-decl "VectorN(rows(M))" matrices nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices nil))
   nil (mult_full subtype "matrices.*(matrices.M, matrices.N)" "FullMatrix")))
 (mult_null_left 0
  (mult_null_left-1 nil 3613291665
   ("" (skeep)
    (("" (typepred "null[list[real]]*M")
      (("" (expand "rows" -2)
        (("" (hide-all-but (-2 +)) (("" (grind :exclude "*") nil nil)) nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices nil)
    (col def-decl "VectorN(rows(M))" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (row const-decl "Vector" matrices nil) (* const-decl "real" matrices nil)
    (Vector type-eq-decl nil matrices nil)
    (entry const-decl "real" matrices nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (rows const-decl "nat" matrices nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (mult_full application-judgement "FullMatrix" matrices nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   shostak))
 (mult_null_right 0
  (mult_null_right-1 nil 3613293057
   ("" (skeep)
    (("" (name "NN" "M*null[list[real]]")
      (("" (replace -1)
        (("" (assert)
          (("" (splash)
            (("1" (typepred "NN")
              (("1" (skeep)
                (("1" (inst - "i")
                  (("1" (hide-all-but (-3 1)) (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "NN")
              (("2" (expand "rows" -2) (("2" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices nil)
    (col def-decl "VectorN(rows(M))" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (row const-decl "Vector" matrices nil) (* const-decl "real" matrices nil)
    (Vector type-eq-decl nil matrices nil)
    (entry const-decl "real" matrices nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (rows const-decl "nat" matrices nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (mult_full application-judgement "FullMatrix" matrices nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (columns_mult 0
  (columns_mult-1 nil 3613300815
   ("" (skeep)
    (("" (assert)
      (("" (typepred "columns(M*N)")
        (("" (typepred "M*N")
          (("" (assert)
            (("" (case "null?(M*N)")
              (("1" (assert)
                (("1" (case "NOT M = null")
                  (("1" (hide-all-but (-1 -3 1)) (("1" (grind) nil nil)) nil)
                   ("2" (replace -1)
                    (("2" (rewrite "mult_null_left") nil nil)) nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (skosimp*)
                  (("2" (inst - "i!1") (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mult_full application-judgement "FullMatrix" matrices nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (array2list_it def-decl
                   "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
                   array2list structures)
    (mult const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
     nil)
    (form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" matrices
                 nil)
    (array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (access const-decl "real" matrices nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (mult_null_left formula-decl nil matrices nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (Matrix type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rows const-decl "nat" matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (entry const-decl "real" matrices nil)
    (Vector type-eq-decl nil matrices nil) (* const-decl "real" matrices nil)
    (row const-decl "Vector" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (col def-decl "VectorN(rows(M))" matrices nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices nil))
   shostak))
 (rows_mult 0
  (rows_mult-1 nil 3613301627
   ("" (skeep) (("" (expand "rows" + 1) (("" (assert) nil nil)) nil)) nil)
   ((rows const-decl "nat" matrices nil)
    (mult_full application-judgement "FullMatrix" matrices nil))
   shostak))
 (columns_append 0
  (columns_append-1 nil 3613301930
   ("" (skeep)
    (("" (typepred "columns(append(M,N))")
      (("" (split -)
        (("1" (flatten)
          (("1" (case "NOT (M = null and N = null)")
            (("1" (lemma "length_append[list[real]]")
              (("1" (inst - "M" "N")
                (("1" (hide-all-but (-1 -2 1))
                  (("1" (grind :exclude "append") nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (replaces -1)
                (("2" (replaces -1)
                  (("2" (assert) (("2" (hide -) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (typepred "i!1")
            (("2" (rewrite "length_append" -1)
              (("2" (typepred "columns(M)")
                (("2" (assert)
                  (("2" (case "null?(M)")
                    (("1" (case "NOT M = null")
                      (("1" (assert) nil nil)
                       ("2" (replaces -1)
                        (("2" (rewrite "append_null_left")
                          (("2" (expand "columns" + 2)
                            (("2" (expand "max")
                              (("2" (lift-if) (("2" (ground) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "null?(N)")
                      (("1" (case "N = null")
                        (("1" (replaces -1)
                          (("1" (rewrite "append_null")
                            (("1" (expand "columns" + 3)
                              (("1" (expand "max") (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (assert)
                        (("2" (typepred "columns(N)")
                          (("2" (assert)
                            (("2" (skolem - ("jn"))
                              (("2" (skolem - ("jm"))
                                (("2"
                                  (case "columns(append(M, N)) <= max(columns(M), columns(N))")
                                  (("1"
                                    (case "columns(append(M, N)) >= max(columns(M), columns(N))")
                                    (("1" (assert) nil nil)
                                     ("2" (hide (-1 4))
                                      (("2"
                                        (inst-cp -7 "jm")
                                        (("1"
                                          (inst-cp -7 "length(M)+jn")
                                          (("1"
                                            (rewrite "nth_append" -8)
                                            (("1"
                                              (rewrite "nth_append" -9)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "max" 1)
                                                  (("1"
                                                    (lift-if)
                                                    (("1" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "length_append")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "length_append")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 4)
                                    (("2" (case "i!1 < length(M)")
                                      (("1"
                                        (rewrite "nth_append")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -4 "i!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst -1 "i!1-length(M)")
                                        (("1"
                                          (rewrite "nth_append")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (append def-decl "list[T]" list_props nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append_null formula-decl nil list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (jn skolem-const-decl "below(length(N))" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth_append formula-decl nil more_list_props structures)
    (N skolem-const-decl "Matrix" matrices nil)
    (jm skolem-const-decl "below(length(M))" matrices nil)
    (M skolem-const-decl "Matrix" matrices nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (i!1 skolem-const-decl "below(length(append(M, N)))" matrices nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (append_null_left formula-decl nil more_list_props structures)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (TRUE const-decl "bool" booleans nil)
    (length_append formula-decl nil list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   shostak))
 (append_mult 0
  (append_mult-3 "" 3790097151
   ("" (skeep)
    (("" (lemma "full_matrix_eq")
      (("" (inst?)
        (("1" (assert)
          (("1" (hide 3)
            (("1"
              (case "NOT (rows(append(M, N) * A) = rows(append(M * A, N * A)) AND
                                            columns(append(M, N) * A) = columns(append(M * A, N * A)))")
              (("1" (hide 2)
                (("1" (split)
                  (("1" (rewrite "rows_mult")
                    (("1" (expand "rows")
                      (("1" (rewrite "length_append")
                        (("1" (rewrite "length_append")
                          (("1" (typepred "M*A")
                            (("1" (typepred "N*A")
                              (("1" (expand "rows") (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "columns_mult")
                    (("2" (inst?)
                      (("2" (split -)
                        (("1" (replaces -1)
                          (("1" (assert)
                            (("1" (rewrite "columns_append")
                              (("1" (lemma "columns_mult")
                                (("1" (inst-cp - "M" "A")
                                  (("1" (assert)
                                    (("1" (replaces -2)
                                      (("1"
                                        (inst - "N" "A")
                                        (("1"
                                          (ground)
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (expand "max")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (hide 1) (("2" (grind) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (typepred "i")
                      (("2" (typepred "j")
                        (("2" (lemma "columns_mult")
                          (("2" (inst?)
                            (("2" (ground)
                              (("1" (replaces -1)
                                (("1" (rewrite "rows_mult")
                                  (("1" (expand "rows" -2)
                                    (("1" (rewrite "length_append")
                                      (("1"
                                        (expand "*" 1 1)
                                        (("1"
                                          (expand "mult")
                                          (("1"
                                            (rewrite "entry_form_matrix")
                                            (("1"
                                              (expand "entry" 1)
                                              (("1"
                                                (expand "row")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (rewrite
                                                             "length_append")
                                                            (("1"
                                                              (rewrite
                                                               "length_append")
                                                              (("1"
                                                                (lemma
                                                                 "rows_mult")
                                                                (("1"
                                                                  (inst-cp
                                                                   -
                                                                   "M"
                                                                   "A")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "N"
                                                                     "A")
                                                                    (("1"
                                                                      (expand
                                                                       "rows")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "length_append")
                                                            (("2"
                                                              (rewrite
                                                               "length_append")
                                                              (("2"
                                                                (lemma
                                                                 "rows_mult")
                                                                (("2"
                                                                  (inst-cp
                                                                   -
                                                                   "M"
                                                                   "A")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "N"
                                                                     "A")
                                                                    (("2"
                                                                      (expand
                                                                       "rows")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (rewrite
                                                             "length_append")
                                                            (("3"
                                                              (rewrite
                                                               "length_append")
                                                              (("3"
                                                                (lemma
                                                                 "rows_mult")
                                                                (("3"
                                                                  (inst-cp
                                                                   -
                                                                   "M"
                                                                   "A")
                                                                  (("3"
                                                                    (inst
                                                                     -
                                                                     "N"
                                                                     "A")
                                                                    (("3"
                                                                      (expand
                                                                       "rows")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (expand "access")
                                                            (("4"
                                                              (lift-if)
                                                              (("4"
                                                                (assert)
                                                                (("4"
                                                                  (ground)
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_append"
                                                                     1)
                                                                    (("1"
                                                                      (rewrite
                                                                       "nth_append"
                                                                       1)
                                                                      (("1"
                                                                        (lemma
                                                                         "rows_mult")
                                                                        (("1"
                                                                          (expand
                                                                           "rows"
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "M*A")
                                                                                    (("1"
                                                                                      (hide
                                                                                       (-1
                                                                                        -2
                                                                                        -3))
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "i"
                                                                                         "j")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "entry"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "row"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "access")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "rows_mult")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "rows"
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "*")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "N*A")
                                                                                    (("2"
                                                                                      (hide
                                                                                       (-1
                                                                                        -2
                                                                                        -3))
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "i-length(M)"
                                                                                         "j")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "entry")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "row"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "access")
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "rows_mult")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "rows"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "*")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (lemma
                                                                           "rows_mult")
                                                                          (("2"
                                                                            (expand
                                                                             "rows"
                                                                             -1)
                                                                            (("2"
                                                                              (rewrite
                                                                               -1)
                                                                              (("2"
                                                                                (rewrite
                                                                                 -1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "nth_append"
                                                                     1)
                                                                    (("1"
                                                                      (lemma
                                                                       "rows_mult")
                                                                      (("1"
                                                                        (expand
                                                                         "rows"
                                                                         -1)
                                                                        (("1"
                                                                          (rewrite
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (ground)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "M*A")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "i")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "N*A")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "i-length(M)")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "rows_mult")
                                                                      (("2"
                                                                        (expand
                                                                         "rows"
                                                                         -1)
                                                                        (("2"
                                                                          (rewrite
                                                                           -1)
                                                                          (("2"
                                                                            (rewrite
                                                                             -1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide-all-but (-1 2))
                                (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (skosimp*)
            (("2" (rewrite "nth_append")
              (("1" (rewrite "nth_append")
                (("1" (lemma "rows_mult")
                  (("1" (expand "rows" -1)
                    (("1" (rewrite -1)
                      (("1" (rewrite -1)
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (lift-if)
                              (("1" (lift-if)
                                (("1" (ground)
                                  (("1" (typepred "M*A")
                                    (("1" (inst-cp - "i!1")
                                      (("1"
                                        (inst-cp - "j!1")
                                        (("1" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (typepred "M*A")
                                    (("2" (inst?)
                                      (("2"
                                        (typepred "N*A")
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (typepred "M*A")
                                    (("3" (inst?)
                                      (("3"
                                        (typepred "N*A")
                                        (("3"
                                          (inst?)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (typepred "N*A")
                                    (("4" (inst-cp - "i!1-length(M)")
                                      (("4"
                                        (inst-cp - "j!1-length(M)")
                                        (("4" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (lift-if)
                    (("2" (ground)
                      (("1" (rewrite "nth_append")
                        (("1" (typepred "M*A")
                          (("1" (inst?)
                            (("1" (typepred "N*A")
                              (("1" (inst?) (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "j!1")
                          (("2" (rewrite "length_append") nil nil)) nil))
                        nil)
                       ("2" (typepred "j!1")
                        (("2" (rewrite "length_append") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "i!1") (("2" (rewrite "length_append") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (append_mult-2 nil 3613315727
   ("" (skeep)
    (("" (lemma "full_matrix_eq")
      (("" (inst?)
        (("1" (assert)
          (("1" (hide 3)
            (("1"
              (case "NOT (rows(append(M, N) * A) = rows(append(M * A, N * A)) AND
                                            columns(append(M, N) * A) = columns(append(M * A, N * A)))")
              (("1" (hide 2)
                (("1" (split)
                  (("1" (rewrite "rows_mult")
                    (("1" (expand "rows")
                      (("1" (rewrite "length_append")
                        (("1" (rewrite "length_append")
                          (("1" (typepred "M*A")
                            (("1" (typepred "N*A")
                              (("1" (expand "rows") (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "columns_mult")
                    (("2" (inst?)
                      (("2" (split -)
                        (("1" (replaces -1)
                          (("1" (assert)
                            (("1" (rewrite "columns_append")
                              (("1" (lemma "columns_mult")
                                (("1" (inst-cp - "M" "A")
                                  (("1" (assert)
                                    (("1" (replaces -2)
                                      (("1"
                                        (inst - "N" "A")
                                        (("1"
                                          (ground)
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (expand "max")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (hide 1) (("2" (grind) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (typepred "i")
                      (("2" (typepred "j")
                        (("2" (lemma "columns_mult")
                          (("2" (inst?)
                            (("2" (ground)
                              (("1" (replaces -1)
                                (("1" (rewrite "rows_mult")
                                  (("1" (expand "rows" -2)
                                    (("1" (rewrite "length_append")
                                      (("1"
                                        (expand "*" 1 1)
                                        (("1"
                                          (expand "mult")
                                          (("1"
                                            (rewrite "entry_form_matrix")
                                            (("1"
                                              (expand "entry" 1)
                                              (("1"
                                                (expand "row")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (rewrite
                                                             "length_append")
                                                            (("1"
                                                              (rewrite
                                                               "length_append")
                                                              (("1"
                                                                (lemma
                                                                 "rows_mult")
                                                                (("1"
                                                                  (inst-cp
                                                                   -
                                                                   "M"
                                                                   "A")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "N"
                                                                     "A")
                                                                    (("1"
                                                                      (expand
                                                                       "rows")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "length_append")
                                                            (("2"
                                                              (rewrite
                                                               "length_append")
                                                              (("2"
                                                                (lemma
                                                                 "rows_mult")
                                                                (("2"
                                                                  (inst-cp
                                                                   -
                                                                   "M"
                                                                   "A")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "N"
                                                                     "A")
                                                                    (("2"
                                                                      (expand
                                                                       "rows")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (rewrite
                                                             "length_append")
                                                            (("3"
                                                              (rewrite
                                                               "length_append")
                                                              (("3"
                                                                (lemma
                                                                 "rows_mult")
                                                                (("3"
                                                                  (inst-cp
                                                                   -
                                                                   "M"
                                                                   "A")
                                                                  (("3"
                                                                    (inst
                                                                     -
                                                                     "N"
                                                                     "A")
                                                                    (("3"
                                                                      (expand
                                                                       "rows")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (expand "access")
                                                            (("4"
                                                              (lift-if)
                                                              (("4"
                                                                (assert)
                                                                (("4"
                                                                  (ground)
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_append"
                                                                     1)
                                                                    (("1"
                                                                      (rewrite
                                                                       "nth_append"
                                                                       1)
                                                                      (("1"
                                                                        (lemma
                                                                         "rows_mult")
                                                                        (("1"
                                                                          (expand
                                                                           "rows"
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "M*A")
                                                                                    (("1"
                                                                                      (hide
                                                                                       (-1
                                                                                        -2
                                                                                        -3))
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "i"
                                                                                         "j")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "entry"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "row"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "access")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "rows_mult")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "rows"
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "*")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "N*A")
                                                                                    (("2"
                                                                                      (hide
                                                                                       (-1
                                                                                        -2
                                                                                        -3))
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "i-length(M)"
                                                                                         "j")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "entry")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "row"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "access")
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "rows_mult")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "rows"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "*")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (lemma
                                                                           "rows_mult")
                                                                          (("2"
                                                                            (expand
                                                                             "rows"
                                                                             -1)
                                                                            (("2"
                                                                              (rewrite
                                                                               -1)
                                                                              (("2"
                                                                                (rewrite
                                                                                 -1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "nth_append"
                                                                     1)
                                                                    (("1"
                                                                      (lemma
                                                                       "rows_mult")
                                                                      (("1"
                                                                        (expand
                                                                         "rows"
                                                                         -1)
                                                                        (("1"
                                                                          (rewrite
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (ground)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "M*A")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "i")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "N*A")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "i-length(M)")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "rows_mult")
                                                                      (("2"
                                                                        (expand
                                                                         "rows"
                                                                         -1)
                                                                        (("2"
                                                                          (rewrite
                                                                           -1)
                                                                          (("2"
                                                                            (rewrite
                                                                             -1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide-all-but (-1 2))
                                (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (skosimp*)
            (("2" (rewrite "nth_append")
              (("1" (rewrite "nth_append")
                (("1" (lemma "rows_mult")
                  (("1" (expand "rows" -1)
                    (("1" (rewrite -1)
                      (("1" (rewrite -1)
                        (("1" (assert)
                          (("1" (assert)
                            (("1" (lift-if)
                              (("1" (lift-if)
                                (("1" (lift-if)
                                  (("1" (ground)
                                    (("1" (typepred "M*A")
                                      (("1"
                                        (inst-cp - "i!1")
                                        (("1"
                                          (inst-cp - "j!1")
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (typepred "M*A")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (typepred "N*A")
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (typepred "M*A")
                                      (("3"
                                        (inst?)
                                        (("3"
                                          (typepred "N*A")
                                          (("3"
                                            (inst?)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4" (typepred "N*A")
                                      (("4"
                                        (inst-cp - "i!1-length(M)")
                                        (("4"
                                          (inst-cp - "j!1-length(M)")
                                          (("4" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (lift-if)
                    (("2" (ground)
                      (("1" (rewrite "nth_append")
                        (("1" (typepred "M*A")
                          (("1" (inst?)
                            (("1" (typepred "N*A")
                              (("1" (inst?) (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "j!1")
                          (("2" (rewrite "length_append") nil nil)) nil))
                        nil)
                       ("2" (typepred "j!1")
                        (("2" (rewrite "length_append") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "i!1") (("2" (rewrite "length_append") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((full_matrix_eq formula-decl nil matrices nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (length_append formula-decl nil list_props nil)
    (rows_mult formula-decl nil matrices nil)
    (TRUE const-decl "bool" booleans nil)
    (columns_append formula-decl nil matrices nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (mult const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
     nil)
    (form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" matrices
                 nil)
    (array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (dot def-decl "real" matrices nil)
    (array2list_it def-decl
                   "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
                   array2list structures)
    (columns_mult formula-decl nil matrices nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth_append formula-decl nil more_list_props structures)
    (access const-decl "real" matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (entry_form_matrix formula-decl nil matrices nil)
    (FullMatrix type-eq-decl nil matrices nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (Matrix type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (rows const-decl "nat" matrices nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (<= const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (entry const-decl "real" matrices nil)
    (Vector type-eq-decl nil matrices nil) (* const-decl "real" matrices nil)
    (row const-decl "Vector" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (col def-decl "VectorN(rows(M))" matrices nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices nil)
    (M skolem-const-decl "Matrix" matrices nil)
    (A skolem-const-decl "Matrix" matrices nil)
    (N skolem-const-decl "Matrix" matrices nil)
    (mult_full application-judgement "FullMatrix" matrices nil))
   nil)
  (append_mult-1 nil 3613292381
   ("" (induct "N")
    (("1" (skeep)
      (("1" (rewrite "append_null")
        (("1" (rewrite "mult_null_left")
          (("1" (rewrite "append_null") nil nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 ("v" "N"))
      (("2" (flatten)
        (("2" (induct "A")
          (("1" (skeep)
            (("1" (rewrite "cons_append")
              (("1" (rewrite "append_assoc" :dir rl)
                (("1" (assert)
                  (("1" (rewrite "list_extensionality[list[real]]" 2)
                    (("1" (splash +)
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (lemma "mult_null_right")
                            (("1" (inst - "append(append(M, (: v :)), N)")
                              (("1" (assert)
                                (("1" (flatten)
                                  (("1" (inst - "n")
                                    (("1" (replaces -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite "nth_append" +)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (lemma "mult_null_right")
                                                (("1"
                                                  (inst - "M")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst - "n")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (name
                                                 "k"
                                                 "n - length(M * null)")
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (lemma "mult_null_right")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "append((: v :), N)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst - "k")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred
                                             "append((: v :), N) * null")
                                            (("2"
                                              (hide (-1 -3 -4 -5))
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (expand "rows" 1)
                                                  (("2"
                                                    (typepred "n")
                                                    (("2"
                                                      (typepred
                                                       "append(append(M, (: v :)), N) * null")
                                                      (("2"
                                                        (hide (-1 -3 -4 -5))
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (expand "rows" -1)
                                                            (("2"
                                                              (rewrite
                                                               "length_append"
                                                               -1)
                                                              (("2"
                                                                (rewrite
                                                                 "length_append"
                                                                 -1)
                                                                (("2"
                                                                  (rewrite
                                                                   "length_append"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "M*null")
                                                                      (("2"
                                                                        (hide
                                                                         (-1
                                                                          -3
                                                                          -4
                                                                          -5))
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replaces
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "rows"
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (rewrite "length_append")
                          (("2" (typepred "append((: v :), N) * null")
                            (("2" (hide (-1 -3 -4 -5))
                              (("2" (replaces -1)
                                (("2"
                                  (typepred
                                   "append(append(M, (: v :)), N) * null")
                                  (("2" (hide (-1 -3 -4 -5))
                                    (("2" (replaces -1)
                                      (("2"
                                        (expand "rows")
                                        (("2"
                                          (rewrite "length_append")
                                          (("2"
                                            (rewrite "length_append")
                                            (("2"
                                              (rewrite "length_append")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred "M*null")
                                                  (("2"
                                                    (expand "rows" -2)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skolem 1 ("l" "AA"))
            (("2" (flatten) (("2" (postpone) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (matrix_mult_assoc 0
  (matrix_mult_assoc-5 "" 3790097165
   ("" (induct "M")
    (("1" (skeep)
      (("1" (rewrite "mult_null_left")
        (("1" (rewrite "mult_null_left")
          (("1" (rewrite "mult_null_left") nil nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 ("v" "M"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (rewrite "cons_append")
            (("2" (lemma "append_mult")
              (("2" (inst - "N" "(: v :)" "M")
                (("2" (assert)
                  (("2" (replaces -1)
                    (("2" (lemma "append_mult")
                      (("2" (inst - "A" "(: v :) * N" "M*N")
                        (("2" (assert)
                          (("2" (split -)
                            (("1" (replaces -1)
                              (("1" (lemma "append_mult")
                                (("1" (inst - "N*A" "(: v :)" "M")
                                  (("1" (assert)
                                    (("1" (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst-cp - "A" "N")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "FORALL (X,Y:Matrix): null?(X) OR LET K = (: v :) IN (K*X)*Y = K*(X*Y)")
                                              (("1"
                                                (inst - "N" "A")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (name "K" "(: v :)")
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (case
                                                           "NOT length(K) = 1")
                                                          (("1"
                                                            (expand "K" 1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "full_matrix_eq"
                                                             2)
                                                            (("2"
                                                              (case
                                                               "NOT (rows((K * X) * Y) = rows(K * (X * Y)) AND
                                                                                                                                               columns((K * X) * Y) = columns(K * (X * Y)))")
                                                              (("1"
                                                                (hide 3)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (rewrite
                                                                       "rows_mult")
                                                                      (("1"
                                                                        (rewrite
                                                                         "rows_mult")
                                                                        (("1"
                                                                          (rewrite
                                                                           "rows_mult")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "columns_mult")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (split
                                                                         -)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "columns_mult")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "columns_mult")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "K*X")
                                                                          (("2"
                                                                            (expand
                                                                             "rows")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -7)
                                                                                (("2"
                                                                                  (hide-all-but
                                                                                   (-2
                                                                                    -5))
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (typepred
                                                                       "i")
                                                                      (("2"
                                                                        (typepred
                                                                         "j")
                                                                        (("2"
                                                                          (copy
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "rows"
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 +)
                                                                                (("2"
                                                                                  (expand
                                                                                   "mult"
                                                                                   +)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "entry_form_matrix2")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "entry_form_matrix2")
                                                                                      (("1"
                                                                                        (case
                                                                                         "NOT i = 0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "rows_mult")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "rows_mult")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "rows")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "row"
                                                                                               +
                                                                                               1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (ground)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "form_matrix(LAMBDA (i, j: nat): dot(row(K)(i),col(X)(j)),
                                                                                                                                                                                          rows(K), columns(X))")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "rows")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "row"
                                                                                                       +
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "NOT rows(K) = 1")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "rows"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (name
                                                                                                               "FKXM"
                                                                                                               "form_matrix(LAMBDA (i, j: nat): dot(row(K)(i),col(X)(j)), 1,
                                                                                                                                                                                                                                                  columns(X))")
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (name
                                                                                                                   "FXYM"
                                                                                                                   "form_matrix(LAMBDA (i, j: nat): dot(row(X)(i) , col(Y)(j)), rows(X),
                                                                                                                                                                                                                                                columns(Y))")
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (typepred
                                                                                                                       "FKXM")
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "nth(K,0) = v")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (typepred
                                                                                                                               "FKXM")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -4
                                                                                                                                 "0"
                                                                                                                                 _)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "row"
                                                                                                                                   -4
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     (-1
                                                                                                                                      -6))
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "dot_eq_sigma"
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (inst-cp
                                                                                                                                         -
                                                                                                                                         "0")
                                                                                                                                        (("1"
                                                                                                                                          (replaces
                                                                                                                                           -3)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (typepred
                                                                                                                                               "col(Y)(j)")
                                                                                                                                              (("1"
                                                                                                                                                (hide
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (replaces
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "NOT (LAMBDA (k: nat):
                                                                                                                                                                                                                                                      access(nth(FKXM, 0))(k) * access(col(Y)(j))(k))=(LAMBDA (k:nat):dot(row(K)(0) , col(X)(k))*access(col(Y)(j))(k))")
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       3)
                                                                                                                                                      (("1"
                                                                                                                                                        (decompose-equality
                                                                                                                                                         1)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -3
                                                                                                                                                           "x!1")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "access"
                                                                                                                                                               1
                                                                                                                                                               1)
                                                                                                                                                              (("1"
                                                                                                                                                                (lift-if)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (ground)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst-cp
                                                                                                                                                                       -6
                                                                                                                                                                       "0")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -7)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "col_zero")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst
                                                                                                                                                                               -
                                                                                                                                                                               "X"
                                                                                                                                                                               "x!1")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (replaces
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "dot_zero_right")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "*"
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (rewrite
                                                                                                                                                                                         -1)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (lemma
                                                                                                                                                               "col_zero")
                                                                                                                                                              (("2"
                                                                                                                                                                (inst
                                                                                                                                                                 -
                                                                                                                                                                 "X"
                                                                                                                                                                 "x!1")
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (replaces
                                                                                                                                                                     -1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "dot_zero_right")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "*"
                                                                                                                                                                         -1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (rewrite
                                                                                                                                                                           -1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "access"
                                                                                                                                                                               +
                                                                                                                                                                               1)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (lift-if)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (ground)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -
                                                                                                                                                                                     "0")
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (replaces
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (case
                                                                                                                                                         "NOT row(K)(0) = v")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "row"
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (lemma
                                                                                                                                                               "dot_eq_sigma")
                                                                                                                                                              (("2"
                                                                                                                                                                (case
                                                                                                                                                                 "NOT (LAMBDA (k: nat): dot(v , col(X)(k)) * access(col(Y)(j))(k)) = (LAMBDA (k: nat): sigma(0, min(length(v)-1, rows(X)-1),
                                                                                                                                                                                                                                                                                       LAMBDA (i: nat): (access(v)(i) * access(col(X)(k))(i))*access(col(Y)(j))(k)))")
                                                                                                                                                                (("1"
                                                                                                                                                                  (decompose-equality
                                                                                                                                                                   1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -
                                                                                                                                                                     "v"
                                                                                                                                                                     "col(X)(x!1)")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replaces
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (rewrite
                                                                                                                                                                         "sigma_scal_right"
                                                                                                                                                                         :dir
                                                                                                                                                                         rl)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (typepred
                                                                                                                                                                           "col(X)(x!1)")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (replace
                                                                                                                                                                             -2)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (propax)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (replaces
                                                                                                                                                                   -1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (rewrite
                                                                                                                                                                     "sigma_swap")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (hide
                                                                                                                                                                       (-1
                                                                                                                                                                        -2
                                                                                                                                                                        -3
                                                                                                                                                                        -4
                                                                                                                                                                        -5
                                                                                                                                                                        -6
                                                                                                                                                                        -7
                                                                                                                                                                        -8
                                                                                                                                                                        -9
                                                                                                                                                                        -10))
                                                                                                                                                                      (("2"
                                                                                                                                                                        (typepred
                                                                                                                                                                         "FXYM")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (hide
                                                                                                                                                                           -1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (rewrite
                                                                                                                                                                             "dot_eq_sigma"
                                                                                                                                                                             2)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (typepred
                                                                                                                                                                               "col(FXYM)(j)")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "rows"
                                                                                                                                                                                     +
                                                                                                                                                                                     3)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -2)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (rewrite
                                                                                                                                                                                         "sigma_eq")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (hide
                                                                                                                                                                                           3)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (skosimp*)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (typepred
                                                                                                                                                                                               "n!1")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "access"
                                                                                                                                                                                                 +
                                                                                                                                                                                                 5)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (lift-if)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (ground)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                         "col_def")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (inst
                                                                                                                                                                                                           -
                                                                                                                                                                                                           "FXYM"
                                                                                                                                                                                                           "j")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (flatten)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                 -
                                                                                                                                                                                                                 "n!1")
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (lift-if)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (ground)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (replaces
                                                                                                                                                                                                                         -2)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (inst
                                                                                                                                                                                                                           -9
                                                                                                                                                                                                                           "n!1"
                                                                                                                                                                                                                           "j")
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                             "row"
                                                                                                                                                                                                                             -9)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (lift-if)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (ground)
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (typepred
                                                                                                                                                                                                                                     "col(FXYM)(j)")
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (replaces
                                                                                                                                                                                                                                       -2)
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                           "rows")
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                     "rows")
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (replaces
                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (rewrite
                                                                                                                                                                                                                                           "dot_eq_sigma"
                                                                                                                                                                                                                                           2)
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (rewrite
                                                                                                                                                                                                                                             "sigma_scal"
                                                                                                                                                                                                                                             :dir
                                                                                                                                                                                                                                             rl)
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (typepred
                                                                                                                                                                                                                                               "col(Y)(j)")
                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                (hide
                                                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                  (replaces
                                                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                                     "rows"
                                                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (invoke
                                                                                                                                                                                                                                                       (name
                                                                                                                                                                                                                                                        "K1"
                                                                                                                                                                                                                                                        "%1")
                                                                                                                                                                                                                                                       (!
                                                                                                                                                                                                                                                        2
                                                                                                                                                                                                                                                        1
                                                                                                                                                                                                                                                        2))
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (invoke
                                                                                                                                                                                                                                                           (name
                                                                                                                                                                                                                                                            "K2"
                                                                                                                                                                                                                                                            "%1")
                                                                                                                                                                                                                                                           (!
                                                                                                                                                                                                                                                            2
                                                                                                                                                                                                                                                            2
                                                                                                                                                                                                                                                            2))
                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                            (replace
                                                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                              (invoke
                                                                                                                                                                                                                                                               (name
                                                                                                                                                                                                                                                                "F1"
                                                                                                                                                                                                                                                                "%1")
                                                                                                                                                                                                                                                               (!
                                                                                                                                                                                                                                                                2
                                                                                                                                                                                                                                                                1
                                                                                                                                                                                                                                                                3))
                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                  (invoke
                                                                                                                                                                                                                                                                   (name
                                                                                                                                                                                                                                                                    "F2"
                                                                                                                                                                                                                                                                    "%1")
                                                                                                                                                                                                                                                                   (!
                                                                                                                                                                                                                                                                    2
                                                                                                                                                                                                                                                                    2
                                                                                                                                                                                                                                                                    3))
                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                      (hide
                                                                                                                                                                                                                                                                       (-1
                                                                                                                                                                                                                                                                        -2
                                                                                                                                                                                                                                                                        -3
                                                                                                                                                                                                                                                                        -4))
                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                        (case
                                                                                                                                                                                                                                                                         "NOT K1>=K2")
                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                                                           "K1"
                                                                                                                                                                                                                                                                           1)
                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                                                                             "K2"
                                                                                                                                                                                                                                                                             1)
                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                              (typepred
                                                                                                                                                                                                                                                                               "columns(X)")
                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                                                                                 -
                                                                                                                                                                                                                                                                                 "n!1")
                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                                                                     "min"
                                                                                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                      (lift-if)
                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                        (lift-if)
                                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                                          (lift-if)
                                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                                                                                           "sigma_split")
                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                            (inst
                                                                                                                                                                                                                                                                             -
                                                                                                                                                                                                                                                                             "F1"
                                                                                                                                                                                                                                                                             "K1"
                                                                                                                                                                                                                                                                             "0"
                                                                                                                                                                                                                                                                             "K2")
                                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                (case
                                                                                                                                                                                                                                                                                 "NOT -1<=K2")
                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                                                                                   "K2"
                                                                                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                                                                     "min")
                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                      (lift-if)
                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                        (ground)
                                                                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                    (hide
                                                                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                                      (replaces
                                                                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                        (case
                                                                                                                                                                                                                                                                                         "NOT sigma(1+K2,K1,F1)=0")
                                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                                          (hide
                                                                                                                                                                                                                                                                                           3)
                                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                                            (rewrite
                                                                                                                                                                                                                                                                                             "sigma_restrict_eq_0")
                                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                                (typepred
                                                                                                                                                                                                                                                                                                 "i!1")
                                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                                                                                                   "K2")
                                                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                                                                                     "min"
                                                                                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                                      (lift-if)
                                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                                        (ground)
                                                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                                                                                           "F1"
                                                                                                                                                                                                                                                                                                           2)
                                                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                                                            (case
                                                                                                                                                                                                                                                                                                             "access(col(X)(i!1))(n!1)=0")
                                                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                                                                                               "access"
                                                                                                                                                                                                                                                                                                               1)
                                                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                                                (lift-if)
                                                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                                                  (ground)
                                                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                                                                                                                                     "col_def")
                                                                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                                                                                                                       -
                                                                                                                                                                                                                                                                                                                       "X"
                                                                                                                                                                                                                                                                                                                       "i!1")
                                                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                                                        (flatten)
                                                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                                                          (replaces
                                                                                                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                                                            (inst
                                                                                                                                                                                                                                                                                                                             -
                                                                                                                                                                                                                                                                                                                             "n!1")
                                                                                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                                                                                                          (replaces
                                                                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                                                              (rewrite
                                                                                                                                                                                                                                                                                               "sigma_eq"
                                                                                                                                                                                                                                                                                               2)
                                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                                                                                                   "F1"
                                                                                                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                                                                                     "F2"
                                                                                                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                                                                                                                       "col_def")
                                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                                        (inst
                                                                                                                                                                                                                                                                                                         -
                                                                                                                                                                                                                                                                                                         "X"
                                                                                                                                                                                                                                                                                                         "n!2")
                                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                                          (flatten)
                                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                                            (inst
                                                                                                                                                                                                                                                                                                             -
                                                                                                                                                                                                                                                                                                             "n!1")
                                                                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                                                                                                 "access"
                                                                                                                                                                                                                                                                                                                 1
                                                                                                                                                                                                                                                                                                                 1)
                                                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                                                  (replaces
                                                                                                                                                                                                                                                                                                                   -2)
                                                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                                                                                       "access"
                                                                                                                                                                                                                                                                                                                       +
                                                                                                                                                                                                                                                                                                                       4)
                                                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil)
                                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                                            (inst
                                                                                                                                                                                                                             -
                                                                                                                                                                                                                             "n!1")
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                        (inst
                                                                                                                                                                                                                         -
                                                                                                                                                                                                                         "n!1")
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (typepred
                                                                                                                                                                                                                             "j")
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (lemma
                                                                                                                                                                                                                               "columns_mult")
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (inst?)
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (case
                                                                                                                                                                                                                                     "NOT K*X = null")
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                      (replace
                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                           "rows"
                                                                                                                                                                                                                                           -16)
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                                             "*"
                                                                                                                                                                                                                                             -16)
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                               "mult")
                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                  (typepred
                                                                                                                                                                                                                                                   "form_matrix(LAMBDA (i, j: nat): dot(row(null)(i) , col(Y)(j)),
                                                                                                                                                                                  rows(null), columns(Y))")
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (replaces
                                                                                                                                                                                                                                                     -2)
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                       "rows"
                                                                                                                                                                                                                                                       -19)
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (grind)
                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                        (replace
                                                                                                                                                                                                         -3)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "rows"
                                                                                                                                                                                                           1)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (replace
                                                                                                                                                                                                             -4)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (hide-all-but
                                                                                                                                                                                                               (-2
                                                                                                                                                                                                                1))
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (grind
                                                                                                                                                                                                                 :exclude
                                                                                                                                                                                                                 "length")
                                                                                                                                                                                                                nil
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (replace
                                                                                                                           -13
                                                                                                                           1
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("2"
                                                                                                                            (hide-all-but
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (rewrite
                                                                                         "rows_mult"
                                                                                         -3)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "rows_mult"
                                                                                           -3)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (invoke
                                                                                         (name
                                                                                          "KV"
                                                                                          "%1")
                                                                                         (!
                                                                                          1
                                                                                          2
                                                                                          1))
                                                                                        (("3"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("3"
                                                                                            (lemma
                                                                                             "columns_mult")
                                                                                            (("3"
                                                                                              (inst
                                                                                               -
                                                                                               "K*X"
                                                                                               "Y")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "KV")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -5)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "columns_form_matrix")
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 (-1
                                                                                                                  2))
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (typepred
                                                                                                     "K*X")
                                                                                                    (("2"
                                                                                                      (hide-all-but
                                                                                                       (-2
                                                                                                        -6
                                                                                                        -14))
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (rewrite
                                                                                       "rows_mult")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "rows_mult")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "rows_form_matrix")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (lemma
                                                                                       "columns_mult")
                                                                                      (("3"
                                                                                        (inst?)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (typepred
                                                                                             "K*X")
                                                                                            (("3"
                                                                                              (case
                                                                                               "NOT rows(K)=0")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "rows")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     (-2
                                                                                                      -6
                                                                                                      1))
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (-14
                                                                                                  -1))
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -2
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (matrix_mult_assoc-4 "" 3750628112
   ("" (induct "M")
    (("1" (skeep)
      (("1" (rewrite "mult_null_left")
        (("1" (rewrite "mult_null_left")
          (("1" (rewrite "mult_null_left") nil nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 ("v" "M"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (rewrite "cons_append")
            (("2" (lemma "append_mult")
              (("2" (inst - "N" "(: v :)" "M")
                (("2" (assert)
                  (("2" (replaces -1)
                    (("2" (lemma "append_mult")
                      (("2" (inst - "A" "(: v :) * N" "M*N")
                        (("2" (assert)
                          (("2" (split -)
                            (("1" (replaces -1)
                              (("1" (lemma "append_mult")
                                (("1" (inst - "N*A" "(: v :)" "M")
                                  (("1" (assert)
                                    (("1" (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst-cp - "A" "N")
                                          (("1"
                                            (replaces -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "FORALL (X,Y:Matrix): null?(X) OR LET K = (: v :) IN (K*X)*Y = K*(X*Y)")
                                                (("1"
                                                  (inst - "N" "A")
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (name "K" "(: v :)")
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (case
                                                             "NOT length(K) = 1")
                                                            (("1"
                                                              (expand "K" 1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "full_matrix_eq"
                                                               2)
                                                              (("2"
                                                                (case
                                                                 "NOT (rows((K * X) * Y) = rows(K * (X * Y)) AND
                                                                                                                                               columns((K * X) * Y) = columns(K * (X * Y)))")
                                                                (("1"
                                                                  (hide 3)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (rewrite
                                                                         "rows_mult")
                                                                        (("1"
                                                                          (rewrite
                                                                           "rows_mult")
                                                                          (("1"
                                                                            (rewrite
                                                                             "rows_mult")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "columns_mult")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (split
                                                                           -)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (lemma
                                                                               "columns_mult")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "columns_mult")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "K*X")
                                                                            (("2"
                                                                              (expand
                                                                               "rows")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (replace
                                                                                   -7)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     (-2
                                                                                      -5))
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (typepred
                                                                         "i")
                                                                        (("2"
                                                                          (typepred
                                                                           "j")
                                                                          (("2"
                                                                            (copy
                                                                             -2)
                                                                            (("2"
                                                                              (expand
                                                                               "rows"
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "*"
                                                                                   +)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "mult"
                                                                                     +)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "entry_form_matrix2")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "entry_form_matrix2")
                                                                                        (("1"
                                                                                          (case
                                                                                           "NOT i = 0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "rows_mult")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "rows_mult")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "rows")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "row"
                                                                                                 +
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "form_matrix(LAMBDA (i, j: nat): dot(row(K)(i),col(X)(j)),
                                                                                                                                                                                          rows(K), columns(X))")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "rows")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "row"
                                                                                                         +
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "NOT rows(K) = 1")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "rows"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (name
                                                                                                                 "FKXM"
                                                                                                                 "form_matrix(LAMBDA (i, j: nat): dot(row(K)(i),col(X)(j)), 1,
                                                                                                                                                                                                                                                  columns(X))")
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (name
                                                                                                                     "FXYM"
                                                                                                                     "form_matrix(LAMBDA (i, j: nat): dot(row(X)(i) , col(Y)(j)), rows(X),
                                                                                                                                                                                                                                                columns(Y))")
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "FKXM")
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "nth(K,0) = v")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (typepred
                                                                                                                                 "FKXM")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -4
                                                                                                                                   "0"
                                                                                                                                   _)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "row"
                                                                                                                                     -4
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       (-1
                                                                                                                                        -6))
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         "dot_eq_sigma"
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (inst-cp
                                                                                                                                           -
                                                                                                                                           "0")
                                                                                                                                          (("1"
                                                                                                                                            (replaces
                                                                                                                                             -3)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (typepred
                                                                                                                                                 "col(Y)(j)")
                                                                                                                                                (("1"
                                                                                                                                                  (hide
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (replaces
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (case
                                                                                                                                                       "NOT (LAMBDA (k: nat):
                                                                                                                                                                                                                                                      access(nth(FKXM, 0))(k) * access(col(Y)(j))(k))=(LAMBDA (k:nat):dot(row(K)(0) , col(X)(k))*access(col(Y)(j))(k))")
                                                                                                                                                      (("1"
                                                                                                                                                        (hide
                                                                                                                                                         3)
                                                                                                                                                        (("1"
                                                                                                                                                          (decompose-equality
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -3
                                                                                                                                                             "x!1")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "access"
                                                                                                                                                                 1
                                                                                                                                                                 1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lift-if)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (ground)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst-cp
                                                                                                                                                                         -6
                                                                                                                                                                         "0")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (replace
                                                                                                                                                                           -7)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "col_zero")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -
                                                                                                                                                                                 "X"
                                                                                                                                                                                 "x!1")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replaces
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (lemma
                                                                                                                                                                                       "dot_zero_right")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "*"
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (rewrite
                                                                                                                                                                                           -1)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 "col_zero")
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   -
                                                                                                                                                                   "X"
                                                                                                                                                                   "x!1")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (replaces
                                                                                                                                                                       -1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (lemma
                                                                                                                                                                         "dot_zero_right")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "*"
                                                                                                                                                                           -1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (rewrite
                                                                                                                                                                             -1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "access"
                                                                                                                                                                                 +
                                                                                                                                                                                 1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (lift-if)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (ground)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -
                                                                                                                                                                                       "0")
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (case
                                                                                                                                                           "NOT row(K)(0) = v")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "row"
                                                                                                                                                             1)
                                                                                                                                                            (("1"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (replace
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 "dot_eq_sigma")
                                                                                                                                                                (("2"
                                                                                                                                                                  (case
                                                                                                                                                                   "NOT (LAMBDA (k: nat): dot(v , col(X)(k)) * access(col(Y)(j))(k)) = (LAMBDA (k: nat): sigma(0, min(length(v)-1, rows(X)-1),
                                                                                                                                                                                                                                                                                       LAMBDA (i: nat): (access(v)(i) * access(col(X)(k))(i))*access(col(Y)(j))(k)))")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (decompose-equality
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst
                                                                                                                                                                       -
                                                                                                                                                                       "v"
                                                                                                                                                                       "col(X)(x!1)")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replaces
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (rewrite
                                                                                                                                                                           "sigma_scal_right"
                                                                                                                                                                           :dir
                                                                                                                                                                           rl)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (typepred
                                                                                                                                                                             "col(X)(x!1)")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replace
                                                                                                                                                                               -2)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (replaces
                                                                                                                                                                     -1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (rewrite
                                                                                                                                                                       "sigma_swap")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (hide
                                                                                                                                                                         (-1
                                                                                                                                                                          -2
                                                                                                                                                                          -3
                                                                                                                                                                          -4
                                                                                                                                                                          -5
                                                                                                                                                                          -6
                                                                                                                                                                          -7
                                                                                                                                                                          -8
                                                                                                                                                                          -9
                                                                                                                                                                          -10))
                                                                                                                                                                        (("2"
                                                                                                                                                                          (typepred
                                                                                                                                                                           "FXYM")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (hide
                                                                                                                                                                             -1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (rewrite
                                                                                                                                                                               "dot_eq_sigma"
                                                                                                                                                                               2)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (typepred
                                                                                                                                                                                 "col(FXYM)(j)")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "rows"
                                                                                                                                                                                       +
                                                                                                                                                                                       3)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -2)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (rewrite
                                                                                                                                                                                           "sigma_eq")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (hide
                                                                                                                                                                                             3)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (typepred
                                                                                                                                                                                                 "n!1")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "access"
                                                                                                                                                                                                   +
                                                                                                                                                                                                   5)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (lift-if)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (ground)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                           "col_def")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (inst
                                                                                                                                                                                                             -
                                                                                                                                                                                                             "FXYM"
                                                                                                                                                                                                             "j")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (flatten)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                   -
                                                                                                                                                                                                                   "n!1")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (lift-if)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (ground)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (replaces
                                                                                                                                                                                                                           -2)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (inst
                                                                                                                                                                                                                             -9
                                                                                                                                                                                                                             "n!1"
                                                                                                                                                                                                                             "j")
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               "row"
                                                                                                                                                                                                                               -9)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (lift-if)
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (ground)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (typepred
                                                                                                                                                                                                                                       "col(FXYM)(j)")
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (replaces
                                                                                                                                                                                                                                         -2)
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                                             "rows")
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                       "rows")
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (replaces
                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (rewrite
                                                                                                                                                                                                                                             "dot_eq_sigma"
                                                                                                                                                                                                                                             2)
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (rewrite
                                                                                                                                                                                                                                               "sigma_scal"
                                                                                                                                                                                                                                               :dir
                                                                                                                                                                                                                                               rl)
                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                (typepred
                                                                                                                                                                                                                                                 "col(Y)(j)")
                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                  (hide
                                                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (replaces
                                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                       "rows"
                                                                                                                                                                                                                                                       2)
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (invoke
                                                                                                                                                                                                                                                         (name
                                                                                                                                                                                                                                                          "K1"
                                                                                                                                                                                                                                                          "%1")
                                                                                                                                                                                                                                                         (!
                                                                                                                                                                                                                                                          2
                                                                                                                                                                                                                                                          1
                                                                                                                                                                                                                                                          2))
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (replace
                                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                            (invoke
                                                                                                                                                                                                                                                             (name
                                                                                                                                                                                                                                                              "K2"
                                                                                                                                                                                                                                                              "%1")
                                                                                                                                                                                                                                                             (!
                                                                                                                                                                                                                                                              2
                                                                                                                                                                                                                                                              2
                                                                                                                                                                                                                                                              2))
                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                              (replace
                                                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                (invoke
                                                                                                                                                                                                                                                                 (name
                                                                                                                                                                                                                                                                  "F1"
                                                                                                                                                                                                                                                                  "%1")
                                                                                                                                                                                                                                                                 (!
                                                                                                                                                                                                                                                                  2
                                                                                                                                                                                                                                                                  1
                                                                                                                                                                                                                                                                  3))
                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                    (invoke
                                                                                                                                                                                                                                                                     (name
                                                                                                                                                                                                                                                                      "F2"
                                                                                                                                                                                                                                                                      "%1")
                                                                                                                                                                                                                                                                     (!
                                                                                                                                                                                                                                                                      2
                                                                                                                                                                                                                                                                      2
                                                                                                                                                                                                                                                                      3))
                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                      (replace
                                                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                                                                         (-1
                                                                                                                                                                                                                                                                          -2
                                                                                                                                                                                                                                                                          -3
                                                                                                                                                                                                                                                                          -4))
                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                          (case
                                                                                                                                                                                                                                                                           "NOT K1>=K2")
                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                                                                             "K1"
                                                                                                                                                                                                                                                                             1)
                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                                                               "K2"
                                                                                                                                                                                                                                                                               1)
                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                (typepred
                                                                                                                                                                                                                                                                                 "columns(X)")
                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                                                                                   -
                                                                                                                                                                                                                                                                                   "n!1")
                                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                                                       "min"
                                                                                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                        (lift-if)
                                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                                          (lift-if)
                                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                                            (lift-if)
                                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                            nil)
                                                                                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                                                                                             "sigma_split")
                                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                                              (inst
                                                                                                                                                                                                                                                                               -
                                                                                                                                                                                                                                                                               "F1"
                                                                                                                                                                                                                                                                               "K1"
                                                                                                                                                                                                                                                                               "0"
                                                                                                                                                                                                                                                                               "K2")
                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                  (replaces
                                                                                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                    (case
                                                                                                                                                                                                                                                                                     "NOT -1<=K2")
                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                                                       "K2"
                                                                                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                                                         "min")
                                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                                          (lift-if)
                                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                                            (ground)
                                                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                          (replaces
                                                                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                            (case
                                                                                                                                                                                                                                                                                             "NOT sigma(1+K2,K1,F1)=0")
                                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                                              (hide
                                                                                                                                                                                                                                                                                               3)
                                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                                (rewrite
                                                                                                                                                                                                                                                                                                 "sigma_restrict_eq_0")
                                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                                                    (typepred
                                                                                                                                                                                                                                                                                                     "i!1")
                                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                                                                       "K2")
                                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                                                                         "min"
                                                                                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                                                          (lift-if)
                                                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                                                            (ground)
                                                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                                                                                               "F1"
                                                                                                                                                                                                                                                                                                               2)
                                                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                                                (case
                                                                                                                                                                                                                                                                                                                 "access(col(X)(i!1))(n!1)=0")
                                                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                                                                                                                   "access"
                                                                                                                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                                                    (lift-if)
                                                                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                                                                      (ground)
                                                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                                                                                                                                         "col_def")
                                                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                                                          (inst
                                                                                                                                                                                                                                                                                                                           -
                                                                                                                                                                                                                                                                                                                           "X"
                                                                                                                                                                                                                                                                                                                           "i!1")
                                                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                                                            (flatten)
                                                                                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                                                                                              (replaces
                                                                                                                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                                                                                                                                 -
                                                                                                                                                                                                                                                                                                                                 "n!1")
                                                                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                                                                                              (replaces
                                                                                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                                  (rewrite
                                                                                                                                                                                                                                                                                                   "sigma_eq"
                                                                                                                                                                                                                                                                                                   2)
                                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                                    (skosimp*)
                                                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                                                                       "F1"
                                                                                                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                                                                         "F2"
                                                                                                                                                                                                                                                                                                         1)
                                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                                                                                                                           "col_def")
                                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                                            (inst
                                                                                                                                                                                                                                                                                                             -
                                                                                                                                                                                                                                                                                                             "X"
                                                                                                                                                                                                                                                                                                             "n!2")
                                                                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                                                                              (flatten)
                                                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                                                                                                                 -
                                                                                                                                                                                                                                                                                                                 "n!1")
                                                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                                                                                                     "access"
                                                                                                                                                                                                                                                                                                                     1
                                                                                                                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                                                                      (replaces
                                                                                                                                                                                                                                                                                                                       -2)
                                                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                                                                                                           "access"
                                                                                                                                                                                                                                                                                                                           +
                                                                                                                                                                                                                                                                                                                           4)
                                                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                              (inst
                                                                                                                                                                                                                               -
                                                                                                                                                                                                                               "n!1")
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                nil
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                                          (inst
                                                                                                                                                                                                                           -
                                                                                                                                                                                                                           "n!1")
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (typepred
                                                                                                                                                                                                                               "j")
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                                 "columns_mult")
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (inst?)
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (case
                                                                                                                                                                                                                                       "NOT K*X = null")
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                                             "rows"
                                                                                                                                                                                                                                             -16)
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                               "*"
                                                                                                                                                                                                                                               -16)
                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                                 "mult")
                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (typepred
                                                                                                                                                                                                                                                     "form_matrix(LAMBDA (i, j: nat): dot(row(null)(i) , col(Y)(j)),
                                                                                                                                                                                  rows(null), columns(Y))")
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (replaces
                                                                                                                                                                                                                                                       -2)
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                         "rows"
                                                                                                                                                                                                                                                         -19)
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                            (grind)
                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (replace
                                                                                                                                                                                                           -3)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "rows"
                                                                                                                                                                                                             1)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (replace
                                                                                                                                                                                                               -4)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                                                 (-2
                                                                                                                                                                                                                  1))
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (grind
                                                                                                                                                                                                                   :exclude
                                                                                                                                                                                                                   "length")
                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (replace
                                                                                                                             -13
                                                                                                                             1
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("2"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (rewrite
                                                                                           "rows_mult"
                                                                                           -3)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "rows_mult"
                                                                                             -3)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (invoke
                                                                                           (name
                                                                                            "KV"
                                                                                            "%1")
                                                                                           (!
                                                                                            1
                                                                                            2
                                                                                            1))
                                                                                          (("3"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("3"
                                                                                              (lemma
                                                                                               "columns_mult")
                                                                                              (("3"
                                                                                                (inst
                                                                                                 -
                                                                                                 "K*X"
                                                                                                 "Y")
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  (("3"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "KV")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -5)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "columns_form_matrix")
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   (-1
                                                                                                                    2))
                                                                                                                  (("1"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (typepred
                                                                                                       "K*X")
                                                                                                      (("2"
                                                                                                        (hide-all-but
                                                                                                         (-2
                                                                                                          -6
                                                                                                          -14))
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (rewrite
                                                                                         "rows_mult")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "rows_mult")
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "rows_form_matrix")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "columns_mult")
                                                                                        (("3"
                                                                                          (inst?)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (typepred
                                                                                               "K*X")
                                                                                              (("3"
                                                                                                (replaces
                                                                                                 -2)
                                                                                                (("3"
                                                                                                  (case
                                                                                                   "NOT rows(K)=0")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "rows")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-2
                                                                                                          -6
                                                                                                          1))
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-14
                                                                                                      -1))
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -2
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append_mult formula-decl nil matrices nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (K skolem-const-decl "(cons?[list[real]])" matrices nil)
    (rows_mult formula-decl nil matrices nil)
    (array2list_it def-decl
                   "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
                   array2list structures)
    (mult const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
     nil)
    (form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" matrices
                 nil)
    (array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (access const-decl "real" matrices nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (columns_mult formula-decl nil matrices nil)
    (rows_form_matrix formula-decl nil matrices nil)
    (dot_eq_sigma formula-decl nil matrices nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (subrange type-eq-decl nil integers nil)
    (Y skolem-const-decl "Matrix" matrices nil)
    (j skolem-const-decl "below(columns((K * X) * Y))" matrices nil)
    (sigma_split formula-decl nil sigma reals)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (F2 skolem-const-decl "[nat -> real]" matrices nil)
    (F1 skolem-const-decl "[nat -> real]" matrices nil)
    (sigma_restrict_eq_0 formula-decl nil sigma reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (K1 skolem-const-decl
     "{k: int | k <= columns(X) - 1 AND k <= length(Y) - 1}" matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (K2 skolem-const-decl
     "{k: int | k <= length(nth(X, n!1)) - 1 AND k <= length(Y) - 1}" matrices
     nil)
    (sigma_scal formula-decl nil sigma reals)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (col_def formula-decl nil matrices nil)
    (sigma_eq formula-decl nil sigma reals)
    (sigma_swap formula-decl nil sigma_swap reals)
    (sigma_scal_right formula-decl nil sigma reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (x!1 skolem-const-decl "nat" matrices nil)
    (X skolem-const-decl "Matrix" matrices nil)
    (dot_zero_right formula-decl nil matrices nil)
    (col_zero formula-decl nil matrices nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (columns_form_matrix formula-decl nil matrices nil)
    (entry_form_matrix2 formula-decl nil matrices nil)
    (dot def-decl "real" matrices nil)
    (full_matrix_eq formula-decl nil matrices nil)
    (FullMatrix type-eq-decl nil matrices nil)
    (TRUE const-decl "bool" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons_append formula-decl nil more_list_props structures)
    (mult_null_left formula-decl nil matrices nil)
    (mult_full application-judgement "FullMatrix" matrices nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices nil)
    (col def-decl "VectorN(rows(M))" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (row const-decl "Vector" matrices nil) (* const-decl "real" matrices nil)
    (Vector type-eq-decl nil matrices nil)
    (entry const-decl "real" matrices nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (rows const-decl "nat" matrices nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil))
   shostak)
  (matrix_mult_assoc-3 nil 3613826341
   ("" (induct "M")
    (("1" (skeep)
      (("1" (rewrite "mult_null_left")
        (("1" (rewrite "mult_null_left")
          (("1" (rewrite "mult_null_left") nil nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 ("v" "M"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (rewrite "cons_append")
            (("2" (lemma "append_mult")
              (("2" (inst - "N" "(: v :)" "M")
                (("2" (assert)
                  (("2" (replaces -1)
                    (("2" (lemma "append_mult")
                      (("2" (inst - "A" "(: v :) * N" "M*N")
                        (("2" (assert)
                          (("2" (split -)
                            (("1" (replaces -1)
                              (("1" (lemma "append_mult")
                                (("1" (inst - "N*A" "(: v :)" "M")
                                  (("1" (assert)
                                    (("1" (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst-cp - "A" "N")
                                          (("1"
                                            (replaces -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "FORALL (X,Y:Matrix): null?(X) OR LET K = (: v :) IN (K*X)*Y = K*(X*Y)")
                                                (("1"
                                                  (inst - "N" "A")
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (name "K" "(: v :)")
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (case
                                                             "NOT length(K) = 1")
                                                            (("1"
                                                              (expand "K" 1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "full_matrix_eq"
                                                               2)
                                                              (("2"
                                                                (case
                                                                 "NOT (rows((K * X) * Y) = rows(K * (X * Y)) AND
                                                                                                                                               columns((K * X) * Y) = columns(K * (X * Y)))")
                                                                (("1"
                                                                  (hide 3)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (rewrite
                                                                         "rows_mult")
                                                                        (("1"
                                                                          (rewrite
                                                                           "rows_mult")
                                                                          (("1"
                                                                            (rewrite
                                                                             "rows_mult")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "columns_mult")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (split
                                                                           -)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (lemma
                                                                               "columns_mult")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "columns_mult")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "K*X")
                                                                            (("2"
                                                                              (expand
                                                                               "rows")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (replace
                                                                                   -7)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     (-2
                                                                                      -5))
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (typepred
                                                                         "i")
                                                                        (("2"
                                                                          (typepred
                                                                           "j")
                                                                          (("2"
                                                                            (copy
                                                                             -2)
                                                                            (("2"
                                                                              (expand
                                                                               "rows"
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "*"
                                                                                   +)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "mult"
                                                                                     +)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "entry_form_matrix2")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "entry_form_matrix2")
                                                                                        (("1"
                                                                                          (case
                                                                                           "NOT i = 0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "rows_mult")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "rows_mult")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "rows")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "row"
                                                                                                 +
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "form_matrix(LAMBDA (i, j: nat): dot(row(K)(i),col(X)(j)),
                                                                                                                                                                                          rows(K), columns(X))")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "rows")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "row"
                                                                                                         +
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "NOT rows(K) = 1")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "rows"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (name
                                                                                                                 "FKXM"
                                                                                                                 "form_matrix(LAMBDA (i, j: nat): dot(row(K)(i),col(X)(j)), 1,
                                                                                                                                                                                                                                                  columns(X))")
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (name
                                                                                                                     "FXYM"
                                                                                                                     "form_matrix(LAMBDA (i, j: nat): dot(row(X)(i) , col(Y)(j)), rows(X),
                                                                                                                                                                                                                                                columns(Y))")
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "FKXM")
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "nth(K,0) = v")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (typepred
                                                                                                                                 "FKXM")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -4
                                                                                                                                   "0"
                                                                                                                                   _)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "row"
                                                                                                                                     -4
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       (-1
                                                                                                                                        -6))
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         "dot_eq_sigma"
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (inst-cp
                                                                                                                                           -
                                                                                                                                           "0")
                                                                                                                                          (("1"
                                                                                                                                            (replaces
                                                                                                                                             -3)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (typepred
                                                                                                                                                 "col(Y)(j)")
                                                                                                                                                (("1"
                                                                                                                                                  (hide
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (replaces
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (case
                                                                                                                                                       "NOT (LAMBDA (k: nat):
                                                                                                                                                                                                                                                      access(nth(FKXM, 0))(k) * access(col(Y)(j))(k))=(LAMBDA (k:nat):dot(row(K)(0) , col(X)(k))*access(col(Y)(j))(k))")
                                                                                                                                                      (("1"
                                                                                                                                                        (hide
                                                                                                                                                         3)
                                                                                                                                                        (("1"
                                                                                                                                                          (decompose-equality
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -3
                                                                                                                                                             "x!1")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "access"
                                                                                                                                                                 1
                                                                                                                                                                 1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lift-if)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (ground)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst-cp
                                                                                                                                                                         -6
                                                                                                                                                                         "0")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (replace
                                                                                                                                                                           -7)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "col_zero")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -
                                                                                                                                                                                 "X"
                                                                                                                                                                                 "x!1")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replaces
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (lemma
                                                                                                                                                                                       "dot_zero_right")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "*"
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (rewrite
                                                                                                                                                                                           -1)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 "col_zero")
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   -
                                                                                                                                                                   "X"
                                                                                                                                                                   "x!1")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (replaces
                                                                                                                                                                       -1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (lemma
                                                                                                                                                                         "dot_zero_right")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "*"
                                                                                                                                                                           -1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (rewrite
                                                                                                                                                                             -1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "access"
                                                                                                                                                                                 +
                                                                                                                                                                                 1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (lift-if)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (ground)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -
                                                                                                                                                                                       "0")
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (case
                                                                                                                                                           "NOT row(K)(0) = v")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "row"
                                                                                                                                                             1)
                                                                                                                                                            (("1"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (replace
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 "dot_eq_sigma")
                                                                                                                                                                (("2"
                                                                                                                                                                  (case
                                                                                                                                                                   "NOT (LAMBDA (k: nat): dot(v , col(X)(k)) * access(col(Y)(j))(k)) = (LAMBDA (k: nat): sigma(0, min(length(v)-1, rows(X)-1),
                                                                                                                                                                                                                                                                                       LAMBDA (i: nat): (access(v)(i) * access(col(X)(k))(i))*access(col(Y)(j))(k)))")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (decompose-equality
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst
                                                                                                                                                                       -
                                                                                                                                                                       "v"
                                                                                                                                                                       "col(X)(x!1)")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replaces
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (rewrite
                                                                                                                                                                           "sigma_scal_right"
                                                                                                                                                                           :dir
                                                                                                                                                                           rl)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (typepred
                                                                                                                                                                             "col(X)(x!1)")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replace
                                                                                                                                                                               -2)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         +
                                                                                                                                                                         "2")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (hide-all-but
                                                                                                                                                                           (1
                                                                                                                                                                            2))
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (replaces
                                                                                                                                                                     -1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (rewrite
                                                                                                                                                                       "sigma_swap")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (hide
                                                                                                                                                                         (-1
                                                                                                                                                                          -2
                                                                                                                                                                          -3
                                                                                                                                                                          -4
                                                                                                                                                                          -5
                                                                                                                                                                          -6
                                                                                                                                                                          -7
                                                                                                                                                                          -8
                                                                                                                                                                          -9
                                                                                                                                                                          -10))
                                                                                                                                                                        (("2"
                                                                                                                                                                          (typepred
                                                                                                                                                                           "FXYM")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (hide
                                                                                                                                                                             -1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (rewrite
                                                                                                                                                                               "dot_eq_sigma"
                                                                                                                                                                               2)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (typepred
                                                                                                                                                                                 "col(FXYM)(j)")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "rows"
                                                                                                                                                                                       +
                                                                                                                                                                                       3)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -2)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (rewrite
                                                                                                                                                                                           "sigma_eq")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (hide
                                                                                                                                                                                             3)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (typepred
                                                                                                                                                                                                 "n!1")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "access"
                                                                                                                                                                                                   +
                                                                                                                                                                                                   5)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (lift-if)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (ground)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                           "col_def")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (inst
                                                                                                                                                                                                             -
                                                                                                                                                                                                             "FXYM"
                                                                                                                                                                                                             "j")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (flatten)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                   -
                                                                                                                                                                                                                   "n!1")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (lift-if)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (ground)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (replaces
                                                                                                                                                                                                                           -2)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (inst
                                                                                                                                                                                                                             -9
                                                                                                                                                                                                                             "n!1"
                                                                                                                                                                                                                             "j")
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               "row"
                                                                                                                                                                                                                               -9)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (lift-if)
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (ground)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (typepred
                                                                                                                                                                                                                                       "col(FXYM)(j)")
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (replaces
                                                                                                                                                                                                                                         -2)
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                                             "rows")
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                       "rows")
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (replaces
                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (rewrite
                                                                                                                                                                                                                                             "dot_eq_sigma"
                                                                                                                                                                                                                                             2)
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (rewrite
                                                                                                                                                                                                                                               "sigma_scal"
                                                                                                                                                                                                                                               :dir
                                                                                                                                                                                                                                               rl)
                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                (typepred
                                                                                                                                                                                                                                                 "col(Y)(j)")
                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                  (hide
                                                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (replaces
                                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                       "rows"
                                                                                                                                                                                                                                                       2)
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (invoke
                                                                                                                                                                                                                                                         (name
                                                                                                                                                                                                                                                          "K1"
                                                                                                                                                                                                                                                          "%1")
                                                                                                                                                                                                                                                         (!
                                                                                                                                                                                                                                                          2
                                                                                                                                                                                                                                                          1
                                                                                                                                                                                                                                                          2))
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (replace
                                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                            (invoke
                                                                                                                                                                                                                                                             (name
                                                                                                                                                                                                                                                              "K2"
                                                                                                                                                                                                                                                              "%1")
                                                                                                                                                                                                                                                             (!
                                                                                                                                                                                                                                                              2
                                                                                                                                                                                                                                                              2
                                                                                                                                                                                                                                                              2))
                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                              (replace
                                                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                (invoke
                                                                                                                                                                                                                                                                 (name
                                                                                                                                                                                                                                                                  "F1"
                                                                                                                                                                                                                                                                  "%1")
                                                                                                                                                                                                                                                                 (!
                                                                                                                                                                                                                                                                  2
                                                                                                                                                                                                                                                                  1
                                                                                                                                                                                                                                                                  3))
                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                    (invoke
                                                                                                                                                                                                                                                                     (name
                                                                                                                                                                                                                                                                      "F2"
                                                                                                                                                                                                                                                                      "%1")
                                                                                                                                                                                                                                                                     (!
                                                                                                                                                                                                                                                                      2
                                                                                                                                                                                                                                                                      2
                                                                                                                                                                                                                                                                      3))
                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                      (replace
                                                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                                                                         (-1
                                                                                                                                                                                                                                                                          -2
                                                                                                                                                                                                                                                                          -3
                                                                                                                                                                                                                                                                          -4))
                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                          (case
                                                                                                                                                                                                                                                                           "NOT K1>=K2")
                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                                                                             "K1"
                                                                                                                                                                                                                                                                             1)
                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                                                               "K2"
                                                                                                                                                                                                                                                                               1)
                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                (typepred
                                                                                                                                                                                                                                                                                 "columns(X)")
                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                                                                                   -
                                                                                                                                                                                                                                                                                   "n!1")
                                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                                                       "min"
                                                                                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                        (lift-if)
                                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                                          (lift-if)
                                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                                            (lift-if)
                                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                            nil)
                                                                                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                                                                                             "sigma_split")
                                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                                              (inst
                                                                                                                                                                                                                                                                               -
                                                                                                                                                                                                                                                                               "F1"
                                                                                                                                                                                                                                                                               "K1"
                                                                                                                                                                                                                                                                               "0"
                                                                                                                                                                                                                                                                               "K2")
                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                  (replaces
                                                                                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                    (case
                                                                                                                                                                                                                                                                                     "NOT -1<=K2")
                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                                                       "K2"
                                                                                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                                                         "min")
                                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                                          (lift-if)
                                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                                            (ground)
                                                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                          (replaces
                                                                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                            (case
                                                                                                                                                                                                                                                                                             "NOT sigma(1+K2,K1,F1)=0")
                                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                                              (hide
                                                                                                                                                                                                                                                                                               3)
                                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                                (rewrite
                                                                                                                                                                                                                                                                                                 "sigma_restrict_eq_0")
                                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                                                    (typepred
                                                                                                                                                                                                                                                                                                     "i!1")
                                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                                                                       "K2")
                                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                                                                         "min"
                                                                                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                                                          (lift-if)
                                                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                                                            (ground)
                                                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                                                                                               "F1"
                                                                                                                                                                                                                                                                                                               2)
                                                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                                                (case
                                                                                                                                                                                                                                                                                                                 "access(col(X)(i!1))(n!1)=0")
                                                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                                                                                                                   "access"
                                                                                                                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                                                    (lift-if)
                                                                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                                                                      (ground)
                                                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                                                                                                                                         "col_def")
                                                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                                                          (inst
                                                                                                                                                                                                                                                                                                                           -
                                                                                                                                                                                                                                                                                                                           "X"
                                                                                                                                                                                                                                                                                                                           "i!1")
                                                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                                                            (flatten)
                                                                                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                                                                                              (replaces
                                                                                                                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                                                                                                                                 -
                                                                                                                                                                                                                                                                                                                                 "n!1")
                                                                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                                                                                              (replaces
                                                                                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                                  (rewrite
                                                                                                                                                                                                                                                                                                   "sigma_eq"
                                                                                                                                                                                                                                                                                                   2)
                                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                                    (skosimp*)
                                                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                                                                       "F1"
                                                                                                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                                                                         "F2"
                                                                                                                                                                                                                                                                                                         1)
                                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                                                                                                                           "col_def")
                                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                                            (inst
                                                                                                                                                                                                                                                                                                             -
                                                                                                                                                                                                                                                                                                             "X"
                                                                                                                                                                                                                                                                                                             "n!2")
                                                                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                                                                              (flatten)
                                                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                                                                                                                 -
                                                                                                                                                                                                                                                                                                                 "n!1")
                                                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                                                                                                     "access"
                                                                                                                                                                                                                                                                                                                     1
                                                                                                                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                                                                      (replaces
                                                                                                                                                                                                                                                                                                                       -2)
                                                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                                                                                                           "access"
                                                                                                                                                                                                                                                                                                                           +
                                                                                                                                                                                                                                                                                                                           4)
                                                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                              (inst
                                                                                                                                                                                                                               -
                                                                                                                                                                                                                               "n!1")
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                nil
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                                          (inst
                                                                                                                                                                                                                           -
                                                                                                                                                                                                                           "n!1")
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (typepred
                                                                                                                                                                                                                               "j")
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                                 "columns_mult")
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (inst?)
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (case
                                                                                                                                                                                                                                       "NOT K*X = null")
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                                             "rows"
                                                                                                                                                                                                                                             -16)
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                               "*"
                                                                                                                                                                                                                                               -16)
                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                                 "mult")
                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (typepred
                                                                                                                                                                                                                                                     "form_matrix(LAMBDA (i, j: nat): dot(row(null)(i) , col(Y)(j)),
                                                                                                                                                                                  rows(null), columns(Y))")
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (replaces
                                                                                                                                                                                                                                                       -2)
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                         "rows"
                                                                                                                                                                                                                                                         -19)
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (replace
                                                                                                                                                                                                           -3)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "rows"
                                                                                                                                                                                                             1)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (replace
                                                                                                                                                                                                               -4)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                                                 (-2
                                                                                                                                                                                                                  1))
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (grind
                                                                                                                                                                                                                   :exclude
                                                                                                                                                                                                                   "length")
                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (flatten)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (inst
                                                                                                                                                                                               +
                                                                                                                                                                                               "2")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("3"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (inst
                                                                                                                                                                       +
                                                                                                                                                                       "2")
                                                                                                                                                                      (("3"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (replace
                                                                                                                             -13
                                                                                                                             1
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("2"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (rewrite
                                                                                           "rows_mult"
                                                                                           -3)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "rows_mult"
                                                                                             -3)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (invoke
                                                                                           (name
                                                                                            "KV"
                                                                                            "%1")
                                                                                           (!
                                                                                            1
                                                                                            2
                                                                                            1))
                                                                                          (("3"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("3"
                                                                                              (lemma
                                                                                               "columns_mult")
                                                                                              (("3"
                                                                                                (inst
                                                                                                 -
                                                                                                 "K*X"
                                                                                                 "Y")
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  (("3"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "KV")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -5)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "columns_form_matrix")
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   (-1
                                                                                                                    2))
                                                                                                                  (("1"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (typepred
                                                                                                       "K*X")
                                                                                                      (("2"
                                                                                                        (hide-all-but
                                                                                                         (-2
                                                                                                          -6
                                                                                                          -14))
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (rewrite
                                                                                         "rows_mult")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "rows_mult")
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "rows_form_matrix")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "columns_mult")
                                                                                        (("3"
                                                                                          (inst?)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (typepred
                                                                                               "K*X")
                                                                                              (("3"
                                                                                                (replaces
                                                                                                 -2)
                                                                                                (("3"
                                                                                                  (case
                                                                                                   "NOT rows(K)=0")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "rows")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-2
                                                                                                          -6
                                                                                                          1))
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-14
                                                                                                      -1))
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -2
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons_append formula-decl nil more_list_props structures)
    (array2list_it def-decl
                   "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
                   array2list structures)
    (array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (sigma_split formula-decl nil sigma reals)
    (sigma_restrict_eq_0 formula-decl nil sigma reals)
    (sigma_scal formula-decl nil sigma reals)
    (sigma_eq formula-decl nil sigma reals)
    (sigma_swap formula-decl nil sigma_swap reals)
    (sigma_scal_right formula-decl nil sigma reals)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals))
   nil)
  (matrix_mult_assoc-2 nil 3613750410
   ("" (induct "M")
    (("1" (skeep)
      (("1" (rewrite "mult_null_left")
        (("1" (rewrite "mult_null_left")
          (("1" (rewrite "mult_null_left") nil)))))))
     ("2" (skolem 1 ("v" "M"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (rewrite "cons_append")
            (("2" (lemma "append_mult")
              (("2" (inst - "N" "(: v :)" "M")
                (("2" (assert)
                  (("2" (replaces -1)
                    (("2" (lemma "append_mult")
                      (("2" (inst - "A" "(: v :) * N" "M*N")
                        (("2" (assert)
                          (("2" (split -)
                            (("1" (hide-all-but -1)
                              (("1" (typepred "(: v :)*N")
                                (("1" (hide-all-but (-2 -6))
                                  (("1" (grind) nil)))))))
                             ("2" (replaces -1)
                              (("2" (lemma "append_mult")
                                (("2" (inst - "N*A" "(: v :)" "M")
                                  (("2" (assert)
                                    (("2" (replaces -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst-cp - "A" "N")
                                          (("2"
                                            (replaces -2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (case
                                                 "FORALL (X,Y:Matrix): null?(X) OR LET K = (: v :) IN (K*X)*Y = K*(X*Y)")
                                                (("1"
                                                  (inst - "N" "A")
                                                  (("1" (assert) nil)))
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (name "K" "(: v :)")
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (case
                                                             "NOT length(K) = 1")
                                                            (("1"
                                                              (expand "K" 1)
                                                              (("1"
                                                                (grind)
                                                                nil)))
                                                             ("2"
                                                              (rewrite
                                                               "full_matrix_eq"
                                                               2)
                                                              (("2"
                                                                (case
                                                                 "NOT (rows((K * X) * Y) = rows(K * (X * Y)) AND
                                                                                                  columns((K * X) * Y) = columns(K * (X * Y)))")
                                                                (("1"
                                                                  (hide 3)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (rewrite
                                                                         "rows_mult")
                                                                        (("1"
                                                                          (rewrite
                                                                           "rows_mult")
                                                                          (("1"
                                                                            (rewrite
                                                                             "rows_mult")
                                                                            nil)))))))
                                                                     ("2"
                                                                      (lemma
                                                                       "columns_mult")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (split
                                                                           -)
                                                                          (("1"
                                                                            (typepred
                                                                             "K*X")
                                                                            (("1"
                                                                              (expand
                                                                               "rows")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -7)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-2
                                                                                      -5))
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil)))))))))))
                                                                           ("2"
                                                                            (replaces
                                                                             -1)
                                                                            (("2"
                                                                              (lemma
                                                                               "columns_mult")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "columns_mult")
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil)))))))))))))))))))))))))
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (typepred
                                                                         "i")
                                                                        (("2"
                                                                          (typepred
                                                                           "j")
                                                                          (("2"
                                                                            (copy
                                                                             -2)
                                                                            (("2"
                                                                              (expand
                                                                               "rows"
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "*"
                                                                                   +)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "mult"
                                                                                     +)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "entry_form_matrix")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "entry_form_matrix")
                                                                                        (("1"
                                                                                          (case
                                                                                           "NOT i = 0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "rows_mult")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "rows_mult")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "rows")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil)))))))))
                                                                                           ("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "row"
                                                                                                 +
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "form_matrix(LAMBDA (i, j: nat): row(K)(i) * col(X)(j),
                                                                                                                              rows(K), columns(X))")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "rows")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil)))))
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "row"
                                                                                                         +
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "NOT rows(K) = 1")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "rows"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil)))
                                                                                                           ("2"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (name
                                                                                                                 "FKXM"
                                                                                                                 "form_matrix(LAMBDA (i, j: nat): row(K)(i) * col(X)(j), 1,
                                                                                                                                                                 columns(X))")
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (name
                                                                                                                     "FXYM"
                                                                                                                     "form_matrix(LAMBDA (i, j: nat): row(X)(i) * col(Y)(j), rows(X),
                                                                                                                                                               columns(Y))")
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "FKXM")
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "nth(K,0) = v")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (typepred
                                                                                                                                 "FKXM")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -4
                                                                                                                                   "0"
                                                                                                                                   _)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "row"
                                                                                                                                     -4
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       (-1
                                                                                                                                        -6))
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         "dot_eq_sigma"
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (inst-cp
                                                                                                                                           -
                                                                                                                                           "0")
                                                                                                                                          (("1"
                                                                                                                                            (replaces
                                                                                                                                             -3)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (typepred
                                                                                                                                                 "col(Y)(j)")
                                                                                                                                                (("1"
                                                                                                                                                  (hide
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (replaces
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (case
                                                                                                                                                       "NOT (LAMBDA (k: nat):
                                                                                                                                                               access(nth(FKXM, 0))(k) * access(col(Y)(j))(k))=(LAMBDA (k:nat):(row(K)(0) * col(X)(k))*access(col(Y)(j))(k))")
                                                                                                                                                      (("1"
                                                                                                                                                        (hide
                                                                                                                                                         3)
                                                                                                                                                        (("1"
                                                                                                                                                          (decompose-equality
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -3
                                                                                                                                                             "x!1")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "access"
                                                                                                                                                                 1
                                                                                                                                                                 1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lift-if)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (ground)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst-cp
                                                                                                                                                                         -6
                                                                                                                                                                         "0")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (replace
                                                                                                                                                                           -7)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "col_zero")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -
                                                                                                                                                                                 "X"
                                                                                                                                                                                 "x!1")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replaces
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (rewrite
                                                                                                                                                                                       "dot_zero_right")
                                                                                                                                                                                      nil)))))))))))))))))))))))))
                                                                                                                                                             ("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 "col_zero")
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   -
                                                                                                                                                                   "X"
                                                                                                                                                                   "x!1")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (replaces
                                                                                                                                                                       -1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (rewrite
                                                                                                                                                                         "dot_zero_right")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "access"
                                                                                                                                                                             +
                                                                                                                                                                             1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (lift-if)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (ground)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -
                                                                                                                                                                                   "0")
                                                                                                                                                                                  nil)))))))))))))))))))))))))))
                                                                                                                                                       ("2"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (case
                                                                                                                                                           "NOT row(K)(0) = v")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "row"
                                                                                                                                                             1)
                                                                                                                                                            (("1"
                                                                                                                                                              (propax)
                                                                                                                                                              nil)))
                                                                                                                                                           ("2"
                                                                                                                                                            (replace
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 "dot_eq_sigma")
                                                                                                                                                                (("2"
                                                                                                                                                                  (case
                                                                                                                                                                   "NOT (LAMBDA (k: nat): (v * col(X)(k)) * access(col(Y)(j))(k)) = (LAMBDA (k: nat): sigma(0, min(length(v)-1, rows(X)-1),
                                                                                                                                                                                    LAMBDA (i: nat): (access(v)(i) * access(col(X)(k))(i))*access(col(Y)(j))(k)))")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (decompose-equality
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst
                                                                                                                                                                       -
                                                                                                                                                                       "v"
                                                                                                                                                                       "col(X)(x!1)")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replaces
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (rewrite
                                                                                                                                                                           "sigma_scal_right"
                                                                                                                                                                           :dir
                                                                                                                                                                           rl)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (typepred
                                                                                                                                                                             "col(X)(x!1)")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replace
                                                                                                                                                                               -2)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil)))))))))))
                                                                                                                                                                     ("2"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         +
                                                                                                                                                                         "2")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (hide-all-but
                                                                                                                                                                           (1
                                                                                                                                                                            2))
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil)))))))))
                                                                                                                                                                   ("2"
                                                                                                                                                                    (replaces
                                                                                                                                                                     -1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (rewrite
                                                                                                                                                                       "sigma_swap")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (hide
                                                                                                                                                                         (-1
                                                                                                                                                                          -2
                                                                                                                                                                          -3
                                                                                                                                                                          -4
                                                                                                                                                                          -5
                                                                                                                                                                          -6
                                                                                                                                                                          -7
                                                                                                                                                                          -8
                                                                                                                                                                          -9
                                                                                                                                                                          -10))
                                                                                                                                                                        (("2"
                                                                                                                                                                          (typepred
                                                                                                                                                                           "FXYM")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (hide
                                                                                                                                                                             -1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (rewrite
                                                                                                                                                                               "dot_eq_sigma"
                                                                                                                                                                               2)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (typepred
                                                                                                                                                                                 "col(FXYM)(j)")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "rows"
                                                                                                                                                                                       +
                                                                                                                                                                                       3)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -2)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (rewrite
                                                                                                                                                                                           "sigma_eq")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (hide
                                                                                                                                                                                             3)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (skosimp*)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (typepred
                                                                                                                                                                                                 "n!1")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "access"
                                                                                                                                                                                                   +
                                                                                                                                                                                                   5)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (lift-if)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (ground)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                           "col_def")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (inst
                                                                                                                                                                                                             -
                                                                                                                                                                                                             "FXYM"
                                                                                                                                                                                                             "j")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (flatten)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                   -
                                                                                                                                                                                                                   "n!1")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (lift-if)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (ground)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (replaces
                                                                                                                                                                                                                           -2)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (inst
                                                                                                                                                                                                                             -9
                                                                                                                                                                                                                             "n!1"
                                                                                                                                                                                                                             "j")
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               "row"
                                                                                                                                                                                                                               -9)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (lift-if)
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (ground)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (typepred
                                                                                                                                                                                                                                       "col(FXYM)(j)")
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (replaces
                                                                                                                                                                                                                                         -2)
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                                             "rows")
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                              nil)))))))))
                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                       "rows")
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (replaces
                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (rewrite
                                                                                                                                                                                                                                             "dot_eq_sigma"
                                                                                                                                                                                                                                             2)
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (rewrite
                                                                                                                                                                                                                                               "sigma_scal"
                                                                                                                                                                                                                                               :dir
                                                                                                                                                                                                                                               rl)
                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                (typepred
                                                                                                                                                                                                                                                 "col(Y)(j)")
                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                  (hide
                                                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (replaces
                                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                       "rows"
                                                                                                                                                                                                                                                       2)
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (invoke
                                                                                                                                                                                                                                                         (name
                                                                                                                                                                                                                                                          "K1"
                                                                                                                                                                                                                                                          "%1")
                                                                                                                                                                                                                                                         (!
                                                                                                                                                                                                                                                          2
                                                                                                                                                                                                                                                          1
                                                                                                                                                                                                                                                          2))
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (replace
                                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                            (invoke
                                                                                                                                                                                                                                                             (name
                                                                                                                                                                                                                                                              "K2"
                                                                                                                                                                                                                                                              "%1")
                                                                                                                                                                                                                                                             (!
                                                                                                                                                                                                                                                              2
                                                                                                                                                                                                                                                              2
                                                                                                                                                                                                                                                              2))
                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                              (replace
                                                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                (invoke
                                                                                                                                                                                                                                                                 (name
                                                                                                                                                                                                                                                                  "F1"
                                                                                                                                                                                                                                                                  "%1")
                                                                                                                                                                                                                                                                 (!
                                                                                                                                                                                                                                                                  2
                                                                                                                                                                                                                                                                  1
                                                                                                                                                                                                                                                                  3))
                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                    (invoke
                                                                                                                                                                                                                                                                     (name
                                                                                                                                                                                                                                                                      "F2"
                                                                                                                                                                                                                                                                      "%1")
                                                                                                                                                                                                                                                                     (!
                                                                                                                                                                                                                                                                      2
                                                                                                                                                                                                                                                                      2
                                                                                                                                                                                                                                                                      3))
                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                      (replace
                                                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                                                                         (-1
                                                                                                                                                                                                                                                                          -2
                                                                                                                                                                                                                                                                          -3
                                                                                                                                                                                                                                                                          -4))
                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                          (case
                                                                                                                                                                                                                                                                           "NOT K1>=K2")
                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                                                                             "K1"
                                                                                                                                                                                                                                                                             1)
                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                                                               "K2"
                                                                                                                                                                                                                                                                               1)
                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                (typepred
                                                                                                                                                                                                                                                                                 "columns(X)")
                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                                                                                   -
                                                                                                                                                                                                                                                                                   "n!1")
                                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                                                       "min"
                                                                                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                        (lift-if)
                                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                                          (lift-if)
                                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                                            (lift-if)
                                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                                                                              nil)))))))))))))))))))
                                                                                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                                                                                             "sigma_split")
                                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                                              (inst
                                                                                                                                                                                                                                                                               -
                                                                                                                                                                                                                                                                               "F1"
                                                                                                                                                                                                                                                                               "K1"
                                                                                                                                                                                                                                                                               "0"
                                                                                                                                                                                                                                                                               "K2")
                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                  (replaces
                                                                                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                    (case
                                                                                                                                                                                                                                                                                     "NOT -1<=K2")
                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                                                       "K2"
                                                                                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                                                         "min")
                                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                                          (lift-if)
                                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                                            (ground)
                                                                                                                                                                                                                                                                                            nil)))))))
                                                                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                          (replaces
                                                                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                            (case
                                                                                                                                                                                                                                                                                             "NOT sigma(1+K2,K1,F1)=0")
                                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                                              (hide
                                                                                                                                                                                                                                                                                               3)
                                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                                (rewrite
                                                                                                                                                                                                                                                                                                 "sigma_restrict_eq_0")
                                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                                                    (typepred
                                                                                                                                                                                                                                                                                                     "i!1")
                                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                                                                       "K2")
                                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                                                                         "min"
                                                                                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                                                          (lift-if)
                                                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                                                            (ground)
                                                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                                                                                               "F1"
                                                                                                                                                                                                                                                                                                               2)
                                                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                                                (case
                                                                                                                                                                                                                                                                                                                 "access(col(X)(i!1))(n!1)=0")
                                                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                                                                                                                   "access"
                                                                                                                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                                                    (lift-if)
                                                                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                                                                      (ground)
                                                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                                                                                                                                         "col_def")
                                                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                                                          (inst
                                                                                                                                                                                                                                                                                                                           -
                                                                                                                                                                                                                                                                                                                           "X"
                                                                                                                                                                                                                                                                                                                           "i!1")
                                                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                                                            (flatten)
                                                                                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                                                                                              (replaces
                                                                                                                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                                                                                                                                 -
                                                                                                                                                                                                                                                                                                                                 "n!1")
                                                                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                                                                                  nil)))))))))))))))))))))))))))))))))))))
                                                                                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                                                                                              (replaces
                                                                                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                                  (rewrite
                                                                                                                                                                                                                                                                                                   "sigma_eq"
                                                                                                                                                                                                                                                                                                   2)
                                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                                    (skosimp*)
                                                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                                                                       "F1"
                                                                                                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                                                                         "F2"
                                                                                                                                                                                                                                                                                                         1)
                                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                                                                                                                           "col_def")
                                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                                            (inst
                                                                                                                                                                                                                                                                                                             -
                                                                                                                                                                                                                                                                                                             "X"
                                                                                                                                                                                                                                                                                                             "n!2")
                                                                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                                                                              (flatten)
                                                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                                                                                                                 -
                                                                                                                                                                                                                                                                                                                 "n!1")
                                                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                                                                                                     "access"
                                                                                                                                                                                                                                                                                                                     1
                                                                                                                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                                                                      (replaces
                                                                                                                                                                                                                                                                                                                       -2)
                                                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                                                                                                           "access"
                                                                                                                                                                                                                                                                                                                           +
                                                                                                                                                                                                                                                                                                                           4)
                                                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                                                                                                            nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                              (inst
                                                                                                                                                                                                                               -
                                                                                                                                                                                                                               "n!1")
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                nil)))))))
                                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                                          (inst
                                                                                                                                                                                                                           -
                                                                                                                                                                                                                           "n!1")
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (typepred
                                                                                                                                                                                                                               "j")
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                                 "columns_mult")
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (inst?)
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (case
                                                                                                                                                                                                                                       "NOT K*X = null")
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                                             "rows"
                                                                                                                                                                                                                                             -16)
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                               "*"
                                                                                                                                                                                                                                               -16)
                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                                 "mult")
                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (typepred
                                                                                                                                                                                                                                                     "form_matrix(LAMBDA (i, j: nat): row(null)(i) * col(Y)(j),
                                                                rows(null), columns(Y))")
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (replaces
                                                                                                                                                                                                                                                       -2)
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                         "rows"
                                                                                                                                                                                                                                                         -19)
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                          nil)))))))))))))))))))))))))))))))))))))))))))))))))
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (replace
                                                                                                                                                                                                           -3)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "rows"
                                                                                                                                                                                                             1)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (replace
                                                                                                                                                                                                               -4)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                                                 (-2
                                                                                                                                                                                                                  1))
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (grind
                                                                                                                                                                                                                   :exclude
                                                                                                                                                                                                                   "length")
                                                                                                                                                                                                                  nil)))))))))))))))))))))))
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (flatten)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (inst
                                                                                                                                                                                               +
                                                                                                                                                                                               "2")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil)))))))))))))))))))))))))))))
                                                                                                                                                                   ("3"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (inst
                                                                                                                                                                       +
                                                                                                                                                                       "2")
                                                                                                                                                                      (("3"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))
                                                                                                                           ("2"
                                                                                                                            (replace
                                                                                                                             -13
                                                                                                                             1
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("2"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (grind)
                                                                                                                                nil)))))))))))))))))))))))))))))))))))))))
                                                                                         ("2"
                                                                                          (rewrite
                                                                                           "rows_mult"
                                                                                           -3)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "rows_mult"
                                                                                             -3)
                                                                                            nil)))
                                                                                         ("3"
                                                                                          (invoke
                                                                                           (name
                                                                                            "KV"
                                                                                            "%1")
                                                                                           (!
                                                                                            1
                                                                                            2
                                                                                            1))
                                                                                          (("3"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("3"
                                                                                              (lemma
                                                                                               "columns_mult")
                                                                                              (("3"
                                                                                                (inst
                                                                                                 -
                                                                                                 "K*X"
                                                                                                 "Y")
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  (("3"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "K*X")
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-2
                                                                                                          -6
                                                                                                          -14))
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil)))))
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "KV")
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -5)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "columns_form_matrix")
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (hide-all-but
                                                                                                                   (-1
                                                                                                                    2))
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil)))))))))))))))))))))))))))))
                                                                                       ("2"
                                                                                        (rewrite
                                                                                         "rows_mult")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "rows_mult")
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "rows_form_matrix")
                                                                                            nil)))))
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "columns_mult")
                                                                                        (("3"
                                                                                          (inst?)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (typepred
                                                                                               "K*X")
                                                                                              (("3"
                                                                                                (replaces
                                                                                                 -2)
                                                                                                (("3"
                                                                                                  (case
                                                                                                   "NOT rows(K)=0")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "rows")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-2
                                                                                                          -6
                                                                                                          1))
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil)))))))
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-14
                                                                                                      -1))
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -2
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (sigma_scal_right formula-decl nil sigma reals)
    (sigma_swap formula-decl nil sigma_swap reals)
    (sigma_eq formula-decl nil sigma reals)
    (length_null formula-decl nil more_list_props structures)
    (sigma_scal formula-decl nil sigma reals)
    (sigma_restrict_eq_0 formula-decl nil sigma reals)
    (sigma_split formula-decl nil sigma reals)
    (array2list_it def-decl
                   "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
                   array2list structures)
    (array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (cons_append formula-decl nil more_list_props structures))
   nil)
  (matrix_mult_assoc-1 nil 3613225605
   ("" (skeep)
    (("" (rewrite "full_matrix_eq")
      ((""
        (case "NOT (rows((M * N) * A) = rows(M * (N * A)) AND
               columns((M * N) * A) = columns(M * (N * A)))")
        (("1" (hide 2)
          (("1" (split)
            (("1" (assert)
              (("1" (typepred "(M*N)*A")
                (("1" (expand "rows" +)
                  (("1" (assert)
                    (("1" (replaces -2)
                      (("1" (hide -)
                        (("1" (typepred "M*(N*A)")
                          (("1" (replaces -2)
                            (("1" (hide -)
                              (("1" (expand "rows" + 1)
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "columns_mult")
              (("2" (inst-cp - "M*N" "A")
                (("2" (assert)
                  (("2" (case "null?(M*N)")
                    (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (entry_mult 0
  (entry_mult-1 nil 3615029027
   ("" (skeep)
    (("" (expand "*" +)
      (("" (expand "mult") (("" (rewrite "entry_form_matrix") nil nil)) nil))
      nil))
    nil)
   ((* const-decl "real" matrices nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices nil)
    (entry_form_matrix formula-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil matrices nil) (dot def-decl "real" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (row const-decl "Vector" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (rows const-decl "nat" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (col def-decl "VectorN(rows(M))" matrices nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (mult const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
     nil))
   shostak))
 (form_matrix_mult 0
  (form_matrix_mult-2 "" 3750628167
   ("" (skeep)
    (("" (invoke (name "f" "%1") (! 1 1 1))
      (("" (replaces -1)
        (("" (invoke (name "g" "%1") (! 1 1 2))
          (("" (replaces -1)
            (("" (invoke (name "h" "%1") (! 1 2))
              (("" (replaces -1)
                (("" (case "f = null")
                  (("1" (replace -1)
                    (("1" (rewrite "mult_null_left")
                      (("1" (case "length(h)=0")
                        (("1" (grind) nil nil)
                         ("2" (hide 2)
                          (("2" (typepred "h")
                            (("2" (typepred "f")
                              (("2" (replace -9)
                                (("2" (assert) (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "g = null")
                    (("1" (typepred "g")
                      (("1" (replace -5)
                        (("1" (expand "length" -2) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "h = null")
                      (("1" (typepred "h")
                        (("1" (replace -5)
                          (("1" (expand "length" -2)
                            (("1" (typepred "f")
                              (("1" (expand "length" -2)
                                (("1" (lift-if) (("1" (ground) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "full_matrix_eq" 4)
                        (("1" (case "NOT rows(f*g)=rows(h)")
                          (("1" (hide 5)
                            (("1" (rewrite "rows_mult")
                              (("1" (expand "rows") (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (case "NOT columns(f*g)=columns(h)")
                              (("1" (rewrite "columns_mult")
                                (("1" (typepred "g")
                                  (("1" (expand "g" 1)
                                    (("1" (expand "h" 1)
                                      (("1"
                                        (lemma "columns_form_matrix")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (lemma "columns_form_matrix")
                                                (("1"
                                                  (inst?)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert)
                                (("2" (skeep)
                                  (("2" (typepred "i")
                                    (("2" (typepred "j")
                                      (("2"
                                        (typepred "f*g")
                                        (("2"
                                          (inst - "i" "j")
                                          (("2"
                                            (hide (-1 -2 -3 -5))
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "*" +)
                                                (("2"
                                                  (rewrite "dot_eq_sigma")
                                                  (("2"
                                                    (case
                                                     "NOT columns(f*g)=n")
                                                    (("1"
                                                      (lemma "columns_mult")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replaces -1)
                                                            (("1"
                                                              (expand "g" 1)
                                                              (("1"
                                                                (lemma
                                                                 "columns_form_matrix")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "NOT rows(f*g) = k")
                                                      (("1"
                                                        (expand "rows" 1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred "f*g")
                                                            (("1"
                                                              (expand "rows")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred "h")
                                                        (("2"
                                                          (inst - "i" "j")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (expand
                                                               "row"
                                                               -3)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "entry"
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       "row"
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         "access"
                                                                         +
                                                                         3)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (replaces
                                                                                 -4)
                                                                                (("1"
                                                                                  (case
                                                                                   "NOT length(nth(f, i)) = m")
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "f")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "i")
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (case
                                                                                         "NOT length(col(g)(j))=m")
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "col_def")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "rows"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "min"
                                                                                             1
                                                                                             1)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "sigma_eq")
                                                                                              (("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "col_def")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "access"
                                                                                                           1
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (ground)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "n!1")
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -3)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (lift-if)
                                                                                                                        (("1"
                                                                                                                          (ground)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "access"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (lift-if)
                                                                                                                              (("1"
                                                                                                                                (ground)
                                                                                                                                (("1"
                                                                                                                                  (typepred
                                                                                                                                   "f")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "i"
                                                                                                                                     "n!1")
                                                                                                                                    (("1"
                                                                                                                                      (typepred
                                                                                                                                       "g")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "n!1"
                                                                                                                                         "j")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "row")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (expand
                                                                                                                                   "rows")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -3)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "f")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "i")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (typepred
                                                                                                                             "g")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "n!1")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "rows")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "h")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "i")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (typepred "h")
                            (("2" (inst-cp - "i")
                              (("2" (inst - "j") (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (Vector type-eq-decl nil matrices nil)
    (row const-decl "Vector" matrices nil)
    (form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" matrices
                 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (mult_null_left formula-decl nil matrices nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (rows_mult formula-decl nil matrices nil)
    (h skolem-const-decl "{M: MatrixMN(k, n) |
   FORALL (i_1: below(k), j_1: below(n)):
     nth(row(M)(i_1), j_1) =
      sigma(0, m - 1, LAMBDA (d: nat): F(i_1, d) * G(d, j_1))}" matrices nil)
    (columns_form_matrix formula-decl nil matrices nil)
    (g skolem-const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = G(i, j)}" matrices
     nil)
    (columns_mult formula-decl nil matrices nil)
    (dot_eq_sigma formula-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (k skolem-const-decl "nat" matrices nil)
    (m skolem-const-decl "nat" matrices nil)
    (F skolem-const-decl "[[nat, nat] -> real]" matrices nil)
    (f skolem-const-decl "{M: MatrixMN(k, m) |
   FORALL (i: below(k), j: below(m)): nth(row(M)(i), j) = F(i, j)}" matrices
     nil)
    (n skolem-const-decl "nat" matrices nil)
    (G skolem-const-decl "[[nat, nat] -> real]" matrices nil)
    (i skolem-const-decl "below(rows(f * g))" matrices nil)
    (j skolem-const-decl "below(columns(f * g))" matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sigma_eq formula-decl nil sigma reals)
    (subrange type-eq-decl nil integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (col_def formula-decl nil matrices nil)
    (access const-decl "real" matrices nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices nil)
    (col def-decl "VectorN(rows(M))" matrices nil)
    (VectorN type-eq-decl nil matrices nil) (* const-decl "real" matrices nil)
    (entry const-decl "real" matrices nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (rows const-decl "nat" matrices nil)
    (FullMatrix type-eq-decl nil matrices nil)
    (full_matrix_eq formula-decl nil matrices nil)
    (mult_full application-judgement "FullMatrix" matrices nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)
  (form_matrix_mult-1 nil 3613922357
   ("" (skeep)
    (("" (invoke (name "f" "%1") (! 1 1 1))
      (("" (replaces -1)
        (("" (invoke (name "g" "%1") (! 1 1 2))
          (("" (replaces -1)
            (("" (invoke (name "h" "%1") (! 1 2))
              (("1" (replaces -1)
                (("1" (case "f = null")
                  (("1" (replace -1)
                    (("1" (rewrite "mult_null_left")
                      (("1" (case "length(h)=0")
                        (("1" (grind) nil nil)
                         ("2" (hide 2)
                          (("2" (typepred "h")
                            (("2" (typepred "f")
                              (("2" (replace -9)
                                (("2" (rewrite "length_null")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "g = null")
                    (("1" (typepred "g")
                      (("1" (replace -5)
                        (("1" (expand "length" -2) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "h = null")
                      (("1" (typepred "h")
                        (("1" (replace -5)
                          (("1" (expand "length" -2)
                            (("1" (typepred "f")
                              (("1" (expand "length" -2)
                                (("1" (lift-if) (("1" (ground) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "full_matrix_eq" 4)
                        (("1" (case "NOT rows(f*g)=rows(h)")
                          (("1" (hide 5)
                            (("1" (rewrite "rows_mult")
                              (("1" (expand "rows") (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (case "NOT columns(f*g)=columns(h)")
                              (("1" (rewrite "columns_mult")
                                (("1" (typepred "g")
                                  (("1" (expand "g" 1)
                                    (("1" (expand "h" 1)
                                      (("1"
                                        (lemma "columns_form_matrix")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (lemma "columns_form_matrix")
                                                (("1"
                                                  (inst?)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert)
                                (("2" (skeep)
                                  (("2" (typepred "i")
                                    (("2" (typepred "j")
                                      (("2"
                                        (typepred "f*g")
                                        (("2"
                                          (inst - "i" "j")
                                          (("2"
                                            (hide (-1 -2 -3 -5))
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "*" +)
                                                (("2"
                                                  (rewrite "dot_eq_sigma")
                                                  (("2"
                                                    (case
                                                     "NOT columns(f*g)=n")
                                                    (("1"
                                                      (lemma "columns_mult")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replaces -1)
                                                            (("1"
                                                              (expand "g" 1)
                                                              (("1"
                                                                (lemma
                                                                 "columns_form_matrix")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "NOT rows(f*g) = k")
                                                      (("1"
                                                        (expand "rows" 1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred "f*g")
                                                            (("1"
                                                              (expand "rows")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred "h")
                                                        (("2"
                                                          (inst - "i" "j")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (expand
                                                               "row"
                                                               -3)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "entry"
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       "row"
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         "access"
                                                                         +
                                                                         3)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (replaces
                                                                                 -4)
                                                                                (("1"
                                                                                  (case
                                                                                   "NOT length(nth(f, i)) = m")
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "f")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "i")
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (case
                                                                                         "NOT length(col(g)(j))=m")
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "col_def")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "rows"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "min"
                                                                                             1
                                                                                             1)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "sigma_eq")
                                                                                              (("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "col_def")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "access"
                                                                                                           1
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (ground)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "n!1")
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -3)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (lift-if)
                                                                                                                        (("1"
                                                                                                                          (ground)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "access"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (lift-if)
                                                                                                                              (("1"
                                                                                                                                (ground)
                                                                                                                                (("1"
                                                                                                                                  (typepred
                                                                                                                                   "f")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "i"
                                                                                                                                     "n!1")
                                                                                                                                    (("1"
                                                                                                                                      (typepred
                                                                                                                                       "g")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "n!1"
                                                                                                                                         "j")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "row")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (expand
                                                                                                                                   "rows")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -3)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "f")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "i")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (typepred
                                                                                                                             "g")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "n!1")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "rows")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "h")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "i")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (typepred "h")
                            (("2" (inst-cp - "i")
                              (("2" (inst - "j") (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skosimp*)
                  (("2" (inst + "m+10") (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_eq formula-decl nil sigma reals)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals))
   shostak))
 (add_TCC7 0
  (add_TCC7-2 "" 3750628486
   ("" (skeep)
    (("" (skolem 1 ("ii" "jj"))
      (("" (invoke (name "FM" "%1") (! 1 1 0 1))
        (("" (typepred "FM")
          (("" (case "ii < max(rows(M),rows(N))")
            (("1" (case "jj < max(columns(M), columns(N))")
              (("1" (replace -7)
                (("1" (inst -6 "ii" "jj")
                  (("1" (replace -6 :dir rl)
                    (("1" (expand "entry" +)
                      (("1" (expand "row" +)
                        (("1" (expand "access" +)
                          (("1" (lift-if)
                            (("1" (ground)
                              (("1" (inst - "ii") (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -6)
                (("2" (expand "FM" +)
                  (("2" (rewrite "entry_form_matrix")
                    (("2" (assert)
                      (("2" (expand "entry" 2)
                        (("2" (expand "row" 2)
                          (("2" (expand "access" 2)
                            (("2" (lift-if)
                              (("2" (lift-if)
                                (("2" (lift-if)
                                  (("2" (lift-if)
                                    (("2" (lift-if)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (ground)
                                          (("1" (grind) nil nil)
                                           ("2" (grind) nil nil)
                                           ("3" (grind) nil nil)
                                           ("4"
                                            (typepred "columns(N)")
                                            (("4"
                                              (inst - "ii")
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("5" (grind) nil nil)
                                           ("6"
                                            (typepred "columns(M)")
                                            (("6"
                                              (inst - "ii")
                                              (("6" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("7"
                                            (typepred "columns(M)")
                                            (("7"
                                              (inst - "ii")
                                              (("7" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("8"
                                            (typepred "columns(M)")
                                            (("8"
                                              (inst - "ii")
                                              (("8" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("9" (grind) nil nil)
                                           ("10"
                                            (typepred "columns(N)")
                                            (("10"
                                              (inst - "ii")
                                              (("10" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "entry_form_matrix")
              (("2" (assert)
                (("2" (expand "entry" 2)
                  (("2" (expand "row" 2)
                    (("2" (expand "access" 2)
                      (("2" (lift-if)
                        (("2" (lift-if)
                          (("2" (lift-if)
                            (("2" (lift-if)
                              (("2" (lift-if)
                                (("2" (assert)
                                  (("2" (ground)
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil)
                                     ("3" (grind) nil nil)
                                     ("4" (grind) nil nil)
                                     ("5" (grind) nil nil)
                                     ("6" (grind) nil nil)
                                     ("7" (grind) nil nil)
                                     ("8" (grind) nil nil)
                                     ("9" (grind) nil nil)
                                     ("10" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (array2list_it def-decl
                   "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
                   array2list structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ii skolem-const-decl "nat" matrices nil)
    (M skolem-const-decl "Matrix" matrices nil)
    (N skolem-const-decl "Matrix" matrices nil)
    (jj skolem-const-decl "nat" matrices nil)
    (access const-decl "real" matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (FM skolem-const-decl
     "{M_1: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i_1: below(max(rows(M), rows(N))),
           j_1: below(max(columns(M), columns(N)))):
     nth(row(M_1)(i_1), j_1) = entry(M)(i_1, j_1) + entry(N)(i_1, j_1)}"
     matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (entry_form_matrix formula-decl nil matrices nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (rows const-decl "nat" matrices nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (entry const-decl "real" matrices nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" matrices
                 nil)
    (row const-decl "Vector" matrices nil)
    (Vector type-eq-decl nil matrices nil)
    (MatrixMN type-eq-decl nil matrices nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak
   (add subtype
        "matrices.form_matrix(LAMBDA (i, j: naturalnumbers.nat): (number_fields.+)(matrices.entry(matrices.M)(i, j), matrices.entry(matrices.N)(i, j)), real_defs.max(matrices.rows(matrices.M), matrices.rows(matrices.N)), real_defs.max(matrices.columns(matrices.M), matrices.columns(matrices.N)))"
        "{A: matrices.MatrixMN(real_defs.max(matrices.rows(matrices.M), matrices.rows(matrices.N)), real_defs.max(matrices.columns(matrices.M), matrices.columns(matrices.N))) | FORALL (i, j): matrices.entry(A)(matrices.i, matrices.j) = (number_fields.+)(matrices.entry(matrices.M)(matrices.i, matrices.j), matrices.entry(matrices.N)(matrices.i, matrices.j))}"))
  (add_TCC7-1 nil 3613752161
   ("" (skeep)
    (("" (skolem 1 ("ii" "jj"))
      (("" (invoke (name "FM" "%1") (! 1 1 0 1))
        (("" (typepred "FM")
          (("" (case "ii < max(rows(M),rows(N))")
            (("1" (case "jj < max(columns(M), columns(N))")
              (("1" (replace -7)
                (("1" (inst -6 "ii" "jj")
                  (("1" (replace -6 :dir rl)
                    (("1" (expand "entry" +)
                      (("1" (expand "row" +)
                        (("1" (expand "access" +)
                          (("1" (lift-if)
                            (("1" (ground)
                              (("1" (inst - "ii") (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -6)
                (("2" (expand "FM" +)
                  (("2" (rewrite "entry_form_matrix")
                    (("2" (assert)
                      (("2" (expand "entry" 2)
                        (("2" (expand "row" 2)
                          (("2" (expand "access" 2)
                            (("2" (lift-if)
                              (("2" (lift-if)
                                (("2" (lift-if)
                                  (("2" (lift-if)
                                    (("2" (lift-if)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (ground)
                                          (("1"
                                            (typepred "columns(N)")
                                            (("1"
                                              (inst - "ii")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "columns(M)")
                                            (("2"
                                              (inst - "ii")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (typepred "columns(M)")
                                            (("3"
                                              (inst - "ii")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (typepred "columns(M)")
                                            (("4"
                                              (inst - "ii")
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("5"
                                            (typepred "columns(N)")
                                            (("5"
                                              (inst - "ii")
                                              (("5" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "entry_form_matrix")
              (("2" (assert)
                (("2" (expand "entry" 2)
                  (("2" (expand "row" 2)
                    (("2" (expand "access" 2)
                      (("2" (lift-if)
                        (("2" (lift-if)
                          (("2" (lift-if)
                            (("2" (lift-if)
                              (("2" (lift-if)
                                (("2" (assert)
                                  (("2" (ground)
                                    (("1" (expand "rows")
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (expand "rows")
                                      (("2" (assert) nil nil)) nil)
                                     ("3" (expand "rows")
                                      (("3" (assert) nil nil)) nil)
                                     ("4" (expand "rows")
                                      (("4" (assert) nil nil)) nil)
                                     ("5" (expand "rows")
                                      (("5" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (array2list_it def-decl
                   "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
                   array2list structures))
   nil
   (add subtype
        "matrices.form_matrix(LAMBDA (i, j: naturalnumbers.nat): (number_fields.+)(matrices.entry(matrices.M)(i, j), matrices.entry(matrices.N)(i, j)), real_defs.max(matrices.rows(matrices.M), matrices.rows(matrices.N)), real_defs.max(matrices.columns(matrices.M), matrices.columns(matrices.N)))"
        "{A: matrices.MatrixMN(real_defs.max(matrices.rows(matrices.M), matrices.rows(matrices.N)), real_defs.max(matrices.columns(matrices.M), matrices.columns(matrices.N))) | FORALL (i, j): matrices.entry(A)(matrices.i, matrices.j) = (number_fields.+)(matrices.entry(matrices.M)(matrices.i, matrices.j), matrices.entry(matrices.N)(matrices.i, matrices.j))}")))
 (columns_add 0
  (columns_add-1 nil 3613826965
   ("" (skeep)
    (("" (assert)
      (("" (expand "+")
        (("" (expand "add")
          (("" (lemma "columns_form_matrix")
            (("" (inst?)
              (("" (assert)
                (("" (invoke (name "FM" "%1") (! 1 1 1))
                  (("" (replaces -1)
                    (("" (typepred "FM")
                      (("" (case "NOT (M = null and N = null)")
                        (("1" (hide-all-but (-5 1)) (("1" (grind) nil nil))
                          nil)
                         ("2" (flatten)
                          (("2" (replaces -1)
                            (("2" (replaces -1)
                              (("2" (replace -5)
                                (("2" (case "NOT FM = null")
                                  (("1" (assert)
                                    (("1" (hide-all-but (-2 1))
                                      (("1" (grind) nil nil)) nil))
                                    nil)
                                   ("2" (replaces -1)
                                    (("2" (expand "columns" +)
                                      (("2"
                                        (expand "max")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (add const-decl
         "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i: nat, j: nat):
     entry(A)(i, j) = entry(M)(i, j) + entry(N)(i, j)}" matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (Matrix type-eq-decl nil matrices nil)
    (rows const-decl "nat" matrices nil) (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (entry const-decl "real" matrices nil)
    (form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" matrices
                 nil)
    (row const-decl "Vector" matrices nil)
    (Vector type-eq-decl nil matrices nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (columns_form_matrix formula-decl nil matrices nil)
    (+ const-decl
       "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i, j): entry(A)(i, j) = entry(M)(i, j) + entry(N)(i, j)}" matrices
       nil))
   shostak))
 (rows_add 0
  (rows_add-1 nil 3613827142
   ("" (skeep)
    (("" (typepred "M+N") (("" (expand "rows") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((+ const-decl
       "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i, j): entry(A)(i, j) = entry(M)(i, j) + entry(N)(i, j)}" matrices
       nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (entry const-decl "real" matrices nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (rows const-decl "nat" matrices nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (matrix_add_assoc 0
  (matrix_add_assoc-1 nil 3613826875
   ("" (skeep)
    (("" (rewrite "full_matrix_eq")
      (("1" (splash +)
        (("1" (skeep)
          (("1" (typepred "i")
            (("1" (typepred "j")
              (("1" (typepred "(M+N)+A")
                (("1" (inst - "i" "j")
                  (("1" (replaces -4)
                    (("1" (typepred "M+N")
                      (("1" (inst - "i" "j")
                        (("1" (replaces -4)
                          (("1" (typepred "M+(N+A)")
                            (("1" (inst - "i" "j")
                              (("1" (replaces -4)
                                (("1" (typepred "N+A")
                                  (("1" (inst - "i" "j")
                                    (("1" (replaces -4)
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "columns_add")
          (("2" (rewrite "columns_add")
            (("2" (rewrite "columns_add")
              (("2" (rewrite "columns_add")
                (("2" (hide -) (("2" (grind :exclude "columns") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (rewrite "rows_add")
          (("3" (rewrite "rows_add")
            (("3" (rewrite "rows_add")
              (("3" (rewrite "rows_add")
                (("3" (grind :exclude "rows") nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skeep)
          (("2" (typepred "i")
            (("2" (typepred "j")
              (("2" (assert)
                (("2" (typepred "M+(N+A)")
                  (("2" (inst-cp - "i")
                    (("2" (inst - "j") (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (flatten)
        (("3" (typepred "(M+N)+A")
          (("3" (skeep)
            (("3" (inst-cp - "i")
              (("3" (inst-cp - "j") (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((full_matrix_eq formula-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (rows const-decl "nat" matrices nil) (<= const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (entry const-decl "real" matrices nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl
       "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i, j): entry(A)(i, j) = entry(M)(i, j) + entry(N)(i, j)}" matrices
       nil)
    (rows_add formula-decl nil matrices nil)
    (columns_add formula-decl nil matrices nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (matrix_add_comm 0
  (matrix_add_comm-1 nil 3620564502
   ("" (skeep)
    (("" (rewrite "full_matrix_eq")
      (("1" (splash +)
        (("1" (skeep)
          (("1" (typepred "i")
            (("1" (typepred "j")
              (("1" (typepred "M+N")
                (("1" (inst -4 "i" "j")
                  (("1" (replace -4)
                    (("1" (typepred "N+M")
                      (("1" (inst -4 "i" "j")
                        (("1" (replace -4) (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "columns_add")
          (("2" (rewrite "columns_add")
            (("2" (ground)
              (("2" (expand "max")
                (("2" (hide -) (("2" (grind :exclude "columns") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (rewrite "rows_add")
          (("3" (rewrite "rows_add") (("3" (grind :exclude "rows") nil nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skeep)
          (("2" (typepred "i")
            (("2" (typepred "j")
              (("2" (assert)
                (("2" (typepred "N+M")
                  (("2" (inst-cp - "i")
                    (("2" (inst - "j") (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (flatten)
        (("3" (typepred "M+N")
          (("3" (skeep)
            (("3" (inst-cp - "i")
              (("3" (inst-cp - "j") (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((full_matrix_eq formula-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (rows const-decl "nat" matrices nil) (<= const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (entry const-decl "real" matrices nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl
       "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i, j): entry(A)(i, j) = entry(M)(i, j) + entry(N)(i, j)}" matrices
       nil)
    (rows_add formula-decl nil matrices nil)
    (columns_add formula-decl nil matrices nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (scal_TCC4 0
  (scal_TCC4-2 "" 3750628723
   ("" (skeep)
    (("" (skosimp*)
      (("" (rewrite "entry_form_matrix")
        (("" (assert)
          (("" (lift-if)
            (("" (ground)
              (("1" (expand "entry")
                (("1" (expand "rows")
                  (("1" (expand "row")
                    (("1" (expand "access")
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (ground)
                            (("1" (expand "length") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "entry")
                (("2" (expand "row")
                  (("2" (expand "access")
                    (("2" (lift-if)
                      (("2" (ground)
                        (("1" (expand "length" -1) (("1" (assert) nil nil))
                          nil)
                         ("2" (typepred "columns(M)")
                          (("2" (inst - "i!1") (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((access const-decl "real" matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (row const-decl "Vector" matrices nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (rows const-decl "nat" matrices nil)
    (entry const-decl "real" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (entry_form_matrix formula-decl nil matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak
   (scal subtype
         "matrices.form_matrix(LAMBDA (i, j: naturalnumbers.nat): number_fields.*(matrices.r, matrices.entry(matrices.M)(i, j)), matrices.rows(matrices.M), matrices.columns(matrices.M))"
         "{A: matrices.MatrixMN(matrices.rows(matrices.M), matrices.columns(matrices.M)) | FORALL (i, j): matrices.entry(A)(matrices.i, matrices.j) = number_fields.*(matrices.r, matrices.entry(matrices.M)(matrices.i, matrices.j))}"))
  (scal_TCC4-1 nil 3613832279
   ("" (skeep)
    (("" (skosimp*)
      (("" (rewrite "entry_form_matrix")
        (("" (assert)
          (("" (lift-if)
            (("" (ground)
              (("1" (expand "entry")
                (("1" (expand "rows")
                  (("1" (expand "row")
                    (("1" (expand "access")
                      (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "entry")
                (("2" (expand "row")
                  (("2" (expand "access")
                    (("2" (lift-if)
                      (("2" (ground)
                        (("2" (typepred "columns(M)")
                          (("2" (inst - "i!1") (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (scal subtype
         "matrices.form_matrix(LAMBDA (i, j: naturalnumbers.nat): number_fields.*(matrices.r, matrices.entry(matrices.M)(i, j)), matrices.rows(matrices.M), matrices.columns(matrices.M))"
         "{A: matrices.MatrixMN(matrices.rows(matrices.M), matrices.columns(matrices.M)) | FORALL (i, j): matrices.entry(A)(matrices.i, matrices.j) = number_fields.*(matrices.r, matrices.entry(matrices.M)(matrices.i, matrices.j))}")))
 (columns_scal 0
  (columns_scal-1 nil 3613832453
   ("" (skeep)
    (("" (expand "*")
      (("" (expand "scal")
        (("" (lemma "columns_form_matrix")
          (("" (inst?)
            (("" (ground)
              (("" (copy -1)
                (("" (expand "rows" -1)
                  (("" (replace -2)
                    (("" (assert)
                      (("" (expand "form_matrix")
                        (("" (expand "array2list" + 1)
                          (("" (expand "array2list_it")
                            (("" (case "M = null")
                              (("1" (assert) nil nil)
                               ("2" (assert)
                                (("2" (expand "length" -1)
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "{A: MatrixMN(rows(M), columns(M)) |
   FORALL (i, j): entry(A)(i, j) = r * entry(M)(i, j)}" matrices nil)
    (columns_form_matrix formula-decl nil matrices nil)
    (array2list const-decl
                "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
                array2list structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (array2list_it def-decl
                   "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
                   array2list structures)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" matrices
                 nil)
    (entry const-decl "real" matrices nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (rows const-decl "nat" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (scal const-decl "{A: MatrixMN(rows(M), columns(M)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = r * entry(M)(i, j)}" matrices
          nil))
   shostak))
 (rows_scal 0
  (rows_scal-1 nil 3613832556
   ("" (skeep)
    (("" (expand "*")
      (("" (expand "scal") (("" (rewrite "rows_form_matrix") nil nil)) nil))
      nil))
    nil)
   ((* const-decl "{A: MatrixMN(rows(M), columns(M)) |
   FORALL (i, j): entry(A)(i, j) = r * entry(M)(i, j)}" matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rows_form_matrix formula-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (rows const-decl "nat" matrices nil) (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (entry const-decl "real" matrices nil)
    (scal const-decl "{A: MatrixMN(rows(M), columns(M)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = r * entry(M)(i, j)}" matrices
          nil))
   shostak))
 (sub_TCC2 0
  (sub_TCC2-1 nil 3613832702
   ("" (skeep)
    (("" (split)
      (("1" (lemma "rows_add")
        (("1" (expand "rows" -1 1)
          (("1" (rewrite -1)
            (("1" (hide -1) (("1" (rewrite "rows_scal") nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (lemma "columns_add")
          (("2" (inst - "M" "(-1)*N")
            (("2" (typepred "M+(-1)*N")
              (("2" (inst - "i")
                (("2" (replace -3) (("2" (rewrite "columns_scal" 1) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (typepred "M+(-1)*N")
          (("3" (inst - "i" "j")
            (("3" (replaces -4)
              (("3" (typepred "(-1)*N")
                (("3" (inst - "i" "j") (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rows const-decl "nat" matrices nil)
    (rows_scal formula-decl nil matrices nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(M)) |
   FORALL (i, j): entry(A)(i, j) = r * entry(M)(i, j)}" matrices nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (entry const-decl "real" matrices nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (rows_add formula-decl nil matrices nil)
    (columns_add formula-decl nil matrices nil)
    (+ const-decl
       "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i, j): entry(A)(i, j) = entry(M)(i, j) + entry(N)(i, j)}" matrices
       nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (columns_scal formula-decl nil matrices nil)
    (TRUE const-decl "bool" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil
   (sub subtype
        "(matrices.+)(matrices.M, matrices.*(((number_fields.-)(1)), matrices.N))"
        "{A: matrices.MatrixMN(real_defs.max(matrices.rows(matrices.M), matrices.rows(matrices.N)), real_defs.max(matrices.columns(matrices.M), matrices.columns(matrices.N))) | FORALL (i, j): matrices.entry(A)(matrices.i, matrices.j) = (number_fields.-)(matrices.entry(matrices.M)(matrices.i, matrices.j), matrices.entry(matrices.N)(matrices.i, matrices.j))}")))
 (rows_sub 0
  (rows_sub-1 nil 3613833017
   ("" (skeep)
    (("" (expand "-")
      (("" (expand "sub")
        (("" (rewrite "rows_add") (("" (rewrite "rows_scal") nil nil)) nil))
        nil))
      nil))
    nil)
   ((- const-decl
       "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i, j): entry(A)(i, j) = entry(M)(i, j) - entry(N)(i, j)}" matrices
       nil)
    (rows_add formula-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (rows const-decl "nat" matrices nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (entry const-decl "real" matrices nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(M)) |
   FORALL (i, j): entry(A)(i, j) = r * entry(M)(i, j)}" matrices nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (rows_scal formula-decl nil matrices nil)
    (sub const-decl
         "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i, j): entry(A)(i, j) = entry(M)(i, j) - entry(N)(i, j)}" matrices
         nil))
   shostak))
 (columns_sub 0
  (columns_sub-1 nil 3613833098
   ("" (skeep)
    (("" (expand "-")
      (("" (expand "sub")
        (("" (rewrite "columns_add") (("" (rewrite "columns_scal") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl
       "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i, j): entry(A)(i, j) = entry(M)(i, j) - entry(N)(i, j)}" matrices
       nil)
    (columns_add formula-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (rows const-decl "nat" matrices nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (entry const-decl "real" matrices nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(M)) |
   FORALL (i, j): entry(A)(i, j) = r * entry(M)(i, j)}" matrices nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (columns_scal formula-decl nil matrices nil)
    (sub const-decl
         "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i, j): entry(A)(i, j) = entry(M)(i, j) - entry(N)(i, j)}" matrices
         nil))
   shostak))
 (matrix_sub_test 0
  (matrix_sub_test-1 nil 3613833337 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (Id_TCC1 0
  (Id_TCC1-1 nil 3615032398
   ("" (skeep)
    ((""
      (name "IV" "form_matrix(LAMBDA (i, j: nat): IF i = j THEN 1 ELSE 0 ENDIF,
                                                      pm, pm)")
      (("" (replace -1)
        (("" (split)
          (("1" (flatten)
            (("1" (skosimp*)
              (("1" (typepred "IV")
                (("1" (inst-cp - "i!1")
                  (("1" (inst - "j!1") (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand "rows") (("2" (assert) nil nil)) nil)
           ("3" (lemma "columns_form_matrix")
            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil)
           ("4" (lemma "rows_form_matrix")
            (("4" (inst?)
              (("4" (lemma "columns_form_matrix")
                (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("5" (expand "rows") (("5" (assert) nil nil)) nil)
           ("6" (skosimp*)
            (("6" (expand "IV" 1)
              (("6" (rewrite "entry_form_matrix")
                (("6" (lift-if)
                  (("6" (lift-if)
                    (("6" (lift-if)
                      (("6" (lift-if)
                        (("6" (assert) (("6" (ground) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("7" (name "P" "LAMBDA (M:Matrix): IV*M=M")
            (("7" (lemma "matrix_reduce_prop")
              (("7" (skeep)
                (("7" (inst - "pm" "pn" "P")
                  (("7" (split -)
                    (("1" (inst - "N")
                      (("1" (assert)
                        (("1" (expand "P" -1) (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (skeep)
                        (("2" (expand "P")
                          (("2" (expand "IV")
                            (("2"
                              (name "H"
                                    "LAMBDA (i, j: nat): IF i = j THEN 1 ELSE 0 ENDIF")
                              (("2" (replaces -1)
                                (("2" (rewrite "form_matrix_mult")
                                  (("2" (assert)
                                    (("2" (rewrite "form_matrix_eq")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (lemma "sigma_eq_one_arg")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (inst - "i!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split -)
                                                      (("1"
                                                        (expand "H" -1 2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 4)
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (expand "H" 1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide 4)
                                                        (("3"
                                                          (skosimp*)
                                                          (("3"
                                                            (expand "H" 1)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("8" (name "P" "LAMBDA (M:Matrix): M*IV=M")
            (("8" (lemma "matrix_reduce_prop")
              (("8" (skeep)
                (("8" (inst - "pn" "pm" "P")
                  (("8" (split -1)
                    (("1" (inst - "N")
                      (("1" (expand "P" -1) (("1" (propax) nil nil)) nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (skeep)
                        (("2" (expand "P")
                          (("2" (expand "IV")
                            (("2"
                              (name "H"
                                    "LAMBDA (i, j: nat): IF i = j THEN 1 ELSE 0 ENDIF")
                              (("2" (replaces -1)
                                (("2" (rewrite "form_matrix_mult")
                                  (("2" (assert)
                                    (("2" (rewrite "form_matrix_eq")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (lemma "sigma_eq_one_arg")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (inst - "j!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split -)
                                                      (("1"
                                                        (expand "H" -1 2)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 4)
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (expand "H" 1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        (("3"
                                                          (hide 4)
                                                          (("3"
                                                            (skosimp*)
                                                            (("3"
                                                              (expand "H" 1)
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" matrices
                 nil)
    (row const-decl "Vector" matrices nil)
    (Vector type-eq-decl nil matrices nil)
    (MatrixMN type-eq-decl nil matrices nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rows const-decl "nat" matrices nil)
    (columns_form_matrix formula-decl nil matrices nil)
    (rows_form_matrix formula-decl nil matrices nil)
    (IV skolem-const-decl "{M: MatrixMN(pm, pm) |
   FORALL (i_1: below(pm), j_1: below(pm)):
     nth(row(M)(i_1), j_1) = IF i_1 = j_1 THEN 1 ELSE 0 ENDIF}" matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (entry_form_matrix formula-decl nil matrices nil)
    (matrix_reduce_prop formula-decl nil matrices nil)
    (form_matrix_mult formula-decl nil matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (form_matrix_eq formula-decl nil matrices nil)
    (sigma_eq_one_arg formula-decl nil sigma reals)
    (H skolem-const-decl "[[nat, nat] -> nonneg_int]" matrices nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (TRUE const-decl "bool" booleans nil)
    (P skolem-const-decl "[Matrix -> boolean]" matrices nil)
    (mult_full application-judgement "FullMatrix" matrices nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (entry const-decl "real" matrices nil) (* const-decl "real" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (col def-decl "VectorN(rows(M))" matrices nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices nil)
    (H skolem-const-decl "[[nat, nat] -> nonneg_int]" matrices nil)
    (P skolem-const-decl "[Matrix -> boolean]" matrices nil))
   nil
   (Id subtype
    "matrices.form_matrix(LAMBDA (i, j: naturalnumbers.nat): IF i = j THEN 1 ELSE 0 ENDIF, matrices.pm, matrices.pm)"
    "{M: matrices.SquareMatrix(matrices.pm) | booleans.AND(FORALL (i, j): matrices.entry(M)(matrices.i, matrices.j) = IF booleans.AND(reals.<(matrices.i, matrices.pm), matrices.i = matrices.j) THEN 1 ELSE 0 ENDIF, booleans.AND(FORALL (pn: integers.posnat, N: matrices.MatrixMN(matrices.pm, matrices.pn)): matrices.*(M, N) = N, FORALL (pn: integers.posnat, N: matrices.MatrixMN(matrices.pn, matrices.pm)): matrices.*(N, M) = N))}")))
 (mult_Id_left 0
  (mult_Id_left-1 nil 3615032862
   ("" (skeep)
    (("" (typepred "Id(pm)")
      (("" (inst -8 "columns(D1)" "D1")
        (("" (assert)
          (("" (split 1)
            (("1" (expand "rows") (("1" (propax) nil nil)) nil)
             ("2" (skosimp*)
              (("2" (typepred "D1")
                (("2" (split -2)
                  (("1" (expand "rows")
                    (("1" (expand "length") (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (typepred "columns(D1)")
                    (("2" (assert)
                      (("2" (skosimp*)
                        (("2" (inst - "i!2" "i!1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Id const-decl "{M: SquareMatrix(pm) |
   (FORALL (i: nat, j: nat):
      entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF)
    AND
    (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND
     (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}" matrices nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices nil)
    (col def-decl "VectorN(rows(M))" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (row const-decl "Vector" matrices nil) (* const-decl "real" matrices nil)
    (Vector type-eq-decl nil matrices nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (entry const-decl "real" matrices nil)
    (SquareMatrix type-eq-decl nil matrices nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (Square type-eq-decl nil matrices nil)
    (PosFullMatrix type-eq-decl nil matrices nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (<= const-decl "bool" reals nil) (rows const-decl "nat" matrices nil)
    (> const-decl "bool" reals nil) (FullMatrix type-eq-decl nil matrices nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (mult_full application-judgement "FullMatrix" matrices nil)
    (pm skolem-const-decl "posnat" matrices nil)
    (D1 skolem-const-decl "PosFullMatrix" matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (mult_Id_right 0
  (mult_Id_right-1 nil 3615032980
   ("" (skeep)
    (("" (typepred "Id(pm)")
      (("" (inst -9 "rows(D1)" "D1")
        (("" (assert)
          (("" (split 1)
            (("1" (expand "rows") (("1" (propax) nil nil)) nil)
             ("2" (skosimp*)
              (("2" (typepred "D1")
                (("2" (split -2)
                  (("1" (expand "rows")
                    (("1" (expand "length") (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (typepred "columns(D1)")
                    (("2" (assert)
                      (("2" (skosimp*)
                        (("2" (inst - "i!2" "i!1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Id const-decl "{M: SquareMatrix(pm) |
   (FORALL (i: nat, j: nat):
      entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF)
    AND
    (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND
     (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}" matrices nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices nil)
    (col def-decl "VectorN(rows(M))" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (row const-decl "Vector" matrices nil) (* const-decl "real" matrices nil)
    (Vector type-eq-decl nil matrices nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (entry const-decl "real" matrices nil)
    (SquareMatrix type-eq-decl nil matrices nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (Square type-eq-decl nil matrices nil)
    (PosFullMatrix type-eq-decl nil matrices nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (<= const-decl "bool" reals nil) (rows const-decl "nat" matrices nil)
    (> const-decl "bool" reals nil) (FullMatrix type-eq-decl nil matrices nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (mult_full application-judgement "FullMatrix" matrices nil)
    (pm skolem-const-decl "posnat" matrices nil)
    (D1 skolem-const-decl "PosFullMatrix" matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (rows_Id 0
  (rows_Id-1 nil 3615035586
   ("" (skeep)
    (("" (expand "Id") (("" (rewrite "rows_form_matrix") nil nil)) nil)) nil)
   ((Id const-decl "{M: SquareMatrix(pm) |
   (FORALL (i: nat, j: nat):
      entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF)
    AND
    (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND
     (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rows_form_matrix formula-decl nil matrices nil))
   shostak))
 (columns_Id 0
  (columns_Id-1 nil 3615035599
   ("" (skeep)
    (("" (expand "Id")
      (("" (lemma "columns_form_matrix")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((Id const-decl "{M: SquareMatrix(pm) |
   (FORALL (i: nat, j: nat):
      entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF)
    AND
    (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND
     (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}" matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (columns_form_matrix formula-decl nil matrices nil))
   shostak))
 (entry_Id 0
  (entry_Id-1 nil 3615047182
   ("" (skeep)
    (("" (expand "Id")
      (("" (rewrite "entry_form_matrix")
        (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((Id const-decl "{M: SquareMatrix(pm) |
   (FORALL (i: nat, j: nat):
      entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF)
    AND
    (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND
     (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}" matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (entry_form_matrix formula-decl nil matrices nil))
   shostak))
 (transpose_TCC1 0
  (transpose_TCC1-1 nil 3614001715
   ("" (skeep)
    ((""
      (name "FM" "form_matrix(LAMBDA (i, j: nat): entry(PFM)(j, i),
                            columns(PFM), rows(PFM))")
      (("" (replaces -1)
        (("" (split)
          (("1" (flatten)
            (("1" (assert)
              (("1" (skosimp*)
                (("1" (typepred "FM")
                  (("1" (inst-cp - "i!1")
                    (("1" (inst - "j!1") (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "FM")
            (("2" (rewrite "rows_form_matrix") (("2" (assert) nil nil)) nil))
            nil)
           ("3" (expand "FM")
            (("3" (lemma "columns_form_matrix")
              (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PosFullMatrix type-eq-decl nil matrices nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (<= const-decl "bool" reals nil) (rows const-decl "nat" matrices nil)
    (> const-decl "bool" reals nil) (FullMatrix type-eq-decl nil matrices nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (entry const-decl "real" matrices nil)
    (form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" matrices
                 nil)
    (row const-decl "Vector" matrices nil)
    (Vector type-eq-decl nil matrices nil)
    (MatrixMN type-eq-decl nil matrices nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rows_form_matrix formula-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (FM skolem-const-decl "{M: MatrixMN(columns(PFM), rows(PFM)) |
   FORALL (i_1: below(columns(PFM)), j_1: below(rows(PFM))):
     nth(row(M)(i_1), j_1) = entry(PFM)(j_1, i_1)}" matrices nil)
    (columns_form_matrix formula-decl nil matrices nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (transpose subtype
    "matrices.form_matrix(LAMBDA (i, j: naturalnumbers.nat): matrices.entry(matrices.PFM)(j, i), matrices.columns(matrices.PFM), matrices.rows(matrices.PFM))"
    "PosFullMatrix")))
 (rows_transpose 0
  (rows_transpose-1 nil 3614001716
   ("" (skeep)
    (("" (expand "transpose") (("" (rewrite "rows_form_matrix") nil nil))
      nil))
    nil)
   ((transpose const-decl "PosFullMatrix" matrices nil)
    (entry const-decl "real" matrices nil)
    (PosFullMatrix type-eq-decl nil matrices nil)
    (rows const-decl "nat" matrices nil) (> const-decl "bool" reals nil)
    (FullMatrix type-eq-decl nil matrices nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rows_form_matrix formula-decl nil matrices nil))
   shostak))
 (columns_transpose 0
  (columns_transpose-1 nil 3614001728
   ("" (skeep)
    (("" (expand "transpose")
      (("" (lemma "columns_form_matrix")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((transpose const-decl "PosFullMatrix" matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (FullMatrix type-eq-decl nil matrices nil) (> const-decl "bool" reals nil)
    (rows const-decl "nat" matrices nil)
    (PosFullMatrix type-eq-decl nil matrices nil)
    (entry const-decl "real" matrices nil)
    (columns_form_matrix formula-decl nil matrices nil))
   shostak))
 (entry_transpose 0
  (entry_transpose-2 "" 3750628841
   ("" (skeep)
    (("" (expand "transpose")
      (("" (rewrite "entry_form_matrix")
        (("" (lift-if)
          (("" (ground)
            (("1" (expand "entry")
              (("1" (expand "row")
                (("1" (expand "access")
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (ground)
                        (("1" (expand "length" -1) (("1" (assert) nil nil))
                          nil)
                         ("2" (typepred "columns(PFM)")
                          (("2" (assert)
                            (("2" (inst - "j") (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "rows")
              (("2" (expand "entry")
                (("2" (expand "access")
                  (("2" (expand "row")
                    (("2" (lift-if)
                      (("2" (lift-if)
                        (("2" (lift-if)
                          (("2" (ground)
                            (("2" (expand "length" -1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transpose const-decl "PosFullMatrix" matrices nil)
    (access const-decl "real" matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (row const-decl "Vector" matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (PosFullMatrix type-eq-decl nil matrices nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (<= const-decl "bool" reals nil) (rows const-decl "nat" matrices nil)
    (> const-decl "bool" reals nil) (FullMatrix type-eq-decl nil matrices nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (entry const-decl "real" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (entry_form_matrix formula-decl nil matrices nil))
   shostak)
  (entry_transpose-1 nil 3614002234
   ("" (skeep)
    (("" (expand "transpose")
      (("" (rewrite "entry_form_matrix")
        (("" (lift-if)
          (("" (ground)
            (("1" (expand "entry")
              (("1" (expand "row")
                (("1" (expand "access")
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (ground)
                        (("1" (typepred "columns(PFM)")
                          (("1" (assert)
                            (("1" (inst - "j") (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "rows")
              (("2" (expand "entry")
                (("2" (expand "access")
                  (("2" (expand "row")
                    (("2" (lift-if)
                      (("2" (lift-if)
                        (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (transpose_transpose 0
  (transpose_transpose-1 nil 3614002174
   ("" (skeep)
    (("" (rewrite "full_matrix_eq")
      (("" (split)
        (("1" (rewrite "rows_transpose")
          (("1" (rewrite "columns_transpose") nil nil)) nil)
         ("2" (rewrite "columns_transpose")
          (("2" (rewrite "rows_transpose") nil nil)) nil)
         ("3" (skosimp*)
          (("3" (rewrite "entry_transpose")
            (("3" (rewrite "entry_transpose") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((full_matrix_eq formula-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices nil) (> const-decl "bool" reals nil)
    (rows const-decl "nat" matrices nil) (<= const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (PosFullMatrix type-eq-decl nil matrices nil)
    (transpose const-decl "PosFullMatrix" matrices nil)
    (entry_transpose formula-decl nil matrices nil)
    (rows_transpose formula-decl nil matrices nil)
    (columns_transpose formula-decl nil matrices nil))
   shostak))
 (transpose_mult_TCC1 0
  (transpose_mult_TCC1-1 nil 3614002421
   ("" (skeep)
    (("" (split)
      (("1" (rewrite "rows_mult") (("1" (assert) nil nil)) nil)
       ("2" (lemma "columns_mult")
        (("2" (inst?)
          (("2" (assert)
            (("2" (typepred "D1")
              (("2" (expand "rows")
                (("2" (expand "length") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (PosFullMatrix type-eq-decl nil matrices nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (<= const-decl "bool" reals nil) (rows const-decl "nat" matrices nil)
    (> const-decl "bool" reals nil) (FullMatrix type-eq-decl nil matrices nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (rows_mult formula-decl nil matrices nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mult_full application-judgement "FullMatrix" matrices nil)
    (columns_mult formula-decl nil matrices nil))
   nil
   (transpose_mult subtype "matrices.*(matrices.D1, matrices.D2)"
    "PosFullMatrix")))
 (transpose_mult 0
  (transpose_mult-2 "" 3750629093
   ("" (skeep)
    (("" (expand "transpose")
      (("" (replace -1)
        (("" (rewrite "form_matrix_mult")
          (("" (lemma "columns_mult")
            (("" (inst?)
              (("" (assert)
                (("" (split -)
                  (("1" (replace -1)
                    (("1" (rewrite "rows_mult")
                      (("1" (rewrite "form_matrix_eq")
                        (("1" (skosimp*)
                          (("1" (assert)
                            (("1" (expand "*" + 1)
                              (("1" (expand "mult" 1)
                                (("1" (rewrite "entry_form_matrix")
                                  (("1" (rewrite "dot_eq_sigma" 1)
                                    (("1" (rewrite "length_row")
                                      (("1"
                                        (rewrite "length_col")
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (expand "min" 1)
                                            (("1"
                                              (rewrite "sigma_eq")
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (lemma "col_def")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand "access")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (rewrite -2)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (expand
                                                                       "entry")
                                                                      (("1"
                                                                        (expand
                                                                         "row")
                                                                        (("1"
                                                                          (expand
                                                                           "access")
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (ground)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   -3)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (typepred
                                                                                                   "columns(D1)")
                                                                                                  (("4"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j!1")
                                                                                                    (("4"
                                                                                                      (assert)
                                                                                                      (("4"
                                                                                                        (expand
                                                                                                         "rows")
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "length_row")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "D2"
                                                                         "n!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "row"
                                                                             -1)
                                                                            (("2"
                                                                              (ground)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "length_row")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "rows")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "n!1")
                                                                (("2"
                                                                  (rewrite
                                                                   "length_row"
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "rows")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "rows")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "D1")
                    (("2" (expand "rows" -3)
                      (("2" (expand "length" -3) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transpose const-decl "PosFullMatrix" matrices nil)
    (form_matrix_mult formula-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (entry const-decl "real" matrices nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices nil) (> const-decl "bool" reals nil)
    (rows const-decl "nat" matrices nil) (<= const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (PosFullMatrix type-eq-decl nil matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_full application-judgement "FullMatrix" matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rows_mult formula-decl nil matrices nil)
    (dot def-decl "real" matrices nil)
    (entry_form_matrix formula-decl nil matrices nil)
    (length_row formula-decl nil matrices nil)
    (access const-decl "real" matrices nil)
    (sigma_eq formula-decl nil sigma reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (col_def formula-decl nil matrices nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (length_col formula-decl nil matrices nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (dot_eq_sigma formula-decl nil matrices nil)
    (mult const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices nil)
    (col def-decl "VectorN(rows(M))" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (row const-decl "Vector" matrices nil) (* const-decl "real" matrices nil)
    (Vector type-eq-decl nil matrices nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (form_matrix_eq formula-decl nil matrices nil)
    (columns_mult formula-decl nil matrices nil))
   shostak)
  (transpose_mult-1 nil 3614002422
   ("" (skeep)
    (("" (expand "transpose")
      (("" (replace -1)
        (("" (rewrite "form_matrix_mult")
          (("" (lemma "columns_mult")
            (("" (inst?)
              (("" (assert)
                (("" (split -)
                  (("1" (replace -1)
                    (("1" (rewrite "rows_mult")
                      (("1" (rewrite "form_matrix_eq")
                        (("1" (skosimp*)
                          (("1" (assert)
                            (("1" (expand "*" + 1)
                              (("1" (expand "mult" 1)
                                (("1" (rewrite "entry_form_matrix")
                                  (("1" (rewrite "dot_eq_sigma" 1)
                                    (("1" (rewrite "length_row")
                                      (("1"
                                        (rewrite "length_col")
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (expand "min" 1)
                                            (("1"
                                              (rewrite "sigma_eq")
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (lemma "col_def")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand "access")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (rewrite -2)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (expand
                                                                       "entry")
                                                                      (("1"
                                                                        (expand
                                                                         "row")
                                                                        (("1"
                                                                          (expand
                                                                           "access")
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (ground)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "columns(D1)")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j!1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "rows")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "length_row")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "D2"
                                                                         "n!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "row"
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (ground)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "length_row")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "rows")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "n!1")
                                                                (("2"
                                                                  (rewrite
                                                                   "length_row"
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "rows")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "rows")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "D1")
                    (("2" (expand "rows" -3)
                      (("2" (expand "length" -3) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_eq formula-decl nil sigma reals)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals))
   shostak))
 (form_matrix_square 0
  (form_matrix_square-1 nil 3615720732
   ("" (skeep)
    (("" (name "FM" "form_matrix(F,i,j)")
      (("" (replace -1)
        (("" (assert)
          (("" (typepred "FM")
            (("" (skosimp*)
              (("" (inst-cp - "i!1")
                (("" (inst - "j!1") (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" matrices
                 nil)
    (row const-decl "Vector" matrices nil)
    (Vector type-eq-decl nil matrices nil)
    (MatrixMN type-eq-decl nil matrices nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (form_matrix_square subtype
    "matrices.form_matrix(matrices.F, matrices.i, matrices.j)" "FullMatrix")))
 (transpose_Id 0
  (transpose_Id-1 nil 3615827109
   ("" (skeep)
    (("" (rewrite "full_matrix_eq")
      (("" (split)
        (("1" (rewrite "rows_transpose") (("1" (assert) nil nil)) nil)
         ("2" (rewrite "columns_transpose") (("2" (assert) nil nil)) nil)
         ("3" (skosimp*)
          (("3" (rewrite "entry_transpose")
            (("3" (rewrite "entry_Id")
              (("3" (rewrite "entry_Id")
                (("3" (lift-if)
                  (("3" (lift-if)
                    (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((full_matrix_eq formula-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices nil) (> const-decl "bool" reals nil)
    (rows const-decl "nat" matrices nil) (<= const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (PosFullMatrix type-eq-decl nil matrices nil)
    (transpose const-decl "PosFullMatrix" matrices nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Square type-eq-decl nil matrices nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (SquareMatrix type-eq-decl nil matrices nil)
    (entry const-decl "real" matrices nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (Vector type-eq-decl nil matrices nil) (* const-decl "real" matrices nil)
    (row const-decl "Vector" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (col def-decl "VectorN(rows(M))" matrices nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices nil)
    (Id const-decl "{M: SquareMatrix(pm) |
   (FORALL (i: nat, j: nat):
      entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF)
    AND
    (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND
     (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}" matrices nil)
    (entry_Id formula-decl nil matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (entry_transpose formula-decl nil matrices nil)
    (columns_transpose formula-decl nil matrices nil)
    (rows_transpose formula-decl nil matrices nil))
   nil))
 (vect2matrix_TCC1 0
  (vect2matrix_TCC1-1 nil 3621252845
   ("" (skeep)
    (("" (rewrite "rows_form_matrix")
      (("" (lemma "columns_form_matrix")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((rows_form_matrix formula-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (Vector type-eq-decl nil matrices nil) (> const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (access const-decl "real" matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (form_matrix_square application-judgement "FullMatrix" matrices nil)
    (columns_form_matrix formula-decl nil matrices nil))
   nil
   (vect2matrix subtype
    "matrices.form_matrix(LAMBDA (i, j): IF matrices.i = 0 THEN matrices.access(matrices.v)(matrices.j) ELSE 0 ENDIF, 1, list_props[real].length(matrices.v))"
    "{PFM | booleans.AND(matrices.rows(matrices.PFM) = 1, matrices.columns(matrices.PFM) = list_props[real].length(matrices.v))}")))
 (vect2matrix_eq 0
  (vect2matrix_eq-1 nil 3621260785
   ("" (skeep)
    (("" (lemma "list_extensionality[real]")
      (("" (inst?)
        (("" (assert)
          (("" (skosimp*)
            (("" (both-sides-f -3 "entry")
              (("" (decompose-equality -1)
                (("" (inst - "(0,n!1)")
                  (("" (expand "vect2matrix")
                    (("" (rewrite "entry_form_matrix")
                      (("" (rewrite "entry_form_matrix")
                        (("" (expand "access") (("" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices nil)
    (entry const-decl "real" matrices nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices nil)
    (rows const-decl "nat" matrices nil) (<= const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices nil)
    (PosFullMatrix type-eq-decl nil matrices nil)
    (vect2matrix const-decl
     "{PFM | rows(PFM) = 1 AND columns(PFM) = length(v)}" matrices nil)
    (access const-decl "real" matrices nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (entry_form_matrix formula-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Vector type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak)))


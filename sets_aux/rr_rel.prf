(rr_rel
 (g_conistent_with_RR 0
  (g_conistent_with_RR-1 nil 3571750987
   ("" (skolem!)
    (("" (prop)
      (("" (expand "RR")
        (("" (prop)
          (("" (expand "rel_extension")
            (("" (prop)
              (("1" (typepred "le_T!1")
                (("1" (expand "equivalence?")
                  (("1" (prop)
                    (("1" (expand "reflexive?") (("1" (inst?) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "le_T!1")
                (("2" (expand "equivalence?")
                  (("2" (prop)
                    (("2" (expand "symmetric?")
                      (("2" (inst?) (("2" (prop) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (typepred "le_T!1")
                (("3" (expand "equivalence?")
                  (("3" (prop)
                    (("3" (expand "reflexive?") (("3" (inst?) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("4" (typepred "le_U!1")
                (("4" (expand "equivalence?")
                  (("4" (prop)
                    (("4" (expand "reflexive?") (("4" (inst?) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (U formal-nonempty-type-decl nil rr_rel nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil rr_rel nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equivalence type-eq-decl nil relations nil)
    (symmetric? const-decl "bool" relations nil)
    (rel_extension const-decl "set[[[T, U], [T, U]]]" relation_extension nil)
    (RR const-decl "set[[T, U]]" rr_rel nil))
   shostak))
 (f_conistent_with_RR 0
  (f_conistent_with_RR-1 nil 3572336662
   ("" (skolem!)
    (("" (prop)
      (("" (expand "RR")
        (("" (expand "rel_extension")
          (("" (prop)
            (("1" (typepred "le_T!1")
              (("1" (expand "equivalence?")
                (("1" (prop)
                  (("1" (expand "reflexive?") (("1" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "le_U!1")
              (("2" (expand "equivalence?")
                (("2" (prop)
                  (("2" (expand "symmetric?")
                    (("2" (inst?) (("2" (prop) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (typepred "le_U!1")
              (("3" (expand "equivalence?")
                (("3" (prop)
                  (("3" (expand "reflexive?") (("3" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("4" (typepred "le_U!1")
              (("4" (expand "equivalence?")
                (("4" (prop)
                  (("4" (expand "reflexive?") (("4" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("5" (typepred "le_T!1")
              (("5" (expand "equivalence?")
                (("5" (prop)
                  (("5" (expand "reflexive?") (("5" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("6" (typepred "le_U!1")
              (("6" (expand "equivalence?")
                (("6" (prop)
                  (("6" (expand "symmetric?")
                    (("6" (inst?) (("6" (prop) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("7" (typepred "le_U!1")
              (("7" (expand "equivalence?")
                (("7" (prop)
                  (("7" (expand "reflexive?") (("7" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("8" (typepred "le_U!1")
              (("8" (expand "equivalence?")
                (("8" (prop)
                  (("8" (expand "symmetric?")
                    (("8" (inst?) (("8" (prop) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rel_extension const-decl "set[[[T, U], [T, U]]]" relation_extension nil)
    (symmetric? const-decl "bool" relations nil)
    (equivalence type-eq-decl nil relations nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (T formal-nonempty-type-decl nil rr_rel nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (U formal-nonempty-type-decl nil rr_rel nil)
    (reflexive? const-decl "bool" relations nil)
    (RR const-decl "set[[T, U]]" rr_rel nil))
   shostak))
 (RR_functional_conditional_equal_RR2 0
  (RR_functional_conditional_equal_RR2-1 nil 3572452560
   ("" (assert)
    (("" (skolem!)
      (("" (prop)
        (("1" (expand "RR2")
          (("1" (prop)
            (("1" (expand "RR")
              (("1" (prop)
                (("1" (expand "rel_extension")
                  (("1" (prop)
                    (("1" (expand "rel_inv_extension2")
                      (("1" (expand "rel_extension") (("1" (prop) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "rel_extension")
                  (("2" (prop)
                    (("2" (expand "rel_inv_extension2")
                      (("2" (expand "rel_extension")
                        (("2" (prop)
                          (("1" (typepred "le_T!1")
                            (("1" (expand "equivalence?")
                              (("1" (prop)
                                (("1" (expand "symmetric?")
                                  (("1" (inst?) (("1" (prop) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "le_T!1")
                            (("2" (expand "equivalence?")
                              (("2" (prop)
                                (("2" (expand "symmetric?")
                                  (("2" (inst?) (("2" (prop) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (typepred "le_T!1")
                            (("3" (expand "equivalence?")
                              (("3" (prop)
                                (("3" (expand "symmetric?")
                                  (("3" (inst?) (("3" (prop) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (typepred "le_T!1")
                            (("4" (expand "equivalence?")
                              (("4" (prop)
                                (("4" (expand "symmetric?")
                                  (("4" (inst?) (("4" (prop) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "rel_extension")
                  (("3" (prop)
                    (("3" (expand "rel_inv_extension2")
                      (("3" (expand "rel_extension")
                        (("3" (prop)
                          (("1" (typepred "le_U!1")
                            (("1" (expand "equivalence?")
                              (("1" (prop)
                                (("1" (expand "symmetric?")
                                  (("1" (inst?) (("1" (prop) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "le_U!1")
                            (("2" (expand "equivalence?")
                              (("2" (prop)
                                (("2" (expand "symmetric?")
                                  (("2"
                                    (inst -2 "f!1(g!1(n!1`2))" "f!1(n!1`1)")
                                    (("2" (prop) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "RR")
          (("2" (expand "RR2")
            (("2" (prop)
              (("1" (expand "rel_inv_extension2") (("1" (propax) nil nil))
                nil)
               ("2" (expand "rel_inv_extension2")
                (("2" (expand "rel_extension")
                  (("2" (prop)
                    (("1" (typepred "le_U!1")
                      (("1" (expand "equivalence?")
                        (("1" (prop)
                          (("1" (expand "symmetric?")
                            (("1" (inst -2 "f!1(n!1`1)" "f!1(g!1(n!1`2))")
                              (("1" (prop) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "le_U!1")
                      (("2" (expand "equivalence?")
                        (("2" (prop)
                          (("2" (expand "symmetric?")
                            (("2" (inst?) (("2" (prop) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("3" (typepred "le_U!1")
                      (("3" (expand "equivalence?")
                        (("3" (prop)
                          (("3" (expand "symmetric?")
                            (("3" (inst?) (("3" (prop) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("4" (typepred "le_U!1")
                      (("4" (expand "equivalence?")
                        (("4" (prop)
                          (("4" (expand "symmetric?")
                            (("4" (inst?) (("4" (prop) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "rel_inv_extension2")
                (("3" (expand "rel_extension")
                  (("3" (prop)
                    (("1" (typepred "le_T!1")
                      (("1" (expand "equivalence?")
                        (("1" (prop)
                          (("1" (expand "symmetric?")
                            (("1" (inst -2 "g!1(n!1`2)" "g!1(f!1(n!1`1))")
                              (("1" (prop) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "le_T!1")
                      (("2" (expand "equivalence?")
                        (("2" (prop)
                          (("2" (expand "symmetric?")
                            (("2" (inst?) (("2" (prop) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RR2 const-decl "set[[T, U]]" rr_rel nil)
    (RR const-decl "set[[T, U]]" rr_rel nil)
    (symmetric? const-decl "bool" relations nil)
    (U formal-nonempty-type-decl nil rr_rel nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil rr_rel nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equivalence type-eq-decl nil relations nil)
    (rel_extension const-decl "set[[[T, U], [T, U]]]" relation_extension nil)
    (rel_inv_extension2 const-decl "set[[[T, U], [T, U]]]"
     relation_inverse_extension nil))
   shostak)))


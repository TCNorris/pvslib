(infinite_image
 (infinite_image 0
  (infinite_image-1 nil 3316971338
   ("" (expand "is_finite")
    (("" (skosimp*)
      ((""
        (inst + "N!1"
         "LAMBDA (x: (image(f!1, S!1))): f!2(choose({s: (S!1) | f!1(s) = x}))")
        (("1" (expand "injective?")
          (("1" (skosimp :preds? t)
            (("1" (expand "image")
              (("1" (skosimp*)
                (("1"
                  (inst - "choose({s: (S!1) | f!1(s) = x1!1})"
                   "choose({s: (S!1) | f!1(s) = x2!1})")
                  (("1" (assert) nil nil)
                   ("2" (expand* "nonempty?" "empty?" "member")
                    (("2" (inst - "x!2") (("2" (assert) nil nil)) nil)) nil)
                   ("3" (expand* "nonempty?" "empty?" "member")
                    (("3" (inst - "x!1") (("3" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem-typepred)
          (("2" (expand* "image" "nonempty?" "empty?" "member")
            (("2" (skolem!) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((injective? const-decl "bool" functions nil)
    (x1!1 skolem-const-decl "(image(f!1, S!1))" infinite_image nil)
    (x2!1 skolem-const-decl "(image(f!1, S!1))" infinite_image nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil) (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (R formal-type-decl nil infinite_image nil)
    (D formal-type-decl nil infinite_image nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (image const-decl "set[R]" function_image nil)
    (f!1 skolem-const-decl "[D -> R]" infinite_image nil)
    (S!1 skolem-const-decl "set[D]" infinite_image nil)
    (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (is_finite const-decl "bool" finite_sets nil))
   shostak))
 (infinite_injective_image 0
  (infinite_injective_image-1 nil 3316971333
   ("" (expand "is_finite")
    (("" (skosimp* t)
      (("" (expand "is_finite")
        (("" (inst + "N!1" "LAMBDA (s: (S!1)): f!2(f!1(s))")
          (("1" (expand "injective?")
            (("1" (skosimp)
              (("1" (inst -4 "f!1(x1!1)" "f!1(x2!1)")
                (("1" (inst - "x1!1" "x2!1") (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (skolem!)
            (("2" (expand "image") (("2" (inst + "s!1") nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((injective? const-decl "bool" functions nil)
    (R formal-type-decl nil infinite_image nil)
    (infinite_set type-eq-decl nil infinite_sets_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (D formal-type-decl nil infinite_image nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (S!1 skolem-const-decl "infinite_set[D]" infinite_image nil)
    (image const-decl "set[R]" function_image nil)
    (f!1 skolem-const-decl "(injective?[D, R])" infinite_image nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (is_finite const-decl "bool" finite_sets nil))
   nil
   (infinite_injective_image subtype
    "function_image[infinite_image.D, infinite_image.R].image(infinite_image.f, infinite_image.S)"
    "infinite_set[R]"))))


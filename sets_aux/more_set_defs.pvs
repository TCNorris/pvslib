more_set_defs[T:TYPE]: THEORY
BEGIN

  x    : VAR T
  s    : VAR setof[T]
  sing : VAR (singleton?[T])

  finite_nonempty?(s: set[T]): bool
  = is_finite(s) AND nonempty?(s)

  fne,fne1,fne2: VAR (finite_nonempty?)
  fnne : VAR { fne | NOT empty?(rest(fne)) }

  union_finite_nonempty_j
  : JUDGEMENT union(fne1,fne2) HAS_TYPE (finite_nonempty?)

  finite_nonempty?_is_finite
  : JUDGEMENT (finite_nonempty?) SUBTYPE_OF (is_finite[T])

  finite_nonempty?_nonempty?
  : JUDGEMENT (finite_nonempty?) SUBTYPE_OF (nonempty?[T])

  rest_finite_nonempty?
  : JUDGEMENT rest(fnne) HAS_TYPE (finite_nonempty?)

  singleton_finite_nonempty?
  : JUDGEMENT (singleton?[T]) SUBTYPE_OF (finite_nonempty?)

  singleton_finite_nonempty?_lemma: LEMMA
  FORALL (x: (singleton?[T])): finite_nonempty?(x);

  finite_nonempty?_add
  : JUDGEMENT
    add(x,fne) HAS_TYPE (finite_nonempty?)

  not_empty_nonempty
  : LEMMA
    nonempty?(s) = (NOT empty?(s))
  AUTO_REWRITE+ not_empty_nonempty

END more_set_defs

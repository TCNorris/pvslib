(infinite_card
 (finite_card_eq 0
  (finite_card_eq-1 nil 3316971041
   ("" (skosimp)
    (("" (use "card_eq_symmetric[T1, T2]")
      (("" (expand* "card_eq" "is_finite" "bijective?")
        (("" (smash)
          (("1" (skosimp*)
            (("1" (use "composition_injective[(S2!1), (S1!1), below[N!1]]")
              (("1" (inst + "N!1" "f!3 o f!2") nil nil)) nil))
            nil)
           ("2" (skosimp*)
            (("2" (use "composition_injective[(S1!1), (S2!1), below[N!1]]")
              (("2" (inst + "N!1" "f!3 o f!1") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((card_eq_symmetric formula-decl nil card_comp_set_props nil)
    (T1 formal-type-decl nil infinite_card nil)
    (T2 formal-type-decl nil infinite_card nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (composition_injective judgement-tcc nil function_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (f!2 skolem-const-decl "[(S2!1) -> (S1!1)]" infinite_card nil)
    (injective? const-decl "bool" functions nil)
    (S1!1 skolem-const-decl "set[T1]" infinite_card nil)
    (S2!1 skolem-const-decl "set[T2]" infinite_card nil)
    (f!3 skolem-const-decl "[(S1!1) -> below[N!1]]" infinite_card nil)
    (N!1 skolem-const-decl "nat" infinite_card nil)
    (O const-decl "T3" function_props nil)
    (f!1 skolem-const-decl "[(S1!1) -> (S2!1)]" infinite_card nil)
    (f!3 skolem-const-decl "[(S2!1) -> below[N!1]]" infinite_card nil)
    (N!1 skolem-const-decl "nat" infinite_card nil)
    (card_eq const-decl "bool" card_comp_set nil)
    (bijective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil))
   shostak))
 (infinite_card_eq 0
  (infinite_card_eq-1 nil 3316971153
   ("" (skosimp)
    (("" (forward-chain "finite_card_eq") (("" (prop) nil nil)) nil)) nil)
   ((finite_card_eq formula-decl nil infinite_card nil)
    (T1 formal-type-decl nil infinite_card nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (T2 formal-type-decl nil infinite_card nil))
   shostak))
 (infinite_card_le 0
  (infinite_card_le-1 nil 3316971171
   ("" (expand* "card_le" "is_finite")
    (("" (skosimp*)
      (("" (use "composition_injective[(S1!1), (S2!1), below[N!1]]")
        (("" (inst + "N!1" "f!2 o f!1") nil nil)) nil))
      nil))
    nil)
   ((O const-decl "T3" function_props nil)
    (N!1 skolem-const-decl "nat" infinite_card nil)
    (f!2 skolem-const-decl "[(S2!1) -> below[N!1]]" infinite_card nil)
    (S1!1 skolem-const-decl "set[T1]" infinite_card nil)
    (S2!1 skolem-const-decl "set[T2]" infinite_card nil)
    (injective? const-decl "bool" functions nil)
    (f!1 skolem-const-decl "[(S1!1) -> (S2!1)]" infinite_card nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T2 formal-type-decl nil infinite_card nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T1 formal-type-decl nil infinite_card nil)
    (composition_injective judgement-tcc nil function_props nil)
    (card_le const-decl "bool" card_comp_set nil)
    (is_finite const-decl "bool" finite_sets nil))
   shostak))
 (infinite_card_ge 0
  (infinite_card_ge-1 nil 3316971198
   ("" (expand* "card_ge" "is_finite")
    (("" (skosimp*)
      (("" (use "composition_injective[(S2!1), (S1!1), below[N!1]]")
        (("" (inst + "N!1" "f!2 o f!1") nil nil)) nil))
      nil))
    nil)
   ((O const-decl "T3" function_props nil)
    (N!1 skolem-const-decl "nat" infinite_card nil)
    (f!2 skolem-const-decl "[(S1!1) -> below[N!1]]" infinite_card nil)
    (S2!1 skolem-const-decl "set[T2]" infinite_card nil)
    (S1!1 skolem-const-decl "set[T1]" infinite_card nil)
    (injective? const-decl "bool" functions nil)
    (f!1 skolem-const-decl "[(S2!1) -> (S1!1)]" infinite_card nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T1 formal-type-decl nil infinite_card nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T2 formal-type-decl nil infinite_card nil)
    (composition_injective judgement-tcc nil function_props nil)
    (card_ge const-decl "bool" card_comp_set nil)
    (is_finite const-decl "bool" finite_sets nil))
   shostak))
 (finite_card_le 0
  (finite_card_le-1 nil 3316971226
   ("" (expand* "card_le" "is_finite")
    (("" (skosimp*)
      (("" (use "composition_injective[(S1!1), (S2!1), below[N!1]]")
        (("" (inst + "N!1" "f!2 o f!1") nil nil)) nil))
      nil))
    nil)
   ((O const-decl "T3" function_props nil)
    (N!1 skolem-const-decl "nat" infinite_card nil)
    (f!2 skolem-const-decl "[(S2!1) -> below[N!1]]" infinite_card nil)
    (S1!1 skolem-const-decl "set[T1]" infinite_card nil)
    (S2!1 skolem-const-decl "set[T2]" infinite_card nil)
    (injective? const-decl "bool" functions nil)
    (f!1 skolem-const-decl "[(S1!1) -> (S2!1)]" infinite_card nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T2 formal-type-decl nil infinite_card nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T1 formal-type-decl nil infinite_card nil)
    (composition_injective judgement-tcc nil function_props nil)
    (card_le const-decl "bool" card_comp_set nil)
    (is_finite const-decl "bool" finite_sets nil))
   shostak))
 (finite_card_ge 0
  (finite_card_ge-1 nil 3316971246
   ("" (expand* "card_ge" "is_finite")
    (("" (skosimp*)
      (("" (use "composition_injective[(S2!1), (S1!1), below[N!1]]")
        (("" (inst + "N!1" "f!2 o f!1") nil nil)) nil))
      nil))
    nil)
   ((O const-decl "T3" function_props nil)
    (N!1 skolem-const-decl "nat" infinite_card nil)
    (f!2 skolem-const-decl "[(S1!1) -> below[N!1]]" infinite_card nil)
    (S2!1 skolem-const-decl "set[T2]" infinite_card nil)
    (S1!1 skolem-const-decl "set[T1]" infinite_card nil)
    (injective? const-decl "bool" functions nil)
    (f!1 skolem-const-decl "[(S2!1) -> (S1!1)]" infinite_card nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T1 formal-type-decl nil infinite_card nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T2 formal-type-decl nil infinite_card nil)
    (composition_injective judgement-tcc nil function_props nil)
    (card_ge const-decl "bool" card_comp_set nil)
    (is_finite const-decl "bool" finite_sets nil))
   shostak)))


(relation_extension
 (rel_extension_is_equivalence 0
  (rel_extension_is_equivalence-1 nil 3571755052
   ("" (skosimp*)
    (("" (expand "equivalence?")
      (("" (prop)
        (("1" (expand "reflexive?")
          (("1" (skolem!)
            (("1" (expand "rel_extension")
              (("1" (prop)
                (("1" (typepred "le_T!1")
                  (("1" (expand "equivalence?")
                    (("1" (prop)
                      (("1" (expand "reflexive?") (("1" (inst?) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "le_U!1")
                  (("2" (expand "equivalence?")
                    (("2" (prop)
                      (("2" (expand "reflexive?") (("2" (inst?) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "symmetric?")
          (("2" (skolem!)
            (("2" (prop)
              (("2" (expand "rel_extension")
                (("2" (prop)
                  (("1" (hide -2)
                    (("1" (typepred "le_T!1")
                      (("1" (expand "equivalence?")
                        (("1" (prop)
                          (("1" (expand "symmetric?")
                            (("1" (inst -2 "x!1`1" "y!1`1")
                              (("1" (prop) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1)
                    (("2" (typepred "le_U!1")
                      (("2" (expand "equivalence?")
                        (("2" (prop)
                          (("2" (expand "symmetric?")
                            (("2" (inst -2 "x!1`2" "y!1`2")
                              (("2" (prop) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand "transitive?")
          (("3" (skolem!)
            (("3" (prop)
              (("3" (expand "rel_extension")
                (("3" (prop)
                  (("1" (hide -2 -4)
                    (("1" (typepred "le_T!1")
                      (("1" (expand "equivalence?")
                        (("1" (prop)
                          (("1" (expand "transitive?")
                            (("1" (inst -3 "x!1`1" "y!1`1" "z!1`1")
                              (("1" (prop) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 -3)
                    (("2" (typepred "le_U!1")
                      (("2" (expand "equivalence?")
                        (("2" (prop)
                          (("2" (expand "transitive?")
                            (("2" (inst -3 "x!1`2" "y!1`2" "z!1`2")
                              (("2" (prop) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (rel_extension const-decl "set[[[T, U], [T, U]]]" relation_extension nil)
    (equivalence type-eq-decl nil relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (T formal-nonempty-type-decl nil relation_extension nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (U formal-nonempty-type-decl nil relation_extension nil))
   nil
   (rel_extension_is_equivalence subtype
    "relation_extension.rel_extension(relation_extension.le_T, relation_extension.le_U)"
    "equivalence[[T, U]]"))))


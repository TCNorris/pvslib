(more_set_defs
 (union_finite_nonempty_j 0
  (union_finite_nonempty_j-2 "" 3790091346
   ("" (skeep :preds? t)
    (("" (expand "finite_nonempty?") (("" (propax) nil nil)) nil)) nil)
   nil shostak
   (union_finite_nonempty_j subtype
    "sets[more_set_defs.T].union(more_set_defs.fne1, more_set_defs.fne2)"
    "(more_set_defs.finite_nonempty?)"))
  (union_finite_nonempty_j-1 nil 3753698002
   ("" (skeep :preds? t)
    (("" (expand "finite_nonempty?")
      (("" (flatten)
        (("" (split 1)
          (("1" (expand "union")
            (("1" (expand "is_finite")
              (("1" (skolem -1 ("n1" "f1"))
                (("1" (skolem -3 ("n2" "f2"))
                  (("1"
                    (inst 1 "n1+n2"
                     "LAMBDA(x: ({x: T | member(x, fne1) OR member(x, fne2)})): IF member(x,fne1) THEN f1(x) ELSE n1+f2(x) ENDIF")
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil) ("4" (grind) nil nil)
                     ("5" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_nonempty? const-decl "bool" more_set_defs nil))
   nil
   (union_finite_nonempty_j subtype
    "sets[more_set_defs.T].union(more_set_defs.fne1, more_set_defs.fne2)"
    "(more_set_defs.finite_nonempty?)")))
 (rest_finite_nonempty? 0
  (rest_finite_nonempty?-1 nil 3753699013 ("" (judgement-tcc) nil nil)
   ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (finite_nonempty? const-decl "bool" more_set_defs nil)
    (finite_rest application-judgement "finite_set" finite_sets nil))
   nil
   (rest_finite_nonempty? subtype
    "sets[more_set_defs.T].rest(more_set_defs.fnne)"
    "(more_set_defs.finite_nonempty?)")))
 (singleton_finite_nonempty? 0
  (singleton_finite_nonempty?-1 nil 3753779525
   ("" (skolem 1 "s" :skolem-typepreds? t)
    (("" (expand "singleton?")
      (("" (expand "finite_nonempty?")
        (("" (split 1)
          (("1" (expand "is_finite")
            (("1" (inst 1 "1" "LAMbDA(x:(s)): 0")
              (("1" (expand "injective?")
                (("1" (skeep)
                  (("1" (skeep)
                    (("1" (inst-cp -1 "x1")
                      (("1" (inst -1 "x2") (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((singleton? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil more_set_defs nil) (set type-eq-decl nil sets nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (finite_nonempty? const-decl "bool" more_set_defs nil))
   nil
   (singleton_finite_nonempty? subtype "more_set_defs.x"
    "(more_set_defs.finite_nonempty?)")))
 (singleton_finite_nonempty?_lemma 0
  (singleton_finite_nonempty?_lemma-1 nil 3757705215
   ("" (skolem 1 "s" :skolem-typepreds? t)
    (("" (expand "singleton?")
      (("" (expand "finite_nonempty?")
        (("" (split 1)
          (("1" (expand "is_finite")
            (("1" (inst 1 "1" "LAMbDA(x:(s)): 0")
              (("1" (expand "injective?")
                (("1" (skeep)
                  (("1" (skeep)
                    (("1" (inst-cp -1 "x1")
                      (("1" (inst -1 "x2") (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((singleton? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil more_set_defs nil) (set type-eq-decl nil sets nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (finite_nonempty? const-decl "bool" more_set_defs nil))
   nil))
 (finite_nonempty?_add 0
  (finite_nonempty?_add-1 nil 3753779525 ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil more_set_defs nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)
    (finite_nonempty? const-decl "bool" more_set_defs nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil))
   nil
   (finite_nonempty?_add subtype
    "sets[more_set_defs.T].add(more_set_defs.x, more_set_defs.fne)"
    "(more_set_defs.finite_nonempty?)")))
 (not_empty_nonempty 0
  (not_empty_nonempty-1 nil 3753698007
   ("" (expand "nonempty?") (("" (propax) nil nil)) nil)
   ((nonempty? const-decl "bool" sets nil)) shostak)))


(nat_surjection
 (nat_surjection 0
  (nat_surjection-2 nil 3665404927
   ("" (skeep*)
    ((""
      (name "enum"
            "LAMBDA (s:finite_set[T]|Card(s)>0): choose({f:[below(Card(s))->(s)] | bijective?(f)})")
      (("1"
        (name "Aset"
              "LAMBDA (i,j:nat): (Card(F(i))>0 IMPLIES j<Card(F(i))) AND (Card(F(i))=0 IMPLIES j=0)")
        (("1" (case "EXISTS (D:[nat->(Aset)]): surjective?(D)")
          (("1" (skeep)
            (("1"
              (name "G"
                    "LAMBDA (i:nat): IF Card(F(D(i)`1))=0 THEN choose(fullset[T]) ELSE enum(F(D(i)`1))(D(i)`2) ENDIF")
              (("1" (inst + "G")
                (("1" (expand "surjective?")
                  (("1" (skeep*)
                    (("1" (inst -5 "y")
                      (("1" (skolem - "z")
                        (("1" (expand "member")
                          (("1"
                            (case "EXISTS (j:below(Card(F(z)))): enum(F(z))(j)=y")
                            (("1" (skeep -)
                              (("1" (inst -3 "(z,j)")
                                (("1" (skeep -)
                                  (("1" (inst + "x")
                                    (("1" (hide -2)
                                      (("1"
                                        (expand "G" 1)
                                        (("1"
                                          (lift-if)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "Aset" 1)
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (typepred "enum(F(z))")
                              (("1" (expand "bijective?" -1)
                                (("1" (flatten)
                                  (("1" (expand "surjective?" -2)
                                    (("1" (inst - "y") nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (assert)
                                (("2" (rewrite "card_def" 1 :dir rl)
                                  (("2" (lemma "card_is_0[T]")
                                    (("2" (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (decompose-equality -1)
                                          (("2"
                                            (inst - "y")
                                            (("2"
                                              (expand "emptyset" -1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*) (("2" (assert) nil nil)) nil)
               ("3" (assert)
                (("3" (skeep*)
                  (("3" (typepred "D(i)")
                    (("3" (expand "Aset" -1) (("3" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("4" (skeep*)
                (("4" (assert)
                  (("4" (case "NOT EXISTS (t:T): TRUE")
                    (("1" (assert) nil nil)
                     ("2" (expand "nonempty?")
                      (("2" (expand "empty?")
                        (("2" (expand "member")
                          (("2" (skeep*)
                            (("2" (expand "fullset") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2"
            (case "FORALL (ll:[nat->nat]):LET Z = (LAMBDA (i,j:nat): j<=ll(i)) IN EXISTS (D: [nat -> (Z)]): surjective?(D)")
            (("1"
              (inst -
               "LAMBDA (i:nat): IF Card(F(i))=0 THEN 0 ELSE Card(F(i))-1 ENDIF")
              (("1" (skoletin -1)
                (("1" (case "Z = Aset")
                  (("1" (skeep -)
                    (("1" (inst + "D")
                      (("1" (expand "surjective?")
                        (("1" (skeep*)
                          (("1" (inst - "y")
                            (("1" (typepred "y") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep*) (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (decompose-equality 1)
                    (("2" (expand "Z" 1)
                      (("2" (expand "Aset" 1)
                        (("2" (lift-if)
                          (("2" (ground)
                            (("2" (iff) (("2" (ground) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*) (("2" (assert) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (skeep)
                (("2" (skoletin 1)
                  (("2" (case "NOT EXISTS (D:[(Z)->nat]): injective?(D)")
                    (("1" (hide 2)
                      (("1"
                        (case "EXISTS (Mfun:[nat->nat]): (FORALL (i,j:nat): j<=i IMPLIES ll(j)<Mfun(i)) AND (FORALL (i:nat): EXISTS (j:nat): j<=i AND ll(j)=Mfun(i)-1)")
                        (("1" (skeep -)
                          (("1"
                            (name "RR"
                                  "LAMBDA (z:(Z)): LET (i,j)=z,B=(Mfun(i+1)+1),Q=(i+2) IN B*Q + j")
                            (("1" (inst + "RR")
                              (("1" (expand "injective?")
                                (("1"
                                  (case "FORALL (x1: (Z)), (x2: (Z)): x1`1<=x2`1 AND RR(x1) = RR(x2) IMPLIES (x1 = x2)")
                                  (("1" (skeep)
                                    (("1" (inst-cp - "x1" "x2")
                                      (("1"
                                        (inst - "x2" "x1")
                                        (("1" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2)
                                    (("2" (skeep*)
                                      (("2"
                                        (typepred "x1")
                                        (("2"
                                          (typepred "x2")
                                          (("2"
                                            (copy -4)
                                            (("2"
                                              (hide -5)
                                              (("2"
                                                (hide -5)
                                                (("2"
                                                  (expand
                                                   "RR"
                                                   -1
                                                   1
                                                   :assert?
                                                   none)
                                                  (("2"
                                                    (skoletin -)
                                                    (("2"
                                                      (skoletin -)
                                                      (("2"
                                                        (skoletin -)
                                                        (("2"
                                                          (case "x1`1 < x2`1")
                                                          (("1"
                                                            (expand
                                                             "RR"
                                                             :assert?
                                                             none)
                                                            (("1"
                                                              (skoletin -2)
                                                              (("1"
                                                                (skoletin -)
                                                                (("1"
                                                                  (skoletin -)
                                                                  (("1"
                                                                    (replace
                                                                     -5
                                                                     -6
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -10
                                                                       -6
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (case
                                                                         "abs(j-j_1)<Mfun(i_1 + 1)")
                                                                        (("1"
                                                                          (case
                                                                           "Mfun(i_1+1)<=B_1 * Q_1-B*Q")
                                                                          (("1"
                                                                            (expand
                                                                             "abs")
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "Q_1>=Q+1")
                                                                            (("1"
                                                                              (case
                                                                               "Mfun(i_1+1)>=Mfun(i+1)")
                                                                              (("1"
                                                                                (case
                                                                                 "NOT B_1 * Q_1 - B * Q>=B_1*(Q+1)-B*Q")
                                                                                (("1"
                                                                                  (case
                                                                                   "Q_1>=Q+1")
                                                                                  (("1"
                                                                                    (mult-by
                                                                                     -1
                                                                                     "B_1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   (-18
                                                                                    -19
                                                                                    -20))
                                                                                  (("2"
                                                                                    (case
                                                                                     "B_1 * Q - B * Q>=Mfun(i_1+1)-B_1")
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (case
                                                                                         "NOT Mfun(i_1 + 1) - B_1 = -1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("2"
                                                                                            (case
                                                                                             "B_1>=B")
                                                                                            (("1"
                                                                                              (mult-by
                                                                                               -1
                                                                                               "Q")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (copy
                                                                                   -17)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "i+1")
                                                                                    (("2"
                                                                                      (skeep
                                                                                       -)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "i_1+1"
                                                                                         "j!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst-cp
                                                                           -
                                                                           "i_1+1"
                                                                           "j_1")
                                                                          (("2"
                                                                            (inst-cp
                                                                             -
                                                                             "i_1+1"
                                                                             "j")
                                                                            (("2"
                                                                              (expand
                                                                               "Z"
                                                                               -)
                                                                              (("2"
                                                                                (replace
                                                                                 -4
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (replace
                                                                                   -5
                                                                                   :dir
                                                                                   rl)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -9
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -10
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (inst-cp
                                                                                         -
                                                                                         "i_1+1"
                                                                                         "i_1")
                                                                                        (("2"
                                                                                          (inst-cp
                                                                                           -
                                                                                           "i_1+1"
                                                                                           "i")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "abs")
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "RR"
                                                             :assert?
                                                             none)
                                                            (("2"
                                                              (skoletin -)
                                                              (("2"
                                                                (skoletin -)
                                                                (("2"
                                                                  (skoletin -)
                                                                  (("2"
                                                                    (replace
                                                                     -5
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (replace
                                                                       -9
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (case
                                                                         "NOT i_1=i")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "NOT j=j_1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (decompose-equality
                                                                                 2)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (name "HH"
                                "LAMBDA (i:nat):LAMBDA (MM:nat): (FORALL (j: nat): j <= i IMPLIES ll(j) < MM) AND
          EXISTS (j: nat): j <= i AND ll(j) = MM - 1")
                          (("2" (name "Mfun" "LAMBDA (i:nat): choose(HH(i))")
                            (("1" (inst + "Mfun")
                              (("1" (hide 2)
                                (("1" (split)
                                  (("1" (skeep*)
                                    (("1" (typepred "Mfun(i)")
                                      (("1"
                                        (expand "HH" -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst - "j")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skeep)
                                    (("2" (typepred "Mfun(i)")
                                      (("2"
                                        (expand "HH" -1)
                                        (("2" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2" (hide -1)
                                (("2" (induct "i")
                                  (("1" (expand "nonempty?")
                                    (("1" (expand "empty?")
                                      (("1"
                                        (inst - "ll(0)+1")
                                        (("1"
                                          (expand "member")
                                          (("1"
                                            (expand "HH")
                                            (("1"
                                              (split)
                                              (("1"
                                                (skosimp*)
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (inst + "0")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skeep*)
                                    (("2" (expand "nonempty?")
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (skeep*)
                                            (("2"
                                              (inst - "max(x,ll(1+j)+1)")
                                              (("2"
                                                (expand "HH")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (skeep*)
                                                      (("1"
                                                        (inst-cp - "j_1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep -)
                                                      (("2"
                                                        (inst-cp + "j_1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "x>1+ll(1+j)")
                                                            (("1"
                                                              (expand "max")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst + "1+j")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "max")
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (copy -1)
                      (("2" (skeep -1)
                        (("2"
                          (name "DZ"
                                "LAMBDA (i:nat): IF (EXISTS (z:(Z)): D(z)=i) THEN choose({z:(Z)|D(z)=i}) ELSE (0,0) ENDIF")
                          (("1" (inst + "DZ")
                            (("1" (expand "surjective?")
                              (("1" (skeep*)
                                (("1" (inst + "D(y)")
                                  (("1" (expand "DZ" 1)
                                    (("1" (lift-if)
                                      (("1"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (invoke (name "aa" "%1") (! 1 1))
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "injective?" -3)
                                                  (("1"
                                                    (inst - "aa" "y")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "nonempty?")
                                              (("2"
                                                (expand "empty?")
                                                (("2"
                                                  (expand "member")
                                                  (("2" (inst - "y") nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (inst + "y") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep*)
                              (("2" (expand "DZ" 1)
                                (("2" (ground)
                                  (("2" (expand "Z" 2)
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (expand "nonempty?")
                              (("2" (expand "empty?")
                                (("2" (inst - "z!1")
                                  (("2" (expand "member")
                                    (("2" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (lemma "card_bij_inv[T]")
          (("2" (inst - "Card(s)" "s")
            (("2" (assert)
              (("2" (lemma "card_def[T]")
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (expand "nonempty?")
                        (("2" (expand "empty?")
                          (("2" (expand "member") (("2" (inst - "f") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (Card const-decl "nat" finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil nat_surjection nil)
    (surjective? const-decl "bool" functions nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fullset const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (y skolem-const-decl "T" nat_surjection nil)
    (card_def formula-decl nil finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (card_is_0 formula-decl nil finite_sets nil)
    (G skolem-const-decl "[nat -> T]" nat_surjection nil)
    (j skolem-const-decl "below(Card(F(z)))" nat_surjection nil)
    (F skolem-const-decl "[nat -> finite_set[T]]" nat_surjection nil)
    (z skolem-const-decl "nat" nat_surjection nil)
    (Aset skolem-const-decl "[[nat, nat] -> boolean]" nat_surjection nil)
    (empty? const-decl "bool" sets nil)
    (DZ skolem-const-decl "[nat -> [nat, nat]]" nat_surjection nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (HH skolem-const-decl "[nat -> [nat -> boolean]]" nat_surjection nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (RR skolem-const-decl "[(Z) -> posint]" nat_surjection nil)
    (Z skolem-const-decl "[[nat, nat] -> bool]" nat_surjection nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (injective? const-decl "bool" functions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Z skolem-const-decl "[[nat, nat] -> bool]" nat_surjection nil)
    (D skolem-const-decl "[nat -> (Z)]" nat_surjection nil)
    (y skolem-const-decl "(Aset)" nat_surjection nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (card_bij_inv formula-decl nil finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (nat_surjection-1 nil 3665400812
   ("" (skeep*)
    ((""
      (name "enum"
            "LAMBDA (s:finite_set[T]|Card(s)>0): choose({f:[below(Card(s))->(s)] | bijective?(f)})")
      (("1"
        (name "Aset"
              "LAMBDA (i,j:nat): (Card(F(i))>0 IMPLIES j<Card(F(i))) AND (Card(F(i))=0 IMPLIES j=0)")
        (("1" (case "EXISTS (D:[nat->(Aset)]): surjective?(D)")
          (("1" (skeep)
            (("1"
              (name "G"
                    "LAMBDA (i:nat): IF Card(F(D(i)`1))=0 THEN choose(fullset[T]) ELSE enum(F(D(i)`1))(D(i)`2) ENDIF")
              (("1" (inst + "G")
                (("1" (expand "surjective?")
                  (("1" (skeep*)
                    (("1" (inst -5 "y")
                      (("1" (skolem - "z")
                        (("1" (expand "member")
                          (("1"
                            (case "EXISTS (j:below(Card(F(z)))): enum(F(z))(j)=y")
                            (("1" (skeep -)
                              (("1" (inst -3 "(z,j)")
                                (("1" (skeep -)
                                  (("1" (inst + "x")
                                    (("1" (hide -2)
                                      (("1"
                                        (expand "G" 1)
                                        (("1"
                                          (lift-if)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "Aset" 1)
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (typepred "enum(F(z))")
                              (("1" (expand "bijective?" -1)
                                (("1" (flatten)
                                  (("1" (expand "surjective?" -2)
                                    (("1" (inst - "y") nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (assert)
                                (("2" (rewrite "card_def" 1 :dir rl)
                                  (("2" (lemma "card_is_0[T]")
                                    (("2" (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (decompose-equality -1)
                                          (("2"
                                            (inst - "y")
                                            (("2"
                                              (expand "emptyset" -1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*) (("2" (assert) nil nil)) nil)
               ("3" (assert)
                (("3" (skeep*)
                  (("3" (typepred "D(i)")
                    (("3" (expand "Aset" -1) (("3" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("4" (skeep*)
                (("4" (assert)
                  (("4" (case "NOT EXISTS (t:T): TRUE")
                    (("1" (assert) nil nil)
                     ("2" (expand "nonempty?")
                      (("2" (expand "empty?")
                        (("2" (expand "member")
                          (("2" (skeep*)
                            (("2" (expand "fullset") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2"
            (case "FORALL (ll:[nat->nat]):LET Z = (LAMBDA (i,j:nat): j<=ll(i)) IN EXISTS (D: [nat -> (Z)]): surjective?(D)")
            (("1"
              (inst -
               "LAMBDA (i:nat): IF Card(F(i))=0 THEN 0 ELSE Card(F(i))-1 ENDIF")
              (("1" (skoletin -1)
                (("1" (case "Z = Aset")
                  (("1" (skeep -)
                    (("1" (inst + "D")
                      (("1" (expand "surjective?")
                        (("1" (skeep*)
                          (("1" (inst - "y")
                            (("1" (typepred "y") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep*) (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (decompose-equality 1)
                    (("2" (expand "Z" 1)
                      (("2" (expand "Aset" 1)
                        (("2" (lift-if)
                          (("2" (ground)
                            (("2" (iff) (("2" (ground) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*) (("2" (assert) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (skeep)
                (("2" (skoletin 1)
                  (("2" (case "NOT EXISTS (D:[(Z)->nat]): injective?(D)")
                    (("1" (hide 2)
                      (("1"
                        (case "EXISTS (Mfun:[nat->nat]): FORALL (i,j:nat): j<=i IMPLIES ll(j)<Mfun(i)")
                        (("1" (skeep -)
                          (("1"
                            (name "RR"
                                  "LAMBDA (z:(Z)): LET (i,j)=z,B=(Mfun(i+1)+1),Q=(i+2) IN B*Q + j")
                            (("1" (inst + "RR")
                              (("1" (expand "injective?")
                                (("1"
                                  (case "FORALL (x1: (Z)), (x2: (Z)): x1`1<=x2`1 AND RR(x1) = RR(x2) IMPLIES (x1 = x2)")
                                  (("1" (skeep)
                                    (("1" (inst-cp - "x1" "x2")
                                      (("1"
                                        (inst - "x2" "x1")
                                        (("1" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2)
                                    (("2" (skeep*)
                                      (("2"
                                        (typepred "x1")
                                        (("2"
                                          (typepred "x2")
                                          (("2"
                                            (copy -4)
                                            (("2"
                                              (hide -5)
                                              (("2"
                                                (hide -5)
                                                (("2"
                                                  (expand
                                                   "RR"
                                                   -1
                                                   1
                                                   :assert?
                                                   none)
                                                  (("2"
                                                    (skoletin -)
                                                    (("2"
                                                      (skoletin -)
                                                      (("2"
                                                        (skoletin -)
                                                        (("2"
                                                          (case "x1`1 < x2`1")
                                                          (("1"
                                                            (expand
                                                             "RR"
                                                             :assert?
                                                             none)
                                                            (("1"
                                                              (skoletin -2)
                                                              (("1"
                                                                (skoletin -)
                                                                (("1"
                                                                  (skoletin -)
                                                                  (("1"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (postpone) nil nil))
                        nil))
                      nil)
                     ("2" (postpone) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak)))


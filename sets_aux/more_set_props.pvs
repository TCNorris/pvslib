more_set_props[T1,T2: TYPE]: THEORY
BEGIN
  IMPORTING more_set_defs

  map(f:[T1->T2])(s: setof[T1]): setof[T2]
  = { x: T2 | EXISTS(y:(s)): x = f(y) }

  JUDGEMENT map(f: [T1->T2])(s: (nonempty?[T1])) HAS_TYPE (nonempty?[T2])

  map_finite_is_finite
  : LEMMA
    FORALL(f:[T1->T2])(s: finite_set[T1])
    : is_finite(map(f)(s))
  AUTO_REWRITE+ map_finite_is_finite

  map_nonempty?_is_nonempty?
  : LEMMA
    FORALL(f:[T1->T2])(s: (nonempty?[T1]))
    : NOT empty?(map(f)(s))
  AUTO_REWRITE+ map_nonempty?_is_nonempty?

  map_finite_nonempty?_is_finite_nonempty?
  : LEMMA
    FORALL(f:[T1->T2])(s: (finite_nonempty?[T1]))
    : finite_nonempty?[T2](map(f)(s))
  AUTO_REWRITE+ map_finite_nonempty?_is_finite_nonempty?

  n0fs: VAR (finite_nonempty?[T1])
  f: VAR [T1->T2]

  JUDGEMENT map(f)(n0fs) HAS_TYPE (finite_nonempty?[T2])

  map_set_alt_def: LEMMA
    FORALL(f:[T1->T2], s: setof[T1]):
       (FORALL(t1: (s)): EXISTS(t2: (map(f)(s))): t2 = f(t1)) AND
       (FORALL(t2: (map(f)(s))): EXISTS(t1: (s)): t2 = f(t1))

END more_set_props

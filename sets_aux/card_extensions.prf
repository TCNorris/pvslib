(card_extensions
 (card_extension_W 0
  (card_extension_W-1 nil 3625577802
   ("" (skosimp*)
    (("" (lemma "card_extension[T,(W!1)]")
      (("" (inst -1 "V!1")
        (("" (expand "restrict")
          (("" (expand "extend")
            ((""
              (case "(LAMBDA (t: T): IF (W!1)(t) THEN V!1(t) ELSE FALSE ENDIF)=V!1")
              (("1" (replace -1 1 lr) (("1" (propax) nil nil)) nil)
               ("2" (hide 2)
                (("2" (apply-extensionality 1 :hide? t)
                  (("2" (iff)
                    (("2" (prop)
                      (("2" (expand "subset?")
                        (("2" (inst? -3)
                          (("2" (expand "member") (("2" (prop) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil card_extensions nil)
    (card_extension formula-decl nil finite_sets_card_from nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (FALSE const-decl "bool" booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (extend const-decl "R" extend nil) (restrict const-decl "R" restrict nil)
    (finite_restrict application-judgement "finite_set[S]" restrict_set_props
     nil))
   shostak))
 (card_extension_same 0
  (card_extension_same-1 nil 3625577812
   ("" (skosimp*)
    (("" (lemma "card_extension_W")
      (("" (inst -1 "W!1" "W!1")
        (("" (prop) (("" (hide 2) (("" (grind) nil nil)) nil)) nil)) nil))
      nil))
    nil)
   ((card_extension_W formula-decl nil card_extensions nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil card_extensions nil))
   shostak)))


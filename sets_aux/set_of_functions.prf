(set_of_functions
 (empty_finite_domain1 0
  (empty_finite_domain1-1 nil 3306495597
   ("" (skosimp)
    (("" (rewrite "empty_card" :dir rl)
      (("" (inst + "LAMBDA (x: (A!1)): epsilon! (y: (B!1)): TRUE")
        (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((empty_card formula-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T1 formal-type-decl nil set_of_functions nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (A!1 skolem-const-decl "finite_set[T1]" set_of_functions nil)
    (B!1 skolem-const-decl "finite_set[T2]" set_of_functions nil)
    (TRUE const-decl "bool" booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (T2 formal-type-decl nil set_of_functions nil))
   shostak))
 (empty_finite_domain2 0
  (empty_finite_domain2-1 nil 3306495668
   ("" (skosimp*)
    (("" (rewrite "empty_card" :dir rl) (("" (grind-with-ext) nil nil)) nil))
    nil)
   ((empty_card formula-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T1 formal-type-decl nil set_of_functions nil)
    (T2 formal-type-decl nil set_of_functions nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil))
   shostak))
 (empty_finite_range 0
  (empty_finite_range-1 nil 3306495707
   ("" (skosimp*)
    (("" (rewrite "empty_card" :dir rl)
      (("" (rewrite "empty_card" :dir rl)
        (("" (grind :if-match nil)
          (("" (inst - "f!1(x!1)") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((empty_card formula-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T2 formal-type-decl nil set_of_functions nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (T1 formal-type-decl nil set_of_functions nil))
   shostak))
 (finite_funset_bijection1 0
  (finite_funset_bijection1-1 nil 3306495777
   ("" (skosimp)
    (("" (case-replace "n!1 = 0")
      (("1" (lemma "empty_domain1" ("m" "m!1"))
        (("1" (skolem!)
          (("1" (inst + "LAMBDA (h: [(A!1) -> (B!1)]): f!1")
            (("1" (expand* "bijective?" "injective?" "surjective?")
              (("1" (ground)
                (("1" (rewrite "empty_finite_domain2") nil nil)
                 ("2" (use "empty_finite_domain1" ("B" "B!1"))
                  (("2" (assert)
                    (("2" (skosimp*)
                      (("2" (inst + "f!2")
                        (("2" (apply-extensionality) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil)
       ("2" (case "EXISTS (x: (A!1)): TRUE")
        (("1" (assert)
          (("1" (hide -1)
            (("1" (case-replace "m!1 = 0")
              (("1" (use "empty_finite_range")
                (("1" (assert)
                  (("1" (lemma "empty_range" ("m" "m!1" "p" "n!1"))
                    (("1" (split)
                      (("1"
                        (inst +
                         "LAMBDA (h: [(A!1) -> (B!1)]): (LAMBDA (x: below[n!1]): 0)")
                        (("1"
                          (expand* "bijective?" "injective?" "surjective?")
                          (("1" (grind :if-match nil :defs nil)
                            (("1" (inst - "y!1") nil nil)
                             ("2" (inst -2 "x1!1") nil nil))
                            nil))
                          nil)
                         ("2" (skolem!) (("2" (inst -2 "h!1") nil nil)) nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (use "empty_card[T1]")
                (("2" (use "empty_card[T2]")
                  (("2" (assert)
                    (("2" (hide 1 2)
                      (("2" (rewrite "card_bij")
                        (("2" (rewrite "card_bij")
                          (("2" (skosimp*)
                            (("2" (assert)
                              (("2"
                                (inst +
                                 "LAMBDA (h: [(A!1) -> (B!1)]): f!2 o h o inverse(f!1)")
                                (("1" (expand "bijective?" +)
                                  (("1" (expand* "injective?" "surjective?")
                                    (("1" (grind :if-match nil :defs nil)
                                      (("1"
                                        (inst + "inverse(f!2) o y!1 o f!1")
                                        (("1"
                                          (apply-extensionality 3 :hide? t)
                                          (("1"
                                            (expand "o")
                                            (("1"
                                              (use
                                               "comp_inverse_right"
                                               ("f" "f!1"))
                                              (("1"
                                                (use
                                                 "comp_inverse_right"
                                                 ("f" "f!2"))
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (reveal 3)
                                                  (("2"
                                                    (expand "empty?")
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (expand "member")
                                                        (("2"
                                                          (inst + "x!2")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (reveal -4)
                                                (("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (reveal 3)
                                            (("2"
                                              (expand* "empty?" "member")
                                              (("2"
                                                (skolem!)
                                                (("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (reveal 3)
                                          (("2"
                                            (expand* "empty?" "member")
                                            (("2"
                                              (skolem!)
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "composition_right_cancel2")
                                        (("1"
                                          (rewrite "composition_left_cancel2")
                                          nil
                                          nil)
                                         ("2"
                                          (rewrite "bij_inv_is_bij")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (skolem!)
                                  (("2" (reveal 3)
                                    (("2" (expand* "empty?" "member")
                                      (("2"
                                        (skolem!)
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (delete -2 3)
          (("2" (rewrite "nonempty_exists" :dir rl)
            (("2" (rewrite "nonempty_card") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (empty_finite_domain1 formula-decl nil set_of_functions nil)
    (empty_finite_domain2 formula-decl nil set_of_functions nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (T1 formal-type-decl nil set_of_functions nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (A!1 skolem-const-decl "finite_set[T1]" set_of_functions nil)
    (T2 formal-type-decl nil set_of_functions nil)
    (B!1 skolem-const-decl "finite_set[T2]" set_of_functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (n!1 skolem-const-decl "nat" set_of_functions nil)
    (empty_domain1 formula-decl nil fun_below_props nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (empty_range formula-decl nil fun_below_props nil)
    (empty_finite_range formula-decl nil set_of_functions nil)
    (x!1 skolem-const-decl "T1" set_of_functions nil)
    (x!1 skolem-const-decl "T2" set_of_functions nil)
    (comp_inverse_right formula-decl nil function_inverse nil)
    (x!2 skolem-const-decl "T2" set_of_functions nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (x!1 skolem-const-decl "T2" set_of_functions nil)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (composition_left_cancel2 formula-decl nil func_composition finite_sets)
    (composition_right_cancel2 formula-decl nil func_composition finite_sets)
    (inverse const-decl "D" function_inverse nil)
    (O const-decl "T3" function_props nil)
    (card_bij formula-decl nil finite_sets nil)
    (empty_card formula-decl nil finite_sets nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (finite_funset_bijection2_TCC1 0
  (finite_funset_bijection2_TCC1-1 nil 3306495580 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (finite_funset_bijection2 subtype "set_of_functions.n"
    "{i: integers.int | booleans.OR(set_of_functions.m /= 0, reals.>=(i, 0))}")))
 (finite_funset_bijection2 0
  (finite_funset_bijection2-1 nil 3306496435
   ("" (skosimp)
    (("" (forward-chain "finite_funset_bijection1")
      (("" (lemma "funset_bijection" ("n" "n!1" "m" "m!1"))
        (("" (skosimp*)
          (("" (inst + "f!1 o f!2")
            (("" (rewrite "composition_bijective") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_funset_bijection1 formula-decl nil set_of_functions nil)
    (T1 formal-type-decl nil set_of_functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T2 formal-type-decl nil set_of_functions nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (composition_bijective formula-decl nil func_composition finite_sets)
    (O const-decl "T3" function_props nil)
    (below type-eq-decl nil nat_types nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (funset_bijection formula-decl nil fun_below_props nil))
   shostak))
 (finite_funset 0
  (finite_funset-1 nil 3306496495
   ("" (skolem!)
    (("" (expand "is_finite_type")
      (("" (name "n1" "card(A!1)")
        (("" (name "n2" "card(B!1)")
          (("" (forward-chain "finite_funset_bijection2")
            (("" (expand "bijective?")
              (("" (skosimp)
                (("" (inst + "n2 ^ n1" "f!1") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_finite_type const-decl "bool" finite_sets nil)
    (T2 formal-type-decl nil set_of_functions nil)
    (bijective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (n1 skolem-const-decl "{n: nat | n = Card[T1](A!1)}" set_of_functions nil)
    (A!1 skolem-const-decl "finite_set[T1]" set_of_functions nil)
    (n2 skolem-const-decl "{n: nat | n = Card[T2](B!1)}" set_of_functions nil)
    (B!1 skolem-const-decl "finite_set[T2]" set_of_functions nil)
    (finite_funset_bijection2 formula-decl nil set_of_functions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T1 formal-type-decl nil set_of_functions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil))
   shostak))
 (funset_TCC1 0
  (funset_TCC1-1 nil 3306495580
   ("" (skolem!)
    (("" (rewrite "finite_full" :dir rl)
      (("" (rewrite "finite_funset") nil nil)) nil))
    nil)
   ((finite_full formula-decl nil finite_sets nil)
    (T1 formal-type-decl nil set_of_functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T2 formal-type-decl nil set_of_functions nil)
    (finite_funset formula-decl nil set_of_functions nil))
   nil
   (funset subtype
    "sets[[(set_of_functions.A) -> (set_of_functions.B)]].fullset"
    "finite_set[[(A) -> (B)]]")))
 (card_funset_TCC1 0
  (card_funset_TCC1-1 nil 3306495580 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T1 formal-type-decl nil set_of_functions nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T2 formal-type-decl nil set_of_functions nil)
    (injective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (card_funset subtype
    "finite_sets[set_of_functions.T1].card(set_of_functions.A)"
    "{i: integers.int | booleans.OR(finite_sets[set_of_functions.T2].card(set_of_functions.B) /= 0, reals.>=(i, 0))}")))
 (card_funset 0
  (card_funset-1 nil 3306496635
   ("" (skosimp)
    (("" (name-replace "n1" "card(A!1)" :hide? nil)
      (("" (name-replace "n2" "card(B!1)" :hide? nil)
        (("" (rewrite "card_bij" +)
          (("" (forward-chain "finite_funset_bijection2")
            (("" (skolem!)
              (("" (inst + "LAMBDA (x : (funset(A!1, B!1))) : f!1(x)")
                (("" (delete -2 -3)
                  (("" (expand "bijective?")
                    (("" (flatten)
                      (("" (prop)
                        (("1" (grind :exclude "^") nil nil)
                         ("2" (expand "surjective?")
                          (("2" (skosimp*)
                            (("2" (inst?)
                              (("2" (skosimp*)
                                (("2" (inst?)
                                  (("2" (expand "funset")
                                    (("2" (expand "fullset")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T1 formal-type-decl nil set_of_functions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (card_bij formula-decl nil finite_sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (funset const-decl "finite_set[[(A) -> (B)]]" set_of_functions nil)
    (x!1 skolem-const-decl "[(A!1) -> (B!1)]" set_of_functions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (A!1 skolem-const-decl "finite_set[T1]" set_of_functions nil)
    (n1 skolem-const-decl "{n: nat | n = Card[T1](A!1)}" set_of_functions nil)
    (B!1 skolem-const-decl "finite_set[T2]" set_of_functions nil)
    (n2 skolem-const-decl "{n: nat | n = Card[T2](B!1)}" set_of_functions nil)
    (fullset const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (finite_funset_bijection2 formula-decl nil set_of_functions nil)
    (T2 formal-type-decl nil set_of_functions nil))
   shostak)))


(more_set_props
 (map_TCC1 0
  (map_TCC1-1 nil 3732017713
   ("" (expand "map")
    (("" (expand "nonempty?")
      (("" (skeep :preds? t)
        (("" (expand "nonempty?")
          (("" (expand "empty?")
            (("" (expand "member")
              (("" (skeep)
                (("" (inst -2 "f(x)") (("" (inst 1 "x") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (T1 formal-type-decl nil more_set_props nil)
    (T2 formal-type-decl nil more_set_props nil)
    (s skolem-const-decl "(nonempty?[T1])" more_set_props nil)
    (x skolem-const-decl "T1" more_set_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (empty? const-decl "bool" sets nil)
    (map const-decl "setof[T2]" more_set_props nil))
   nil))
 (map_finite_is_finite 0
  (map_finite_is_finite-1 nil 3753792082
   ("" (skeep* :preds? t)
    (("" (expand "is_finite")
      (("" (skeep :preds? t)
        ((""
          (inst 1 "N"
           "LAMBDA(x: (map(f)(s))): f!1((epsilon(LAMBDA (x_1: T1): s(x_1) AND f(x_1) = x)))")
          (("1" (expand "injective?")
            (("1" (skeep :preds? t)
              (("1"
                (inst -4
                 "epsilon(LAMBDA (x_1: T1): s(x_1) AND f(x_1) = x1)"
                 "epsilon(LAMBDA (x_1: T1): s(x_1) AND f(x_1) = x2)")
                (("1" (grind)
                  (("1" (use "epsilon_ax[T1]")
                    (("1" (split -1)
                      (("1" (lemma "epsilon_ax[T1]")
                        (("1"
                          (inst -1
                           " LAMBDA (x_1: T1): s(x_1) AND f(x_1) = f(y!2)")
                          (("1" (split -1)
                            (("1" (grind) nil nil)
                             ("2" (inst 1 "y!2") nil nil))
                            nil))
                          nil)
                         ("2" (inst 1 "y!1") nil nil))
                        nil)
                       ("2" (inst 1 "y!1") nil nil))
                      nil)
                     ("2" (inst 1 "y!1") nil nil))
                    nil))
                  nil)
                 ("2" (expand "map")
                  (("2" (skeep -1) (("2" (inst 1 "y") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep :preds? t)
            (("2" (use "epsilon_ax[T1]")
              (("1" (split -1)
                (("1" (flatten) nil nil)
                 ("2" (expand "map")
                  (("2" (skeep -1)
                    (("2" (inst 1 "y") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "map")
                (("2" (skeep :preds? t) (("2" (inst 1 "y") nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (s skolem-const-decl "finite_set[T1]" more_set_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (f skolem-const-decl "[T1 -> T2]" more_set_props nil)
    (map const-decl "setof[T2]" more_set_props nil)
    (setof type-eq-decl nil defined_types nil)
    (T1 formal-type-decl nil more_set_props nil)
    (T2 formal-type-decl nil more_set_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (injective? const-decl "bool" functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (map_nonempty?_is_nonempty? 0
  (map_nonempty?_is_nonempty?-1 nil 3753803863
   ("" (skeep* :preds? t)
    (("" (expand "nonempty?")
      (("" (expand "map")
        (("" (expand "empty?")
          (("" (skeep)
            (("" (expand "member")
              (("" (inst -2 "f(x)") (("" (inst?) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (x skolem-const-decl "T1" more_set_props nil)
    (s skolem-const-decl "(nonempty?[T1])" more_set_props nil)
    (set type-eq-decl nil sets nil)
    (T2 formal-type-decl nil more_set_props nil)
    (T1 formal-type-decl nil more_set_props nil)
    (map const-decl "setof[T2]" more_set_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (map_finite_nonempty?_is_finite_nonempty? 0
  (map_finite_nonempty?_is_finite_nonempty?-1 nil 3753803944
   ("" (assert)
    (("" (skeep* :preds? t)
      (("" (expand "finite_nonempty?")
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (map_finite_is_finite formula-decl nil more_set_props nil)
    (not_empty_nonempty formula-decl nil more_set_defs nil)
    (finite_nonempty? const-decl "bool" more_set_defs nil)
    (nil application-judgement "(nonempty?[T2])" more_set_props nil))
   shostak))
 (map_TCC2 0
  (map_TCC2-1 nil 3753623691
   ("" (expand "finite_nonempty?") (("" (assert) nil nil)) nil)
   ((map_finite_is_finite formula-decl nil more_set_props nil)
    (finite_nonempty? const-decl "bool" more_set_defs nil)
    (nil application-judgement "(nonempty?[T2])" more_set_props nil))
   nil))
 (map_set_alt_def 0
  (map_set_alt_def-1 nil 3726335118
   ("" (skeep)
    (("" (split 1)
      (("1" (skeep)
        (("1" (inst 1 "f(t1)")
          (("1" (expand "map") (("1" (inst?) nil nil)) nil)) nil))
        nil)
       ("2" (skeep :preds? t)
        (("2" (expand "map" -1) (("2" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((T2 formal-type-decl nil more_set_props nil)
    (T1 formal-type-decl nil more_set_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (map const-decl "setof[T2]" more_set_props nil)
    (t1 skolem-const-decl "(s)" more_set_props nil)
    (s skolem-const-decl "setof[T1]" more_set_props nil)
    (f skolem-const-decl "[T1 -> T2]" more_set_props nil))
   shostak)))


(ln_approx
 (a_TCC1 0
  (a_TCC1-1 nil 3627725172
   ("" (skeep)
    (("" (ground)
      (("1" (cross-mult) nil nil) ("2" (cross-mult) nil nil)
       ("3" (cross-mult) nil nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil))
   nil
   (a subtype
    "number_fields./(((number_fields.-)(ln_approx.xlg2, 1)), ((number_fields.+)(ln_approx.xlg2, 1)))"
    "{x: real_types.posreal | reals.<=(x, 1/3)}")))
 (split_log_TCC1 0
  (split_log_TCC1-1 nil 3627725172 ("" (skeep) (("" (ground) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (split_log subtype "(number_fields.-)(1, ln_approx.a(ln_approx.xlg2))"
    "posreal")))
 (split_log 0
  (split_log-1 nil 3627738074
   ("" (skeep)
    (("" (rewrite "ln_div" :dir rl)
      (("" (case "xlg2 = (1 + a(xlg2)) / (1 - a(xlg2))")
        (("1" (ground) nil nil)
         ("2" (hide 2)
          (("2" (cross-mult)
            (("2" (move-terms 1 l 2)
              (("2" (move-terms 1 r 1)
                (("2" (factor 1 r)
                  (("2" (div-by 1 "(1+xlg2)")
                    (("2" (expand "a") (("2" (propax) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (ln_div formula-decl nil ln_exp nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (a const-decl "{x: posreal | x > 0 AND x <= 1 / 3}" ln_approx nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel4 formula-decl nil real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (ln12_alt_seq_TCC1 0
  (ln12_alt_seq_TCC1-1 nil 3627732251 ("" (subtype-tcc) nil nil)
   ((even? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (ln12_alt_seq subtype "ln_approx.n"
    "{i: integers.int | booleans.OR(ln_approx.ax /= 0, reals.>=(i, 0))}")))
 (ln12_alt_seq_TCC2 0
  (ln12_alt_seq_TCC2-1 nil 3627732251
   ("" (skeep)
    (("" (expand "even?") (("" (inst 1 "0") (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((even? const-decl "bool" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil (ln12_alt_seq subtype "ln_approx.n" "nznum")))
 (ln12_alt_converges 0
  (ln12_alt_converges-1 nil 3627732268
   ("" (skeep)
    (("" (expand "conv_series?")
      (("" (lemma "int_geo_neg")
        (("" (case "abs(a(xlg2))<1")
          (("1" (inst -2 "a(xlg2)")
            (("1" (ground)
              (("1" (hide -3)
                (("1" (expand "conv_powerseries?")
                  (("1" (inst-cp -2 "a(xlg2)")
                    (("1" (inst -2 "-a(xlg2)")
                      (("1" (expand "powerseries")
                        (("1"
                          (case "convergent?((-1)*series(powerseq(lnp1_seq, -a(xlg2))))")
                          (("1" (hide -3)
                            (("1" (lemma "series_sum_conv")
                              (("1" (rewrite "series_scal")
                                (("1"
                                  (inst -1 "powerseq(lnp1_seq, a(xlg2))"
                                   "LAMBDA n: (-1) * powerseq(lnp1_seq, -a(xlg2))(n)")
                                  (("1" (ground)
                                    (("1"
                                      (case
                                       "powerseq(lnp1_seq, a(xlg2)) +
                          (LAMBDA n:
                             (-1) * powerseq(lnp1_seq, -a(xlg2))(n)) = ln12_alt_seq(a(xlg2))")
                                      (("1" (ground) nil nil)
                                       ("2"
                                        (decompose-equality 1)
                                        (("2"
                                          (hide -)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (expand "powerseq")
                                              (("2"
                                                (ground)
                                                (("2"
                                                  (expand "lnp1_seq")
                                                  (("2"
                                                    (case "x!1=0")
                                                    (("1"
                                                      (ground)
                                                      (("1" (grind) nil nil))
                                                      nil)
                                                     ("2"
                                                      (ground)
                                                      (("2"
                                                        (case
                                                         "((LAMBDA (k: nat):
          IF k = 0 THEN 0 ELSE ((-1) ^ (1 + k)) / k ENDIF * a(xlg2) ^ k)
        +
        (LAMBDA n:
           (-1) *
            (IF n = 0 THEN 0 ELSE ((-1) ^ (1 + n)) / n ENDIF *
              (-a(xlg2)) ^ n)))
          (x!1) = ((-1) ^ (1 + x!1)) / x!1 * a(xlg2) ^ x!1 + (-1) *((-1) ^ (1 + x!1)) / x!1 * (-a(xlg2)) ^ x!1")
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (case-replace
                                                               " ((-1) ^ (1 + x!1)) / x!1 * a(xlg2) ^ x!1 +
       (-1) * ((-1) ^ (1 + x!1)) / x!1 * (-a(xlg2)) ^ x!1 = ((-1) ^ (1 + x!1))*( 1/ x!1 * a(xlg2) ^ x!1 +
       (-1) / x!1 * (-a(xlg2)) ^ x!1) ")
                                                              (("1"
                                                                (hide -)
                                                                (("1"
                                                                  (case
                                                                   "-a(xlg2) = (-1)*a(xlg2)")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (rewrite
                                                                       "mult_expt")
                                                                      (("1"
                                                                        (expand
                                                                         "ln12_alt_seq")
                                                                        (("1"
                                                                          (lift-if
                                                                           2)
                                                                          (("1"
                                                                            (split
                                                                             2)
                                                                            (("1"
                                                                              (lemma
                                                                               "even_m1_pow")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (ground)
                                                                              (("2"
                                                                                (lemma
                                                                                 "not_even_m1_pow")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "x!1")
                                                                                  (("2"
                                                                                    (ground)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("2"
                                                                                        (case-replace
                                                                                         "(-1) ^ (1 + x!1) = 1")
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "^")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "expt"
                                                                                             1)
                                                                                            (("2"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 3)
                                                          (("2"
                                                            (ground)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (skeep)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "conv_series_scal") nil nil))
                          nil))
                        nil)
                       ("2" (hide (-2 2)) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (typepred " a(xlg2)")
              (("2" (ground) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((conv_series? const-decl "bool" series series)
    (a const-decl "{x: posreal | x > 0 AND x <= 1 / 3}" ln_approx nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (conv_powerseries? const-decl "bool" power_series_conv series)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (series const-decl "sequence[real]" series series)
    (powerseq const-decl "sequence[real]" power_series series)
    (lnp1_seq const-decl "real" ln_series nil)
    (series_sum_conv formula-decl nil series series)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (ln12_alt_seq const-decl "sequence[real]" ln_approx nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (mult_expt formula-decl nil exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (not_even_m1_pow formula-decl nil exponentiation nil)
    (even_m1_pow formula-decl nil exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (int_exp application-judgement "int" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (series_scal formula-decl nil series series)
    (conv_series_scal formula-decl nil series series)
    (powerseries const-decl "sequence[real]" power_series series)
    (abslt1 type-eq-decl nil ln_series nil)
    (xlg2 skolem-const-decl "{x: posreal | x > 1 AND x <= 2}" ln_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_geo_neg formula-decl nil ln_series nil))
   shostak))
 (ln12_alt_equals_TCC1 0
  (ln12_alt_equals_TCC1-1 nil 3627737913
   ("" (lemma "ln12_alt_converges") (("" (propax) nil nil)) nil)
   ((ln12_alt_converges formula-decl nil ln_approx nil)) nil
   (ln12_alt_equals subtype
    "ln_approx.ln12_alt_seq(ln_approx.a(ln_approx.xlg2))"
    "(series.conv_series?)")))
 (ln12_alt_equals 0
  (ln12_alt_equals-1 nil 3627738683
   ("" (skeep)
    (("" (rewrite "split_log")
      (("" (lemma "int_geo_neg")
        (("" (inst-cp -1 "a(xlg2)")
          (("1" (inst -1 "-a(xlg2)")
            (("1" (expand "ln")
              (("1" (lemma "lnp1_prep")
                (("1" (inst-cp -1 "a(xlg2)")
                  (("1" (inst -1 "-a(xlg2)")
                    (("1" (ground)
                      (("1" (replaces -2)
                        (("1" (replaces -3)
                          (("1" (replaces -4)
                            (("1" (replaces -5)
                              (("1" (hide (-1 -2))
                                (("1" (lemma "inf_sum_scal")
                                  (("1"
                                    (case-replace
                                     "Inf_sum(lnp1_seq)(a(xlg2)) = inf_sum(powerseq(lnp1_seq, a(xlg2)))")
                                    (("1"
                                      (case-replace
                                       "Inf_sum(lnp1_seq)(-a(xlg2)) = inf_sum(powerseq(lnp1_seq, -a(xlg2)))")
                                      (("1"
                                        (case-replace
                                         " inf_sum(powerseq(lnp1_seq, a(xlg2))) -
       inf_sum(powerseq(lnp1_seq, -a(xlg2))) = inf_sum(powerseq(lnp1_seq, a(xlg2))) + (-1)*
       inf_sum(powerseq(lnp1_seq, -a(xlg2)))")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst
                                             -3
                                             "powerseq(lnp1_seq, -a(xlg2))"
                                             "(-1)"
                                             "0")
                                            (("1"
                                              (case
                                               " series(powerseq(lnp1_seq, -a(xlg2)), 0) = series(powerseq(lnp1_seq, -a(xlg2)))")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (case
                                                     "inf_sum(0, powerseq(lnp1_seq, -a(xlg2))) = inf_sum(powerseq(lnp1_seq, -a(xlg2)))")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (expand
                                                         "conv_powerseries?")
                                                        (("1"
                                                          (inst -4 "-a(xlg2)")
                                                          (("1"
                                                            (expand
                                                             "powerseries")
                                                            (("1"
                                                              (lemma
                                                               "scal_series_conv")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "powerseq(lnp1_seq, -a(xlg2))"
                                                                 "(-1)")
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (case
                                                                     "inf_sum(0, (-1) * powerseq(lnp1_seq, -a(xlg2))) = inf_sum( (-1) * powerseq(lnp1_seq, -a(xlg2)))")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (case
                                                                         "inf_sum(powerseq(lnp1_seq, a(xlg2))) -
       inf_sum(powerseq(lnp1_seq, -a(xlg2))) = inf_sum(powerseq(lnp1_seq, a(xlg2))) + (-1)*
       inf_sum(powerseq(lnp1_seq, -a(xlg2)))")
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (replaces
                                                                             -2)
                                                                            (("1"
                                                                              (inst
                                                                               -5
                                                                               "a(xlg2)")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "inf_sum_of_sum"
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (case
                                                                                   "powerseq(lnp1_seq, a(xlg2)) +
               (-1) * powerseq(lnp1_seq, -a(xlg2)) = ln12_alt_seq(a(xlg2))")
                                                                                  (("1"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (decompose-equality
                                                                                     1)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -)
                                                                                      (("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "powerseq")
                                                                                          (("2"
                                                                                            (ground)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "lnp1_seq")
                                                                                              (("2"
                                                                                                (case
                                                                                                 "x!1=0")
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (ground)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "((LAMBDA (k: nat):
                           IF k = 0 THEN 0 ELSE ((-1) ^ (1 + k)) / k ENDIF * a(xlg2) ^ k)
                         +
                         (-1) *
         (LAMBDA (k: nat):
            IF k = 0 THEN 0 ELSE ((-1) ^ (1 + k)) / k ENDIF *
             (-a(xlg2)) ^ k))
          (x!1) = ((-1) ^ (1 + x!1)) / x!1 * a(xlg2) ^ x!1 + (-1) *((-1) ^ (1 + x!1)) / x!1 * (-a(xlg2)) ^ x!1")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         " ((-1) ^ (1 + x!1)) / x!1 * a(xlg2) ^ x!1 +
                     (-1) * ((-1) ^ (1 + x!1)) / x!1 * (-a(xlg2)) ^ x!1 = ((-1) ^ (1 + x!1))*( 1/ x!1 * a(xlg2) ^ x!1 +
                     (-1) / x!1 * (-a(xlg2)) ^ x!1) ")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "-a(xlg2) = (-1)*a(xlg2)")
                                                                                                            (("1"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "mult_expt")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "ln12_alt_seq")
                                                                                                                  (("1"
                                                                                                                    (lift-if
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "even_m1_pow")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "x!1")
                                                                                                                          (("1"
                                                                                                                            (ground)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (ground)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "not_even_m1_pow")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "x!1")
                                                                                                                            (("2"
                                                                                                                              (ground)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (case-replace
                                                                                                                                   "(-1) ^ (1 + x!1) = 1")
                                                                                                                                  (("1"
                                                                                                                                    (ground)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (expand
                                                                                                                                     "^")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "expt"
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (ground)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (ground)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       3)
                                                                                                      (("2"
                                                                                                        (ground)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (skeep)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "series((-1) * powerseq(lnp1_seq, -a(xlg2))) = (-1) * series(powerseq(lnp1_seq, -a(xlg2)))")
                                                                                  (("1"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (rewrite
                                                                                     "series_scal"
                                                                                     1)
                                                                                    (("2"
                                                                                      (case
                                                                                       "(-1) * powerseq(lnp1_seq, -a(xlg2)) = LAMBDA n: (-1) * powerseq(lnp1_seq, -a(xlg2))(n)")
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "powerseq")
                                                                                          (("2"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "inf_sum")
                                                                      (("2"
                                                                        (expand
                                                                         "series")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (expand
                                                                       "conv_series?")
                                                                      (("3"
                                                                        (expand
                                                                         "powerseq")
                                                                        (("3"
                                                                          (expand
                                                                           "*")
                                                                          (("3"
                                                                            (ground)
                                                                            (("3"
                                                                              (case
                                                                               "(LAMBDA (x: nat):
                    (-1) *
                     series(LAMBDA (k: nat): lnp1_seq(k) * (-a(xlg2)) ^ k)
                           (x)) = (series(LAMBDA (x: nat):
                           -1 * (lnp1_seq(x) * (-a(xlg2)) ^ x)))")
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (rewrite
                                                                                 "series_scal"
                                                                                 1
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "inf_sum")
                                                      (("2"
                                                        (expand "series")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "conv_powerseries?")
                                                    (("2"
                                                      (inst -3 "-a(xlg2)")
                                                      (("2"
                                                        (expand "powerseries")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "series")
                                                (("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (ground) nil nil))
                                        nil)
                                       ("2"
                                        (expand "Inf_sum")
                                        (("2"
                                          (expand "inf_sum")
                                          (("2"
                                            (expand "powerseries")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "conv_powerseries?")
                                        (("3"
                                          (inst -3 "-a(xlg2)")
                                          (("3"
                                            (expand "powerseries")
                                            (("3"
                                              (expand "conv_series?")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (expand "Inf_sum")
                                      (("2"
                                        (expand "inf_sum")
                                        (("2"
                                          (expand "powerseries")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (expand "conv_powerseries?")
                                      (("3"
                                        (inst -2 "a(xlg2)")
                                        (("3"
                                          (expand "powerseries")
                                          (("3"
                                            (expand "conv_series?")
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (typepred "a(xlg2)")
                (("2" (ground) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (typepred "a(xlg2)") (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((split_log formula-decl nil ln_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (xlg2 skolem-const-decl "{x: posreal | x > 1 AND x <= 2}" ln_approx nil)
    (a const-decl "{x: posreal | x > 0 AND x <= 1 / 3}" ln_approx nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (abslt1 type-eq-decl nil ln_series nil)
    (ln const-decl "real" ln_exp nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (inf_sum_scal formula-decl nil series series)
    (series const-decl "sequence[real]" series series)
    (series const-decl "sequence[real]" series series)
    (real_times_real_is_real application-judgement "real" reals nil)
    (scal_series_conv formula-decl nil series series)
    (sigma def-decl "real" sigma reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (series_scal formula-decl nil series series)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (ln12_alt_seq const-decl "sequence[real]" ln_approx nil)
    (even_m1_pow formula-decl nil exponentiation nil)
    (not_even_m1_pow formula-decl nil exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (mult_expt formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (int_exp application-judgement "int" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (inf_sum_of_sum formula-decl nil series series)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (powerseries const-decl "sequence[real]" power_series series)
    (inf_sum const-decl "real" series series)
    (conv_series? const-decl "bool" series series)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (conv_powerseries? const-decl "bool" power_series_conv series)
    (Inf_sum const-decl "real" power_series_conv series)
    (lnp1_seq const-decl "real" ln_series nil)
    (conv_series? const-decl "bool" series series)
    (inf_sum const-decl "real" series series)
    (powerseq const-decl "sequence[real]" power_series series)
    (TRUE const-decl "bool" booleans nil)
    (lnp1_prep formula-decl nil ln_series nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (int_geo_neg formula-decl nil ln_series nil))
   shostak))
 (ln12_lb 0
  (ln12_lb-1 nil 3627745023
   ("" (skeep)
    (("" (rewrite "ln12_alt_equals")
      (("" (expand "inf_sum")
        (("" (lemma "limit_series_shift")
          (("" (lemma "ln12_alt_converges")
            (("" (inst?)
              (("" (inst -2 "ln12_alt_seq(a(xlg2))" "2*n+2")
                (("" (ground)
                  (("1" (expand "conv_series?")
                    (("1" (lemma "tail_series_conv")
                      (("1" (inst -1 "2*n+2" " ln12_alt_seq(a(xlg2))")
                        (("1" (ground)
                          (("1" (replaces -2)
                            (("1" (expand "series" 1 1)
                              (("1"
                                (both-sides "-"
                                 "sigma(0, 1 + 2 * n, ln12_alt_seq(a(xlg2)))"
                                 1)
                                (("1" (ground)
                                  (("1" (lemma "inf_sum_le")
                                    (("1"
                                      (inst
                                       -1
                                       "LAMBDA n: 0"
                                       "LAMBDA (n_1: nat):
                      ln12_alt_seq(a(xlg2))(2 + n_1 + 2 * n)"
                                       "0")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "inf_sum")
                                          (("1"
                                            (lemma "zero_series_limit")
                                            (("1"
                                              (expand "series" -1)
                                              (("1"
                                                (expand "series" -2 1)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (expand "series")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (ground)
                                              (("2"
                                                (expand "abs")
                                                (("2"
                                                  (expand "ln12_alt_seq")
                                                  (("2"
                                                    (lift-if 1)
                                                    (("2"
                                                      (split 1)
                                                      (("1" (ground) nil nil)
                                                       ("2" (ground) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "series")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "conv_series?") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ln12_alt_equals formula-decl nil ln_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (limit_series_shift formula-decl nil series series)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tail_series_conv formula-decl nil series series)
    (series const-decl "sequence[real]" series series)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (inf_sum const-decl "real" series series)
    (series const-decl "sequence[real]" series series)
    (zero_series_limit formula-decl nil series series)
    (inf_sum_le formula-decl nil series series)
    (both_sides_minus_le1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (limit const-decl "real" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (conv_series? const-decl "bool" series series)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (a const-decl "{x: posreal | x > 0 AND x <= 1 / 3}" ln_approx nil)
    (ln12_alt_seq const-decl "sequence[real]" ln_approx nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (ln12_alt_converges formula-decl nil ln_approx nil)
    (inf_sum const-decl "real" series series))
   shostak))
 (ln12_ub 0
  (ln12_ub-3 nil 3627753749
   ("" (skeep)
    (("" (rewrite "ln12_alt_equals")
      (("" (expand "inf_sum")
        (("" (lemma "limit_series_shift")
          (("" (lemma "ln12_alt_converges")
            (("" (inst?)
              (("" (inst -2 "ln12_alt_seq(a(xlg2))" "2*n+2")
                (("" (ground)
                  (("1" (expand "conv_series?")
                    (("1" (lemma "tail_series_conv")
                      (("1" (inst -1 "2*n+2" " ln12_alt_seq(a(xlg2))")
                        (("1" (ground)
                          (("1" (replaces -2)
                            (("1" (expand "series" 1 1)
                              (("1"
                                (both-sides "-"
                                 "sigma(0, 1 + 2 * n, ln12_alt_seq(a(xlg2)))"
                                 1)
                                (("1" (ground)
                                  (("1" (lemma "inf_sum_le")
                                    (("1"
                                      (inst
                                       -1
                                       "LAMBDA (n_1: nat):
                                      ln12_alt_seq(a(xlg2))(2 + n_1 + 2 * n)"
                                       "2*a(xlg2)^(2*n+2)/(2*n+2)*geometric(a(xlg2))"
                                       "0")
                                      (("1"
                                        (lemma "const_geometric_series")
                                        (("1"
                                          (inst
                                           -1
                                           "2*a(xlg2) ^ (2 * n + 2) / (2 * n + 2)"
                                           "a(xlg2)")
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (expand "convergent?" -2)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (expand "inf_sum")
                                                  (("1"
                                                    (case
                                                     "limit(series(((2 * a(xlg2) ^ (2 + 2 * n)) / (2 + 2 * n)) *
                                  geometric(a(xlg2)),
                                 0)) <=(1 / (6 + 6 * n)) * 9 ^ (-n)")
                                                    (("1"
                                                      (expand "series")
                                                      (("1" (ground) nil nil))
                                                      nil)
                                                     ("2"
                                                      (hide (-1 2))
                                                      (("2"
                                                        (lemma
                                                         "geometric_sum")
                                                        (("2"
                                                          (inst -1 "a(xlg2)")
                                                          (("2"
                                                            (ground)
                                                            (("1"
                                                              (lemma
                                                               "inf_sum_scal")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "geometric(a(xlg2))"
                                                                 "((2 * a(xlg2) ^ (2 + 2 * n)) / (2 + 2 * n))"
                                                                 "0")
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (expand
                                                                     "inf_sum")
                                                                    (("1"
                                                                      (replaces
                                                                       -1
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (expand
                                                                         "series")
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (case
                                                                             "1/(1-a(xlg2))<=3/2")
                                                                            (("1"
                                                                              (hide
                                                                               (-2
                                                                                -3
                                                                                -4))
                                                                              (("1"
                                                                                (case
                                                                                 "a(xlg2)^(2+2*n)<= 9^-(n+1)")
                                                                                (("1"
                                                                                  (both-sides
                                                                                   "*"
                                                                                   "2"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (both-sides
                                                                                     "/"
                                                                                     "(2+2*n)"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (mult-ineq
                                                                                       -1
                                                                                       -2)
                                                                                      (("1"
                                                                                        (case
                                                                                         "(9 ^ -(n + 1) * 2 / (2 + 2 * n)) * (3 / 2)<= (1 / (6 + 6 * n)) * 9 ^ (-n)")
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "9 ^ -(n + 1) = 9^(-n)/9")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (cancel-by
                                                                                               1
                                                                                               "9^(-n)")
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "^")
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (hide
                                                                                           (2
                                                                                            3))
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "a(xlg2)")
                                                                                            (("2"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "abs")
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "abs")
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "a(xlg2)")
                                                                                    (("2"
                                                                                      (case-replace
                                                                                       "2+2*n = 2*(n+1)")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "expt_times")
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (case
                                                                                             "a(xlg2)^2<= 1/9")
                                                                                            (("1"
                                                                                              (case
                                                                                               "9 ^ -(n + 1) = (1/9)^(1+n)")
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "both_sides_expt_pos_ge")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "n+1"
                                                                                                     "1/9"
                                                                                                     "a(xlg2)^2")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "inv_expt")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "^")
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "^")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "expt")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "expt")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "expt")
                                                                                                      (("2"
                                                                                                        (cross-mult)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "FORALL (a,b:posreal): a<=b IMPLIES a*a<=b*b")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "a(xlg2)"
                                                                                                             "1/3")
                                                                                                            (("1"
                                                                                                              (ground)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (skeep)
                                                                                                              (("2"
                                                                                                                (mult-ineq
                                                                                                                 -1
                                                                                                                 -1)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (typepred
                                                                                 "a(xlg2)")
                                                                                (("2"
                                                                                  (grind-reals)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "geometric_conv")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "a(xlg2)")
                                                                      (("2"
                                                                        (ground)
                                                                        (("1"
                                                                          (expand
                                                                           "series")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "abs")
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand "abs")
                                                              (("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand "ln12_alt_seq")
                                                    (("2"
                                                      (lift-if 1)
                                                      (("2"
                                                        (split 1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (expand "abs")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "geometric")
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("1"
                                                                        (case
                                                                         "(((2 * a(xlg2) ^ (2 + 2 * n)) / (2 + 2 * n)) *
                        (LAMBDA n: a(xlg2) ^ n))
                          (n_1) = (((2 * a(xlg2) ^ (2 + 2 * n)) / (2 + 2 * n)) *
                        (a(xlg2) ^ n_1))
                          ")
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (typepred
                                                                             "a(xlg2)")
                                                                            (("1"
                                                                              (replaces
                                                                               -4)
                                                                              (("1"
                                                                                (cross-mult)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (ground)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide-all-but 2)
                                                            (("2"
                                                              (typepred
                                                               "a(xlg2)")
                                                              (("2"
                                                                (expand
                                                                 "geometric")
                                                                (("2"
                                                                  (case
                                                                   "(((2 * a(xlg2) ^ (2 + 2 * n)) / (2 + 2 * n)) *
                        (LAMBDA n: a(xlg2) ^ n))
                          (n_1) = (((2 * a(xlg2) ^ (2 + 2 * n)) / (2 + 2 * n)) *
                        (a(xlg2) ^ n_1))
                          ")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "abs")
                                                                      (("1"
                                                                        (lift-if
                                                                         1)
                                                                        (("1"
                                                                          (split
                                                                           1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (cross-mult
                                                                               -1)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (cross-mult
                                                                               2)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "expt_plus"
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (inst
                                                   1
                                                   "((2*a(xlg2) ^ (2 + 2 * n)) / (2 + 2 * n)) / (1 - a(xlg2))")
                                                  (("3"
                                                    (expand "series")
                                                    (("3" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "a(xlg2)")
                                              (("2"
                                                (ground)
                                                (("1"
                                                  (expand "abs")
                                                  (("1" (ground) nil nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand "abs")
                                                    (("2" (ground) nil nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand "abs")
                                                  (("3" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "conv_series?") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ln12_alt_equals formula-decl nil ln_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (limit_series_shift formula-decl nil series series)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tail_series_conv formula-decl nil series series)
    (series const-decl "sequence[real]" series series)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (geometric const-decl "sequence[real]" series series)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (inf_sum const-decl "real" series series)
    (inf_sum_scal formula-decl nil series series)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (both_sides_expt_pos_ge formula-decl nil exponentiation nil)
    (inv_expt formula-decl nil exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (expt_times formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (even? const-decl "bool" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (div_times formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (div_div2 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (both_sides_times_pos_le2 formula-decl nil real_props nil)
    (both_sides_plus_le2 formula-decl nil real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (geometric_conv formula-decl nil series series)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (geometric_sum formula-decl nil series series)
    (series const-decl "sequence[real]" series series)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (const_geometric_series formula-decl nil series series)
    (inf_sum_le formula-decl nil series series)
    (both_sides_minus_ge1 formula-decl nil real_props nil)
    (both_sides_plus_ge2 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (limit const-decl "real" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil) (sigma def-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (conv_series? const-decl "bool" series series)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (a const-decl "{x: posreal | x > 0 AND x <= 1 / 3}" ln_approx nil)
    (ln12_alt_seq const-decl "sequence[real]" ln_approx nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (ln12_alt_converges formula-decl nil ln_approx nil)
    (inf_sum const-decl "real" series series)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil))
   nil)
  (ln12_ub-2 nil 3627750214
   ("" (skeep)
    (("" (rewrite "ln12_alt_equals")
      (("" (expand "inf_sum")
        (("" (lemma "limit_series_shift")
          (("" (lemma "ln12_alt_converges")
            (("" (inst?)
              (("" (inst -2 "ln12_alt_seq(a(xlg2))" "2*n+2")
                (("" (ground)
                  (("1" (expand "conv_series?")
                    (("1" (lemma "tail_series_conv")
                      (("1" (inst -1 "2*n+2" " ln12_alt_seq(a(xlg2))")
                        (("1" (ground)
                          (("1" (replaces -2)
                            (("1" (expand "series" 1 1)
                              (("1"
                                (both-sides "-"
                                 "sigma(0, 1 + 2 * n, ln12_alt_seq(a(xlg2)))"
                                 1)
                                (("1" (ground)
                                  (("1" (lemma "inf_sum_le")
                                    (("1"
                                      (inst
                                       -1
                                       "LAMBDA (n_1: nat):
                                  ln12_alt_seq(a(xlg2))(2 + n_1 + 2 * n)"
                                       "2*a(xlg2)^(2*n+2)/(2*n+2)*geometric(a(xlg2))"
                                       "0")
                                      (("1"
                                        (lemma "const_geometric_series")
                                        (("1"
                                          (inst
                                           -1
                                           "2*a(xlg2) ^ (2 * n + 2) / (2 * n + 2)"
                                           "a(xlg2)")
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (expand "convergent?" -2)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (expand "inf_sum")
                                                  (("1"
                                                    (case
                                                     "limit(series(((2 * a(xlg2) ^ (2 + 2 * n)) / (2 + 2 * n)) *
                     geometric(a(xlg2)),
                    0)) <=(1 / (12 + 12 * n)) * 9 ^ (-n)")
                                                    (("1"
                                                      (expand "series")
                                                      (("1" (ground) nil nil))
                                                      nil)
                                                     ("2"
                                                      (hide (-1 2))
                                                      (("2"
                                                        (lemma
                                                         "geometric_sum")
                                                        (("2"
                                                          (inst -1 "a(xlg2)")
                                                          (("2"
                                                            (ground)
                                                            (("1"
                                                              (lemma
                                                               "inf_sum_scal")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "geometric(a(xlg2))"
                                                                 "((2 * a(xlg2) ^ (2 + 2 * n)) / (2 + 2 * n))"
                                                                 "0")
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (expand
                                                                     "inf_sum")
                                                                    (("1"
                                                                      (replaces
                                                                       -1
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (expand
                                                                         "series")
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (case
                                                                             "1/(1-a(xlg2))<=3/2")
                                                                            (("1"
                                                                              (hide
                                                                               (-2
                                                                                -3
                                                                                -4))
                                                                              (("1"
                                                                                (case
                                                                                 "a(xlg2)^(2+2*n)<= 9^-(n+1)")
                                                                                (("1"
                                                                                  (both-sides
                                                                                   "*"
                                                                                   "2"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (both-sides
                                                                                     "/"
                                                                                     "(2+2*n)"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (mult-ineq
                                                                                       -1
                                                                                       -2)
                                                                                      (("1"
                                                                                        (case
                                                                                         "(9 ^ -(n + 1) * 2 / (2 + 2 * n)) * (3 / 2)<= (1 / (12 + 12 * n)) * 9 ^ (-n)")
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "9 ^ -(n + 1) = 9^(-n)/9")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (cancel-by
                                                                                               1
                                                                                               "9^(-n)")
                                                                                              (("1"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "^")
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (postpone)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "a(xlg2)")
                                                                                    (("2"
                                                                                      (case-replace
                                                                                       "2+2*n = 2*(n+1)")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "expt_times")
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (case
                                                                                             "a(xlg2)^2<= 1/9")
                                                                                            (("1"
                                                                                              (postpone)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "^")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "expt")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "expt")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "expt")
                                                                                                      (("2"
                                                                                                        (cross-mult)
                                                                                                        (("2"
                                                                                                          (postpone)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (typepred
                                                                                 "a(xlg2)")
                                                                                (("2"
                                                                                  (grind-reals)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "geometric_conv")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "a(xlg2)")
                                                                      (("2"
                                                                        (ground)
                                                                        (("1"
                                                                          (expand
                                                                           "series")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "abs")
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand "abs")
                                                              (("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand "ln12_alt_seq")
                                                    (("2"
                                                      (lift-if 1)
                                                      (("2"
                                                        (split 1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (expand "abs")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "geometric")
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("1"
                                                                        (case
                                                                         "(((2 * a(xlg2) ^ (2 + 2 * n)) / (2 + 2 * n)) *
         (LAMBDA n: a(xlg2) ^ n))
           (n_1) = (((2 * a(xlg2) ^ (2 + 2 * n)) / (2 + 2 * n)) *
         (a(xlg2) ^ n_1))
           ")
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (typepred
                                                                             "a(xlg2)")
                                                                            (("1"
                                                                              (replaces
                                                                               -4)
                                                                              (("1"
                                                                                (cross-mult)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (ground)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide-all-but 2)
                                                            (("2"
                                                              (typepred
                                                               "a(xlg2)")
                                                              (("2"
                                                                (expand
                                                                 "geometric")
                                                                (("2"
                                                                  (case
                                                                   "(((2 * a(xlg2) ^ (2 + 2 * n)) / (2 + 2 * n)) *
         (LAMBDA n: a(xlg2) ^ n))
           (n_1) = (((2 * a(xlg2) ^ (2 + 2 * n)) / (2 + 2 * n)) *
         (a(xlg2) ^ n_1))
           ")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "abs")
                                                                      (("1"
                                                                        (lift-if
                                                                         1)
                                                                        (("1"
                                                                          (split
                                                                           1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (cross-mult
                                                                               -1)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (cross-mult
                                                                               2)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "expt_plus"
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (inst
                                                   1
                                                   "((2*a(xlg2) ^ (2 + 2 * n)) / (2 + 2 * n)) / (1 - a(xlg2))")
                                                  (("3"
                                                    (expand "series")
                                                    (("3" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "a(xlg2)")
                                              (("2"
                                                (ground)
                                                (("1"
                                                  (expand "abs")
                                                  (("1" (ground) nil nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand "abs")
                                                    (("2" (ground) nil nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand "abs")
                                                  (("3" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "conv_series?") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (ln12_ub-1 nil 3627749062
   ("" (skeep)
    (("" (rewrite "ln12_alt_equals")
      (("" (expand "inf_sum")
        (("" (lemma "limit_series_shift")
          (("" (lemma "ln12_alt_converges")
            (("" (inst?)
              (("" (inst -2 "ln12_alt_seq(a(xlg2))" "2*n+2")
                (("" (ground)
                  (("1" (expand "conv_series?")
                    (("1" (lemma "tail_series_conv")
                      (("1" (inst -1 "2*n+2" " ln12_alt_seq(a(xlg2))")
                        (("1" (ground)
                          (("1" (replaces -2)
                            (("1" (expand "series" 1 1)
                              (("1"
                                (both-sides "-"
                                 "sigma(0, 1 + 2 * n, ln12_alt_seq(a(xlg2)))"
                                 1)
                                (("1" (ground)
                                  (("1" (lemma "inf_sum_le")
                                    (("1"
                                      (inst
                                       -1
                                       "LAMBDA (n_1: nat):
                          ln12_alt_seq(a(xlg2))(2 + n_1 + 2 * n)"
                                       "a(xlg2)^(2*n+2)/(2*n+2)*geometric(a(xlg2))"
                                       "0")
                                      (("1"
                                        (lemma "const_geometric_series")
                                        (("1"
                                          (inst
                                           -1
                                           "a(xlg2) ^ (2 * n + 2) / (2 * n + 2)"
                                           "a(xlg2)")
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (expand "convergent?" -2)
                                              (("1"
                                                (ground)
                                                (("1" (postpone) nil nil)
                                                 ("2" (postpone) nil nil)
                                                 ("3"
                                                  (inst
                                                   1
                                                   "((a(xlg2) ^ (2 + 2 * n)) / (2 + 2 * n)) / (1 - a(xlg2))")
                                                  (("3"
                                                    (expand "series")
                                                    (("3" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "a(xlg2)")
                                              (("2"
                                                (ground)
                                                (("1"
                                                  (expand "abs")
                                                  (("1" (ground) nil nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand "geometric")
                                                    (("2"
                                                      (expand "ln12_alt_seq")
                                                      (("2"
                                                        (lift-if 1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (expand "abs")
                                                              (("1"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3" (postpone) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "conv_series?") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (ln_alt_series_it_TCC1 0
  (ln_alt_series_it_TCC1-1 nil 3627813571 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (ln_alt_series_it subtype "(number_fields.-)(ln_approx.n, 1)" "nat")))
 (ln_alt_series_it_TCC2 0
  (ln_alt_series_it_TCC2-1 nil 3627813571 ("" (termination-tcc) nil nil) nil
   nil
   (ln_alt_series_it termination
    "ln_approx.ln_alt_series_it(ln_approx.px, (number_fields.-)(ln_approx.n, 1), number_fields.*(number_fields.*(ln_approx.px, ln_approx.px), ((number_fields.+)(number_fields./(1, ((number_fields.+)(number_fields.*(2, ln_approx.n), 1))), ln_approx.x))))"
    "nil")))
 (ln_alt_series_TCC1 0
  (ln_alt_series_TCC1-1 nil 3627821525
   (""
    (case "FORALL (px:posreal, nn:nat, aa:nnreal): ln_alt_series_it(px,nn, aa)>0")
    (("1" (skeep)
      (("1" (inst -1 "A" "n" "0")
        (("1" (both-sides "*" "2*A" -1)
          (("1" (ground) nil nil) ("2" (ground) nil nil)) nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "nn")
        (("1" (skeep) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "ln_alt_series_it" 1) (("2" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (neg_times_gt formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnreal type-eq-decl nil real_types nil)
    (ln_alt_series_it def-decl "real" ln_approx nil))
   nil
   (ln_alt_series subtype
    "number_fields.*(number_fields.*(2, ln_approx.A), ln_approx.ln_alt_series_it(ln_approx.A, ln_approx.n, 0))"
    "posreal")))
 (ln_alt_series_equal 0
  (ln_alt_series_equal-1 nil 3627814780
   ("" (induct "n")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "series" 1)
          (("2" (expand "ln_alt_series" 1)
            (("2" (inst -1 "xlg2")
              (("2" (rewrite "sigma_last")
                (("2" (rewrite "sigma_last")
                  (("2" (expand "series")
                    (("2" (replaces -1 :dir rl)
                      (("2" (case "even?(2+2*j)")
                        (("1" (case "NOT even?(3+2*j)")
                          (("1" (expand "ln12_alt_seq")
                            (("1" (ground)
                              (("1" (expand "ln_alt_series")
                                (("1" (case-replace "3+2*j = 1+(2+2*j)")
                                  (("1" (rewrite "expt_plus")
                                    (("1" (cancel-by 2 "2")
                                      (("1"
                                        (cancel-by 3 "a(xlg2)")
                                        (("1"
                                          (expand "ln_alt_series_it" 4 1)
                                          (("1"
                                            (case
                                             "FORALL (nn:nat, x:posreal, a,b:real): ln_alt_series_it(x, nn, a) -a*x^(2*nn) = ln_alt_series_it(x, nn, b) -b*x^(2*nn)")
                                            (("1"
                                              (inst
                                               -1
                                               "j"
                                               "a(xlg2)"
                                               "a(xlg2) * a(xlg2) * (1 / (3 + 2 * j))"
                                               "0")
                                              (("1"
                                                (simplify -1)
                                                (("1"
                                                  (replaces -1 :dir rl)
                                                  (("1"
                                                    (simplify 4)
                                                    (("1"
                                                      (rewrite "expt_plus")
                                                      (("1"
                                                        (expand "^" 4 1)
                                                        (("1"
                                                          (expand "expt")
                                                          (("1"
                                                            (expand "expt")
                                                            (("1"
                                                              (expand "expt")
                                                              (("1"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (induct "nn")
                                                (("1"
                                                  (skeep)
                                                  (("1" (grind) nil nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (expand
                                                       "ln_alt_series_it"
                                                       1)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "(1 / (3 + 2 * j!1)) * x * x + b * x * x")
                                                          (("2"
                                                            (ground)
                                                            (("2"
                                                              (both-sides
                                                               "+"
                                                               "x ^ (2 * j!1) * a!1 * x * x"
                                                               -1)
                                                              (("2"
                                                                (simplify -1)
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (simplify
                                                                     1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "expt_plus")
                                                                      (("2"
                                                                        (case-replace
                                                                         "x^2 = x*x")
                                                                        (("1"
                                                                          (ground)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "even?") (("2" (propax) nil nil))
                            nil))
                          nil)
                         ("2" (expand "even?")
                          (("2" (inst 1 "j+1") (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (even_posnat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (times_div2 formula-decl nil real_props nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (expt_plus formula-decl nil exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (sigma_last formula-decl nil sigma reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sigma def-decl "real" sigma reals)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (even? const-decl "bool" integers nil)
    (ln_alt_series_it def-decl "real" ln_approx nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (a const-decl "{x: posreal | x > 0 AND x <= 1 / 3}" ln_approx nil)
    (ln12_alt_seq const-decl "sequence[real]" ln_approx nil)
    (series const-decl "sequence[real]" series series)
    (sequence type-eq-decl nil sequences nil)
    (ln_alt_series const-decl "posreal" ln_approx nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   shostak))
 (ln12_alt_lb_TCC1 0
  (ln12_alt_lb_TCC1-1 nil 3627744880
   ("" (skeep)
    (("" (ground)
      (("" (replaces -1) (("" (rewrite "ln_1") (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ln_1 formula-decl nil ln_exp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (ln12_alt_lb subtype "0"
    "{x: reals.real | booleans.AND(reals.<=(0, x), reals.<=(x, ln_exp.ln(ln_approx.x12)))}")))
 (ln12_alt_lb_TCC2 0
  (ln12_alt_lb_TCC2-1 nil 3627819939 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (ln12_alt_lb subtype "ln_approx.x12"
    "{x: real_types.posreal | booleans.AND(reals.>(x, 1), reals.<=(x, 2))}")))
 (ln12_alt_lb_TCC3 0
  (ln12_alt_lb_TCC3-1 nil 3627821210
   ("" (skeep)
    (("" (typepred "ln_alt_series(x12, n)")
      (("1" (ground)
        (("1" (rewrite "ln_alt_series_equal")
          (("1" (rewrite "ln12_lb") nil nil)) nil))
        nil)
       ("2" (ground) nil nil))
      nil))
    nil)
   ((ln_alt_series const-decl "posreal" ln_approx nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ln_alt_series_equal formula-decl nil ln_approx nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (ln12_lb formula-decl nil ln_approx nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (ln12_alt_lb subtype "ln_approx.ln_alt_series(ln_approx.x12, ln_approx.n)"
    "{x: reals.real | booleans.AND(reals.<=(0, x), reals.<=(x, ln_exp.ln(ln_approx.x12)))}")))
 (ln12_alt_ub_TCC1 0
  (ln12_alt_ub_TCC1-1 nil 3627744880
   ("" (skeep)
    (("" (ground)
      (("" (replaces -1) (("" (rewrite "ln_1") (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ln_1 formula-decl nil ln_exp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (ln12_alt_ub subtype "0"
    "{x: reals.real | booleans.AND(reals.<=(0, x), reals.>=(x, ln_exp.ln(ln_approx.x12)))}")))
 (ln12_alt_ub_TCC2 0
  (ln12_alt_ub_TCC2-1 nil 3627821210
   ("" (skeep)
    (("" (typepred "ln_alt_series(x12, n)")
      (("1" (ground)
        (("1" (rewrite "ln_alt_series_equal")
          (("1" (rewrite "ln12_ub") nil nil)) nil))
        nil)
       ("2" (ground) nil nil))
      nil))
    nil)
   ((ln_alt_series const-decl "posreal" ln_approx nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ln_alt_series_equal formula-decl nil ln_approx nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (ln12_ub formula-decl nil ln_approx nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   nil
   (ln12_alt_ub subtype
    "(number_fields.+)(ln_approx.ln_alt_series(ln_approx.x12, ln_approx.n), number_fields.*(number_fields./(1, (number_fields.*(6, ((number_fields.+)(ln_approx.n, 1))))), exponentiation.^(9, ((number_fields.-)(ln_approx.n)))))"
    "{x: reals.real | booleans.AND(reals.<=(0, x), reals.>=(x, ln_exp.ln(ln_approx.x12)))}")))
 (ln12_alt_lb_increasing 0
  (ln12_alt_lb_increasing-2 nil 3627822834
   ("" (induct "n")
    (("1" (skeep)
      (("1" (grind) (("1" (cross-mult) nil nil) ("2" (cross-mult) nil nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "ln12_alt_lb")
          (("2" (lift-if 1)
            (("2" (split 1)
              (("1" (flatten)
                (("1" (lift-if 1)
                  (("1" (split 1)
                    (("1" (ground) nil nil)
                     ("2" (flatten) (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (lift-if 2)
                  (("2" (split 2)
                    (("1" (flatten) (("1" (ground) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (inst -1 "x12" "y12")
                        (("2" (ground)
                          (("2" (rewrite "ln_alt_series_equal")
                            (("2" (rewrite "ln_alt_series_equal")
                              (("2" (rewrite "ln_alt_series_equal")
                                (("2" (rewrite "ln_alt_series_equal")
                                  (("2" (expand "series" 2)
                                    (("2" (rewrite "sigma_last")
                                      (("2"
                                        (rewrite "sigma_last")
                                        (("2"
                                          (swap-rel 2)
                                          (("2"
                                            (rewrite "sigma_last")
                                            (("2"
                                              (rewrite "sigma_last")
                                              (("2"
                                                (expand "series")
                                                (("2"
                                                  (swap-rel 2)
                                                  (("2"
                                                    (case
                                                     " ln12_alt_seq(a(x12))(3 + 2 * j) +
       ln12_alt_seq(a(x12))(2 + 2 * j) <= ln12_alt_seq(a(y12))(3 + 2 * j) +
       ln12_alt_seq(a(y12))(2 + 2 * j)")
                                                    (("1"
                                                      (add-formulas -1 -2)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (case "a(x12)<=a(y12)")
                                                      (("1"
                                                        (hide (-2 -3 2 3 4))
                                                        (("1"
                                                          (case
                                                           "even?(2+2*j) AND NOT even?(3+2*j)")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "ln12_alt_seq")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (lemma
                                                                   "both_sides_expt_pos_le")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "3+2*j"
                                                                     "a(x12)"
                                                                     "a(y12)")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (both-sides
                                                                             "*"
                                                                             "2/(3+2*j)"
                                                                             -1)
                                                                            (("1"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (splash)
                                                              (("1"
                                                                (expand
                                                                 "even?")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "even?")
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "j+1")
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide (-1 2 3 4 5))
                                                        (("2"
                                                          (grind)
                                                          (("2"
                                                            (cross-mult)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ln12_alt_seq const-decl "sequence[real]" ln_approx nil)
    (sequence type-eq-decl nil sequences nil)
    (sigma_last formula-decl nil sigma reals)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sigma def-decl "real" sigma reals)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (even? const-decl "bool" integers nil)
    (both_sides_expt_pos_le formula-decl nil exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_le2 formula-decl nil real_props nil)
    (both_sides_plus_le2 formula-decl nil real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (^ const-decl "real" exponentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (series const-decl "sequence[real]" series series)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (ln_alt_series_equal formula-decl nil ln_approx nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (times_div2 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (times_div1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (a const-decl "{x: posreal | x > 0 AND x <= 1 / 3}" ln_approx nil)
    (ln_alt_series_it def-decl "real" ln_approx nil)
    (ln_alt_series const-decl "posreal" ln_approx nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (ln12_alt_lb const-decl "{x: real | 0 <= x AND x <= ln(x12)}" ln_approx
     nil)
    (ln const-decl "real" ln_exp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (ln12_alt_lb_increasing-1 nil 3627821266
   ("" (induct "n")
    (("1" (skeep)
      (("1" (grind) (("1" (cross-mult) nil nil) ("2" (cross-mult) nil nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "ln12_alt_lb" 1)
          (("2" (lift-if 1)
            (("2" (split 1)
              (("1" (flatten)
                (("1" (lift-if 1)
                  (("1" (split 1)
                    (("1" (ground) nil nil)
                     ("2" (flatten) (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (lift-if 2)
                  (("2" (split 2)
                    (("1" (flatten) (("1" (ground) nil nil)) nil)
                     ("2" (flatten) (("2" (postpone) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (ln12_alt_ub_increasing 0
  (ln12_alt_ub_increasing-1 nil 3627824395
   ("" (skeep)
    (("" (expand "ln12_alt_ub")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten)
            (("1" (lift-if 1)
              (("1" (split 1)
                (("1" (flatten) (("1" (ground) nil nil)) nil)
                 ("2" (flatten) (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (lift-if 2)
              (("2" (split 2)
                (("1" (flatten) (("1" (ground) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (lemma "ln12_alt_lb_increasing")
                    (("2" (inst -1 "n" "x12" "y12")
                      (("2" (ground)
                        (("2" (expand "ln12_alt_lb") (("2" (ground) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (ln12_alt_ub const-decl "{x: real | 0 <= x AND x >= ln(x12)}" ln_approx
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (ln12_alt_lb const-decl "{x: real | 0 <= x AND x <= ln(x12)}" ln_approx
     nil)
    (ln12_alt_lb_increasing formula-decl nil ln_approx nil))
   shostak))
 (ln_2m_lb_TCC1 0
  (ln_2m_lb_TCC1-1 nil 3627770360 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (Integral const-decl "real" integral_def analysis)
    (ln const-decl "real" ln_exp nil))
   nil
   (ln_2m_lb subtype "0"
    "{x: reals.real | reals.<=(x, number_fields.*(ln_approx.m, ln_exp.ln(2)))}")))
 (ln_2m_lb_TCC2 0
  (ln_2m_lb_TCC2-1 nil 3627770360
   ("" (skeep)
    (("" (typepred " ln12_alt_lb(2, n)")
      (("" (case "m<=m")
        (("1" (mult-ineq -1 -3) nil nil) ("2" (ground) nil nil)) nil))
      nil))
    nil)
   ((ln12_alt_lb const-decl "{x: real | 0 <= x AND x <= ln(x12)}" ln_approx
     nil)
    (ln const-decl "real" ln_exp nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil))
   nil
   (ln_2m_lb subtype
    "number_fields.*(ln_approx.m, ln_approx.ln12_alt_lb(2, ln_approx.n))"
    "{x: reals.real | reals.<=(x, number_fields.*(ln_approx.m, ln_exp.ln(2)))}")))
 (ln_2m_ub_TCC1 0
  (ln_2m_ub_TCC1-2 "" 3758787860 ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak
   (ln_2m_ub subtype "0"
    "{x: reals.real | reals.>=(x, number_fields.*(ln_approx.m, ln_exp.ln(2)))}"))
  (ln_2m_ub_TCC1-1 nil 3627770360
   ("" (skeep)
    (("" (typepred " ln12_alt_lb(2, n + floor(log_nat(-m, 10)`1))")
      (("" (case "-m<=-m")
        (("1" (mult-ineq -1 -2) (("1" (ground) nil nil) ("2" (grind) nil nil))
          nil)
         ("2" (ground) nil nil))
        nil))
      nil))
    nil)
   nil nil
   (ln_2m_ub subtype "0"
    "{x: reals.real | reals.>=(x, number_fields.*(ln_approx.m, ln_exp.ln(2)))}")))
 (ln_2m_ub_TCC2 0
  (ln_2m_ub_TCC2-1 nil 3627770360
   ("" (skeep)
    (("" (case "m>=m")
      (("1" (typepred " ln12_alt_ub(2, n)")
        (("1" (mult-ineq -2 -3)
          (("1" (ground) nil nil)
           ("2" (ground) (("2" (expand "abs") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (ground) nil nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ln const-decl "real" ln_exp nil)
    (ln12_alt_ub const-decl "{x: real | 0 <= x AND x >= ln(x12)}" ln_approx
     nil))
   nil
   (ln_2m_ub subtype
    "number_fields.*(ln_approx.m, ln_approx.ln12_alt_ub(2, ln_approx.n))"
    "{x: reals.real | reals.>=(x, number_fields.*(ln_approx.m, ln_exp.ln(2)))}")))
 (ln_gt1_alt_lb_TCC1 0
  (ln_gt1_alt_lb_TCC1-1 nil 3627811295 ("" (subtype-tcc) nil nil)
   ((posint_exp application-judgement "posint" exponentiation nil)) nil
   (ln_gt1_alt_lb subtype "ln_approx.Y"
    "{x: real_types.posreal | booleans.AND(reals.>=(x, 1), reals.<=(x, 2))}")))
 (ln_gt1_alt_lb_TCC2 0
  (ln_gt1_alt_lb_TCC2-1 nil 3627811295
   ("" (skeep)
    (("" (case "ln_2m_lb(n, N)>=0")
      (("1" (typepred "ln12_alt_lb(Y, n)")
        (("1" (typepred "ln_2m_lb(n, N)")
          (("1" (rewrite "ln_expt" -1 :dir rl)
            (("1" (typepred "Y")
              (("1" (replaces -3 1)
                (("1" (rewrite "ln_mult" 1) (("1" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "ln_2m_lb")
          (("2" (lift-if 1)
            (("2" (ground)
              (("2" (typepred "ln12_alt_lb(2, n)")
                (("2" (cancel-by 2 "N") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ln_2m_lb const-decl "{x: real | x <= m * ln(2)}" ln_approx nil)
    (ln const-decl "real" ln_exp nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ln_mult formula-decl nil ln_exp nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (ln_expt formula-decl nil ln_exp nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ln12_alt_lb const-decl "{x: real | 0 <= x AND x <= ln(x12)}" ln_approx
     nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (pos_div_gt formula-decl nil real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (div_31 skolem-const-decl "nat" ln_approx nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil
   (ln_gt1_alt_lb subtype
    "(number_fields.+)(ln_approx.ln_2m_lb(ln_approx.n, ln_approx.N), ln_approx.ln12_alt_lb(ln_approx.Y, ln_approx.n))"
    "{x: real_types.nnreal | reals.<=(x, ln_exp.ln(ln_approx.xge1))}")))
 (ln_gt1_alt_ub_TCC1 0
  (ln_gt1_alt_ub_TCC1-1 nil 3627811295
   ("" (skeep)
    (("" (case "ln_2m_ub(n, N) + ln12_alt_ub(Y, n) >= ln(xge1)")
      (("1" (lemma "ln_ge_0")
        (("1" (inst -1 "xge1") (("1" (ground) nil nil)) nil)) nil)
       ("2" (hide 2)
        (("2" (typepred (Y))
          (("2" (replaces -3 1)
            (("2" (rewrite "ln_mult" 1)
              (("2" (typepred "ln_2m_ub(n, N)")
                (("2" (rewrite "ln_expt" -1 :dir rl)
                  (("2" (typepred "ln12_alt_ub(Y, n)")
                    (("2" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (ln12_alt_ub const-decl "{x: real | 0 <= x AND x >= ln(x12)}" ln_approx
     nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ln_2m_ub const-decl "{x: real | x >= m * ln(2)}" ln_approx nil)
    (ln const-decl "real" ln_exp nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ln_ge_0 formula-decl nil ln_exp nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ln_mult formula-decl nil ln_exp nil)
    (integer nonempty-type-from-decl nil integers nil)
    (ln_expt formula-decl nil ln_exp nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil
   (ln_gt1_alt_ub subtype
    "(number_fields.+)(ln_approx.ln_2m_ub(ln_approx.n, ln_approx.N), ln_approx.ln12_alt_ub(ln_approx.Y, ln_approx.n))"
    "{x: real_types.nnreal | reals.>=(x, ln_exp.ln(ln_approx.xge1))}")))
 (ln_gt1_alt_lb_increasing 0
  (ln_gt1_alt_lb_increasing-1 nil 3627812110
   ("" (skeep)
    (("" (expand "ln_gt1_alt_lb")
      (("" (lemma "log_int_le")
        (("" (inst -1 "2" "xge1" "yge1")
          (("" (ground)
            (("" (expand "log_int")
              (("" (typepred "log_nat(xge1, 2)`2")
                (("" (typepred "log_nat(yge1, 2)`2")
                  (("" (expand "ln_2m_lb")
                    ((""
                      (case "IF log_nat(xge1, 2)`1 = 0 THEN 0
              ELSE log_nat(xge1, 2)`1 * ln12_alt_lb(2, n)
              ENDIF = log_nat(xge1, 2)`1 * ln12_alt_lb(2, n)")
                      (("1" (replaces -1)
                        (("1"
                          (case "IF log_nat(yge1, 2)`1 = 0 THEN 0
                ELSE log_nat(yge1, 2)`1 * ln12_alt_lb(2, n)
                ENDIF = log_nat(yge1, 2)`1 * ln12_alt_lb(2, n)")
                          (("1" (replaces -1)
                            (("1"
                              (case "log_nat(xge1, 2)`1 = log_nat(yge1, 2)`1")
                              (("1" (replaces -1)
                                (("1" (simplify 1)
                                  (("1"
                                    (both-sides "-"
                                     "log_nat(yge1, 2)`1 * ln12_alt_lb(2, n)"
                                     1)
                                    (("1" (ground)
                                      (("1"
                                        (rewrite "ln12_alt_lb_increasing")
                                        (("1"
                                          (replaces -3 -8)
                                          (("1"
                                            (replaces -5 -7)
                                            (("1"
                                              (cancel-by
                                               -6
                                               "2 ^ log_nat(yge1, 2)`1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "log_nat(xge1, 2)`1 +1<= log_nat(yge1, 2)`1")
                                (("1"
                                  (case " ln12_alt_lb(2, n)<= ln12_alt_lb(2, n)")
                                  (("1" (mult-ineq -1 -2)
                                    (("1" (simplify -1)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (lemma "ln12_alt_lb_increasing")
                                          (("1"
                                            (inst
                                             -1
                                             "n"
                                             "log_nat(xge1, 2)`2"
                                             "2")
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (ground) nil nil))
                                  nil)
                                 ("2" (ground) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (ln_gt1_alt_lb const-decl "{x: nnreal | x <= ln(xge1)}" ln_approx nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (log_int const-decl
     "[z: int, {y: real | y < p AND y >= 1 AND x = p ^ z * y}]" log_int reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (<= const-decl "bool" reals nil) (ln const-decl "real" ln_exp nil)
    (ln12_alt_lb const-decl "{x: real | 0 <= x AND x <= ln(x12)}" ln_approx
     nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (ln12_alt_lb_increasing formula-decl nil ln_approx nil)
    (both_sides_minus_le1 formula-decl nil real_props nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (a const-decl "{x: posreal | x > 0 AND x <= 1 / 3}" ln_approx nil)
    (ln_alt_series const-decl "posreal" ln_approx nil)
    (TRUE const-decl "bool" booleans nil)
    (ln_2m_lb const-decl "{x: real | x <= m * ln(2)}" ln_approx nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (log_nat def-decl "[n: nat, {y | y < p AND x = p ^ n * y}]" log_nat reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (log_int_le formula-decl nil log_int reals))
   shostak))
 (ln_gt1_alt_ub_increasing 0
  (ln_gt1_alt_ub_increasing-2 nil 3627834084
   ("" (skeep)
    (("" (expand "ln_gt1_alt_ub")
      (("" (lemma "log_int_le")
        (("" (inst -1 "2" "xge1" "yge1")
          (("" (ground)
            (("" (expand "log_int")
              (("" (typepred "log_nat(xge1, 2)`2")
                (("" (typepred "log_nat(yge1, 2)`2")
                  (("" (expand "ln_2m_ub")
                    ((""
                      (case "IF log_nat(xge1, 2)`1 = 0 THEN 0
                     ELSE log_nat(xge1, 2)`1 * ln12_alt_ub(2, n)
                     ENDIF = log_nat(xge1, 2)`1 * ln12_alt_ub(2, n)")
                      (("1" (replaces -1)
                        (("1"
                          (case "IF log_nat(yge1, 2)`1 = 0 THEN 0
                         ELSE log_nat(yge1, 2)`1 * ln12_alt_ub(2, n)
                         ENDIF = log_nat(yge1, 2)`1 * ln12_alt_ub(2, n)")
                          (("1" (replaces -1)
                            (("1"
                              (case "log_nat(xge1, 2)`1 = log_nat(yge1, 2)`1")
                              (("1" (replaces -1)
                                (("1" (simplify 1)
                                  (("1"
                                    (both-sides "-"
                                     "log_nat(yge1, 2)`1 * ln12_alt_ub(2, n)"
                                     1)
                                    (("1" (ground)
                                      (("1"
                                        (rewrite "ln12_alt_ub_increasing")
                                        (("1"
                                          (replaces -3 -8)
                                          (("1"
                                            (replaces -5 -7)
                                            (("1"
                                              (cancel-by
                                               -6
                                               "2 ^ log_nat(yge1, 2)`1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "log_nat(xge1, 2)`1 +1<= log_nat(yge1, 2)`1")
                                (("1"
                                  (case " ln12_alt_ub(2, n)<= ln12_alt_ub(2, n)")
                                  (("1" (mult-ineq -1 -2)
                                    (("1" (simplify -1)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (lemma "ln12_alt_ub_increasing")
                                          (("1"
                                            (inst
                                             -1
                                             "n"
                                             "log_nat(xge1, 2)`2"
                                             "2")
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (ground) nil nil))
                                  nil)
                                 ("2" (ground) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (ln_gt1_alt_ub const-decl "{x: nnreal | x >= ln(xge1)}" ln_approx nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (log_int const-decl
     "[z: int, {y: real | y < p AND y >= 1 AND x = p ^ z * y}]" log_int reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (<= const-decl "bool" reals nil) (ln const-decl "real" ln_exp nil)
    (ln12_alt_ub const-decl "{x: real | 0 <= x AND x >= ln(x12)}" ln_approx
     nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (ln12_alt_ub_increasing formula-decl nil ln_approx nil)
    (both_sides_minus_le1 formula-decl nil real_props nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (a const-decl "{x: posreal | x > 0 AND x <= 1 / 3}" ln_approx nil)
    (ln_alt_series const-decl "posreal" ln_approx nil)
    (expt def-decl "real" exponentiation nil)
    (ln_alt_series_it def-decl "real" ln_approx nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (TRUE const-decl "bool" booleans nil)
    (ln_2m_ub const-decl "{x: real | x >= m * ln(2)}" ln_approx nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (log_nat def-decl "[n: nat, {y | y < p AND x = p ^ n * y}]" log_nat reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (log_int_le formula-decl nil log_int reals))
   nil)
  (ln_gt1_alt_ub_increasing-1 nil 3627826760
   ("" (skeep)
    (("" (expand "ln_gt1_alt_ub")
      (("" (lemma "log_int_le")
        (("" (inst -1 "2" "xgt1" "ygt1")
          (("" (ground)
            (("" (expand "log_int")
              (("" (typepred "log_nat(xgt1, 2)`2")
                (("" (typepred "log_nat(ygt1, 2)`2")
                  (("" (expand "ln_2m_ub")
                    ((""
                      (case "IF log_nat(xgt1, 2)`1 = 0 THEN 0
              ELSE log_nat(xgt1, 2)`1 * ln12_alt_ub(2, n)
              ENDIF = log_nat(xgt1, 2)`1 * ln12_alt_ub(2, n)")
                      (("1" (replaces -1)
                        (("1"
                          (case "IF log_nat(ygt1, 2)`1 = 0 THEN 0
                ELSE log_nat(ygt1, 2)`1 * ln12_alt_ub(2, n)
                ENDIF = log_nat(ygt1, 2)`1 * ln12_alt_ub(2, n)")
                          (("1" (replaces -1)
                            (("1"
                              (case "log_nat(xgt1, 2)`1 = log_nat(ygt1, 2)`1")
                              (("1" (replaces -1)
                                (("1" (simplify 1)
                                  (("1"
                                    (both-sides "-"
                                     "log_nat(ygt1, 2)`1 * ln12_alt_ub(2, n)"
                                     1)
                                    (("1" (ground)
                                      (("1"
                                        (rewrite "ln12_alt_ub_increasing")
                                        (("1"
                                          (replaces -3 -8)
                                          (("1"
                                            (replaces -5 -7)
                                            (("1"
                                              (cancel-by
                                               -6
                                               "2 ^ log_nat(ygt1, 2)`1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "log_nat(xgt1, 2)`1 +1<= log_nat(ygt1, 2)`1")
                                (("1"
                                  (case " ln12_alt_ub(2, n)<= ln12_alt_ub(2, n)")
                                  (("1" (mult-ineq -1 -2)
                                    (("1" (simplify -1)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (lemma "ln12_alt_ub_increasing")
                                          (("1"
                                            (inst
                                             -1
                                             "n"
                                             "log_nat(xgt1, 2)`2"
                                             "2")
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (ground) nil nil))
                                  nil)
                                 ("2" (ground) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((log_int const-decl
     "[z: int, {y: real | y < p AND y >= 1 AND x = p ^ z * y}]" log_int reals)
    (ln const-decl "real" ln_exp nil)
    (log_nat def-decl "[n: nat, {y | y < p AND x = p ^ n * y}]" log_nat reals)
    (log_int_le formula-decl nil log_int reals))
   shostak))
 (ln_lb_TCC1 0
  (ln_lb_TCC1-1 nil 3296503304 ("" (skeep) (("" (cross-mult) nil nil)) nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil))
   shostak
   (ln_lb subtype "number_fields./(1, ln_approx.px)"
    "{x: real_types.posreal | reals.>=(x, 1)}")))
 (ln_lb_TCC2 0
  (ln_lb_TCC2-1 nil 3296503304 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak
   (ln_lb subtype "ln_approx.px" "{x: real_types.posreal | reals.>=(x, 1)}")))
 (ln_lb_increasing 0
  (ln_lb_increasing-1 nil 3558342713
   ("" (skeep)
    (("" (case "py<1")
      (("1" (expand "ln_lb")
        (("1" (ground)
          (("1" (case "1/py<=1/px")
            (("1" (lemma "ln_gt1_alt_ub_increasing")
              (("1" (inst -1 "n" "1/py" "1/px") (("1" (ground) nil nil)) nil))
              nil)
             ("2" (cross-mult) nil nil))
            nil))
          nil))
        nil)
       ("2" (case "px>=1")
        (("1" (expand "ln_lb")
          (("1" (ground) (("1" (rewrite "ln_gt1_alt_lb_increasing") nil nil))
            nil))
          nil)
         ("2" (expand "ln_lb") (("2" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (ln_gt1_alt_ub_increasing formula-decl nil ln_approx nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil) (ln_lb const-decl "real" ln_approx nil)
    (ln_gt1_alt_lb_increasing formula-decl nil ln_approx nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak))
 (ln_ub_increasing 0
  (ln_ub_increasing-1 nil 3558348180
   ("" (skeep)
    (("" (case "py<1")
      (("1" (expand "ln_ub")
        (("1" (ground)
          (("1" (case "1/py<=1/px")
            (("1" (lemma "ln_gt1_alt_lb_increasing")
              (("1" (inst -1 "n" "1/py" "1/px") (("1" (ground) nil nil)) nil))
              nil)
             ("2" (cross-mult) nil nil))
            nil))
          nil))
        nil)
       ("2" (case "px>=1")
        (("1" (expand "ln_ub")
          (("1" (ground) (("1" (rewrite "ln_gt1_alt_ub_increasing") nil nil))
            nil))
          nil)
         ("2" (expand "ln_ub") (("2" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (ln_gt1_alt_lb_increasing formula-decl nil ln_approx nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil) (ln_ub const-decl "real" ln_approx nil)
    (ln_gt1_alt_ub_increasing formula-decl nil ln_approx nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (ln_bounds 0
  (ln_bounds-2 "" 3790094005
   ("" (skeep)
    (("" (case "px>=1")
      (("1" (name "l2" "log_nat(px,2)")
        (("1" (typepred "l2`2")
          (("1" (case "ln(px) = ln(2^l2`1*l2`2)")
            (("1" (replaces -1)
              (("1" (rewrite "ln_mult")
                (("1" (rewrite "ln_expt")
                  (("1" (expand "ln_lb")
                    (("1" (lift-if 1)
                      (("1" (split 1)
                        (("1" (ground) nil nil)
                         ("2" (flatten)
                          (("2" (expand "ln_ub")
                            (("2" (ground)
                              (("1" (expand "ln_gt1_alt_lb")
                                (("1" (ground) nil nil)) nil)
                               ("2" (expand "ln_gt1_alt_ub")
                                (("2" (ground) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (ground) nil nil) ("3" (ground) nil nil))
            nil))
          nil)
         ("2" (propax) nil nil))
        nil)
       ("2" (case "ln(px) = -ln(1/px)")
        (("1" (replace -1)
          (("1" (name "l2" "log_nat(1/px,2)")
            (("1" (typepred "l2`2")
              (("1" (replaces -3)
                (("1" (rewrite "ln_mult")
                  (("1" (rewrite "ln_expt")
                    (("1" (ground)
                      (("1" (expand "ln_lb")
                        (("1" (expand "ln_gt1_alt_ub")
                          (("1" (expand "ln_2m_ub")
                            (("1" (ground)
                              (("1" (lift-if 1)
                                (("1" (split 1)
                                  (("1" (flatten)
                                    (("1" (ground)
                                      (("1"
                                        (expand "l2")
                                        (("1" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (ground)
                                      (("2"
                                        (expand "l2")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (move-terms 2 l 1)
                                            (("2"
                                              (move-terms 2 r 1)
                                              (("2"
                                                (case
                                                 " 0 - -(ln(log_nat(1 / px, 2)`2) + log_nat(1 / px, 2)`1 * ln(2)) = (ln(log_nat(1 / px, 2)`2) + log_nat(1 / px, 2)`1 * ln(2))")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (case
                                                     "-(-(ln12_alt_ub(log_nat(1 / px, 2)`2, n) +
            log_nat(1 / px, 2)`1 * ln12_alt_ub(2, n))) = 
(ln12_alt_ub(log_nat(1 / px, 2)`2, n) +
            log_nat(1 / px, 2)`1 * ln12_alt_ub(2, n))")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (typepred
                                                         "ln12_alt_ub(2, n)")
                                                        (("1"
                                                          (typepred
                                                           "ln12_alt_ub(log_nat(1 / px, 2)`2, n)")
                                                          (("1"
                                                            (case
                                                             "log_nat(1 / px, 2)`1>=log_nat(1 / px, 2)`1")
                                                            (("1"
                                                              (mult-ineq
                                                               -1
                                                               -5)
                                                              (("1"
                                                                (add-formulas
                                                                 -1
                                                                 -4)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "abs")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (ground) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "ln_ub")
                        (("2" (expand "ln_gt1_alt_lb")
                          (("2"
                            (typepred "ln12_alt_lb(log_nat(1 / px, 2)`2, n)")
                            (("1"
                              (typepred "ln_2m_lb(n, log_nat(1 / px, 2)`1)")
                              (("1" (add-formulas -1 -3)
                                (("1" (ground)
                                  (("1" (expand "l2") (("1" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (cross-mult) nil nil))
            nil))
          nil)
         ("2" (rewrite "ln_div") (("2" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak)
  (ln_bounds-1 nil 3296503392
   ("" (skeep)
    (("" (case "px>=1")
      (("1" (name "l2" "log_nat(px,2)")
        (("1" (typepred "l2`2")
          (("1" (case "ln(px) = ln(2^l2`1*l2`2)")
            (("1" (replaces -1)
              (("1" (rewrite "ln_mult")
                (("1" (rewrite "ln_expt")
                  (("1" (expand "ln_lb")
                    (("1" (lift-if 1)
                      (("1" (split 1)
                        (("1" (ground) nil nil)
                         ("2" (flatten)
                          (("2" (expand "ln_ub")
                            (("2" (ground)
                              (("1" (expand "ln_gt1_alt_lb")
                                (("1" (ground) nil nil)) nil)
                               ("2" (expand "ln_gt1_alt_ub")
                                (("2" (ground) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (ground) nil nil) ("3" (ground) nil nil))
            nil))
          nil)
         ("2" (propax) nil nil))
        nil)
       ("2" (case "ln(px) = -ln(1/px)")
        (("1" (replace -1)
          (("1" (name "l2" "log_nat(1/px,2)")
            (("1" (typepred "l2`2")
              (("1" (replaces -3)
                (("1" (rewrite "ln_mult")
                  (("1" (rewrite "ln_expt")
                    (("1" (ground)
                      (("1" (expand "ln_lb")
                        (("1" (expand "ln_gt1_alt_ub")
                          (("1" (expand "ln_2m_ub")
                            (("1" (ground)
                              (("1" (lift-if 1)
                                (("1" (split 1)
                                  (("1" (flatten)
                                    (("1" (ground)
                                      (("1"
                                        (expand "l2")
                                        (("1" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (ground)
                                      (("2"
                                        (expand "l2")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (move-terms 2 l 1)
                                            (("2"
                                              (move-terms 2 r 1)
                                              (("2"
                                                (case
                                                 " 0 - -(ln(log_nat(1 / px, 2)`2) + log_nat(1 / px, 2)`1 * ln(2)) = (ln(log_nat(1 / px, 2)`2) + log_nat(1 / px, 2)`1 * ln(2))")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (case
                                                     "-(-(ln12_alt_ub(log_nat(1 / px, 2)`2, n) +
            log_nat(1 / px, 2)`1 * ln12_alt_ub(2, n))) = 
(ln12_alt_ub(log_nat(1 / px, 2)`2, n) +
            log_nat(1 / px, 2)`1 * ln12_alt_ub(2, n))")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (typepred
                                                           "ln12_alt_ub(2, n)")
                                                          (("1"
                                                            (typepred
                                                             "ln12_alt_ub(log_nat(1 / px, 2)`2, n)")
                                                            (("1"
                                                              (case
                                                               "log_nat(1 / px, 2)`1>=log_nat(1 / px, 2)`1")
                                                              (("1"
                                                                (mult-ineq
                                                                 -1
                                                                 -5)
                                                                (("1"
                                                                  (add-formulas
                                                                   -1
                                                                   -4)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "abs")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (ground) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "ln_ub")
                        (("2" (expand "ln_gt1_alt_lb")
                          (("2"
                            (typepred "ln12_alt_lb(log_nat(1 / px, 2)`2, n)")
                            (("1"
                              (typepred "ln_2m_lb(n, log_nat(1 / px, 2)`1)")
                              (("1" (add-formulas -1 -3)
                                (("1" (ground)
                                  (("1" (expand "l2") (("1" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (cross-mult) nil nil))
            nil))
          nil)
         ("2" (rewrite "ln_div") (("2" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (ln_expt formula-decl nil ln_exp nil)
    (ln_gt1_alt_lb const-decl "{x: nnreal | x <= ln(xge1)}" ln_approx nil)
    (ln_gt1_alt_ub const-decl "{x: nnreal | x >= ln(xge1)}" ln_approx nil)
    (ln_ub const-decl "real" ln_approx nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (ln_lb const-decl "real" ln_approx nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ln_mult formula-decl nil ln_exp nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ln const-decl "real" ln_exp nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (above nonempty-type-eq-decl nil integers nil)
    (log_nat def-decl "[n: nat, {y | y < p AND x = p ^ n * y}]" log_nat reals)
    (ln_div formula-decl nil ln_exp nil) (ln_1 formula-decl nil ln_exp nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (l2 skolem-const-decl "[n: nat, {y | y < 2 AND 1 / px = 2 ^ n * y}]"
     ln_approx nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ln12_alt_ub const-decl "{x: real | 0 <= x AND x >= ln(x12)}" ln_approx
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ln_2m_ub const-decl "{x: real | x >= m * ln(2)}" ln_approx nil)
    (ln_2m_lb const-decl "{x: real | x <= m * ln(2)}" ln_approx nil)
    (ln12_alt_lb const-decl "{x: real | 0 <= x AND x <= ln(x12)}" ln_approx
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil))
   shostak))
 (floor_eq_log_nat_ge_1_TCC1 0
  (floor_eq_log_nat_ge_1_TCC1-1 nil 3543148487 ("" (subtype-tcc) nil nil) nil
   nil (floor_eq_log_nat_ge_1 subtype "ln_approx.xp" "posreal")))
 (floor_eq_log_nat_ge_1_TCC2 0
  (floor_eq_log_nat_ge_1_TCC2-1 nil 3543148487
   ("" (skeep)
    (("" (typepred "np")
      (("" (lemma "exp_ln")
        (("" (inst?)
          (("" (replace -4)
            (("" (rewrite "exp_0") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (exp_0 formula-decl nil ln_exp nil) (exp_ln formula-decl nil ln_exp nil))
   nil (floor_eq_log_nat_ge_1 subtype "ln_exp.ln(ln_approx.np)" "nznum")))
 (floor_eq_log_nat_ge_1 0
  (floor_eq_log_nat_ge_1-1 nil 3543148360
   ("" (skeep)
    (("" (typepred "xp")
      (("" (typepred "np")
        (("" (hide -1)
          (("" (invoke (name "lp" "%1") (! 1 1 1))
            (("" (replace -1)
              (("" (label "lpname" -1)
                (("" (case "lp >= 0")
                  (("1" (invoke (name "mm" "%1") (! 1 1))
                    (("1" (replace -1)
                      (("1" (case "mm >= 0")
                        (("1" (label "mmname" -2)
                          (("1" (invoke (name "nn" "%1") (! 1 2))
                            (("1" (replace -1)
                              (("1" (label "nnname" -1)
                                (("1" (lemma "log_nat_bounds")
                                  (("1"
                                    (case "np ^ mm <= xp AND xp < np ^ (mm + 1)")
                                    (("1" (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace "nnname")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case "mm > nn")
                                              (("1"
                                                (lemma
                                                 "both_sides_expt_gt1_lt_aux")
                                                (("1"
                                                  (inst - "np" "nn" "mm-1")
                                                  (("1"
                                                    (expand "^")
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2"
                                                    (case "nn=mm-1")
                                                    (("1"
                                                      (replace -1)
                                                      (("1" (assert) nil nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (case "nn > mm")
                                                  (("1"
                                                    (lemma
                                                     "both_sides_expt_gt1_lt_aux")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "np"
                                                       "mm"
                                                       "nn-1")
                                                      (("1"
                                                        (expand "^")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide -1)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (lemma "floor_def")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (replace "mmname")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (lemma
                                                     "ln_strict_increasing")
                                                    (("2"
                                                      (split +)
                                                      (("1"
                                                        (expand
                                                         "strict_increasing?")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "xp"
                                                           "np^mm")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "ln_expt")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (case
                                                                     "ln(np) > 0")
                                                                    (("1"
                                                                      (case
                                                                       "mm > lp")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "lp"
                                                                         +)
                                                                        (("2"
                                                                          (cross-mult
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "ln_gt_0")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "ln_increasing")
                                                        (("2"
                                                          (expand
                                                           "increasing?")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "np^(mm+1)"
                                                             "xp")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "ln_expt")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (case
                                                                         "1+mm <= lp")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "lp"
                                                                           +)
                                                                          (("2"
                                                                            (case
                                                                             "ln(np) > 0")
                                                                            (("1"
                                                                              (cross-mult
                                                                               1)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "ln_gt_0")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "ln(np) > 0")
                    (("1" (expand "lp" +)
                      (("1" (cross-mult 1)
                        (("1" (lemma "ln_ge_0")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                        nil))
                      nil)
                     ("2" (lemma "ln_gt_0")
                      (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (log_nat_bounds formula-decl nil log_nat reals)
    (ln_expt formula-decl nil ln_exp nil)
    (ln_gt_0 formula-decl nil ln_exp nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (np skolem-const-decl "{np: posnat | np > 1}" ln_approx nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (increasing? const-decl "bool" real_fun_preds reals)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (ln_increasing formula-decl nil ln_exp nil)
    (ln_strict_increasing formula-decl nil ln_exp nil)
    (floor_def formula-decl nil floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (lp skolem-const-decl "real" ln_approx nil)
    (mm skolem-const-decl "{i | i <= lp & lp < 1 + i}" ln_approx nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (both_sides_expt_gt1_lt_aux formula-decl nil exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (log_nat def-decl "[n: nat, {y | y < p AND x = p ^ n * y}]" log_nat reals)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (ln_ge_0 formula-decl nil ln_exp nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (ln const-decl "real" ln_exp nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil)))


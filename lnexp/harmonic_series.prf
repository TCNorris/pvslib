(harmonic_series
 (harmonic_bounds 0
  (harmonic_bounds-1 nil 3680018406
   ("" (skeep)
    (("" (expand "harmonic_seq")
      (("" (assert) (("" (cross-mult) nil nil)) nil)) nil))
    nil)
   ((harmonic_seq const-decl "sequence[real]" harmonic_series nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (harmonic_sections_TCC1 0
  (harmonic_sections_TCC1-1 nil 3680017097 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil))
   nil))
 (harmonic_sections 0
  (harmonic_sections-1 nil 3680017098
   ("" (skeep)
    (("" (lemma "sigma_ge")
      ((""
        (inst -1 "harmonic_seq" "LAMBDA m: 1/2^(n+1)" "2^(n+1) - 1"
         "2^n")
        (("" (split -1)
          (("1" (lemma "sigma_const")
            (("1" (inst -1 "2^(n+1) - 1" "2^n" "1 / 2^(n+1)")
              (("1" (replaces -1)
                (("1" (case "2^(n+1) - 1 >= 2^n")
                  (("1" (assert) (("1" (grind) nil nil)) nil)
                   ("2" (hide (-1 2))
                    (("2" (expand "^")
                      (("2" (expand "expt" 1 1)
                        (("2" (case "expt(2, n) >= 1")
                          (("1" (assert) nil nil)
                           ("2" (hide 2)
                            (("2" (lemma "expt_ge1")
                              (("2"
                                (inst -1 "2" "n")
                                (("2"
                                  (expand "^")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (lemma "harmonic_bounds")
              (("2" (skeep)
                (("2" (inst -1 "n_1" "n")
                  (("1" (assert) nil nil)
                   ("2" (assert)
                    (("2" (typepred "n_1")
                      (("2" (lemma "expt_pos")
                        (("2" (inst -1 "2" "n")
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sigma_ge formula-decl nil sigma "reals/")
    (expt def-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma "reals/")
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (expt_ge1 formula-decl nil exponentiation nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (sigma_const formula-decl nil sigma "reals/")
    (harmonic_bounds formula-decl nil harmonic_series nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (n skolem-const-decl "nat" harmonic_series nil)
    (subrange type-eq-decl nil integers nil)
    (n_1 skolem-const-decl "subrange(2 ^ n, 2 ^ (1 + n) - 1)"
     harmonic_series nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (expt_pos formula-decl nil exponentiation nil)
    (T_low type-eq-decl nil sigma "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_high type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (harmonic_seq const-decl "sequence[real]" harmonic_series nil)
    (sequence type-eq-decl nil sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (harmonic_lower_bound_TCC1 0
  (harmonic_lower_bound_TCC1-1 nil 3680017316
   ("" (skeep)
    (("" (lemma "expt_ge1") (("" (inst?) (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((expt_ge1 formula-decl nil exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (harmonic_lower_bound 0
  (harmonic_lower_bound-1 nil 3680015586
   ("" (induct "n")
    (("1" (expand "series")
      (("1" (expand "sigma")
        (("1" (eval-expr "2^0")
          (("1" (replaces -1)
            (("1" (assert)
              (("1" (expand "harmonic_seq") (("1" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (lemma "harmonic_sections")
        (("2" (inst -1 "j")
          (("2" (expand "series")
            (("2" (lemma "sigma_split")
              (("2"
                (inst -1 "harmonic_seq" "2^(j+1) - 1" "0" "2^j - 1")
                (("2" (assert)
                  (("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma "expt_ge1")
          (("3" (inst -1 "2" "n") (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((expt_ge1 formula-decl nil exponentiation nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (sigma_split formula-decl nil sigma "reals/")
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (expt def-decl "real" exponentiation nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (harmonic_sections formula-decl nil harmonic_series nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_0_neg formula-decl nil sigma_nat "reals/")
    (sigma def-decl "real" sigma "reals/")
    (nat_induction formula-decl nil naturalnumbers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (harmonic_seq const-decl "sequence[real]" harmonic_series nil)
    (series const-decl "sequence[real]" series "series/")
    (sequence type-eq-decl nil sequences nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak))
 (harmonic_series_diverges 0
  (harmonic_series_diverges-1 nil 3680015722
   ("" (expand "convergent?")
    (("" (skeep)
      (("" (expand "convergence")
        (("" (inst -1 "1")
          (("" (skeep)
            (("" (lemma "harmonic_lower_bound")
              (("" (inst -2 "2^max(ceiling(2 * l), n+1) - 1")
                (("1" (inst -1 "max(ceiling(2 * l), n + 1)")
                  (("1" (case "2^max(ceiling(2 * l), n+1) - 1 >= n")
                    (("1" (assert) (("1" (grind) nil nil)) nil)
                     ("2" (hide -)
                      (("2" (expand "max")
                        (("2" (case "ceiling(2 * l) < 1 + n")
                          (("1" (assert)
                            (("1" (lemma "pos_expt_gt")
                              (("1"
                                (inst -1 "2" "1 + n")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (lemma "both_sides_expt_gt1_lt")
                              (("2"
                                (inst -1 "2" "ceiling(2 * l)" "1 + n")
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "pos_expt_gt")
                                    (("2"
                                      (inst -1 "2" "1+n")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -) (("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (hide -)
                  (("2" (split)
                    (("1" (grind) nil nil)
                     ("2" (expand "max")
                      (("2" (case "ceiling(2 * l) < 1 + n")
                        (("1" (assert)
                          (("1" (lemma "pos_expt_gt")
                            (("1" (inst -1 "2" "1+n")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (lemma "expt_ge1")
                            (("2" (inst -1 "2" "ceiling(2 * l)")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (harmonic_lower_bound formula-decl nil harmonic_series nil)
    (expt_ge1 formula-decl nil exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pos_expt_gt formula-decl nil exponentiation nil)
    (above nonempty-type-eq-decl nil integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (series const-decl "sequence[real]" series "series/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (l skolem-const-decl "real" harmonic_series nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n skolem-const-decl "nat" harmonic_series nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (convergence const-decl "bool" convergence_sequences "analysis/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergent? const-decl "bool" convergence_sequences "analysis/"))
   shostak))
 (hathat_lt1_TCC1 0
  (hathat_lt1_TCC1-1 nil 3680021890 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (hathat_lt1 0
  (hathat_lt1-1 nil 3680021891
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "^^")
          (("1" (assert)
            (("1" (mult-by -1 "ln(n)")
              (("1" (lemma "exp_increasing")
                (("1" (expand "increasing?")
                  (("1" (inst -1 "a * ln(n)" "ln(n)")
                    (("1" (assert)
                      (("1" (lemma "exp_ln")
                        (("1" (inst -1 "n") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "ln_ge_0")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "^^")
          (("2" (assert)
            (("2" (lemma "exp_strict_increasing")
              (("2" (mult-by 1 "ln(n)")
                (("1" (expand "strict_increasing?")
                  (("1" (inst -1 "ln(n)" "a * ln(n)")
                    (("1" (assert)
                      (("1" (lemma "exp_ln")
                        (("1" (inst -1 "n") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "ln_gt_0")
                  (("2" (inst -1 "n") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((^^ const-decl "nnreal" expt nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln const-decl "real" ln_exp nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n skolem-const-decl "nat" harmonic_series nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (increasing? const-decl "bool" real_fun_preds "reals/")
    (exp_ln formula-decl nil ln_exp nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp_increasing formula-decl nil ln_exp nil)
    (ln_ge_0 formula-decl nil ln_exp nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (exp_strict_increasing formula-decl nil ln_exp nil)
    (ln_gt_0 formula-decl nil ln_exp nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil))
   shostak))
 (inverse_power_convergence_TCC1 0
  (inverse_power_convergence_TCC1-1 nil 3680020619
   ("" (subtype-tcc) nil nil) nil nil))
 (inverse_power_convergence_TCC2 0
  (inverse_power_convergence_TCC2-1 nil 3680020619
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (ln const-decl "real" ln_exp nil)
    (^^ const-decl "nnreal" expt nil))
   nil))
 (inverse_power_convergence 0
  (inverse_power_convergence-1 nil 3680020621
   ("" (skeep)
    (("" (lemma "comparison_test")
      (("" (inst -1 "harmonic_seq" "LAMBDA n: 1 / (n + 1) ^^ a")
        (("1" (lemma "harmonic_series_diverges")
          (("1" (assert)
            (("1" (skeep)
              (("1" (expand "harmonic_seq")
                (("1" (hide 1)
                  (("1" (expand "abs")
                    (("1" (lemma "pos_div_le")
                      (("1" (inst -1 "1 + n_1" "1")
                        (("1" (assert)
                          (("1" (hide -3)
                            (("1" (case "n_1 = 0")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (expand "^^")
                                  (("1"
                                    (lemma "ln_1")
                                    (("1"
                                      (replaces -1)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "hathat_lt1")
                                (("2"
                                  (inst -1 "a" "1 + n_1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (cross-mult 2)
                                      (("2"
                                        (expand "^^")
                                        (("2"
                                          (typepred
                                           "exp(a * ln(1 + n_1))")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (expand "^^")
            (("2" (typepred "exp(a * ln(1 + n))")
              (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((comparison_test formula-decl nil series "series/")
    (harmonic_series_diverges formula-decl nil harmonic_series nil)
    (pos_div_le formula-decl nil real_props nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (exp_0 formula-decl nil ln_exp nil)
    (ln_1 formula-decl nil ln_exp nil)
    (TRUE const-decl "bool" booleans nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_neg_le2 formula-decl nil extra_real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (ln const-decl "real" ln_exp nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (hathat_lt1 formula-decl nil harmonic_series nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (harmonic_seq const-decl "sequence[real]" harmonic_series nil)
    (sequence type-eq-decl nil sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^^ const-decl "nnreal" expt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (a skolem-const-decl "posreal" harmonic_series nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil))
   shostak)))


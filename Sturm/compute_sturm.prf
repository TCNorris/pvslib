(compute_sturm
 (finite_bij_real_remove_one 0
  (finite_bij_real_remove_one-1 nil 3594487196
   ("" (skeep)
    (("" (case "NOT m-1>=0")
      (("1" (hide 2)
        (("1" (expand "bijective?")
          (("1" (flatten)
            (("1" (expand "surjective?")
              (("1" (inst - "x")
                (("1" (assert) (("1" (skosimp*) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (copy -2)
          (("2" (expand "bijective?" -1)
            (("2" (flatten)
              (("2" (copy -2)
                (("2" (expand "surjective?" -1)
                  (("2" (inst - "x")
                    (("2" (skolem -1 "ii")
                      (("2"
                        (inst +
                         "LAMBDA (i:below(m-1)): IF i<ii THEN bij(i) ELSE bij(i+1) ENDIF")
                        (("1" (expand "bijective?" +)
                          (("1" (split +)
                            (("1" (expand "injective?" 1)
                              (("1"
                                (skeep)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "injective?" -3)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (inst - "x1" "x2")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (inst - "x1" "1+x2")
                                              (("2" (assert) nil nil))
                                              nil)
                                             ("3"
                                              (inst - "1+x1" "x2")
                                              (("3" (assert) nil nil))
                                              nil)
                                             ("4"
                                              (inst - "1+x1" "1+x2")
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "surjective?")
                              (("2"
                                (skeep)
                                (("2"
                                  (typepred "y")
                                  (("2"
                                    (inst - "y")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (skolem - "jj")
                                        (("2"
                                          (case "ii = jj")
                                          (("1"
                                            (expand "injective?")
                                            (("1"
                                              (inst - "ii" "jj")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (case "jj<ii")
                                                (("1"
                                                  (inst + "jj")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst + "jj-1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "injective?")
                          (("2" (skeep)
                            (("2" (inst - "1+i" "ii")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (expand "injective?")
                          (("3" (skeep)
                            (("3" (inst - "i" "ii")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (x skolem-const-decl "real" compute_sturm nil)
    (A skolem-const-decl "set[real]" compute_sturm nil)
    (set type-eq-decl nil sets nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (jj skolem-const-decl "below(m)" compute_sturm nil)
    (injective? const-decl "bool" functions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (m skolem-const-decl "nat" compute_sturm nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ii skolem-const-decl "below(m)" compute_sturm nil)
    (/= const-decl "boolean" notequal nil)
    (bij skolem-const-decl "[below(m) -> (A)]" compute_sturm nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (finite_bij_real_remove_two 0
  (finite_bij_real_remove_two-1 nil 3594488379
   (""
    (case "FORALL (x, y: real, m: nat, A: set[real], bij: [below(m) -> (A)],i,j:below(m)):
        bijective?(bij) AND A(x) AND A(y) AND x /= y AND i<j AND bij(i)=x AND bij(j)=y IMPLIES
         m - 2 >= 0 AND
          (EXISTS (bijec: [below(m - 2) -> {r: (A) | r /= x AND r /= y}]):
             bijective?(bijec))")
    (("1" (skeep)
      (("1" (copy -2)
        (("1" (expand "bijective?" -1)
          (("1" (flatten)
            (("1" (expand "surjective?" -2)
              (("1" (inst-cp - "x")
                (("1" (inst - "y")
                  (("1" (skosimp*)
                    (("1" (case "x!1 < x!2")
                      (("1" (inst - "y" "x" "m" "A" "bij" "x!1" "x!2")
                        (("1" (assert)
                          (("1" (skosimp*)
                            (("1" (inst + "bijec!1")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "bijective?" (-5 2))
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (split)
                                      (("1"
                                        (expand "injective?" (-5 1))
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (expand "surjective?" (-6 1))
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (inst - "y!1")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst - "x" "y" "m" "A" "bij" "x!2" "x!1")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (case "NOT m-2>=0")
          (("1" (hide 3) (("1" (assert) nil nil)) nil)
           ("2" (assert)
            (("2"
              (inst +
               "LAMBDA (ii:below(m-2)): IF ii<i THEN bij(ii) ELSIF ii+1 < j THEN bij(ii+1) ELSE bij(ii+2) ENDIF")
              (("1" (expand "bijective?")
                (("1" (flatten)
                  (("1" (split)
                    (("1" (expand "injective?")
                      (("1" (skosimp*)
                        (("1" (lift-if)
                          (("1" (lift-if)
                            (("1" (lift-if)
                              (("1"
                                (lift-if)
                                (("1"
                                  (assert)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (inst - "x1!1" "x2!1")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (inst - "x1!1" "1+x2!1")
                                      (("2" (assert) nil nil))
                                      nil)
                                     ("3"
                                      (inst - "x1!1" "2+x2!1")
                                      (("3" (assert) nil nil))
                                      nil)
                                     ("4"
                                      (inst - "1+x1!1" "x2!1")
                                      (("4" (assert) nil nil))
                                      nil)
                                     ("5"
                                      (inst - "1+x1!1" "1+x2!1")
                                      (("5" (assert) nil nil))
                                      nil)
                                     ("6"
                                      (inst - "1+x1!1" "2+x2!1")
                                      (("6" (assert) nil nil))
                                      nil)
                                     ("7"
                                      (inst - "2+x1!1" "x2!1")
                                      (("7" (assert) nil nil))
                                      nil)
                                     ("8"
                                      (inst - "2+x1!1" "1+x2!1")
                                      (("8" (assert) nil nil))
                                      nil)
                                     ("9"
                                      (inst - "2+x1!1" "2+x2!1")
                                      (("9" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "surjective?")
                      (("2" (skosimp*)
                        (("2" (inst - "y!1")
                          (("2" (skosimp*)
                            (("2" (case "x!1 = i OR x!1 = j")
                              (("1" (ground) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (name "ii" "x!1")
                                  (("2"
                                    (replaces -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (case "ii < i")
                                        (("1"
                                          (inst + "ii")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (case "ii-1<j")
                                          (("1"
                                            (inst + "ii-1")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (inst + "ii-2")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (assert)
                  (("2" (expand "bijective?")
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (expand "injective?")
                          (("2" (inst-cp - "i" "2+ii!1")
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (inst-cp - "j" "2+ii!1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (assert)
                (("3" (skeep)
                  (("3" (expand "bijective?")
                    (("3" (flatten)
                      (("3" (expand "injective?")
                        (("3" (inst-cp - "1+ii" "i")
                          (("3" (assert)
                            (("3" (assert)
                              (("3"
                                (inst-cp - "1+ii" "j")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (expand "bijective?")
                (("4" (flatten)
                  (("4" (expand "injective?")
                    (("4" (skeep)
                      (("4" (inst-cp - "ii" "i")
                        (("4" (assert)
                          (("4" (assert)
                            (("4" (inst - "ii" "j")
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (m skolem-const-decl "nat" compute_sturm nil)
    (i skolem-const-decl "below(m)" compute_sturm nil)
    (A skolem-const-decl "set[real]" compute_sturm nil)
    (bij skolem-const-decl "[below(m) -> (A)]" compute_sturm nil)
    (x skolem-const-decl "real" compute_sturm nil)
    (y skolem-const-decl "real" compute_sturm nil)
    (j skolem-const-decl "below(m)" compute_sturm nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (ii skolem-const-decl "below(m)" compute_sturm nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (surjective? const-decl "bool" functions nil)
    (y skolem-const-decl "real" compute_sturm nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (injective? const-decl "bool" functions nil)
    (x skolem-const-decl "real" compute_sturm nil)
    (A skolem-const-decl "set[real]" compute_sturm nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (computed_sturm_spec_TCC1 0
  (computed_sturm_spec_TCC1-1 nil 3593788550 ("" (subtype-tcc) nil nil)
   ((mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (poly_deriv const-decl "real" polynomials "reals/")
    (/= const-decl "boolean" notequal nil))
   nil))
 (computed_sturm_spec_TCC2 0
  (computed_sturm_spec_TCC2-1 nil 3593788550 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (/= const-decl "boolean" notequal nil)
    (poly_deriv const-decl "real" polynomials "reals/"))
   nil))
 (computed_sturm_spec_TCC3 0
  (computed_sturm_spec_TCC3-1 nil 3593788550 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (computed_sturm_spec_TCC4 0
  (computed_sturm_spec_TCC4-1 nil 3593788550 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (listn_0 name-judgement "listn[int](0)" gcd_coeff nil)
    (listn_0 name-judgement "listn[real](0)" polynomial_division nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (computed_sturm_spec_TCC5 0
  (computed_sturm_spec_TCC5-1 nil 3593790499 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (computed_sturm_spec 0
  (computed_sturm_spec-1 nil 3593788956
   ("" (skeep)
    (("" (name "sl" "remainder_seq(a, n, poly_deriv(a), n - 1)")
      (("" (replace -1)
        ((""
          (name "P" "LAMBDA (j: nat):
                                                                             IF j < length(sl)
                                                                               THEN list2array[int](0)(nth(sl, length(sl) - 1 - j))
                                                                             ELSE (LAMBDA (i: nat): 0)
                                                                             ENDIF")
          (("1" (replaces -1)
            (("1"
              (name "N" " LAMBDA (j: nat):
                                                                                               IF j < length(sl)
                                                                                                 THEN max(length(nth(sl, length(sl) - 1 - j)) - 1, 0)
                                                                                               ELSE 0
                                                                                               ENDIF")
              (("1" (name "M" "length(sl)-1")
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (replace -1)
                      (("1" (replace -2)
                        (("1" (replace -3)
                          (("1" (split +)
                            (("1" (copy 2)
                              (("1"
                                (hide 3)
                                (("1"
                                  (expand
                                   "constructed_sturm_sequence?")
                                  (("1"
                                    (invoke (case "NOT %1") (! 2 1))
                                    (("1"
                                      (hide 3)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand "P" -1)
                                          (("1"
                                            (expand "N" -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "max" -1)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (case
                                                           "NOT length(sl)-1-i = 0")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "sl")
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "is_neg_remainder_list?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "0"
                                                                       "length(sl)-1-i")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "sl")
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (expand
                                                                 "is_neg_remainder_list?")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "length(sl)-1-i")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "list2array_sound[int]")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "nth(sl,length(sl)-1-i)"
                                                                           "0"
                                                                           "length(nth(sl, length(sl) - 1 - i)) - 1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (label "frizzy1" -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (hide "frizzy1")
                                            (("2"
                                              (invoke
                                               (case "NOT %1")
                                               (! 2 1))
                                              (("1"
                                                (hide 3)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (expand "N" 1)
                                                    (("1"
                                                      (expand "max" 1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (typepred
                                                                   "sl")
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "is_neg_remainder_list?"
                                                                       -1)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "length(sl)-1-j"
                                                                           "length(sl)-1-i")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "sl")
                                                                  (("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "is_neg_remainder_list?"
                                                                       -1)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "0"
                                                                           "length(sl)-1-j")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (typepred
                                                                   "sl")
                                                                  (("3"
                                                                    (hide
                                                                     -1)
                                                                    (("3"
                                                                      (expand
                                                                       "is_neg_remainder_list?"
                                                                       -1)
                                                                      (("3"
                                                                        (flatten)
                                                                        (("3"
                                                                          (inst
                                                                           -
                                                                           "length(sl)-1-j"
                                                                           "length(sl)-1-i")
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (both-sides
                                                                               "-"
                                                                               "length(sl)-1"
                                                                               1)
                                                                              (("3"
                                                                                (simplify
                                                                                 1)
                                                                                (("3"
                                                                                  (case
                                                                                   "i=0")
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "array2list[int](1 + n)(a)")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -4
                                                                                       +)
                                                                                      (("1"
                                                                                        (simplify)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -6
                                                                                           +)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2
                                                                                             +)
                                                                                            (("1"
                                                                                              (simplify
                                                                                               +)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 (-1
                                                                                                  -2
                                                                                                  -3))
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "j=1")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (simplify)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -5
                                                                                                         +)
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "array2list[int](n)(poly_deriv(a))")
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (inst
                                                                                                     -2
                                                                                                     "length(sl) -1 -j")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (ground)
                                                                                                        (("2"
                                                                                                          (reveal
                                                                                                           -6)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "length(sl) - 1 - j"
                                                                                                             "length(sl) -2")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -1)
                                                (("2"
                                                  (label "frizzy2" -1)
                                                  (("2"
                                                    (hide "frizzy2")
                                                    (("2"
                                                      (invoke
                                                       (case "NOT %1")
                                                       (! 2 1))
                                                      (("1"
                                                        (hide 3)
                                                        (("1"
                                                          (typepred
                                                           "sl")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (expand
                                                               "is_neg_remainder_list?"
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "P"
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -3)
                                                                      (("1"
                                                                        (replace
                                                                         -4)
                                                                        (("1"
                                                                          (decompose-equality
                                                                           1)
                                                                          (("1"
                                                                            (lemma
                                                                             "list2array_sound[int]")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (split
                                                                                       +)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "array2list[int](n)(poly_deriv(a))")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "array2list[int](n)(poly_deriv(a))")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "x!1")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -3
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "poly_deriv"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           (-1
                                                                                                            -2
                                                                                                            -3
                                                                                                            -4
                                                                                                            -5))
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "list2array_sound[int]")
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   +)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "array2list[int](1+n)(a)")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "1+x!1")
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -3
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "array2list[int](n)(poly_deriv(a))")
                                                                                            (("2"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "poly_deriv"
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "list2array_sound[int]")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "poly_deriv"
                                                                             1)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -1)
                                                        (("2"
                                                          (label
                                                           "frizzy3"
                                                           -1)
                                                          (("2"
                                                            (hide
                                                             "frizzy3")
                                                            (("2"
                                                              (invoke
                                                               (case
                                                                "NOT %1")
                                                               (! 2 1))
                                                              (("1"
                                                                (hide
                                                                 3)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "N"
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (typepred
                                                                         "sl")
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "is_neg_remainder_list?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (label
                                                                     "frizzy4"
                                                                     -1)
                                                                    (("2"
                                                                      (hide
                                                                       "frizzy4")
                                                                      (("2"
                                                                        (invoke
                                                                         (case
                                                                          "NOT %1")
                                                                         (!
                                                                          2
                                                                          1))
                                                                        (("1"
                                                                          (hide
                                                                           3)
                                                                          (("1"
                                                                            (expand
                                                                             "N"
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "M"
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (label
                                                                             "frizzy5"
                                                                             -1)
                                                                            (("2"
                                                                              (hide
                                                                               "frizzy5")
                                                                              (("2"
                                                                                (invoke
                                                                                 (case
                                                                                  "NOT %1")
                                                                                 (!
                                                                                  2
                                                                                  1))
                                                                                (("1"
                                                                                  (hide
                                                                                   3)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "P"
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "M"
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "sl")
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "is_neg_remainder_list?")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "nth(sl,0) = null")
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       (-7
                                                                                                        1))
                                                                                                      (("2"
                                                                                                        (grind
                                                                                                         :exclude
                                                                                                         "nth")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (label
                                                                                   "frizzy6"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (replace
                                                                                     "frizzy6")
                                                                                    (("2"
                                                                                      (hide
                                                                                       "frizzy6")
                                                                                      (("2"
                                                                                        (invoke
                                                                                         (case
                                                                                          "NOT %1")
                                                                                         (!
                                                                                          2
                                                                                          1))
                                                                                        (("1"
                                                                                          (hide
                                                                                           3)
                                                                                          (("1"
                                                                                            (skeep)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "sl")
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "is_neg_remainder_list?")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -5
                                                                                                       "length(sl)-1-j")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "NOT P(j-2) = list2array[int](0)(nth(sl, 1 + length(sl) - j))")
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (decompose-equality
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (name
                                                                                                                 "ii"
                                                                                                                 "x!1")
                                                                                                                (("1"
                                                                                                                  (replaces
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "P"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (case
                                                                                                             "NOT N(j-2) = length(nth(sl, 1 + length(sl) - j)) - 1")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "N"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "max")
                                                                                                                  (("1"
                                                                                                                    (lift-if)
                                                                                                                    (("1"
                                                                                                                      (ground)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "sl")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "is_neg_remainder_list?")
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "0"
                                                                                                                                 "1+length(sl)-j")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (case
                                                                                                               "NOT P(j-1) = list2array[int](0)(nth(sl, length(sl) - j))")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "P"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (case
                                                                                                                 "NOT N(j-1) = length(nth(sl, length(sl) - j)) - 1")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "N"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "max"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (lift-if)
                                                                                                                      (("1"
                                                                                                                        (ground)
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "sl")
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "is_neg_remainder_list?")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "0"
                                                                                                                                   "length(sl)-j")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -2
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -3
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -4
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "NOT P(j) = list2array[int](0)(nth(sl, length(sl) - j-1))")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "P"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (case
                                                                                                                               "NOT N(j) = length(nth(sl, length(sl) - j - 1)) - 1")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "N"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "max"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (lift-if)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (ground)
                                                                                                                                        (("1"
                                                                                                                                          (case
                                                                                                                                           "NOT j = M")
                                                                                                                                          (("1"
                                                                                                                                            (typepred
                                                                                                                                             "sl")
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "is_neg_remainder_list?")
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "0"
                                                                                                                                                     "M-j")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             "M"
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (replace
                                                                                                                                                 -1
                                                                                                                                                 -3)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (case
                                                                                                                                                     "NOT length(adjusted_remainder(P(j - 2), N(j - 2))(P(j - 1), N(j - 1))) = 0")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "adjusted_remainder_empty")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst?)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (split
                                                                                                                                                             -)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 +
                                                                                                                                                                 "1")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (decompose-equality
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (invoke
                                                                                                                                                                       (case
                                                                                                                                                                        "NOT %1 = 0")
                                                                                                                                                                       (!
                                                                                                                                                                        1
                                                                                                                                                                        1))
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         2)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (case
                                                                                                                                                                           "NOT N(j)=0")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "N"
                                                                                                                                                                               1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "max"
                                                                                                                                                                                 1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (propax)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (case
                                                                                                                                                                             "P(j)(0)=0")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -2)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (rewrite
                                                                                                                                                                                   "polynomial_n0")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "list2array_sound[int]")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -
                                                                                                                                                                                   "nth(sl,0)"
                                                                                                                                                                                   "0"
                                                                                                                                                                                   "0")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (replace
                                                                                                                                                                         -1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (hide
                                                                                                                                                                             (-11
                                                                                                                                                                              -12))
                                                                                                                                                                            (("2"
                                                                                                                                                                              (hide
                                                                                                                                                                               (-21
                                                                                                                                                                                -22))
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "polynomial"
                                                                                                                                                                                 1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (rewrite
                                                                                                                                                                                   "sigma_restrict_eq_0")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (hide
                                                                                                                                                                                     2)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (skosimp*)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -
                                                                                                                                                                                         "i!1")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "*")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (lift-if)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (ground)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("3"
                                                                                                                                                                        (hide-all-but
                                                                                                                                                                         1)
                                                                                                                                                                        (("3"
                                                                                                                                                                          (expand
                                                                                                                                                                           "N")
                                                                                                                                                                          (("3"
                                                                                                                                                                            (expand
                                                                                                                                                                             "max")
                                                                                                                                                                            (("3"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "N")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (ground)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("3"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (expand
                                                                                                                                                                         "N")
                                                                                                                                                                        (("3"
                                                                                                                                                                          (ground)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("4"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("4"
                                                                                                                                                                        (expand
                                                                                                                                                                         "N")
                                                                                                                                                                        (("4"
                                                                                                                                                                          (ground)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (hide
                                                                                                                                                               2)
                                                                                                                                                              (("2"
                                                                                                                                                                (hide
                                                                                                                                                                 -)
                                                                                                                                                                (("2"
                                                                                                                                                                  (hide
                                                                                                                                                                   2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (skeep)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "P")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "N")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "list2array_sound[int]")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst?)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (lift-if)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (ground)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "max")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (lift-if)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (ground)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (typepred
                                                                                                                                                                                             "sl")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (hide
                                                                                                                                                                                               -1)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "is_neg_remainder_list?")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (inst-cp
                                                                                                                                                                                                     -
                                                                                                                                                                                                     "length(sl) - j + 1 -1"
                                                                                                                                                                                                     "length(sl)-j+1")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (inst-cp
                                                                                                                                                                                                       -
                                                                                                                                                                                                       "length(sl)-j+1-2"
                                                                                                                                                                                                       "length(sl) - j + 1 -1")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (case
                                                                                                                                                                                                           "NOT FORALL (ab1,ab2,ab3:nat): ab1 < ab2 AND ab2 < ab3 IMPLIES (NOT ab3-1<0)")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (hide-all-but
                                                                                                                                                                                                             1)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (grind)
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil)
                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                            (inst
                                                                                                                                                                                                             -
                                                                                                                                                                                                             "length(nth(sl, length(sl) - 1 - j))"
                                                                                                                                                                                                             "length(nth(sl, length(sl) - j))"
                                                                                                                                                                                                             "length(nth(sl, 1 + length(sl) - j))")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (case
                                                                                                                                                                                             "FORALL (ab3:nat): NOT (i>ab3-1 AND i<ab3)")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (inst?)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (hide-all-but
                                                                                                                                                                                               1)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (grind)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("3"
                                                                                                                                                              (hide
                                                                                                                                                               2)
                                                                                                                                                              (("3"
                                                                                                                                                                (hide
                                                                                                                                                                 -)
                                                                                                                                                                (("3"
                                                                                                                                                                  (skeep)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (expand
                                                                                                                                                                     "P")
                                                                                                                                                                    (("3"
                                                                                                                                                                      (expand
                                                                                                                                                                       "N")
                                                                                                                                                                      (("3"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("3"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "list2array_sound[int]")
                                                                                                                                                                          (("3"
                                                                                                                                                                            (inst?)
                                                                                                                                                                            (("3"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("3"
                                                                                                                                                                                (lift-if)
                                                                                                                                                                                (("3"
                                                                                                                                                                                  (ground)
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "max")
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (lift-if)
                                                                                                                                                                                      (("3"
                                                                                                                                                                                        (ground)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -4
                                                                                                                                                                                           +)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (case
                                                                                                                                                                                             "i < 0")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (case
                                                                                                                                                                                               "FORALL (pjk:nat): pjk-1<0 IMPLIES pjk = 0")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -
                                                                                                                                                                                                 "length(nth(sl,length(sl)-j))")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                                 1)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (grind)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "FORALL (aa:int): NOT (i>aa-1 AND i<aa)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (inst?)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (hide-all-but
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (grind)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("4"
                                                                                                                                                              (assert)
                                                                                                                                                              (("4"
                                                                                                                                                                (reveal
                                                                                                                                                                 "frizzy1")
                                                                                                                                                                (("4"
                                                                                                                                                                  (inst?)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide
                                                                                                                                                           2)
                                                                                                                                                          (("2"
                                                                                                                                                            (reveal
                                                                                                                                                             "frizzy2")
                                                                                                                                                            (("2"
                                                                                                                                                              (inst
                                                                                                                                                               -
                                                                                                                                                               "j-2"
                                                                                                                                                               "j-1")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (hide
                                                                                                                                                                   2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "N"
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("3"
                                                                                                                                                          (hide
                                                                                                                                                           2)
                                                                                                                                                          (("3"
                                                                                                                                                            (expand
                                                                                                                                                             "N"
                                                                                                                                                             1)
                                                                                                                                                            (("3"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("3"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("3"
                                                                                                                                                        (expand
                                                                                                                                                         "N"
                                                                                                                                                         1)
                                                                                                                                                        (("3"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("4"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("4"
                                                                                                                                                        (expand
                                                                                                                                                         "N"
                                                                                                                                                         1)
                                                                                                                                                        (("4"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (label
                                                                                                                                 "mini"
                                                                                                                                 -)
                                                                                                                                (("2"
                                                                                                                                  (label
                                                                                                                                   "mini"
                                                                                                                                   -)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "adjusted_remainder_def")
                                                                                                                                    (("2"
                                                                                                                                      (inst?)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         "mini")
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           -)
                                                                                                                                          (("1"
                                                                                                                                            (skoletin
                                                                                                                                             -)
                                                                                                                                            (("1"
                                                                                                                                              (skoletin
                                                                                                                                               -)
                                                                                                                                              (("1"
                                                                                                                                                (skoletin
                                                                                                                                                 -)
                                                                                                                                                (("1"
                                                                                                                                                  (skoletin
                                                                                                                                                   -)
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "thispoly = P(j) AND thisdeg = N(j)")
                                                                                                                                                    (("1"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("1"
                                                                                                                                                        (case
                                                                                                                                                         "NOT N(j)>=0")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "N"
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("2"
                                                                                                                                                              (replace
                                                                                                                                                               -7
                                                                                                                                                               :dir
                                                                                                                                                               rl)
                                                                                                                                                              (("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   -3)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide
                                                                                                                                                       (-
                                                                                                                                                        2))
                                                                                                                                                      (("2"
                                                                                                                                                        (reveal
                                                                                                                                                         "mini")
                                                                                                                                                        (("2"
                                                                                                                                                          (split
                                                                                                                                                           +)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -2
                                                                                                                                                             1)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "thispoly"
                                                                                                                                                               +)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "thisrem"
                                                                                                                                                                 +)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -11
                                                                                                                                                                   :dir
                                                                                                                                                                   rl)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "thisdeg"
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "thisrem"
                                                                                                                                                                       1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -11
                                                                                                                                                                         :dir
                                                                                                                                                                         rl)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (hide
                                                                                                                                                                           -)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (decompose-equality)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "list2array_sound[int]")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst?)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (replaces
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (lift-if)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (lift-if)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (lift-if)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (ground)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (skeep)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (expand
                                                                                                                                                             "thisdeg"
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "thisrem"
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -11
                                                                                                                                                                 :dir
                                                                                                                                                                 rl)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("2"
                                                                                                                                              (reveal
                                                                                                                                               "frizzy1")
                                                                                                                                              (("2"
                                                                                                                                                (inst?)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("3"
                                                                                                                                              (reveal
                                                                                                                                               "frizzy2")
                                                                                                                                              (("3"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "j-2"
                                                                                                                                                 "j-1")
                                                                                                                                                (("3"
                                                                                                                                                  (assert)
                                                                                                                                                  (("3"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("3"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("3"
                                                                                                                                                        (expand
                                                                                                                                                         "P")
                                                                                                                                                        (("3"
                                                                                                                                                          (expand
                                                                                                                                                           "N")
                                                                                                                                                          (("3"
                                                                                                                                                            (assert)
                                                                                                                                                            (("3"
                                                                                                                                                              (lemma
                                                                                                                                                               "list2array_sound[int]")
                                                                                                                                                              (("3"
                                                                                                                                                                (inst?)
                                                                                                                                                                (("3"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (lift-if)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (ground)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (expand
                                                                                                                                                                         "max")
                                                                                                                                                                        (("3"
                                                                                                                                                                          (lift-if)
                                                                                                                                                                          (("3"
                                                                                                                                                                            (ground)
                                                                                                                                                                            (("3"
                                                                                                                                                                              (typepred
                                                                                                                                                                               "sl")
                                                                                                                                                                              (("3"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("3"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "is_neg_remainder_list?")
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (flatten)
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (inst-cp
                                                                                                                                                                                       -
                                                                                                                                                                                       "length(sl) - j + 1 -1"
                                                                                                                                                                                       "length(sl)-j+1")
                                                                                                                                                                                      (("3"
                                                                                                                                                                                        (inst-cp
                                                                                                                                                                                         -
                                                                                                                                                                                         "length(sl)-j+1-2"
                                                                                                                                                                                         "length(sl) - j + 1 -1")
                                                                                                                                                                                        (("3"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("3"
                                                                                                                                                                                            (case
                                                                                                                                                                                             "NOT FORALL (ab1,ab2,ab3:nat): ab1 < ab2 AND ab2 < ab3 IMPLIES (NOT ab3-1<0)")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (hide-all-but
                                                                                                                                                                                               1)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (grind)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (inst
                                                                                                                                                                                               -
                                                                                                                                                                                               "length(nth(sl, length(sl) - 1 - j))"
                                                                                                                                                                                               "length(nth(sl, length(sl) - j))"
                                                                                                                                                                                               "length(nth(sl, 1 + length(sl) - j))")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (case
                                                                                                                                                                                                   "FORALL (ab3:nat): NOT (ii>ab3-1 AND ii<ab3)")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (inst?)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil)
                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                    (hide-all-but
                                                                                                                                                                                                     1)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (grind)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("4"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("4"
                                                                                                                                              (hide
                                                                                                                                               2)
                                                                                                                                              (("4"
                                                                                                                                                (skeep)
                                                                                                                                                (("4"
                                                                                                                                                  (expand
                                                                                                                                                   "P")
                                                                                                                                                  (("4"
                                                                                                                                                    (expand
                                                                                                                                                     "N")
                                                                                                                                                    (("4"
                                                                                                                                                      (assert)
                                                                                                                                                      (("4"
                                                                                                                                                        (lemma
                                                                                                                                                         "list2array_sound[int]")
                                                                                                                                                        (("4"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("4"
                                                                                                                                                            (assert)
                                                                                                                                                            (("4"
                                                                                                                                                              (lift-if)
                                                                                                                                                              (("4"
                                                                                                                                                                (ground)
                                                                                                                                                                (("4"
                                                                                                                                                                  (expand
                                                                                                                                                                   "max")
                                                                                                                                                                  (("4"
                                                                                                                                                                    (lift-if)
                                                                                                                                                                    (("4"
                                                                                                                                                                      (ground)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -4
                                                                                                                                                                         +)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (case
                                                                                                                                                                           "ii < 0")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (case
                                                                                                                                                                             "FORALL (pjk:nat): pjk-1<0 IMPLIES pjk = 0")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst
                                                                                                                                                                               -
                                                                                                                                                                               "length(nth(sl,length(sl)-j))")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (hide-all-but
                                                                                                                                                                               1)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (grind)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (case
                                                                                                                                                                         "FORALL (aa:int): NOT (ii>aa-1 AND ii<aa)")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst?)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide-all-but
                                                                                                                                                                           1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (grind)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "N")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("3"
                                                                                                                                          (expand
                                                                                                                                           "N")
                                                                                                                                          (("3"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("2"
                                                                                            (label
                                                                                             "frizzydizzy"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (hide
                                                                                               "frizzydizzy")
                                                                                              (("2"
                                                                                                (case
                                                                                                 "NOT (M=-1 OR M=0 OR M=1)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (split
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (reveal
                                                                                                       "frizzy1")
                                                                                                      (("3"
                                                                                                        (reveal
                                                                                                         "frizzy2")
                                                                                                        (("3"
                                                                                                          (reveal
                                                                                                           "frizzy3")
                                                                                                          (("3"
                                                                                                            (reveal
                                                                                                             "frizzy4")
                                                                                                            (("3"
                                                                                                              (reveal
                                                                                                               "frizzy5")
                                                                                                              (("3"
                                                                                                                (replace
                                                                                                                 -6
                                                                                                                 -1)
                                                                                                                (("3"
                                                                                                                  (reveal
                                                                                                                   "frizzy6")
                                                                                                                  (("3"
                                                                                                                    (replace
                                                                                                                     -7
                                                                                                                     -1)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (replace
                                                                                                                         -4
                                                                                                                         -1)
                                                                                                                        (("3"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "0")
                                                                                                                          (("3"
                                                                                                                            (assert)
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "poly_deriv"
                                                                                                                               -1)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (skeep)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "N"
                                                                                             1)
                                                                                            (("3"
                                                                                              (lift-if)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (assert)
                                                                                          (("4"
                                                                                            (skeep)
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("5"
                                                                                          (skeep)
                                                                                          (("5"
                                                                                            (assert)
                                                                                            (("5"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "N"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (reveal
                                                                                                 "frizzy1")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("6"
                                                                                          (skeep)
                                                                                          (("6"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("7"
                                                                                          (skeep)
                                                                                          (("7"
                                                                                            (reveal
                                                                                             "frizzy2")
                                                                                            (("7"
                                                                                              (inst
                                                                                               -
                                                                                               "j-2"
                                                                                               "j-1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "N"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skeep)
                                      (("3"
                                        (expand "N" 1)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (typepred "sl")
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (expand "is_neg_remainder_list?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "M" 1)
                                          (("2"
                                            (replace -3)
                                            (("2"
                                              (decompose-equality +)
                                              (("2"
                                                (name "ii" "x!1")
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (lemma
                                                     "list2array_sound[int]")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (ground)
                                                              (("1"
                                                                (typepred
                                                                 "array2list[int](1+n)(a)")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "ii")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "ii")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "ii")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "ii")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (typepred "sl")
                              (("3"
                                (hide -1)
                                (("3"
                                  (expand "is_neg_remainder_list?")
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (expand "max")
                                      (("3"
                                        (lift-if)
                                        (("3" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 3)
                (("2" (skeep) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (hide 3) (("2" (skeep) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (poly_deriv const-decl "real" polynomials "reals/")
    (sequence type-eq-decl nil sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (> const-decl "bool" reals nil)
    (is_neg_remainder_list? const-decl "bool" remainder_sequence nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (list2array def-decl "T" array2list "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (constructed_sturm_sequence? const-decl "bool" sturm nil)
    (both_sides_minus_le2 formula-decl nil real_props nil)
    (both_sides_minus_lt2 formula-decl nil real_props nil)
    (both_sides_minus_lt1 formula-decl nil real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (array2list const-decl
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
     array2list "structures/")
    (listn type-eq-decl nil listn "structures/")
    (n skolem-const-decl "posnat" compute_sturm nil)
    (a skolem-const-decl "[nat -> int]" compute_sturm nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (max_nnreal_0 formula-decl nil min_max "reals/")
    (j skolem-const-decl "nat" compute_sturm nil)
    (sl skolem-const-decl
     "{crem: (is_neg_remainder_list?(a, n, poly_deriv(a), n - 1)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}" compute_sturm
     nil)
    (j skolem-const-decl "nat" compute_sturm nil)
    (adjusted_remainder_empty formula-decl nil polynomial_pseudo_divide
     nil)
    (polynomial_n0 formula-decl nil polynomials "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma_restrict_eq_0 formula-decl nil sigma "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (subrange type-eq-decl nil integers nil)
    (adjusted_remainder const-decl "list[int]" polynomial_pseudo_divide
     nil)
    (thispoly skolem-const-decl "[nat -> int]" compute_sturm nil)
    (thisdeg skolem-const-decl "int" compute_sturm nil)
    (thisrem skolem-const-decl "list[int]" compute_sturm nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (adjusted_remainder_def formula-decl nil polynomial_pseudo_divide
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (* const-decl "[T -> real]" real_fun_ops "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (DivType type-eq-decl nil polynomial_division nil)
    (poly_divide def-decl "DivType" polynomial_division nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (M skolem-const-decl "int" compute_sturm nil)
    (max_npreal_0 formula-decl nil min_max "reals/")
    (P skolem-const-decl "[nat -> [nat -> int]]" compute_sturm nil)
    (list2array_sound formula-decl nil array2list "structures/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (N skolem-const-decl "[nat -> int]" compute_sturm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" polynomial_division nil)
    (listn_0 name-judgement "listn[int](0)" gcd_coeff nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (Eq_computed_remainder?_TCC1 0
  (Eq_computed_remainder?_TCC1-1 nil 3595179342
   ("" (subtype-tcc) nil nil) nil nil))
 (Eq_computed_remainder?_TCC2 0
  (Eq_computed_remainder?_TCC2-1 nil 3595179342
   ("" (subtype-tcc) nil nil)
   ((poly_deriv const-decl "real" polynomials "reals/")
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil))
 (Eq_computed_remainder?_TCC3 0
  (Eq_computed_remainder?_TCC3-1 nil 3595179342
   ("" (subtype-tcc) nil nil)
   ((poly_deriv const-decl "real" polynomials "reals/")) nil))
 (roots_closed_int_TCC1 0
  (roots_closed_int_TCC1-1 nil 3594568781 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (roots_closed_int_TCC2 0
  (roots_closed_int_TCC2-1 nil 3594568781 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (listn_0 name-judgement "listn[int](0)" gcd_coeff nil)
    (listn_0 name-judgement "listn[real](0)" polynomial_division nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (roots_closed_int_TCC3 0
  (roots_closed_int_TCC3-1 nil 3594568781 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (roots_closed_int_TCC4 0
  (roots_closed_int_TCC4-1 nil 3594568781 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (roots_closed_int_TCC5 0
  (roots_closed_int_TCC5-1 nil 3594568781 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (listn_0 name-judgement "listn[int](0)" gcd_coeff nil)
    (listn_0 name-judgement "listn[real](0)" polynomial_division nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (/= const-decl "boolean" notequal nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (roots_closed_int_TCC6 0
  (roots_closed_int_TCC6-1 nil 3594568781 ("" (subtype-tcc) nil nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (listn_0 name-judgement "listn[real](0)" polynomial_division nil)
    (listn_0 name-judgement "listn[int](0)" gcd_coeff nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (poly_rootless_width const-decl "posreal" more_polynomial_props
     "reals/")
    (poly_n_deriv const-decl "real" polynomials "reals/")
    (C const-decl "posnat" binomial "reals/")
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (^ const-decl "real" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil))
 (roots_closed_int_def_truetrue 0
  (roots_closed_int_def_truetrue-1 nil 3595067092
   ("" (skeep)
    (("" (typepred "sl")
      (("" (hide -1)
        (("" (label "slname" -1)
          (("" (expand "Eq_computed_remainder?")
            (("" (label "xlty" -2)
              (("" (skoletin 2)
                (("" (label "rootnamename" -1)
                  (("" (skoletin 1)
                    (("" (label "Asetname" -1)
                      (("" (label "final" 1)
                        (("" (hide "final")
                          ((""
                            (expand "roots_closed_int" :assert? none)
                            (("" (skoletin -2)
                              ((""
                                (label "newaname" -2)
                                ((""
                                  (replace "newaname" :dir rl)
                                  ((""
                                    (skoletin -1)
                                    ((""
                                      (label "Pname" -2)
                                      ((""
                                        (skoletin -1)
                                        ((""
                                          (label "Nname" -2)
                                          ((""
                                            (skoletin -1)
                                            ((""
                                              (label "Mname" -2)
                                              ((""
                                                (skoletin -1)
                                                ((""
                                                  (label
                                                   "nscnormname"
                                                   -2)
                                                  ((""
                                                    (skoletin -1)
                                                    ((""
                                                      (label
                                                       "nschighlowname"
                                                       -2)
                                                      ((""
                                                        (skoletin -1)
                                                        ((""
                                                          (label
                                                           "newlowname"
                                                           -2)
                                                          ((""
                                                            (skoletin
                                                             -1)
                                                            ((""
                                                              (label
                                                               "newhighname"
                                                               -2)
                                                              ((""
                                                                (skoletin
                                                                 -1)
                                                                ((""
                                                                  (label
                                                                   "Nrootsname"
                                                                   -2)
                                                                  ((""
                                                                    (skoletin
                                                                     -1)
                                                                    ((""
                                                                      (label
                                                                       "adjlowname"
                                                                       -2)
                                                                      ((""
                                                                        (case
                                                                         "NOT polynomial(a,n) = polynomial(newa,n)")
                                                                        (("1"
                                                                          (hide
                                                                           -)
                                                                          (("1"
                                                                            (decompose-equality)
                                                                            (("1"
                                                                              (lemma
                                                                               "poly_eq_le_degree")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "newa"
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "computed_sturm_spec")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "newa"
                                                                             "n")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 "slname"
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (replace
                                                                                   "Pname"
                                                                                   :dir
                                                                                   rl)
                                                                                  (("2"
                                                                                    (replace
                                                                                     "Nname"
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (label
                                                                                         "polyeq"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (label
                                                                                               "css"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "NOT (P(0) = newa AND N(0) = n)")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "P"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "N"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "NOT (P(1) = poly_deriv(newa) AND N(1) = n-1)")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "constructed_sturm_sequence?"
                                                                                                       "css")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "sturm")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "M"
                                                                                                           "N"
                                                                                                           "P"
                                                                                                           "newlow"
                                                                                                           "newhigh")
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               "nscnormname"
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   "Nrootsname"
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (reveal
                                                                                                                       "final")
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "NOT rootnum>=0")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (lift-if
                                                                                                                             "adjlowname")
                                                                                                                            (("2"
                                                                                                                              (split
                                                                                                                               "adjlowname")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (replaces
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (skeep
                                                                                                                                       -4)
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         +
                                                                                                                                         "LAMBDA (i:below(rootnum)): IF i=Nroots THEN x ELSE bij(i) ENDIF")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "bijective?")
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (split
                                                                                                                                                 +)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "injective?")
                                                                                                                                                  (("1"
                                                                                                                                                    (skeep)
                                                                                                                                                    (("1"
                                                                                                                                                      (lift-if
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (lift-if
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (lift-if
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (ground)
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 -
                                                                                                                                                                 "x1"
                                                                                                                                                                 "x2")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (expand
                                                                                                                                                   "surjective?")
                                                                                                                                                  (("2"
                                                                                                                                                    (skosimp*)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "y!1")
                                                                                                                                                      (("2"
                                                                                                                                                        (case
                                                                                                                                                         "y!1 = x")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           +
                                                                                                                                                           "Nroots")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (inst
                                                                                                                                                           -
                                                                                                                                                           "y!1")
                                                                                                                                                          (("1"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               +
                                                                                                                                                               "x!1")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (hide
                                                                                                                                                             "final")
                                                                                                                                                            (("2"
                                                                                                                                                              (case
                                                                                                                                                               "NOT polynomial(P(0),N(0))(y!1)=0")
                                                                                                                                                              (("1"
                                                                                                                                                                (hide
                                                                                                                                                                 2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "Aset"
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (propax)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (typepred
                                                                                                                                                                   "y!1")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lift-if)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "Aset"
                                                                                                                                                                       -1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (ground)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (skeep)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (typepred
                                                                                                                                               "i")
                                                                                                                                              (("2"
                                                                                                                                                (typepred
                                                                                                                                                 "bij(i)")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "poly_rootless_width_def")
                                                                                                                                                    (("2"
                                                                                                                                                      (inst?)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (split
                                                                                                                                                           -)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -
                                                                                                                                                             "bij(i)"
                                                                                                                                                             "0")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "Aset"
                                                                                                                                                                   2)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "poly_n_deriv_def")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst
                                                                                                                                                                         -
                                                                                                                                                                         "a")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "abs"
                                                                                                                                                                                 1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (lift-if)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (ground)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (inst
                                                                                                                                                             +
                                                                                                                                                             "n")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("3"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("3"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("4"
                                                                                                                                          (skeep)
                                                                                                                                          (("4"
                                                                                                                                            (expand
                                                                                                                                             "Aset"
                                                                                                                                             1)
                                                                                                                                            (("4"
                                                                                                                                              (propax)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (skeep
                                                                                                                                       -4)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         +
                                                                                                                                         "bij")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "bijective?")
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (split
                                                                                                                                                 2)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "injective?")
                                                                                                                                                  (("1"
                                                                                                                                                    (skeep)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -
                                                                                                                                                       "x1"
                                                                                                                                                       "x2")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (expand
                                                                                                                                                   "surjective?")
                                                                                                                                                  (("2"
                                                                                                                                                    (skeep)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -
                                                                                                                                                       "y!1")
                                                                                                                                                      (("1"
                                                                                                                                                        (skeep)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           +
                                                                                                                                                           "x!1")
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (typepred
                                                                                                                                                           "y!1")
                                                                                                                                                          (("2"
                                                                                                                                                            (lift-if)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "Aset"
                                                                                                                                                               -1)
                                                                                                                                                              (("2"
                                                                                                                                                                (flatten)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (ground)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (split
                                                                                                                                           +)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (ground)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (skeep)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "Aset"
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (typepred
                                                                                                                                                   "bij(x1)")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (split
                                                                                                                                                       +)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "newlow"
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (lift-if
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (split
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (propax)
                                                                                                                                                                nil
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (flatten)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "poly_rootless_width_def")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst?)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (split
                                                                                                                                                                         -)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst
                                                                                                                                                                           -
                                                                                                                                                                           "bij(x1)"
                                                                                                                                                                           "0")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (split
                                                                                                                                                                                 1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (lemma
                                                                                                                                                                                   "poly_n_deriv_def")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (inst?)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "abs"
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           +
                                                                                                                                                                           "n")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (expand
                                                                                                                                                         "newhigh"
                                                                                                                                                         -2)
                                                                                                                                                        (("2"
                                                                                                                                                          (lift-if
                                                                                                                                                           -2)
                                                                                                                                                          (("2"
                                                                                                                                                            (split
                                                                                                                                                             -2)
                                                                                                                                                            (("1"
                                                                                                                                                              (flatten)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (flatten)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "poly_rootless_width_def")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst?)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (split
                                                                                                                                                                           -)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst
                                                                                                                                                                             -
                                                                                                                                                                             "bij(x1)"
                                                                                                                                                                             "0")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (split
                                                                                                                                                                                   +)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "poly_n_deriv_def")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (inst?)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "abs")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             +
                                                                                                                                                                             "n")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "newlow"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "newhigh"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (lift-if)
                                                                                                                  (("2"
                                                                                                                    (lift-if)
                                                                                                                    (("2"
                                                                                                                      (lift-if)
                                                                                                                      (("2"
                                                                                                                        (ground)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("4"
                                                                                                              (flatten)
                                                                                                              (("4"
                                                                                                                (assert)
                                                                                                                (("4"
                                                                                                                  (expand
                                                                                                                   "newlow"
                                                                                                                   (-1
                                                                                                                    -2))
                                                                                                                  (("4"
                                                                                                                    (lift-if
                                                                                                                     (-1
                                                                                                                      -2))
                                                                                                                    (("4"
                                                                                                                      (split
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "poly_rootless_width_def")
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "x - poly_rootless_width(a, n, x, TRUE) / 2"
                                                                                                                                     "0")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "poly_n_deriv_def")
                                                                                                                                          (("1"
                                                                                                                                            (inst?)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "abs"
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (inst
                                                                                                                                   +
                                                                                                                                   "n")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("5"
                                                                                                              (flatten)
                                                                                                              (("5"
                                                                                                                (assert)
                                                                                                                (("5"
                                                                                                                  (expand
                                                                                                                   "newhigh"
                                                                                                                   (-1
                                                                                                                    -2))
                                                                                                                  (("5"
                                                                                                                    (lift-if
                                                                                                                     (-1
                                                                                                                      -2))
                                                                                                                    (("5"
                                                                                                                      (split
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "poly_rootless_width_def")
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "y+ poly_rootless_width(a, n, y, TRUE) / 2"
                                                                                                                                     "0")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "poly_n_deriv_def")
                                                                                                                                          (("1"
                                                                                                                                            (inst?)
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "abs"
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (inst
                                                                                                                                   +
                                                                                                                                   "n")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "newhigh"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (expand
                                                                                                             "newlow"
                                                                                                             1)
                                                                                                            (("3"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "newa"
                                                                                             1)
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (hide
                                                                                             -)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "newa")
                                                                                              (("3"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (/= const-decl "boolean" notequal nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list2array def-decl "T" array2list "structures/")
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (NSC type-eq-decl nil number_sign_changes nil)
    (number_sign_changes def-decl "NSC" number_sign_changes nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (poly_rootless_width const-decl "posreal" more_polynomial_props
     "reals/")
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (computed_sturm_spec formula-decl nil compute_sturm nil)
    (newlow skolem-const-decl "numfield" compute_sturm nil)
    (newhigh skolem-const-decl "numfield" compute_sturm nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (poly_rootless_width_def formula-decl nil more_polynomial_props
     "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (poly_n_deriv_def formula-decl nil polynomials "reals/")
    (surjective? const-decl "bool" functions nil)
    (y!1 skolem-const-decl "(Aset)" compute_sturm nil)
    (injective? const-decl "bool" functions nil)
    (bij skolem-const-decl
     "[below(nscnorm(newlow)`num - nscnorm(newhigh)`num) ->
   {xr: real |
            newlow < xr AND
             xr <= newhigh AND polynomial(P(0), N(0))(xr) = 0}]"
     compute_sturm nil)
    (nscnorm skolem-const-decl "[real -> NSC]" compute_sturm nil)
    (x skolem-const-decl "real" compute_sturm nil)
    (Aset skolem-const-decl "[real -> boolean]" compute_sturm nil)
    (Nroots skolem-const-decl "int" compute_sturm nil)
    (rootnum skolem-const-decl "int" compute_sturm nil)
    (y!1 skolem-const-decl "(Aset)" compute_sturm nil)
    (bij skolem-const-decl
     "[below(nscnorm(newlow)`num - nscnorm(newhigh)`num) ->
   {xr: real |
            newlow < xr AND
             xr <= newhigh AND polynomial(P(0), N(0))(xr) = 0}]"
     compute_sturm nil)
    (sturm formula-decl nil sturm nil)
    (constructed_sturm_sequence? const-decl "bool" sturm nil)
    (poly_deriv const-decl "real" polynomials "reals/")
    (P skolem-const-decl "[nat -> [nat -> int]]" compute_sturm nil)
    (N skolem-const-decl "[nat -> int]" compute_sturm nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (poly_eq_le_degree formula-decl nil polynomials "reals/")
    (newa skolem-const-decl "[nat -> int]" compute_sturm nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (C const-decl "posnat" binomial "reals/")
    (poly_n_deriv const-decl "real" polynomials "reals/")
    (listn_0 name-judgement "listn[int](0)" gcd_coeff nil)
    (listn_0 name-judgement "listn[real](0)" polynomial_division nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (sequence type-eq-decl nil sequences nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (roots_closed_int const-decl "int" compute_sturm nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (<= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (< const-decl "bool" reals nil))
   nil))
 (roots_closed_int_def_falsetrue 0
  (roots_closed_int_def_falsetrue-1 nil 3595068138
   ("" (skeep)
    (("" (typepred "sl")
      (("" (hide -1)
        (("" (label "slname" -1)
          (("" (expand "Eq_computed_remainder?")
            (("" (label "xlty" -2)
              (("" (skoletin 2)
                (("" (label "rootnamename" -1)
                  (("" (skoletin 1)
                    (("" (label "Asetname" -1)
                      (("" (label "slname" -4)
                        (("" (label "final" 1)
                          (("" (hide "final")
                            ((""
                              (expand "roots_closed_int" :assert? none)
                              ((""
                                (skoletin -2)
                                ((""
                                  (label "newaname" -2)
                                  ((""
                                    (skoletin -1)
                                    ((""
                                      (replace -3 :dir rl)
                                      ((""
                                        (label "Pname" -2)
                                        ((""
                                          (skoletin -1)
                                          ((""
                                            (label "Nname" -2)
                                            ((""
                                              (skoletin -1)
                                              ((""
                                                (label "Mname" -2)
                                                ((""
                                                  (skoletin -1)
                                                  ((""
                                                    (label
                                                     "nscnormname"
                                                     -2)
                                                    ((""
                                                      (skoletin -1)
                                                      ((""
                                                        (label
                                                         "nschighlowname"
                                                         -2)
                                                        ((""
                                                          (skoletin -1)
                                                          ((""
                                                            (label
                                                             "newlowname"
                                                             -2)
                                                            ((""
                                                              (skoletin
                                                               -1)
                                                              ((""
                                                                (label
                                                                 "newhighname"
                                                                 -2)
                                                                ((""
                                                                  (skoletin
                                                                   -1)
                                                                  ((""
                                                                    (label
                                                                     "Nrootsname"
                                                                     -2)
                                                                    ((""
                                                                      (skoletin
                                                                       -1)
                                                                      ((""
                                                                        (label
                                                                         "adjlowname"
                                                                         -2)
                                                                        ((""
                                                                          (replace
                                                                           -2)
                                                                          ((""
                                                                            (assert)
                                                                            ((""
                                                                              (case
                                                                               "NOT polynomial(a,n) = polynomial(newa,n)")
                                                                              (("1"
                                                                                (hide
                                                                                 -)
                                                                                (("1"
                                                                                  (decompose-equality)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "poly_eq_le_degree")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "newa"
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "computed_sturm_spec")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "newa"
                                                                                   "n")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       "slname"
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (replace
                                                                                         "Pname"
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (replace
                                                                                           "Nname"
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (label
                                                                                             "polyeq"
                                                                                             -2)
                                                                                            (("2"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (label
                                                                                                   "css"
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     "Mname"
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "NOT (P(0) = newa AND N(0) = n)")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "P"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "N"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (case
                                                                                                             "NOT (P(1) = poly_deriv(newa) AND N(1) = n-1)")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "constructed_sturm_sequence?"
                                                                                                               "css")
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "sturm_unbounded_left")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "M"
                                                                                                                   "N"
                                                                                                                   "P"
                                                                                                                   "newhigh")
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -)
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "NOT number_sign_changes(LAMBDA (i:nat): (-1) ^ (N(i)) * P(i)(N(i)),
                                                                                 M - 1) = nschighlow(FALSE)")
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "nschighlow")
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "NOT number_sign_changes(LAMBDA (i:nat):
                                                                                               polynomial(P(i), N(i))(newhigh),
                                                                                             M - 1) = nscnorm(newhigh)")
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "nscnorm")
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (reveal
                                                                                                                                     "final")
                                                                                                                                    (("2"
                                                                                                                                      (case
                                                                                                                                       "NOT rootnum>=0")
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (skeep
                                                                                                                                           -5)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             +
                                                                                                                                             "bij")
                                                                                                                                            (("1"
                                                                                                                                              (copy
                                                                                                                                               -5)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "bijective?"
                                                                                                                                                 (-1
                                                                                                                                                  1))
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (split
                                                                                                                                                       +)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "injective?")
                                                                                                                                                        (("1"
                                                                                                                                                          (skeep)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -
                                                                                                                                                             "x1"
                                                                                                                                                             "x2")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (expand
                                                                                                                                                         "surjective?")
                                                                                                                                                        (("2"
                                                                                                                                                          (skeep)
                                                                                                                                                          (("2"
                                                                                                                                                            (inst
                                                                                                                                                             -
                                                                                                                                                             "y!1")
                                                                                                                                                            (("1"
                                                                                                                                                              (skeep)
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 +
                                                                                                                                                                 "x!1")
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (typepred
                                                                                                                                                                 "y!1")
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "Aset"
                                                                                                                                                                   -1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (lift-if)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (ground)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (split
                                                                                                                                               +)
                                                                                                                                              (("1"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("1"
                                                                                                                                                  (ground)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (skeep)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "Aset"
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "bij(x1)")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "newhigh"
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (lift-if
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (split
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (flatten)
                                                                                                                                                                nil
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (flatten)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "poly_rootless_width_def")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst?)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (split
                                                                                                                                                                           -)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst
                                                                                                                                                                             -
                                                                                                                                                                             "bij(x1)"
                                                                                                                                                                             "0")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (split
                                                                                                                                                                                   +)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "poly_n_deriv_def")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (inst?)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "abs")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             +
                                                                                                                                                                             "n")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (hide
                                                                                                                             -)
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "newhigh"
                                                                                                                               1)
                                                                                                                              (("3"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (hide
                                                                                                                         -)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          (("3"
                                                                                                                            (skeep)
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "N")
                                                                                                                              (("3"
                                                                                                                                (lift-if)
                                                                                                                                (("3"
                                                                                                                                  (ground)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (flatten)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "newhigh"
                                                                                                                             (-1
                                                                                                                              -2))
                                                                                                                            (("3"
                                                                                                                              (lift-if
                                                                                                                               (-1
                                                                                                                                -2))
                                                                                                                              (("3"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "poly_rootless_width_def")
                                                                                                                                      (("2"
                                                                                                                                        (inst?)
                                                                                                                                        (("2"
                                                                                                                                          (split
                                                                                                                                           -)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "y+ poly_rootless_width(a, n, y, TRUE) / 2"
                                                                                                                                               "0")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "poly_n_deriv_def")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?)
                                                                                                                                                      (("1"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "abs"
                                                                                                                                                             1)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (inst
                                                                                                                                             +
                                                                                                                                             "n")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     -)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "newhigh"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "newa"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (hide
                                                                                                 -)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "newa")
                                                                                                  (("3"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (/= const-decl "boolean" notequal nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (newa skolem-const-decl "[nat -> int]" compute_sturm nil)
    (poly_eq_le_degree formula-decl nil polynomials "reals/")
    (listn_0 name-judgement "listn[int](0)" gcd_coeff nil)
    (listn_0 name-judgement "listn[real](0)" polynomial_division nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nschighlow skolem-const-decl "[bool -> NSC]" compute_sturm nil)
    (nscnorm skolem-const-decl "[real -> NSC]" compute_sturm nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (poly_n_deriv_def formula-decl nil polynomials "reals/")
    (minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (poly_rootless_width_def formula-decl nil more_polynomial_props
     "reals/")
    (injective? const-decl "bool" functions nil)
    (y!1 skolem-const-decl "(Aset)" compute_sturm nil)
    (surjective? const-decl "bool" functions nil)
    (bij skolem-const-decl
     "[below(nschighlow(FALSE)`num - nscnorm(newhigh)`num) ->
   {xr: real | xr <= newhigh AND polynomial(P(0), N(0))(xr) = 0}]"
     compute_sturm nil)
    (Aset skolem-const-decl "[real -> boolean]" compute_sturm nil)
    (rootnum skolem-const-decl "int" compute_sturm nil)
    (newhigh skolem-const-decl "real" compute_sturm nil)
    (sturm_unbounded_left formula-decl nil sturm nil)
    (constructed_sturm_sequence? const-decl "bool" sturm nil)
    (poly_deriv const-decl "real" polynomials "reals/")
    (P skolem-const-decl "[nat -> [nat -> int]]" compute_sturm nil)
    (N skolem-const-decl "[nat -> int]" compute_sturm nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (computed_sturm_spec formula-decl nil compute_sturm nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (poly_rootless_width const-decl "posreal" more_polynomial_props
     "reals/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_sign_changes def-decl "NSC" number_sign_changes nil)
    (NSC type-eq-decl nil number_sign_changes nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (list2array def-decl "T" array2list "structures/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (sequence type-eq-decl nil sequences nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (roots_closed_int const-decl "int" compute_sturm nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (<= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (< const-decl "bool" reals nil))
   nil))
 (roots_closed_int_def_truefalse 0
  (roots_closed_int_def_truefalse-1 nil 3595069574
   ("" (skeep)
    (("" (typepred "sl")
      (("" (label "slname" -2)
        (("" (hide -1)
          (("" (expand "Eq_computed_remainder?")
            (("" (label "xlty" -2)
              (("" (skoletin 2)
                (("" (label "rootnamename" -1)
                  (("" (skoletin 1)
                    (("" (label "Asetname" -1)
                      (("" (label "final" 1)
                        (("" (hide "final")
                          ((""
                            (expand "roots_closed_int" :assert? none)
                            (("" (skoletin -2)
                              ((""
                                (label "newaname" -2)
                                ((""
                                  (replace -2 :dir rl)
                                  ((""
                                    (skoletin -1)
                                    ((""
                                      (label "Pname" -2)
                                      ((""
                                        (skoletin -1)
                                        ((""
                                          (label "Nname" -2)
                                          ((""
                                            (skoletin -1)
                                            ((""
                                              (label "Mname" -2)
                                              ((""
                                                (skoletin -1)
                                                ((""
                                                  (label
                                                   "nscnormname"
                                                   -2)
                                                  ((""
                                                    (skoletin -1)
                                                    ((""
                                                      (label
                                                       "nschighlowname"
                                                       -2)
                                                      ((""
                                                        (skoletin -1)
                                                        ((""
                                                          (label
                                                           "newlowname"
                                                           -2)
                                                          ((""
                                                            (skoletin
                                                             -1)
                                                            ((""
                                                              (label
                                                               "newhighname"
                                                               -2)
                                                              ((""
                                                                (skoletin
                                                                 -1)
                                                                ((""
                                                                  (label
                                                                   "Nrootsname"
                                                                   -2)
                                                                  ((""
                                                                    (skoletin
                                                                     -1)
                                                                    ((""
                                                                      (label
                                                                       "adjlowname"
                                                                       -2)
                                                                      ((""
                                                                        (case
                                                                         "NOT polynomial(a,n) = polynomial(newa,n)")
                                                                        (("1"
                                                                          (hide
                                                                           -)
                                                                          (("1"
                                                                            (decompose-equality)
                                                                            (("1"
                                                                              (lemma
                                                                               "poly_eq_le_degree")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "newa"
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "computed_sturm_spec")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "newa"
                                                                             "n")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 "slname"
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (replace
                                                                                   "Pname"
                                                                                   :dir
                                                                                   rl)
                                                                                  (("2"
                                                                                    (replace
                                                                                     "Nname"
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (label
                                                                                         "polyeq"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (label
                                                                                               "css"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "NOT (P(0) = newa AND N(0) = n)")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "P"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "N"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "NOT (P(1) = poly_deriv(newa) AND N(1) = n-1)")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "constructed_sturm_sequence?"
                                                                                                       "css")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "sturm_unbounded_right")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "M"
                                                                                                           "N"
                                                                                                           "P"
                                                                                                           "newlow")
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "NOT number_sign_changes(LAMBDA (i:nat): P(i)(N(i)), M - 1) = nschighlow(TRUE)")
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "nschighlow")
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (case
                                                                                                                   "NOT number_sign_changes(LAMBDA (i:nat): polynomial(P(i), N(i))(newlow),
                                                                          M - 1) = nscnorm(newlow)")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "nscnorm"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (replace
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (reveal
                                                                                                                           "final")
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "NOT rootnum>=0")
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (lift-if
                                                                                                                                 "adjlowname")
                                                                                                                                (("2"
                                                                                                                                  (split
                                                                                                                                   "adjlowname")
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (replaces
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (skeep
                                                                                                                                           -6)
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             +
                                                                                                                                             "LAMBDA (i:below(rootnum)): IF i=Nroots THEN x ELSE bij(i) ENDIF")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "bijective?")
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (split
                                                                                                                                                     +)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "injective?")
                                                                                                                                                      (("1"
                                                                                                                                                        (skeep)
                                                                                                                                                        (("1"
                                                                                                                                                          (lift-if
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (lift-if
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (lift-if
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (ground)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -
                                                                                                                                                                     "x1"
                                                                                                                                                                     "x2")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (expand
                                                                                                                                                       "surjective?")
                                                                                                                                                      (("2"
                                                                                                                                                        (skosimp*)
                                                                                                                                                        (("2"
                                                                                                                                                          (typepred
                                                                                                                                                           "y!1")
                                                                                                                                                          (("2"
                                                                                                                                                            (case
                                                                                                                                                             "y!1 = x")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               +
                                                                                                                                                               "Nroots")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (inst
                                                                                                                                                               -
                                                                                                                                                               "y!1")
                                                                                                                                                              (("1"
                                                                                                                                                                (skosimp*)
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   +
                                                                                                                                                                   "x!1")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (hide
                                                                                                                                                                 "final")
                                                                                                                                                                (("2"
                                                                                                                                                                  (case
                                                                                                                                                                   "NOT polynomial(P(0),N(0))(y!1)=0")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (hide
                                                                                                                                                                     2)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "Aset"
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (propax)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "y!1")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "Aset"
                                                                                                                                                                         -1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (propax)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (skeep)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "Aset"
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "bij(i)")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("3"
                                                                                                                                              (skosimp*)
                                                                                                                                              (("3"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("4"
                                                                                                                                              (skeep)
                                                                                                                                              (("4"
                                                                                                                                                (expand
                                                                                                                                                 "Aset"
                                                                                                                                                 1)
                                                                                                                                                (("4"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (skeep
                                                                                                                                           -6)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             +
                                                                                                                                             "bij")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "bijective?")
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (split
                                                                                                                                                     2)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "injective?")
                                                                                                                                                      (("1"
                                                                                                                                                        (skeep)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -
                                                                                                                                                           "x1"
                                                                                                                                                           "x2")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (expand
                                                                                                                                                       "surjective?")
                                                                                                                                                      (("2"
                                                                                                                                                        (skeep)
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -
                                                                                                                                                           "y!1")
                                                                                                                                                          (("1"
                                                                                                                                                            (skeep)
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               +
                                                                                                                                                               "x!1")
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (typepred
                                                                                                                                                               "y!1")
                                                                                                                                                              (("2"
                                                                                                                                                                (lift-if)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "Aset"
                                                                                                                                                                   -1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (ground)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (split
                                                                                                                                               +)
                                                                                                                                              (("1"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("1"
                                                                                                                                                  (ground)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (skeep)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "Aset"
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "bij(x1)")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "newlow"
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (lift-if
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (split
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "poly_rootless_width_def")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst?)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (split
                                                                                                                                                                           -)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst
                                                                                                                                                                             -
                                                                                                                                                                             "bij(x1)"
                                                                                                                                                                             "0")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (split
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "poly_n_deriv_def")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (inst?)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "abs"
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             +
                                                                                                                                                                             "n")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (expand
                                                                                                                     "newlow"
                                                                                                                     1)
                                                                                                                    (("3"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (hide
                                                                                                                 -)
                                                                                                                (("3"
                                                                                                                  (skeep)
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "N")
                                                                                                                    (("3"
                                                                                                                      (lift-if)
                                                                                                                      (("3"
                                                                                                                        (ground)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (flatten)
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "newlow"
                                                                                                                   (-1
                                                                                                                    -2))
                                                                                                                  (("3"
                                                                                                                    (lift-if
                                                                                                                     (-1
                                                                                                                      -2))
                                                                                                                    (("3"
                                                                                                                      (split
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "poly_rootless_width_def")
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "x - poly_rootless_width(a, n, x, TRUE) / 2"
                                                                                                                                     "0")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "poly_n_deriv_def")
                                                                                                                                          (("1"
                                                                                                                                            (inst?)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "abs"
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (inst
                                                                                                                                   +
                                                                                                                                   "n")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "newlow"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "newa"
                                                                                             1)
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (hide
                                                                                             -)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "newa")
                                                                                              (("3"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (/= const-decl "boolean" notequal nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list2array def-decl "T" array2list "structures/")
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (NSC type-eq-decl nil number_sign_changes nil)
    (number_sign_changes def-decl "NSC" number_sign_changes nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (poly_rootless_width const-decl "posreal" more_polynomial_props
     "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (computed_sturm_spec formula-decl nil compute_sturm nil)
    (newlow skolem-const-decl "numfield" compute_sturm nil)
    (nschighlow skolem-const-decl "[bool -> NSC]" compute_sturm nil)
    (nscnorm skolem-const-decl "[real -> NSC]" compute_sturm nil)
    (surjective? const-decl "bool" functions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (y!1 skolem-const-decl "(Aset)" compute_sturm nil)
    (injective? const-decl "bool" functions nil)
    (bij skolem-const-decl
     "[below(nscnorm(newlow)`num - nschighlow(TRUE)`num) ->
   {xr: real | xr > newlow AND polynomial(P(0), N(0))(xr) = 0}]"
     compute_sturm nil)
    (x skolem-const-decl "real" compute_sturm nil)
    (Aset skolem-const-decl "[real -> boolean]" compute_sturm nil)
    (Nroots skolem-const-decl "int" compute_sturm nil)
    (rootnum skolem-const-decl "int" compute_sturm nil)
    (poly_n_deriv_def formula-decl nil polynomials "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (poly_rootless_width_def formula-decl nil more_polynomial_props
     "reals/")
    (y!1 skolem-const-decl "(Aset)" compute_sturm nil)
    (bij skolem-const-decl
     "[below(nscnorm(newlow)`num - nschighlow(TRUE)`num) ->
   {xr: real | xr > newlow AND polynomial(P(0), N(0))(xr) = 0}]"
     compute_sturm nil)
    (sturm_unbounded_right formula-decl nil sturm nil)
    (constructed_sturm_sequence? const-decl "bool" sturm nil)
    (poly_deriv const-decl "real" polynomials "reals/")
    (P skolem-const-decl "[nat -> [nat -> int]]" compute_sturm nil)
    (N skolem-const-decl "[nat -> int]" compute_sturm nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (poly_eq_le_degree formula-decl nil polynomials "reals/")
    (newa skolem-const-decl "[nat -> int]" compute_sturm nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (C const-decl "posnat" binomial "reals/")
    (poly_n_deriv const-decl "real" polynomials "reals/")
    (listn_0 name-judgement "listn[int](0)" gcd_coeff nil)
    (listn_0 name-judgement "listn[real](0)" polynomial_division nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (sequence type-eq-decl nil sequences nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (roots_closed_int const-decl "int" compute_sturm nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (<= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (< const-decl "bool" reals nil))
   nil))
 (roots_closed_int_def_falsefalse 0
  (roots_closed_int_def_falsefalse-2 nil 3595075574
   ("" (skeep)
    (("" (typepred "sl")
      (("" (label "slname" -2)
        (("" (hide -1)
          (("" (expand "Eq_computed_remainder?")
            (("" (label "xlty" -2)
              (("" (skoletin 2)
                (("" (label "rootnamename" -1)
                  (("" (label "slname" -3)
                    (("" (skoletin 1)
                      (("" (label "Asetname" -1)
                        (("" (label "final" 1)
                          (("" (hide "final")
                            ((""
                              (expand "roots_closed_int" :assert? none)
                              ((""
                                (skoletin -2)
                                ((""
                                  (label "newaname" -2)
                                  ((""
                                    (replace -2 :dir rl)
                                    ((""
                                      (skoletin -1)
                                      ((""
                                        (label "Pname" -2)
                                        ((""
                                          (skoletin -1)
                                          ((""
                                            (label "Nname" -2)
                                            ((""
                                              (skoletin -1)
                                              ((""
                                                (label "Mname" -2)
                                                ((""
                                                  (skoletin -1)
                                                  ((""
                                                    (label
                                                     "nscnormname"
                                                     -2)
                                                    ((""
                                                      (skoletin -1)
                                                      ((""
                                                        (label
                                                         "nschighlowname"
                                                         -2)
                                                        ((""
                                                          (skoletin -1)
                                                          ((""
                                                            (label
                                                             "newlowname"
                                                             -2)
                                                            ((""
                                                              (skoletin
                                                               -1)
                                                              ((""
                                                                (label
                                                                 "newhighname"
                                                                 -2)
                                                                ((""
                                                                  (skoletin
                                                                   -1)
                                                                  ((""
                                                                    (label
                                                                     "Nrootsname"
                                                                     -2)
                                                                    ((""
                                                                      (skoletin
                                                                       -1)
                                                                      ((""
                                                                        (label
                                                                         "adjlowname"
                                                                         -2)
                                                                        ((""
                                                                          (replace
                                                                           -2)
                                                                          ((""
                                                                            (assert)
                                                                            ((""
                                                                              (case
                                                                               "NOT polynomial(a,n) = polynomial(newa,n)")
                                                                              (("1"
                                                                                (hide
                                                                                 -)
                                                                                (("1"
                                                                                  (decompose-equality)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "poly_eq_le_degree")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "newa"
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "computed_sturm_spec")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "newa"
                                                                                   "n")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       "slname"
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (replace
                                                                                         "Pname"
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (replace
                                                                                           "Nname"
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (label
                                                                                             "polyeq"
                                                                                             -2)
                                                                                            (("2"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (label
                                                                                                   "css"
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     "Mname"
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "NOT (P(0) = newa AND N(0) = n)")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "P"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "N"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (case
                                                                                                             "NOT (P(1) = poly_deriv(newa) AND N(1) = n-1)")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "constructed_sturm_sequence?"
                                                                                                               "css")
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "sturm_unbounded")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "M"
                                                                                                                   "N"
                                                                                                                   "P")
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -)
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "NOT number_sign_changes(LAMBDA (i:nat): (-1) ^ (N(i)) * P(i)(N(i)),
                                                                                                               M - 1) = nschighlow(FALSE)")
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "nschighlow")
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "NOT number_sign_changes(LAMBDA (i:nat):P(i)(N(i)),
                                                                                                                   M - 1) = nschighlow(TRUE)")
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "nschighlow")
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (reveal
                                                                                                                                     "final")
                                                                                                                                    (("2"
                                                                                                                                      (case
                                                                                                                                       "NOT rootnum>=0")
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (skeep
                                                                                                                                           -5)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             +
                                                                                                                                             "bij")
                                                                                                                                            (("1"
                                                                                                                                              (copy
                                                                                                                                               -5)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "bijective?"
                                                                                                                                                 (-1
                                                                                                                                                  1))
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (split
                                                                                                                                                       +)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "injective?")
                                                                                                                                                        (("1"
                                                                                                                                                          (skeep)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -
                                                                                                                                                             "x1"
                                                                                                                                                             "x2")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (expand
                                                                                                                                                         "surjective?")
                                                                                                                                                        (("2"
                                                                                                                                                          (skeep)
                                                                                                                                                          (("2"
                                                                                                                                                            (inst
                                                                                                                                                             -
                                                                                                                                                             "y!1")
                                                                                                                                                            (("1"
                                                                                                                                                              (skeep)
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 +
                                                                                                                                                                 "x!1")
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (typepred
                                                                                                                                                                 "y!1")
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "Aset"
                                                                                                                                                                   -1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (split
                                                                                                                                               +)
                                                                                                                                              (("1"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("1"
                                                                                                                                                  (ground)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (skeep)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "Aset"
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (hide
                                                                                                                         -)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          (("3"
                                                                                                                            (skeep)
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "N")
                                                                                                                              (("3"
                                                                                                                                (lift-if)
                                                                                                                                (("3"
                                                                                                                                  (ground)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "newa"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (hide
                                                                                                 -)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "newa")
                                                                                                  (("3"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (/= const-decl "boolean" notequal nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (newa skolem-const-decl "[nat -> int]" compute_sturm nil)
    (poly_eq_le_degree formula-decl nil polynomials "reals/")
    (listn_0 name-judgement "listn[int](0)" gcd_coeff nil)
    (listn_0 name-judgement "listn[real](0)" polynomial_division nil)
    (nschighlow skolem-const-decl "[bool -> NSC]" compute_sturm nil)
    (injective? const-decl "bool" functions nil)
    (y!1 skolem-const-decl "(Aset)" compute_sturm nil)
    (surjective? const-decl "bool" functions nil)
    (bij skolem-const-decl
     "[below(nschighlow(FALSE)`num - nschighlow(TRUE)`num) ->
   {xr: real | polynomial(P(0), N(0))(xr) = 0}]" compute_sturm nil)
    (Aset skolem-const-decl "[real -> boolean]" compute_sturm nil)
    (rootnum skolem-const-decl "int" compute_sturm nil)
    (sturm_unbounded formula-decl nil sturm nil)
    (constructed_sturm_sequence? const-decl "bool" sturm nil)
    (poly_deriv const-decl "real" polynomials "reals/")
    (P skolem-const-decl "[nat -> [nat -> int]]" compute_sturm nil)
    (N skolem-const-decl "[nat -> int]" compute_sturm nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (computed_sturm_spec formula-decl nil compute_sturm nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list2array def-decl "T" array2list "structures/")
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (NSC type-eq-decl nil number_sign_changes nil)
    (number_sign_changes def-decl "NSC" number_sign_changes nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (sequence type-eq-decl nil sequences nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (roots_closed_int const-decl "int" compute_sturm nil)
    (FALSE const-decl "bool" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (<= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (< const-decl "bool" reals nil))
   nil)
  (roots_closed_int_def_falsefalse-1 nil 3595075552
   ("" (skeep)
    (("" (skoletin 2)
      (("" (label "xlty" -2)
        (("" (label "rootnamename" -1)
          (("" (skoletin 1)
            (("" (label "Asetname" -1)
              (("" (label "final" 1)
                (("" (hide "final")
                  (("" (expand "roots_closed_int" :assert? none)
                    (("" (skoletin -2)
                      (("" (label "newaname" -2)
                        (("" (skoletin -1)
                          (("" (label "slname" -2)
                            (("" (skoletin -1)
                              ((""
                                (label "Pname" -2)
                                ((""
                                  (skoletin -1)
                                  ((""
                                    (label "Nname" -2)
                                    ((""
                                      (skoletin -1)
                                      ((""
                                        (label "Mname" -2)
                                        ((""
                                          (skoletin -1)
                                          ((""
                                            (label "nscnormname" -2)
                                            ((""
                                              (skoletin -1)
                                              ((""
                                                (label
                                                 "nschighlowname"
                                                 -2)
                                                ((""
                                                  (skoletin -1)
                                                  ((""
                                                    (label
                                                     "newlowname"
                                                     -2)
                                                    ((""
                                                      (skoletin -1)
                                                      ((""
                                                        (label
                                                         "newhighname"
                                                         -2)
                                                        ((""
                                                          (skoletin -1)
                                                          ((""
                                                            (label
                                                             "Nrootsname"
                                                             -2)
                                                            ((""
                                                              (skoletin
                                                               -1)
                                                              ((""
                                                                (label
                                                                 "adjlowname"
                                                                 -2)
                                                                ((""
                                                                  (replace
                                                                   -2)
                                                                  ((""
                                                                    (assert)
                                                                    ((""
                                                                      (case
                                                                       "NOT polynomial(a,n) = polynomial(newa,n)")
                                                                      (("1"
                                                                        (hide
                                                                         -)
                                                                        (("1"
                                                                          (decompose-equality)
                                                                          (("1"
                                                                            (lemma
                                                                             "poly_eq_le_degree")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "newa"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil)))))))))))))))
                                                                       ("2"
                                                                        (lemma
                                                                         "computed_sturm_spec")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "newa"
                                                                           "n")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replace
                                                                               "slname"
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (replace
                                                                                 "Pname"
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (replace
                                                                                   "Nname"
                                                                                   :dir
                                                                                   rl)
                                                                                  (("2"
                                                                                    (label
                                                                                     "polyeq"
                                                                                     -2)
                                                                                    (("2"
                                                                                      (split
                                                                                       -)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (label
                                                                                           "css"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             "Mname"
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "NOT (P(0) = newa AND N(0) = n)")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "P"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "N"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil)))))
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "NOT (P(1) = poly_deriv(newa) AND N(1) = n-1)")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "constructed_sturm_sequence?"
                                                                                                       "css")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil)))))
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "sturm_unbounded_left")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "M"
                                                                                                           "N"
                                                                                                           "P"
                                                                                                           "newhigh")
                                                                                                          (("2"
                                                                                                            (split
                                                                                                             -)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "NOT number_sign_changes(LAMBDA (i:nat): (-1) ^ (N(i)) * P(i)(N(i)),
                                                            M - 1) = nschighlow(FALSE)")
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "nschighlow")
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil)))))
                                                                                                               ("2"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (case
                                                                                                                   "NOT number_sign_changes(LAMBDA (i:nat):
                                                                        polynomial(P(i), N(i))(newhigh),
                                                                      M - 1) = nscnorm(newhigh)")
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "nscnorm")
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil)))))
                                                                                                                   ("2"
                                                                                                                    (replace
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (reveal
                                                                                                                             "final")
                                                                                                                            (("2"
                                                                                                                              (case
                                                                                                                               "NOT rootnum>=0")
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 2)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil)))
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (skeep
                                                                                                                                   -5)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     +
                                                                                                                                     "bij")
                                                                                                                                    (("1"
                                                                                                                                      (copy
                                                                                                                                       -5)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "bijective?"
                                                                                                                                         (-1
                                                                                                                                          1))
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               +)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "injective?")
                                                                                                                                                (("1"
                                                                                                                                                  (skeep)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "x1"
                                                                                                                                                     "x2")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil)))))))
                                                                                                                                               ("2"
                                                                                                                                                (expand
                                                                                                                                                 "surjective?")
                                                                                                                                                (("2"
                                                                                                                                                  (skeep)
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "y!1")
                                                                                                                                                    (("1"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         +
                                                                                                                                                         "x!1")
                                                                                                                                                        nil)))
                                                                                                                                                     ("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (typepred
                                                                                                                                                         "y!1")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "Aset"
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (lift-if)
                                                                                                                                                                (("2"
                                                                                                                                                                  (ground)
                                                                                                                                                                  nil)))))))))))))))))))))))))))))
                                                                                                                                     ("2"
                                                                                                                                      (split
                                                                                                                                       +)
                                                                                                                                      (("1"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("1"
                                                                                                                                          (ground)
                                                                                                                                          nil)))
                                                                                                                                       ("2"
                                                                                                                                        (skeep)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "Aset"
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (typepred
                                                                                                                                               "bij(x1)")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "newhigh"
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (lift-if
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (split
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (flatten)
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (lemma
                                                                                                                                                             "poly_rootless_width_def")
                                                                                                                                                            (("2"
                                                                                                                                                              (inst?)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (split
                                                                                                                                                                   -)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -
                                                                                                                                                                     "bij(x1)"
                                                                                                                                                                     "0")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (split
                                                                                                                                                                           +)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "poly_n_deriv_def")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst?)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil)))))
                                                                                                                                                                           ("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "abs")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil)))))))))))
                                                                                                                                                                   ("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     +
                                                                                                                                                                     "n")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                                                               ("3"
                                                                                                                (hide
                                                                                                                 -)
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  (("3"
                                                                                                                    (skeep)
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "N")
                                                                                                                      (("3"
                                                                                                                        (lift-if)
                                                                                                                        (("3"
                                                                                                                          (ground)
                                                                                                                          nil)))))))))))))
                                                                                                             ("2"
                                                                                                              (propax)
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (assert)
                                                                                                              (("3"
                                                                                                                (flatten)
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "newhigh"
                                                                                                                     (-1
                                                                                                                      -2))
                                                                                                                    (("3"
                                                                                                                      (lift-if
                                                                                                                       (-1
                                                                                                                        -2))
                                                                                                                      (("3"
                                                                                                                        (split
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil)))
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "poly_rootless_width_def")
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (split
                                                                                                                                   -)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "y+ poly_rootless_width(a, n, y, TRUE) / 2"
                                                                                                                                       "0")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "poly_n_deriv_def")
                                                                                                                                            (("1"
                                                                                                                                              (inst?)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "abs"
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil)))))))))))))))))))
                                                                                                                                   ("2"
                                                                                                                                    (inst
                                                                                                                                     +
                                                                                                                                     "n")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil)))))))))))))))))))))))))))))))))))))))))))))))
                                                                                       ("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "newa"
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil)))))
                                                                                       ("3"
                                                                                        (hide
                                                                                         -)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "newa")
                                                                                          (("3"
                                                                                            (grind)
                                                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil))
 (roots_closed_int_def 0
  (roots_closed_int_def-1 nil 3594569144
   ("" (skeep)
    (("" (case "FORALL (bb:bool): (bb = TRUE OR bb = FALSE)")
      (("1" (inst-cp - "lower_bound")
        (("1" (inst - "upper_bound")
          (("1" (ground)
            (("1" (lemma "roots_closed_int_def_truetrue")
              (("1" (assert)
                (("1" (inst - "a" "n" "x" "y" "sl")
                  (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (lemma "roots_closed_int_def_falsetrue")
              (("2" (inst - "a" "n" "x" "y" "sl")
                (("2" (assert) nil nil)) nil))
              nil)
             ("3" (lemma "roots_closed_int_def_truefalse")
              (("3" (inst?) (("3" (assert) nil nil)) nil)) nil)
             ("4" (lemma "roots_closed_int_def_falsefalse")
              (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (hide 3) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (roots_closed_int_def_falsefalse formula-decl nil compute_sturm
     nil)
    (roots_closed_int_def_truefalse formula-decl nil compute_sturm nil)
    (roots_closed_int_def_falsetrue formula-decl nil compute_sturm nil)
    (roots_closed_int_def_truetrue formula-decl nil compute_sturm nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (number_roots_interval_TCC1 0
  (number_roots_interval_TCC1-1 nil 3595083135
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/"))
   nil))
 (number_roots_interval_TCC2 0
  (number_roots_interval_TCC2-1 nil 3595083135
   ("" (case "FORALL (bb:bool): bb = TRUE OR bb = FALSE")
    (("1" (skeep)
      (("1" (inst-cp - "I`bounded_below")
        (("1" (inst - "I`bounded_above")
          (("1" (skeep)
            (("1" (skeep)
              (("1" (skeep)
                (("1" (lift-if)
                  (("1" (split -)
                    (("1" (split -)
                      (("1" (assert)
                        (("1" (lemma "roots_closed_int_def_truetrue")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (expand "bijective?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "surjective?")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (inst-cp - "I`ub")
                                            (("1"
                                              (inst - "I`lb")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst - "I`lb")
                                            (("2" (skosimp*) nil nil))
                                            nil)
                                           ("3"
                                            (inst - "I`lb")
                                            (("3" (skosimp*) nil nil))
                                            nil)
                                           ("4"
                                            (inst - "I`ub")
                                            (("4" (skosimp*) nil nil))
                                            nil)
                                           ("5"
                                            (inst - "I`ub")
                                            (("5" (skosimp*) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (lemma "roots_closed_int_def_falsetrue")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (skosimp*)
                                  (("2"
                                    (expand "bijective?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "surjective?")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (inst - "I`ub")
                                            (("2" (skosimp*) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -1)
                      (("2" (assert)
                        (("2" (split -)
                          (("1" (replace -1)
                            (("1" (assert)
                              (("1"
                                (lemma
                                 "roots_closed_int_def_truefalse")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (expand "bijective?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "surjective?")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (inst - "I`lb")
                                                  (("1"
                                                    (skosimp*)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (lemma "roots_closed_int_def_falsefalse")
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (skeep) (("2" (ground) nil nil)) nil)) nil))
    nil)
   ((roots_closed_int_def_truefalse formula-decl nil compute_sturm nil)
    (roots_closed_int_def_falsefalse formula-decl nil compute_sturm
     nil)
    (roots_closed_int_def_truetrue formula-decl nil compute_sturm nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (<= const-decl "bool" reals nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (roots_closed_int_def_falsetrue formula-decl nil compute_sturm nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil))
   nil))
 (number_roots_interval_def 0
  (number_roots_interval_def-1 nil 3595084706
   ("" (skeep)
    (("" (skoletin 2)
      (("" (skoletin 1)
        (("" (assert)
          (("" (expand "number_roots_interval")
            (("" (lift-if)
              (("" (split -)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (lift-if)
                      (("1" (split -)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1"
                              (lemma "roots_closed_int_def_truetrue")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (lemma
                                       "finite_bij_real_remove_two")
                                      (("1"
                                        (inst
                                         -
                                         "I`lb"
                                         "I`ub"
                                         "roots_closed_int(a, n, I`lb, I`ub, TRUE, TRUE,sl)"
                                         "{z:real | I`lb<=z AND z<=I`ub AND polynomial(a,n)(z)=0}"
                                         "bij!1")
                                        (("1"
                                          (split -)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (inst + "bijec!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "bijective?"
                                                     (-1 3))
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (expand
                                                           "injective?")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "x1"
                                                               "x2")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "surjective?")
                                                          (("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "y!1")
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "x!1")
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (typepred
                                                                   "y!1")
                                                                  (("2"
                                                                    (expand
                                                                     "Aset"
                                                                     -1)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "contains?"
                                                                           -1)
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (split)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (typepred
                                                       "bijec!1(x1!1)")
                                                      (("2"
                                                        (expand
                                                         "Aset"
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "contains?")
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3" (assert) nil nil)
                                           ("4" (assert) nil nil)
                                           ("5" (propax) nil nil)
                                           ("6" (assert) nil nil)
                                           ("7" (assert) nil nil)
                                           ("8" (propax) nil nil)
                                           ("9" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (case "I`bounded_above")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma
                                   "roots_closed_int_def_truetrue")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (lemma
                                           "finite_bij_real_remove_one")
                                          (("1"
                                            (inst
                                             -
                                             "I`lb"
                                             "roots_closed_int(a, n, I`lb, I`ub, TRUE, TRUE,sl)"
                                             "{z:real | I`lb<=z AND z<=I`ub AND polynomial(a,n)(z)=0}"
                                             "bij!1")
                                            (("1"
                                              (split -)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (inst + "bijec!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "bijective?"
                                                         (-1 3))
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (split 3)
                                                            (("1"
                                                              (expand
                                                               "injective?")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "x1"
                                                                   "x2")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "surjective?")
                                                              (("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "y!1")
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "x!1")
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "y!1")
                                                                      (("2"
                                                                        (expand
                                                                         "Aset"
                                                                         -1)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "contains?"
                                                                               -1)
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (split)
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (typepred
                                                           "bijec!1(x1!1)")
                                                          (("2"
                                                            (expand
                                                             "Aset"
                                                             1)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (expand
                                                                 "contains?"
                                                                 1)
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil)
                                               ("3" (assert) nil nil)
                                               ("4" (assert) nil nil)
                                               ("5" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma
                                       "roots_closed_int_def_truefalse")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (lemma
                                               "finite_bij_real_remove_one")
                                              (("2"
                                                (inst
                                                 -
                                                 "I`lb"
                                                 "roots_closed_int(a, n, I`lb, I`ub, TRUE, FALSE,sl)"
                                                 "{z:real | I`lb<=z AND polynomial(a,n)(z)=0}"
                                                 "bij!1")
                                                (("2"
                                                  (split -)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst
                                                           +
                                                           "bijec!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "bijective?"
                                                               (-2 3))
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (split
                                                                   3)
                                                                  (("1"
                                                                    (expand
                                                                     "injective?")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "x1"
                                                                         "x2")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "surjective?")
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "y!1")
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "x!1")
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "y!1")
                                                                            (("2"
                                                                              (expand
                                                                               "Aset"
                                                                               -1)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "contains?"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (split)
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (typepred
                                                                 "bijec!1(x1!1)")
                                                                (("2"
                                                                  (expand
                                                                   "Aset"
                                                                   1)
                                                                  (("2"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "contains?"
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("4"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (split -)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (case "I`bounded_below")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma
                                   "roots_closed_int_def_truetrue")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (lemma
                                           "finite_bij_real_remove_one")
                                          (("1"
                                            (inst
                                             -
                                             "I`ub"
                                             "roots_closed_int(a, n, I`lb, I`ub, TRUE, TRUE,sl)"
                                             "{z:real | I`lb<=z AND z<=I`ub AND polynomial(a,n)(z)=0}"
                                             "bij!1")
                                            (("1"
                                              (split -)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (inst + "bijec!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "bijective?"
                                                         (-1 3))
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (split 3)
                                                            (("1"
                                                              (expand
                                                               "injective?")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "x1"
                                                                   "x2")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "surjective?")
                                                              (("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "y!1")
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "x!1")
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "y!1")
                                                                      (("2"
                                                                        (expand
                                                                         "Aset"
                                                                         -1)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "contains?"
                                                                               -1)
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (split)
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (typepred
                                                           "bijec!1(x1!1)")
                                                          (("2"
                                                            (expand
                                                             "Aset"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "contains?")
                                                              (("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil)
                                               ("3" (assert) nil nil)
                                               ("4" (assert) nil nil)
                                               ("5" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (hide 3)
                                  (("2"
                                    (lemma
                                     "roots_closed_int_def_falsetrue")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (lemma
                                             "finite_bij_real_remove_one")
                                            (("2"
                                              (inst
                                               -
                                               "I`ub"
                                               "roots_closed_int(a, n, I`lb, I`ub, FALSE, TRUE,sl)"
                                               "{z:real | z<=I`ub AND polynomial(a,n)(z)=0}"
                                               "bij!1")
                                              (("2"
                                                (split -)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst
                                                       +
                                                       "bijec!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "bijective?"
                                                           (-1 3))
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (split 3)
                                                              (("1"
                                                                (expand
                                                                 "injective?")
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "x1"
                                                                     "x2")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "surjective?")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "y!1")
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "x!1")
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (typepred
                                                                         "y!1")
                                                                        (("2"
                                                                          (expand
                                                                           "Aset"
                                                                           -1)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "contains?"
                                                                                 -1)
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (split)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (typepred
                                                             "bijec!1(x1!1)")
                                                            (("2"
                                                              (expand
                                                               "Aset"
                                                               1)
                                                              (("2"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "contains?"
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (propax) nil nil)
                                                 ("3" (assert) nil nil)
                                                 ("4"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (lemma "roots_closed_int_def")
                              (("2"
                                (inst
                                 -
                                 "a"
                                 "I`bounded_below"
                                 "n"
                                 "I`bounded_above"
                                 "I`lb"
                                 "I`ub"
                                 "sl")
                                (("2"
                                  (assert)
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst + "bij!1")
                                      (("1"
                                        (expand "bijective?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split 3)
                                            (("1"
                                              (expand "injective?")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst - "x1" "x2")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "surjective?")
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst - "y!1")
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst + "x!1")
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred "y!1")
                                                      (("2"
                                                        (expand
                                                         "Aset"
                                                         -1)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "contains?"
                                                               -1)
                                                              (("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (split)
                                        (("1"
                                          (skosimp*)
                                          (("1" (ground) nil nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (typepred "bij!1(x1!1)")
                                            (("2"
                                              (expand "Aset" 1)
                                              (("2"
                                                (split 1)
                                                (("1"
                                                  (expand
                                                   "contains?"
                                                   1)
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (number_roots_interval const-decl "nat" compute_sturm nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (contains? const-decl "bool" RealInt "reals/")
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (roots_closed_int_def formula-decl nil compute_sturm nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bij!1 skolem-const-decl
     "[below(roots_closed_int(a, n, I`lb, I`ub, I`bounded_below, I`bounded_above,
                        sl)) ->
   ({z: real |
       (I`bounded_below IMPLIES I`lb <= z) AND
        (I`bounded_above IMPLIES z <= I`ub) AND polynomial(a, n)(z) = 0})]"
     compute_sturm nil)
    (y!1 skolem-const-decl "(Aset)" compute_sturm nil)
    (y!1 skolem-const-decl "(Aset)" compute_sturm nil)
    (bijec!1 skolem-const-decl
     "[below(roots_closed_int(a, n, I`lb, I`ub, TRUE, TRUE, sl) - 1) ->
   {r: ({z: real | I`lb <= z AND z <= I`ub AND polynomial(a, n)(z) = 0}) |
            r /= I`ub}]" compute_sturm nil)
    (bijec!1 skolem-const-decl
     "[below(roots_closed_int(a, n, I`lb, I`ub, FALSE, TRUE, sl) - 1) ->
   {r: ({z: real | z <= I`ub AND polynomial(a, n)(z) = 0}) | r /= I`ub}]"
     compute_sturm nil)
    (y!1 skolem-const-decl "(Aset)" compute_sturm nil)
    (roots_closed_int_def_falsetrue formula-decl nil compute_sturm nil)
    (finite_bij_real_remove_one formula-decl nil compute_sturm nil)
    (y!1 skolem-const-decl "(Aset)" compute_sturm nil)
    (bijec!1 skolem-const-decl
     "[below(roots_closed_int(a, n, I`lb, I`ub, TRUE, TRUE, sl) - 1) ->
   {r: ({z: real | I`lb <= z AND z <= I`ub AND polynomial(a, n)(z) = 0}) |
            r /= I`lb}]" compute_sturm nil)
    (FALSE const-decl "bool" booleans nil)
    (y!1 skolem-const-decl "(Aset)" compute_sturm nil)
    (bijec!1 skolem-const-decl
     "[below(roots_closed_int(a, n, I`lb, I`ub, TRUE, FALSE, sl) - 1) ->
   {r: ({z: real | I`lb <= z AND polynomial(a, n)(z) = 0}) | r /= I`lb}]"
     compute_sturm nil)
    (roots_closed_int_def_truefalse formula-decl nil compute_sturm nil)
    (roots_closed_int_def_truetrue formula-decl nil compute_sturm nil)
    (finite_bij_real_remove_two formula-decl nil compute_sturm nil)
    (surjective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (y!1 skolem-const-decl "(Aset)" compute_sturm nil)
    (injective? const-decl "bool" functions nil)
    (bijec!1 skolem-const-decl
     "[below(roots_closed_int(a, n, I`lb, I`ub, TRUE, TRUE, sl) - 2) ->
   {r: ({z: real | I`lb <= z AND z <= I`ub AND polynomial(a, n)(z) = 0}) |
            r /= I`lb AND r /= I`ub}]" compute_sturm nil)
    (Aset skolem-const-decl "[real -> boolean]" compute_sturm nil)
    (rootnum skolem-const-decl "nat" compute_sturm nil)
    (sl skolem-const-decl "(Eq_computed_remainder?(a, n))"
     compute_sturm nil)
    (I skolem-const-decl "RealInt" compute_sturm nil)
    (n skolem-const-decl "posnat" compute_sturm nil)
    (a skolem-const-decl "[nat -> int]" compute_sturm nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (roots_closed_int const-decl "int" compute_sturm nil)
    (set type-eq-decl nil sets nil) (<= const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (always_nonnegative_int_TCC1 0
  (always_nonnegative_int_TCC1-1 nil 3595180587
   ("" (skeep)
    (("" (lemma "real_ord_ep_well_founded")
      (("" (inst?)
        (("" (invoke (case "%1 = %2") (! -1 1) (! 1 1))
          (("1" (replaces -1 :dir rl) nil nil)
           ("2" (decompose-equality 1) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ord_ep_well_founded judgement-tcc nil real_order_ep "reals/")
    (real_ord_ep const-decl "bool" real_order_ep "reals/")
    (real_ord_ep_well_founded application-judgement
     "(well_founded?[real])" real_order_ep "reals/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (min_poly_root_dist const-decl "{epsil: posreal |
         FORALL (x, y: real):
           polynomial(a, n)(x) = 0 AND polynomial(a, n)(y) = 0 AND x /= y
            IMPLIES abs(x - y) > epsil}" more_polynomial_props
     "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (always_nonnegative_int_TCC2 0
  (always_nonnegative_int_TCC2-1 nil 3595180587
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (always_nonnegative_int_TCC3 0
  (always_nonnegative_int_TCC3-1 nil 3595180587
   ("" (skeep)
    (("" (replaces -1)
      (("" (ground)
        (("1" (skeep) (("1" (assert) nil nil)) nil)
         ("2" (inst - "y") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/"))
   nil))
 (always_nonnegative_int_TCC4 0
  (always_nonnegative_int_TCC4-1 nil 3595180587
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/"))
   nil))
 (always_nonnegative_int_TCC5 0
  (always_nonnegative_int_TCC5-1 nil 3595180587
   ("" (skeep)
    (("" (lemma "roots_closed_int_def_truetrue")
      (("" (inst?)
        (("" (assert)
          (("" (flatten)
            (("" (split 3)
              (("1" (flatten)
                (("1" (skeep)
                  (("1" (lemma "poly_intermediate_value_dec")
                    (("1" (inst - "a" "0" "n" "x" "z")
                      (("1" (assert)
                        (("1" (skosimp*)
                          (("1" (case "NOT cc!1 < z")
                            (("1" (assert) nil nil)
                             ("2" (lemma "poly_intermediate_value_inc")
                              (("2"
                                (inst - "a" "0" "n" "z" "y")
                                (("2"
                                  (assert)
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (case "NOT cc!2 > z")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand "bijective?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "surjective?")
                                            (("2"
                                              (inst-cp - "cc!1")
                                              (("2"
                                                (inst - "cc!2")
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (inst-cp - "x")
                  (("2" (inst - "y") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((roots_closed_int_def_truetrue formula-decl nil compute_sturm nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (sequence type-eq-decl nil sequences nil)
    (poly_intermediate_value_inc formula-decl nil polynomials "reals/")
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (n skolem-const-decl "{n | a(n) /= 0}" compute_sturm nil)
    (a skolem-const-decl "[nat -> int]" compute_sturm nil)
    (y skolem-const-decl "real" compute_sturm nil)
    (cc!2 skolem-const-decl "real" compute_sturm nil)
    (x skolem-const-decl "real" compute_sturm nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (poly_intermediate_value_dec formula-decl nil polynomials "reals/")
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (always_nonnegative_int_TCC6 0
  (always_nonnegative_int_TCC6-1 nil 3595180587
   ("" (skeep)
    (("" (lemma "real_ord_ep_decreases_halves")
      (("" (expand "meas_fun_alw_nonneg")
        (("" (inst?)
          (("" (inst - "y-x")
            (("" (assert)
              (("" (lemma "roots_closed_int_def_truetrue")
                (("" (inst?)
                  (("" (assert)
                    (("" (skosimp*)
                      (("" (expand "bijective?")
                        (("" (flatten)
                          (("" (expand "injective?")
                            (("" (inst - "0" "1")
                              ((""
                                (assert)
                                ((""
                                  (typepred "bij!1(0)")
                                  ((""
                                    (typepred "bij!1(1)")
                                    ((""
                                      (typepred
                                       "min_poly_root_dist(a, n)")
                                      ((""
                                        (inst - "bij!1(0)" "bij!1(1)")
                                        ((""
                                          (assert)
                                          ((""
                                            (expand "abs")
                                            ((""
                                              (lift-if)
                                              (("" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ord_ep_decreases_halves formula-decl nil real_order_ep
     "reals/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min_poly_root_dist const-decl "{epsil: posreal |
         FORALL (x, y: real):
           polynomial(a, n)(x) = 0 AND polynomial(a, n)(y) = 0 AND x /= y
            IMPLIES abs(x - y) > epsil}" more_polynomial_props
     "reals/")
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ord_ep_well_founded application-judgement
     "(well_founded?[real])" real_order_ep "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (roots_closed_int const-decl "int" compute_sturm nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (injective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (roots_closed_int_def_truetrue formula-decl nil compute_sturm nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (meas_fun_alw_nonneg const-decl "real" compute_sturm nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (always_nonnegative_int_TCC7 0
  (always_nonnegative_int_TCC7-2 nil 3595181652
   ("" (skeep)
    (("" (lemma "real_ord_ep_decreases_halves")
      (("" (expand "meas_fun_alw_nonneg")
        (("" (inst?)
          (("" (inst - "y-x")
            (("" (assert)
              (("" (lemma "roots_closed_int_def_truetrue")
                (("" (inst?)
                  (("" (assert)
                    (("" (skosimp*)
                      (("" (expand "bijective?")
                        (("" (flatten)
                          (("" (expand "injective?")
                            (("" (inst - "0" "1")
                              ((""
                                (assert)
                                ((""
                                  (typepred "bij!1(0)")
                                  ((""
                                    (typepred "bij!1(1)")
                                    ((""
                                      (typepred
                                       "min_poly_root_dist(a, n)")
                                      ((""
                                        (inst - "bij!1(0)" "bij!1(1)")
                                        ((""
                                          (assert)
                                          ((""
                                            (expand "abs")
                                            ((""
                                              (lift-if)
                                              (("" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ord_ep_decreases_halves formula-decl nil real_order_ep
     "reals/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min_poly_root_dist const-decl "{epsil: posreal |
         FORALL (x, y: real):
           polynomial(a, n)(x) = 0 AND polynomial(a, n)(y) = 0 AND x /= y
            IMPLIES abs(x - y) > epsil}" more_polynomial_props
     "reals/")
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ord_ep_well_founded application-judgement
     "(well_founded?[real])" real_order_ep "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (roots_closed_int const-decl "int" compute_sturm nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (injective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (roots_closed_int_def_truetrue formula-decl nil compute_sturm nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (meas_fun_alw_nonneg const-decl "real" compute_sturm nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil)
  (always_nonnegative_int_TCC7-1 nil 3595180587
   ("" (termination-tcc) nil nil) nil nil))
 (always_nonnegative_int_TCC8 0
  (always_nonnegative_int_TCC8-1 nil 3595180587
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (typepred "v(a, n, x, (x + y) / 2, sl)")
          (("1" (assert)
            (("1" (hide -2)
              (("1" (typepred "v(a, n, (x + y) / 2, y, sl)")
                (("1" (assert)
                  (("1" (hide -2)
                    (("1" (skeep)
                      (("1" (inst - "z")
                        (("1" (inst - "z") (("1" (ground) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (split +)
          (("1" (typepred "v(a, n, x, (x + y) / 2, sl)")
            (("1" (hide -1)
              (("1" (assert)
                (("1" (skeep)
                  (("1" (inst - "z") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "v(a, n, (x + y) / 2, y, sl)")
            (("2" (hide -1)
              (("2" (assert)
                (("2" (skeep)
                  (("2" (inst - "z") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (meas_fun_alw_nonneg const-decl "real" compute_sturm nil)
    (min_poly_root_dist const-decl "{epsil: posreal |
         FORALL (x, y: real):
           polynomial(a, n)(x) = 0 AND polynomial(a, n)(y) = 0 AND x /= y
            IMPLIES abs(x - y) > epsil}" more_polynomial_props
     "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sequence type-eq-decl nil sequences nil)
    (real_ord_ep const-decl "bool" real_order_ep "reals/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (always_nonnegative_TCC1 0
  (always_nonnegative_TCC1-1 nil 3595240370 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (always_nonnegative_TCC2 0
  (always_nonnegative_TCC2-1 nil 3595240370 ("" (subtype-tcc) nil nil)
   ((mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (poly_deriv const-decl "real" polynomials "reals/"))
   nil))
 (always_nonnegative_TCC3 0
  (always_nonnegative_TCC3-1 nil 3595240370 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (poly_deriv const-decl "real" polynomials "reals/"))
   nil))
 (always_nonnegative_TCC4 0
  (always_nonnegative_TCC4-1 nil 3595240370 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil))
   nil))
 (always_nonnegative_TCC5 0
  (always_nonnegative_TCC5-1 nil 3595240370 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (sequence type-eq-decl nil sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (Knuth_poly_pos_root_bound const-decl "{K: real |
         FORALL (x: real): polynomial(a, n)(x) = 0 AND x > 0 IMPLIES x <= K}"
     more_polynomial_props "reals/")
    (even? const-decl "bool" integers nil)
    (Knuth_poly_root_bound const-decl
     "{K: nnreal | FORALL (x: real): polynomial(a, n)(x) = 0 IMPLIES abs(x) <= K}"
     more_polynomial_props "reals/")
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (always_nonnegative_TCC6 0
  (always_nonnegative_TCC6-1 nil 3595240370 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (sequence type-eq-decl nil sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (Knuth_poly_pos_root_bound const-decl "{K: real |
         FORALL (x: real): polynomial(a, n)(x) = 0 AND x > 0 IMPLIES x <= K}"
     more_polynomial_props "reals/")
    (even? const-decl "bool" integers nil)
    (Knuth_poly_root_bound const-decl
     "{K: nnreal | FORALL (x: real): polynomial(a, n)(x) = 0 IMPLIES abs(x) <= K}"
     more_polynomial_props "reals/")
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (always_nonnegative_TCC7 0
  (always_nonnegative_TCC7-1 nil 3595240370 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (sequence type-eq-decl nil sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (Knuth_poly_pos_root_bound const-decl "{K: real |
         FORALL (x: real): polynomial(a, n)(x) = 0 AND x > 0 IMPLIES x <= K}"
     more_polynomial_props "reals/")
    (even? const-decl "bool" integers nil)
    (Knuth_poly_root_bound const-decl
     "{K: nnreal | FORALL (x: real): polynomial(a, n)(x) = 0 IMPLIES abs(x) <= K}"
     more_polynomial_props "reals/")
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (always_nonnegative_def 0
  (always_nonnegative_def-1 nil 3595240846
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "always_nonnegative" :assert? none)
          (("1" (skoletin -1)
            (("1"
              (name "sl"
                    "remainder_seq(newa, n, poly_deriv(newa), n - 1)")
              (("1" (replace -1)
                (("1" (name "M" "Knuth_poly_root_strict_bound(a,n)")
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (split -)
                        (("1" (flatten)
                          (("1"
                            (typepred
                             "always_nonnegative_int(a, n, I`lb, I`ub, sl)")
                            (("1" (hide -2)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst - "x")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide-all-but (-7 -1 -2 1))
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split -)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (typepred
                                   "always_nonnegative_int(a, n, min(-M, I`ub - 1), I`ub, sl)")
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst - "x")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case "NOT x<=I`ub")
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (hide-all-but
                                                   (-1 -6 1))
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (typepred
                                                   "always_nonnegative_int(a, n, min(-M, I`ub - 1), I`ub, sl)")
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst
                                                         -
                                                         "min(-M,I`ub-1)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (invoke
                                                             (name
                                                              "XY"
                                                              "%1")
                                                             (!
                                                              -1
                                                              1
                                                              1))
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (lemma
                                                                   "poly_intermediate_value_inc")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "a"
                                                                     "0"
                                                                     "n"
                                                                     "x"
                                                                     "XY")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (typepred
                                                                           "M")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "cc!1")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "abs")
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (typepred
                                         "always_nonnegative_int(a, n, I`lb, max(M, 1 + I`lb), sl)")
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst - "x")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "NOT I`lb<=x")
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 -6 1))
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (case "x<=M")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "always_nonnegative_int(a, n, I`lb, max(M, 1 + I`lb), sl)")
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "max(M,1+I`lb)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (invoke
                                                                     (name
                                                                      "XY"
                                                                      "%1")
                                                                     (!
                                                                      -1
                                                                      1
                                                                      1))
                                                                    (("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (lemma
                                                                         "poly_intermediate_value_dec")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "a"
                                                                           "0"
                                                                           "n"
                                                                           "XY"
                                                                           "x")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "M")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "cc!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "abs")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred
                                           "always_nonnegative_int(a, n, -M, M, sl)")
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst - "x")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case "x < -M")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 1)
                                                          (("1"
                                                            (typepred
                                                             "always_nonnegative_int(a, n, -M, M, sl)")
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "-M")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "poly_intermediate_value_inc")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "a"
                                                                         "0"
                                                                         "n"
                                                                         "x"
                                                                         "-M")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (typepred
                                                                               "M")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "cc!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "abs")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (typepred
                                                           "always_nonnegative_int(a, n, -M, M, sl)")
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "M")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "poly_intermediate_value_dec")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "a"
                                                                       "0"
                                                                       "n"
                                                                       "M"
                                                                       "x")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (typepred
                                                                             "M")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "cc!1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2"
          (name "II" "I WITH [closed_below:=TRUE,closed_above:=TRUE]")
          (("2"
            (case "NOT FORALL (x: real): contains?(II)(x) IMPLIES polynomial(a, n)(x) >= 0")
            (("1" (skeep)
              (("1" (inst-cp - "x")
                (("1" (assert)
                  (("1" (case "NOT (x = I`lb OR x = I`ub)")
                    (("1" (flatten)
                      (("1" (expand "contains?")
                        (("1" (ground) nil nil)) nil))
                      nil)
                     ("2"
                      (case "FORALL (epsil:posreal): EXISTS (xx:real): abs(x-xx)<epsil AND contains?(I)(xx)")
                      (("1" (hide -2)
                        (("1" (lemma "poly_continuous")
                          (("1"
                            (inst - "a" "n" "x"
                             "-polynomial(a,n)(x)/2")
                            (("1" (skeep -)
                              (("1"
                                (inst -2 "delta")
                                (("1"
                                  (skeep -2)
                                  (("1"
                                    (inst - "xx")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst - "xx")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-1 -5 1))
                        (("2" (skeep)
                          (("2" (split -)
                            (("1"
                              (inst + "x + min(epsil/2,(I`ub-x)/2)")
                              (("1"
                                (assert)
                                (("1"
                                  (split +)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (inst + "x - min(epsil/2,(x-I`lb)/2)")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "always_nonnegative" 1 :assert? none)
              (("2"
                (name "newa"
                      " LAMBDA (i: nat): IF i <= n THEN a(i) ELSE 0 ENDIF")
                (("2" (replace -1)
                  (("2" (name "M" "Knuth_poly_root_strict_bound(a,n)")
                    (("1" (replace -1)
                      (("1"
                        (name "sl"
                              "remainder_seq(newa, n, poly_deriv(newa), n - 1)")
                        (("1" (assert)
                          (("1" (replace -1)
                            (("1" (split +)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (invoke (typepred "%1") (! 1))
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst - "z")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide-all-but
                                                 (-1 -2 -3 -4 3))
                                                (("1"
                                                  (expand "II")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (invoke (typepred "%1") (! 1))
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst - "z")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide-all-but
                                                     (-2 -3 3 4))
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 3)
                                            (("1"
                                              (invoke
                                               (typepred "%1")
                                               (! 1))
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst - "z")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide-all-but
                                                           (-1
                                                            -2
                                                            -3
                                                            3
                                                            4))
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (invoke
                                           (typepred "%1")
                                           (! 2))
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst - "z")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide -)
                                                      (("2"
                                                        (hide (1 3))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (expand "poly_deriv" 1)
                            (("2" (assert)
                              (("2"
                                (expand "newa" -1)
                                (("2"
                                  (mult-by 1 "n")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 2)
                          (("3" (assert)
                            (("3" (skeep)
                              (("3"
                                (expand "newa" 1)
                                (("3"
                                  (expand "poly_deriv" 1)
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide 2)
                          (("4" (expand "newa" 1)
                            (("4" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((always_nonnegative const-decl "bool" compute_sturm nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (poly_intermediate_value_dec formula-decl nil polynomials "reals/")
    (poly_intermediate_value_inc formula-decl nil polynomials "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (contains? const-decl "bool" RealInt "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (always_nonnegative_int def-decl "{bb: bool |
         bb IFF
          (FORALL (z: real):
             x <= z AND z <= y IMPLIES polynomial(a, n)(z) >= 0)}"
     compute_sturm nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Knuth_poly_root_strict_bound const-decl
     "{K: posreal | FORALL (x: real): polynomial(a, n)(x) = 0 IMPLIES abs(x) < K}"
     more_polynomial_props "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (is_neg_remainder_list? const-decl "bool" remainder_sequence nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (poly_deriv const-decl "real" polynomials "reals/")
    (sequence type-eq-decl nil sequences nil)
    (/= const-decl "boolean" notequal nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (newa skolem-const-decl "[nat -> int]" compute_sturm nil)
    (II skolem-const-decl "RealInt" compute_sturm nil)
    (poly_continuous formula-decl nil polynomials "reals/")
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (rel_disjunction 0
  (rel_disjunction-1 nil 3766702216 ("" (grind) nil nil) nil shostak))
 (swap_lt 0
  (swap_lt-1 nil 3613984524 ("" (grind) nil nil)
   ((swap const-decl "SturmRel" compute_sturm nil)
    (realord const-decl "bool" compute_sturm nil))
   nil))
 (swap_gt 0
  (swap_gt-1 nil 3613984594 ("" (grind) nil nil)
   ((swap const-decl "SturmRel" compute_sturm nil)
    (realord const-decl "bool" compute_sturm nil))
   shostak))
 (swap_le 0
  (swap_le-1 nil 3613984361 ("" (grind) nil nil)
   ((swap const-decl "SturmRel" compute_sturm nil)
    (realord const-decl "bool" compute_sturm nil))
   shostak))
 (swap_ge 0
  (swap_ge-1 nil 3613984545 ("" (grind) nil nil)
   ((swap const-decl "SturmRel" compute_sturm nil)
    (realord const-decl "bool" compute_sturm nil))
   shostak))
 (swap_ne 0
  (swap_ne-1 nil 3613984311 ("" (grind) nil nil)
   ((swap const-decl "SturmRel" compute_sturm nil)
    (/= const-decl "boolean" notequal nil)
    (realord const-decl "bool" compute_sturm nil))
   nil))
 (real_order_scal_pos 0
  (real_order_scal_pos-1 nil 3607847092
   ("" (skeep)
    (("" (grind)
      (("1" (grind-reals) nil nil) ("2" (grind-reals) nil nil)
       ("3" (grind-reals) nil nil) ("4" (grind-reals) nil nil)
       ("5" (grind-reals) nil nil) ("6" (grind-reals) nil nil)
       ("7" (grind-reals) nil nil) ("8" (grind-reals) nil nil)
       ("9" (grind-reals) nil nil))
      nil))
    nil)
   ((/= const-decl "boolean" notequal nil)
    (realord const-decl "bool" compute_sturm nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_lt2 formula-decl nil real_props nil)
    (both_sides_times_pos_le2 formula-decl nil real_props nil)
    (both_sides_times_pos_gt2 formula-decl nil real_props nil)
    (both_sides_times_pos_ge2 formula-decl nil real_props nil)
    (both_sides_times2 formula-decl nil real_props nil))
   shostak))
 (real_order_scal_pos_0 0
  (real_order_scal_pos_0-1 nil 3766736555
   ("" (skeep)
    (("" (lemma "real_order_scal_pos")
      (("" (insteep :but (("y" "0"))) (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((real_order_scal_pos formula-decl nil compute_sturm nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (SturmRel type-decl nil compute_sturm nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil))
   shostak))
 (compute_poly_sat_TCC1 0
  (compute_poly_sat_TCC1-1 nil 3595255617 ("" (subtype-tcc) nil nil)
   ((- const-decl "[T -> real]" real_fun_ops "reals/")
    (minus_int_is_int application-judgement "int" integers nil))
   nil))
 (compute_poly_sat_TCC2 0
  (compute_poly_sat_TCC2-1 nil 3595255617 ("" (subtype-tcc) nil nil)
   ((- const-decl "[T -> real]" real_fun_ops "reals/")) nil))
 (compute_poly_sat_TCC3 0
  (compute_poly_sat_TCC3-1 nil 3595255617 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil))
   nil))
 (compute_poly_sat_def 0
  (compute_poly_sat_def-1 nil 3595256162
   ("" (skeep)
    (("" (lemma "rel_disjunction")
      (("" (insteep)
        (("" (split -1)
          (("1" (replace -1)
            (("1" (ground)
              (("1" (expand "compute_poly_sat" :assert? none)
                (("1" (split -)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (hide 1)
                      (("2" (split -)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (hide 1)
                            (("2" (skoletin -1)
                              (("2"
                                (name
                                 "sl"
                                 "remainder_seq(newa, n, poly_deriv(newa), n - 1)")
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "realord")
                                        (("2"
                                          (lemma
                                           "number_roots_interval_def")
                                          (("2"
                                            (inst - "I" "a" "n" "sl")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (label "ci" -6)
                                                  (("2"
                                                    (name
                                                     "midp"
                                                     "(I`lb+I`ub)/2")
                                                    (("2"
                                                      (case
                                                       "x!1 < midp")
                                                      (("1"
                                                        (lemma
                                                         "poly_intermediate_value_dec")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "a"
                                                           "0"
                                                           "n"
                                                           "x!1"
                                                           "midp")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (expand
                                                                 "bijective?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "surjective?")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "cc!1")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -2
                                                                            -4
                                                                            -5
                                                                            "ci"
                                                                            1))
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "poly_intermediate_value_inc")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "a"
                                                           "0"
                                                           "n"
                                                           "midp"
                                                           "x!1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (expand
                                                                 "bijective?")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (expand
                                                                     "surjective?")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "cc!1")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -2
                                                                            -4
                                                                            "ci"
                                                                            1))
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "compute_poly_sat" :assert? none)
                (("2" (split +)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (hide 1)
                      (("2" (split +)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (hide 1)
                            (("2" (skoletin 1)
                              (("2"
                                (name
                                 "sl"
                                 "remainder_seq(newa, n, poly_deriv(newa), n - 1)")
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "realord")
                                      (("2"
                                        (name "midp" "(I`lb+I`ub)/2")
                                        (("2"
                                          (inst-cp - "midp")
                                          (("2"
                                            (split -)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "number_roots_interval_def")
                                                (("1"
                                                  (inst
                                                   -
                                                   "I"
                                                   "a"
                                                   "n"
                                                   "sl")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (typepred
                                                         "bij!1(0)")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "bij!1(0)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-6 1))
                                              (("2"
                                                (expand "midp")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace -1)
            (("2" (expand "realord")
              (("2" (ground)
                (("1" (expand "compute_poly_sat" :assert? none)
                  (("1" (split -)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (hide 1)
                        (("2" (lemma "always_nonnegative_def")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (split -)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst - "x")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite
                                         "neg_polynomial"
                                         :dir
                                         rl)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "-")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "-")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "compute_poly_sat" :assert? none)
                  (("2" (split +)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (hide 1)
                        (("2" (lemma "always_nonnegative_def")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (split -)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst - "x")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite
                                         "neg_polynomial"
                                         :dir
                                         rl)
                                        (("1"
                                          (expand "-")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "-")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (replace -1)
            (("3" (expand "realord")
              (("3" (ground)
                (("1" (expand "compute_poly_sat" :assert? none)
                  (("1" (split -)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (hide 1)
                        (("2" (split -)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (hide 1)
                              (("2"
                                (skoletin -1)
                                (("2"
                                  (name
                                   "sl"
                                   "remainder_seq(newa, n, poly_deriv(newa), n - 1)")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "realord")
                                          (("2"
                                            (lemma
                                             "number_roots_interval_def")
                                            (("2"
                                              (inst - "I" "a" "n" "sl")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (label "ci" -6)
                                                    (("2"
                                                      (name
                                                       "midp"
                                                       "(I`lb+I`ub)/2")
                                                      (("2"
                                                        (case
                                                         "x!1 < midp")
                                                        (("1"
                                                          (lemma
                                                           "poly_intermediate_value_inc")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "a"
                                                             "0"
                                                             "n"
                                                             "x!1"
                                                             "midp")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (expand
                                                                   "bijective?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "surjective?")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "cc!1")
                                                                        (("1"
                                                                          (skosimp*)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-1
                                                                              -2
                                                                              -4
                                                                              -5
                                                                              "ci"
                                                                              1))
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "poly_intermediate_value_dec")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "a"
                                                             "0"
                                                             "n"
                                                             "midp"
                                                             "x!1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (expand
                                                                   "bijective?")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "surjective?")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "cc!1")
                                                                        (("1"
                                                                          (skosimp*)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-1
                                                                              -2
                                                                              -4
                                                                              "ci"
                                                                              1))
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "compute_poly_sat" :assert? none)
                  (("2" (split +)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (hide 1)
                        (("2" (split +)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (hide 1)
                              (("2"
                                (skoletin 1)
                                (("2"
                                  (name
                                   "sl"
                                   "remainder_seq(newa, n, poly_deriv(newa), n - 1)")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "realord")
                                        (("2"
                                          (name "midp" "(I`lb+I`ub)/2")
                                          (("2"
                                            (inst-cp - "midp")
                                            (("2"
                                              (split -)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "number_roots_interval_def")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "I"
                                                     "a"
                                                     "n"
                                                     "sl")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (typepred
                                                           "bij!1(0)")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "bij!1(0)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-6 1))
                                                (("2"
                                                  (expand "midp")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (replace -1)
            (("4" (expand "realord")
              (("4" (ground)
                (("1" (expand "compute_poly_sat")
                  (("1" (lemma "always_nonnegative_def")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (expand "compute_poly_sat")
                  (("2" (lemma "always_nonnegative_def")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (replace -1)
            (("5" (expand "realord")
              (("5" (ground)
                (("1" (expand "compute_poly_sat")
                  (("1" (expand "realord")
                    (("1" (flatten)
                      (("1"
                        (name "newa" " (LAMBDA
                                                                       (i: nat):
                                                                       IF i <= n
                                                                       THEN a(i)
                                                                       ELSE 0
                                                                       ENDIF)")
                        (("1" (replace -1)
                          (("1"
                            (name "sl" "remainder_seq(newa,
                                                                      n,
                                                                      poly_deriv(newa),
                                                                      n - 1)")
                            (("1" (replace -1)
                              (("1"
                                (skeep 2)
                                (("1"
                                  (lemma "number_roots_interval_def")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (expand "bijective?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "surjective?")
                                              (("1"
                                                (inst - "x")
                                                (("1"
                                                  (skosimp*)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "compute_poly_sat")
                  (("2" (expand "realord")
                    (("2"
                      (name "newa" " (LAMBDA
                                                                       (i: nat):
                                                                       IF i <= n
                                                                       THEN a(i)
                                                                       ELSE 0
                                                                       ENDIF)")
                      (("2" (replace -1)
                        (("2"
                          (name "sl" "remainder_seq(newa,
                                                                      n,
                                                                      poly_deriv(newa),
                                                                      n - 1)")
                          (("1" (replace -1)
                            (("1" (split)
                              (("1"
                                (lemma "number_roots_interval_def")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (typepred "bij!1(0)")
                                        (("1"
                                          (inst - "bij!1(0)")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst - "(I`lb+I`ub)/2")
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide-all-but (-4 2))
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "poly_deriv" 1)
                              (("2"
                                (mult-by 1 "n")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "newa" -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide (-2 2))
                            (("3" (skeep)
                              (("3"
                                (expand "poly_deriv" 1)
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide 2)
                            (("4" (expand "newa" 1)
                              (("4" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rel_disjunction formula-decl nil compute_sturm nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (sequence type-eq-decl nil sequences nil)
    (poly_deriv const-decl "real" polynomials "reals/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (is_neg_remainder_list? const-decl "bool" remainder_sequence nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (remainder_seq const-decl
     "{crem: (is_neg_remainder_list?(g, n, h, m)) |
         length(crem) > 1 AND length(nth(crem, 0)) = 0}"
     remainder_sequence nil)
    (Eq_computed_remainder? const-decl "bool" compute_sturm nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (number_roots_interval const-decl "nat" compute_sturm nil)
    (realord const-decl "bool" compute_sturm nil)
    (lt_? adt-recognizer-decl "[SturmRel -> boolean]" compute_sturm
     nil)
    (lt_ adt-constructor-decl "(lt_?)" compute_sturm nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number_roots_interval_def formula-decl nil compute_sturm nil)
    (contains? const-decl "bool" RealInt "reals/")
    (I skolem-const-decl "RealInt" compute_sturm nil)
    (cc!1 skolem-const-decl "real" compute_sturm nil)
    (a skolem-const-decl "[nat -> int]" compute_sturm nil)
    (n skolem-const-decl "posnat" compute_sturm nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (surjective? const-decl "bool" functions nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (poly_intermediate_value_dec formula-decl nil polynomials "reals/")
    (cc!1 skolem-const-decl "real" compute_sturm nil)
    (poly_intermediate_value_inc formula-decl nil polynomials "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (compute_poly_sat const-decl "bool" compute_sturm nil)
    (midp skolem-const-decl "real" compute_sturm nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (always_nonnegative_def formula-decl nil compute_sturm nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (neg_polynomial formula-decl nil polynomials "reals/")
    (- const-decl "[T -> real]" real_fun_ops "reals/")
    (midp skolem-const-decl "real" compute_sturm nil)
    (cc!1 skolem-const-decl "real" compute_sturm nil)
    (cc!1 skolem-const-decl "real" compute_sturm nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_ adt-constructor-decl "(gt_?)" compute_sturm nil)
    (gt_? adt-recognizer-decl "[SturmRel -> boolean]" compute_sturm
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (newa skolem-const-decl "[nat -> int]" compute_sturm nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (SturmRel type-decl nil compute_sturm nil))
   shostak))
 (compute_poly_sat_rational_TCC1 0
  (compute_poly_sat_rational_TCC1-1 nil 3599922402
   ("" (skeep)
    (("" (typepred "rat_poly_to_int(aq,n)")
      (("" (skosimp*)
        (("" (inst - "n")
          (("" (replaces -1) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((rat_poly_to_int const-decl "{ai: [nat -> int] |
         EXISTS (cp: posrat): FORALL (j: upto(n)): ai(j) = cp * aq(j)}"
     clear_denominators nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (/= const-decl "boolean" notequal nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (> const-decl "bool" reals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (>= const-decl "bool" reals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (compute_poly_sat_rational_def 0
  (compute_poly_sat_rational_def-1 nil 3600171804
   ("" (skeep)
    (("" (expand "compute_poly_sat_rational")
      (("" (typepred "rat_poly_to_int(aq, n)")
        (("" (lemma "compute_poly_sat_def")
          (("" (name "rpti" "rat_poly_to_int(aq, n)")
            (("" (replace -1)
              (("" (inst - "I" "rpti" "n" "re")
                (("" (assert)
                  (("" (split -)
                    (("1" (replaces -1)
                      (("1" (skeep -)
                        (("1"
                          (case "FORALL (xx:real): polynomial(rpti, n)(xx) = cp*polynomial(aq,n)(xx)")
                          (("1" (ground)
                            (("1" (skeep)
                              (("1"
                                (inst - "x")
                                (("1"
                                  (inst - "x")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replaces -3)
                                      (("1"
                                        (rewrite
                                         "real_order_scal_pos_0")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (insteep)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -3 "x")
                                    (("2"
                                      (replaces -3)
                                      (("2"
                                        (rewrite
                                         "real_order_scal_pos_0")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide (-1 -3 2 3))
                            (("2" (skeep)
                              (("2"
                                (expand "polynomial")
                                (("2"
                                  (rewrite "sigma_scal" :dir rl)
                                  (("2"
                                    (rewrite "sigma_eq")
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (inst - "n!1")
                                          (("2"
                                            (grind :exclude "^")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (hide 2)
                        (("2" (skeep)
                          (("2" (inst - "n")
                            (("2" (replaces -1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((compute_poly_sat_rational const-decl "bool" compute_sturm nil)
    (compute_poly_sat_def formula-decl nil compute_sturm nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (TRUE const-decl "bool" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (real_order_scal_pos_0 formula-decl nil compute_sturm nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma_scal formula-decl nil sigma "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (SturmRel type-decl nil compute_sturm nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (> const-decl "bool" reals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rat_poly_to_int const-decl "{ai: [nat -> int] |
         EXISTS (cp: posrat): FORALL (j: upto(n)): ai(j) = cp * aq(j)}"
     clear_denominators nil))
   shostak))
 (compute_poly_mono_basic_TCC1 0
  (compute_poly_mono_basic_TCC1-1 nil 3607845057
   ("" (subtype-tcc) nil nil)
   ((rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (poly_deriv const-decl "real" polynomials "reals/"))
   nil))
 (compute_poly_mono_basic_TCC2 0
  (compute_poly_mono_basic_TCC2-1 nil 3607845057
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (< const-decl "bool" reals nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (poly_deriv const-decl "real" polynomials "reals/"))
   nil))
 (compute_poly_mono_basic_TCC3 0
  (compute_poly_mono_basic_TCC3-1 nil 3607933320
   ("" (subtype-tcc) nil nil)
   ((rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (poly_deriv const-decl "real" polynomials "reals/"))
   nil))
 (compute_poly_mono_basic_TCC4 0
  (compute_poly_mono_basic_TCC4-1 nil 3607933320
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (< const-decl "bool" reals nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (poly_deriv const-decl "real" polynomials "reals/"))
   nil))
 (compute_poly_mono_basic_TCC5 0
  (compute_poly_mono_basic_TCC5-1 nil 3607933320
   ("" (subtype-tcc) nil nil)
   ((rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (poly_deriv const-decl "real" polynomials "reals/"))
   nil))
 (compute_poly_mono_basic_TCC6 0
  (compute_poly_mono_basic_TCC6-1 nil 3607933320
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (< const-decl "bool" reals nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (poly_deriv const-decl "real" polynomials "reals/"))
   nil))
 (compute_poly_mono_basic_def 0
  (compute_poly_mono_basic_def-1 nil 3607845529
   ("" (skeep)
    (("" (lemma "rel_disjunction")
      (("" (insteep)
        (("" (expand "compute_poly_mono_basic")
          ((""
            (case "EXISTS (xx,yy:real): xx < yy AND contains?(I)(xx) AND contains?(I)(yy)")
            (("1" (case "n = 1")
              (("1" (assert)
                (("1"
                  (case "NOT polynomial(aq,n) = (LAMBDA (xy:real): aq(0)+aq(1)*xy)")
                  (("1" (hide 3)
                    (("1" (replaces -1)
                      (("1" (hide -1)
                        (("1" (decompose-equality)
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replaces -1)
                    (("2" (assert)
                      (("2" (copy -2)
                        (("2" (hide -3)
                          (("2" (skeep -)
                            (("2" (ground)
                              (("1"
                                (replace -2)
                                (("1"
                                  (expand "realord")
                                  (("1"
                                    (inst - "xx" "yy")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "sign" +)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (mult-by -3 "-aq(1)")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -2)
                                (("2"
                                  (expand "realord")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (expand "sign")
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (ground)
                                          (("2"
                                            (mult-by -3 "aq(1)")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (replace -2)
                                (("3"
                                  (expand "realord")
                                  (("3"
                                    (inst - "xx" "yy")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (expand "sign")
                                        (("3"
                                          (lift-if)
                                          (("3"
                                            (ground)
                                            (("3"
                                              (mult-by -3 "-aq(1)")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (replace -2)
                                (("4"
                                  (expand "realord")
                                  (("4"
                                    (expand "sign")
                                    (("4"
                                      (lift-if)
                                      (("4"
                                        (ground)
                                        (("4"
                                          (skeep)
                                          (("4"
                                            (mult-by -3 "aq(1)")
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (replace -2)
                                (("5"
                                  (expand "realord")
                                  (("5"
                                    (inst - "xx" "yy")
                                    (("5"
                                      (assert)
                                      (("5"
                                        (expand "sign")
                                        (("5"
                                          (lift-if)
                                          (("5"
                                            (ground)
                                            (("5"
                                              (mult-by -4 "aq(1)")
                                              (("5" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("6"
                                (replace -2)
                                (("6"
                                  (expand "realord")
                                  (("6"
                                    (skeep)
                                    (("6"
                                      (expand "sign")
                                      (("6"
                                        (lift-if)
                                        (("6"
                                          (ground)
                                          (("6"
                                            (mult-by -2 "-aq(1)")
                                            (("6" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("7"
                                (replace -2)
                                (("7"
                                  (expand "realord")
                                  (("7"
                                    (inst - "xx" "yy")
                                    (("7"
                                      (assert)
                                      (("7"
                                        (expand "sign")
                                        (("7"
                                          (lift-if)
                                          (("7"
                                            (ground)
                                            (("7"
                                              (mult-by -4 "aq(1)")
                                              (("7" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("8"
                                (replace -2)
                                (("8"
                                  (expand "realord")
                                  (("8"
                                    (skeep)
                                    (("8"
                                      (expand "sign")
                                      (("8"
                                        (lift-if)
                                        (("8"
                                          (ground)
                                          (("8"
                                            (mult-by -2 "-aq(1)")
                                            (("8" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("9"
                                (replace -2)
                                (("9"
                                  (expand "realord")
                                  (("9" (propax) nil nil))
                                  nil))
                                nil)
                               ("10"
                                (replace -2)
                                (("10"
                                  (expand "realord")
                                  (("10"
                                    (ground)
                                    (("10"
                                      (skeep)
                                      (("10" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2"
                (case "FORALL (x:real): contains?(I)(x) IMPLIES EXISTS (y: real): contains?(I)(y) AND (x < y OR y < x)")
                (("1" (label "hyplem" -1)
                  (("1" (hide "hyplem")
                    (("1" (assert)
                      (("1" (rewrite "compute_poly_sat_rational_def")
                        (("1" (lemma "poly_mean_value")
                          (("1" (inst - "aq" "n" _ _)
                            (("1" (assert)
                              (("1"
                                (ground)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma
                                       "poly_increasing_is_strict")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (reveal "hyplem")
                                          (("1"
                                            (inst - "x")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst - "aq" "n" _ _)
                                                (("1"
                                                  (skeep -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -)
                                                      (("1"
                                                        (inst
                                                         -
                                                         "x"
                                                         "y")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide -3)
                                                              (("1"
                                                                (split
                                                                 -)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "x")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "realord")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "x!1"
                                                                     "y!1")
                                                                    (("2"
                                                                      (replace
                                                                       -8)
                                                                      (("2"
                                                                        (expand
                                                                         "realord")
                                                                        (("2"
                                                                          (expand
                                                                           "contains?"
                                                                           (-1
                                                                            -2
                                                                            -3
                                                                            -4
                                                                            -5
                                                                            -6
                                                                            -7
                                                                            +))
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         -
                                                         "y"
                                                         "x")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide -3)
                                                              (("2"
                                                                (split
                                                                 -)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "x")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "realord")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "x!1"
                                                                     "y!1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -8)
                                                                        (("2"
                                                                          (expand
                                                                           "realord")
                                                                          (("2"
                                                                            (expand
                                                                             "contains?"
                                                                             (-1
                                                                              -2
                                                                              -3
                                                                              -4
                                                                              -5
                                                                              -6
                                                                              -7
                                                                              +))
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -2 +)
                                  (("2"
                                    (expand "realord")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (replace -3)
                                  (("3"
                                    (expand "realord")
                                    (("3"
                                      (hide 1)
                                      (("3"
                                        (lemma
                                         "poly_increasing_is_strict")
                                        (("3"
                                          (inst - "aq" "n" _ _)
                                          (("3"
                                            (skeep)
                                            (("3"
                                              (inst - "x" "y")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (hide -2)
                                                    (("3"
                                                      (split -1)
                                                      (("1"
                                                        (inst
                                                         -
                                                         "x"
                                                         "y")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst - "c")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "contains?"
                                                               (-1
                                                                -2
                                                                -3
                                                                -4
                                                                -5
                                                                -6
                                                                -7
                                                                +))
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (replace -2)
                                  (("4"
                                    (expand "realord")
                                    (("4" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("5"
                                  (hide 2)
                                  (("5"
                                    (replace -3)
                                    (("5"
                                      (expand "realord")
                                      (("5"
                                        (lemma
                                         "poly_increasing_is_strict2")
                                        (("5"
                                          (inst - "aq" "n" _ _)
                                          (("5"
                                            (reveal "hyplem")
                                            (("5"
                                              (skeep)
                                              (("5"
                                                (inst - "x")
                                                (("5"
                                                  (assert)
                                                  (("5"
                                                    (skeep -1)
                                                    (("5"
                                                      (assert)
                                                      (("5"
                                                        (split -)
                                                        (("1"
                                                          (inst
                                                           -
                                                           "x"
                                                           "y")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 -3)
                                                                (("1"
                                                                  (split
                                                                   -)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "x")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "x!1"
                                                                       "y!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "contains?"
                                                                           (-1
                                                                            -2
                                                                            -3
                                                                            -4
                                                                            -5
                                                                            -6
                                                                            -7
                                                                            -8
                                                                            +))
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           -
                                                           "y"
                                                           "x")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 -3)
                                                                (("2"
                                                                  (split
                                                                   -)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "x")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "x!1"
                                                                       "y!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "contains?"
                                                                           (-1
                                                                            -2
                                                                            -3
                                                                            -4
                                                                            -5
                                                                            -6
                                                                            -7
                                                                            +))
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("6"
                                  (replace -2)
                                  (("6"
                                    (expand "realord")
                                    (("6" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("7"
                                  (hide 1)
                                  (("7"
                                    (replace -3)
                                    (("7"
                                      (expand "realord")
                                      (("7"
                                        (lemma
                                         "poly_increasing_is_strict")
                                        (("7"
                                          (skeep)
                                          (("7"
                                            (inst - "aq" "n" _ _)
                                            (("7"
                                              (skeep)
                                              (("7"
                                                (inst - "x" "y")
                                                (("7"
                                                  (assert)
                                                  (("7"
                                                    (flatten)
                                                    (("7"
                                                      (hide -2)
                                                      (("7"
                                                        (split -1)
                                                        (("1"
                                                          (inst
                                                           -
                                                           "x"
                                                           "y")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "c")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "contains?"
                                                                 (-1
                                                                  -2
                                                                  -3
                                                                  -4
                                                                  -5
                                                                  -6
                                                                  -7
                                                                  +))
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("8"
                                  (replace -2)
                                  (("8"
                                    (expand "realord")
                                    (("8" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("9"
                                  (replace -3)
                                  (("9"
                                    (expand "realord")
                                    (("9" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("10"
                                  (rewrite
                                   "compute_poly_sat_rational_def")
                                  (("1"
                                    (hide (1 3))
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (expand "realord")
                                        (("1"
                                          (lemma
                                           "poly_decreasing_is_strict")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (reveal "hyplem")
                                              (("1"
                                                (inst - "x")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -
                                                     "aq"
                                                     "n"
                                                     _
                                                     _)
                                                    (("1"
                                                      (skeep -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "x"
                                                             "y")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide
                                                                   -3)
                                                                  (("1"
                                                                    (split
                                                                     -)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "x")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1"
                                                                         "y!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "contains?"
                                                                             (-1
                                                                              -2
                                                                              -3
                                                                              -4
                                                                              -5
                                                                              -6
                                                                              -7
                                                                              +))
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             -
                                                             "y"
                                                             "x")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (hide
                                                                   -3)
                                                                  (("2"
                                                                    (split
                                                                     -)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "x")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1"
                                                                         "y!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "contains?"
                                                                             (-1
                                                                              -2
                                                                              -3
                                                                              -4
                                                                              -5
                                                                              -6
                                                                              -7
                                                                              +))
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "poly_deriv" 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("11"
                                  (replace -3)
                                  (("11"
                                    (expand "realord")
                                    (("11" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("12"
                                  (hide (1 2))
                                  (("12"
                                    (replace -2)
                                    (("12"
                                      (expand "realord")
                                      (("12"
                                        (rewrite
                                         "compute_poly_sat_rational_def"
                                         -1)
                                        (("1"
                                          (expand "realord")
                                          (("1"
                                            (lemma
                                             "poly_decreasing_is_strict")
                                            (("1"
                                              (inst - "aq" "n" _ _)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst - "x" "y")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "x"
                                                             "y")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "c")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "contains?"
                                                                   (-1
                                                                    -2
                                                                    -3
                                                                    -4
                                                                    -5
                                                                    -6
                                                                    -7
                                                                    +))
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "poly_deriv" 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("13"
                                  (replace -3)
                                  (("13"
                                    (expand "realord")
                                    (("13" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("14"
                                  (hide (1 3))
                                  (("14"
                                    (replace -2)
                                    (("14"
                                      (rewrite
                                       "compute_poly_sat_rational_def"
                                       1)
                                      (("1"
                                        (expand "realord")
                                        (("1"
                                          (lemma
                                           "poly_decreasing_is_strict2")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (reveal "hyplem")
                                              (("1"
                                                (inst - "x")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -
                                                     "aq"
                                                     "n"
                                                     _
                                                     _)
                                                    (("1"
                                                      (skeep -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "x"
                                                             "y")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide
                                                                   -3)
                                                                  (("1"
                                                                    (split
                                                                     -)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "x")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1"
                                                                         "y!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "contains?"
                                                                             (-1
                                                                              -2
                                                                              -3
                                                                              -4
                                                                              -5
                                                                              -6
                                                                              -7
                                                                              +))
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             -
                                                             "y"
                                                             "x")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (hide
                                                                   -3)
                                                                  (("2"
                                                                    (split
                                                                     -)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "x")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1"
                                                                         "y!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "contains?"
                                                                             (-1
                                                                              -2
                                                                              -3
                                                                              -4
                                                                              -5
                                                                              -6
                                                                              -7
                                                                              +))
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "poly_deriv" 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("15"
                                  (replace -3 -1)
                                  (("15"
                                    (expand "realord")
                                    (("15" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("16"
                                  (replace -2)
                                  (("16"
                                    (expand "realord")
                                    (("16"
                                      (hide 1)
                                      (("16"
                                        (rewrite
                                         "compute_poly_sat_rational_def"
                                         -1)
                                        (("1"
                                          (expand "realord")
                                          (("1"
                                            (lemma
                                             "poly_decreasing_is_strict2")
                                            (("1"
                                              (inst - "aq" "n" _ _)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst - "x" "y")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "x"
                                                             "y")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "c")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "contains?"
                                                                   (-1
                                                                    -2
                                                                    -3
                                                                    -4
                                                                    -5
                                                                    -6
                                                                    -7
                                                                    +))
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "poly_deriv" 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("17"
                                  (replace -1)
                                  (("17"
                                    (expand "realord")
                                    (("17"
                                      (rewrite
                                       "compute_poly_sat_rational_def"
                                       2)
                                      (("1"
                                        (lemma
                                         "poly_injective_monotone")
                                        (("1"
                                          (expand "realord")
                                          (("1"
                                            (inst - "aq" "n" _ _)
                                            (("1"
                                              (reveal "hyplem")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (case
                                                   "EXISTS (x1,x2:real): contains?(I)(x1) AND contains?(I)(x2) AND x1<=x!1 AND x!1<=x2 AND x1<=x!2 AND x!2<=x2")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst
                                                       -
                                                       "x1"
                                                       "x2")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (hide -9)
                                                            (("1"
                                                              (split -)
                                                              (("1"
                                                                (lemma
                                                                 "poly_decreasing_is_strict")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "aq"
                                                                   "n"
                                                                   "x1"
                                                                   "x2")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "x!2")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "poly_increasing_is_strict")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -2)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "x!1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skeep)
                                                                (("3"
                                                                  (inst
                                                                   -
                                                                   "x"
                                                                   "y")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (expand
                                                                       "contains?"
                                                                       (-1
                                                                        -2
                                                                        -3
                                                                        -4
                                                                        -5
                                                                        -6
                                                                        -7
                                                                        +))
                                                                      (("3"
                                                                        (flatten)
                                                                        (("3"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst
                                                     +
                                                     "min(x!1,x!2)"
                                                     "max(x!1,x!2)")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split +)
                                                        (("1"
                                                          (expand
                                                           "min"
                                                           1)
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "max"
                                                           1)
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "min"
                                                           1)
                                                          (("3"
                                                            (lift-if)
                                                            (("3"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (expand
                                                           "max"
                                                           1)
                                                          (("4"
                                                            (lift-if)
                                                            (("4"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("5"
                                                          (expand
                                                           "min"
                                                           1)
                                                          (("5"
                                                            (lift-if)
                                                            (("5"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("6"
                                                          (expand
                                                           "max"
                                                           1)
                                                          (("6"
                                                            (lift-if)
                                                            (("6"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "poly_deriv" 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("18"
                                  (replace -2)
                                  (("18"
                                    (expand "realord")
                                    (("18"
                                      (hide -2)
                                      (("18"
                                        (lemma
                                         "poly_increasing_is_strict")
                                        (("18"
                                          (inst - "aq" "n" _ _)
                                          (("18"
                                            (skeep)
                                            (("18"
                                              (inst - "x" "y")
                                              (("18"
                                                (assert)
                                                (("18"
                                                  (flatten)
                                                  (("18"
                                                    (hide -2)
                                                    (("18"
                                                      (split -1)
                                                      (("1"
                                                        (inst
                                                         -
                                                         "x"
                                                         "y")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst - "c")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "contains?"
                                                               (-1
                                                                -2
                                                                -3
                                                                -4
                                                                -5
                                                                -6
                                                                -7
                                                                +))
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("19"
                                  (replace -2)
                                  (("19"
                                    (expand "realord")
                                    (("19"
                                      (rewrite
                                       "compute_poly_sat_rational_def"
                                       -1)
                                      (("1"
                                        (expand "realord")
                                        (("1"
                                          (lemma
                                           "poly_decreasing_is_strict")
                                          (("1"
                                            (inst - "aq" "n" _ _)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst - "x" "y")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (inst
                                                           -
                                                           "x"
                                                           "y")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "c")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "contains?"
                                                                 (-1
                                                                  -2
                                                                  -3
                                                                  -4
                                                                  -5
                                                                  -6
                                                                  -7
                                                                  +))
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "poly_deriv" 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "poly_deriv" 1)
                          (("2" (assert) nil nil)) nil)
                         ("3" (expand "poly_deriv" 1)
                          (("3" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 4)
                  (("2" (skeep)
                    (("2" (case "NOT x = (I`lb+I`ub)/2")
                      (("1" (inst + "(x+(I`lb+I`ub)/2)/2")
                        (("1" (hide (-2 -3)) (("1" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (inst + "(x + I`ub)/2")
                        (("2" (hide (-3 -4)) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 3)
              (("2" (inst + "(I`ub + I`lb)/2" "3*I`ub/4 + I`lb/4")
                (("2" (hide -1) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rel_disjunction formula-decl nil compute_sturm nil)
    (compute_poly_mono_basic const-decl "bool" compute_sturm nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (rat nonempty-type-eq-decl nil rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma "reals/")
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (realord const-decl "bool" compute_sturm nil)
    (minus_rat_is_rat application-judgement "rat" rationals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sign const-decl "Sign" sign "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (poly_mean_value formula-decl nil polynomials "reals/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (poly_injective_monotone formula-decl nil more_polynomial_props
     "reals/")
    (poly_decreasing_is_strict2 formula-decl nil more_polynomial_props
     "reals/")
    (le_ adt-constructor-decl "(le_?)" compute_sturm nil)
    (le_? adt-recognizer-decl "[SturmRel -> boolean]" compute_sturm
     nil)
    (poly_decreasing_is_strict formula-decl nil more_polynomial_props
     "reals/")
    (poly_increasing_is_strict2 formula-decl nil more_polynomial_props
     "reals/")
    (poly_increasing_is_strict formula-decl nil more_polynomial_props
     "reals/")
    (compute_poly_sat_rational_def formula-decl nil compute_sturm nil)
    (poly_deriv const-decl "real" polynomials "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ge_? adt-recognizer-decl "[SturmRel -> boolean]" compute_sturm
     nil)
    (ge_ adt-constructor-decl "(ge_?)" compute_sturm nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (SturmRel type-decl nil compute_sturm nil))
   shostak))
 (poly_non_constant_real_int 0
  (poly_non_constant_real_int-1 nil 3607954338
   ("" (skeep)
    ((""
      (case "EXISTS (x, y: real):
                       contains?(I)(x) AND
                        contains?(I)(y) AND polynomial(aq, n)(x) /= polynomial(aq, n)(y)")
      (("1" (skeep)
        (("1" (inst-cp + "x" "y")
          (("1" (inst + "y" "x") (("1" (ground) nil nil)) nil)) nil))
        nil)
       ("2" (hide 3)
        (("2" (lemma "poly_constant_on_interval")
          (("2" (inst - "aq" "n" "I`lb" "I`ub")
            (("2" (assert)
              (("2" (split -)
                (("1" (inst - "n") nil nil)
                 ("2" (skeep)
                  (("2" (inst + "r1" "r2")
                    (("2" (assert)
                      (("2" (expand "contains?")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (/= const-decl "boolean" notequal nil)
    (contains? const-decl "bool" RealInt "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (poly_constant_on_interval formula-decl nil polynomials "reals/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil))
   shostak))
 (mono_def 0
  (mono_def-4 nil 3613988468
   ("" (skeep)
    (("" (lemma "rel_disjunction")
      (("" (inst-cp -1 "ro")
        (("" (insteep)
          (("" (name "mp" "(I`lb+I`ub)/2")
            (("" (case "NOT contains?(I)(mp)")
              (("1" (hide (-2 -3 3)) (("1" (grind) nil nil)) nil)
               ("2" (name "op" "(mp+I`ub)/2")
                (("2" (case "NOT contains?(I)(op)")
                  (("1" (hide (-4 -5 3)) (("1" (grind) nil nil)) nil)
                   ("2" (case "NOT mp < op")
                    (("1" (assert) nil nil)
                     ("2" (label "ans" 2)
                      (("2" (hide "ans")
                        (("2"
                          (case "realord(ro)(1,1) AND NOT realord(re)(1,1)")
                          (("1" (reveal "ans")
                            (("1" (expand "mono")
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst-cp - "mp" "mp")
                                    (("1"
                                      (expand "realord")
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (label "ans2" 1)
                            (("2" (hide "ans2")
                              (("2"
                                (ground)
                                (("1"
                                  (reveal "ans")
                                  (("1"
                                    (delabel "ans")
                                    (("1"
                                      (reveal "ans2")
                                      (("1"
                                        (delabel "ans2")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (expand "realord")
                                              (("1"
                                                (hide 1)
                                                (("1"
                                                  (expand "mono")
                                                  (("1"
                                                    (expand "realord")
                                                    (("1"
                                                      (lemma
                                                       "compute_poly_mono_basic_def")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (expand
                                                           "realord")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (reveal "ans")
                                  (("2"
                                    (delabel "ans")
                                    (("2"
                                      (reveal "ans2")
                                      (("2"
                                        (delabel "ans2")
                                        (("2"
                                          (replaces -1)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (expand "realord")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (reveal "ans")
                                  (("3"
                                    (delabel "ans")
                                    (("3"
                                      (reveal "ans2")
                                      (("3"
                                        (delabel "ans2")
                                        (("3"
                                          (replaces -1)
                                          (("3"
                                            (replaces -1)
                                            (("3"
                                              (expand "realord")
                                              (("3"
                                                (hide (-1 1))
                                                (("3"
                                                  (expand "mono")
                                                  (("3"
                                                    (expand "swap")
                                                    (("3"
                                                      (expand
                                                       "realord")
                                                      (("3"
                                                        (ground)
                                                        (("1"
                                                          (rewrite
                                                           "compute_poly_mono_basic_def"
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (expand
                                                             "realord")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "y"
                                                                 "x")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "compute_poly_mono_basic_def"
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (expand
                                                             "realord")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "y"
                                                                 "x")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (reveal "ans")
                                  (("4"
                                    (delabel "ans")
                                    (("4"
                                      (reveal "ans2")
                                      (("4"
                                        (delabel "ans2")
                                        (("4"
                                          (replaces -1)
                                          (("4"
                                            (replaces -1)
                                            (("4"
                                              (expand "realord")
                                              (("4" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("5"
                                  (reveal "ans")
                                  (("5"
                                    (delabel "ans")
                                    (("5"
                                      (reveal "ans2")
                                      (("5"
                                        (delabel "ans2")
                                        (("5"
                                          (replaces -1)
                                          (("5"
                                            (replaces -1)
                                            (("5"
                                              (expand "realord")
                                              (("5"
                                                (hide 1)
                                                (("5"
                                                  (expand "mono")
                                                  (("5"
                                                    (inst-cp
                                                     -
                                                     "mp"
                                                     "op")
                                                    (("5"
                                                      (assert)
                                                      (("5"
                                                        (inst
                                                         -
                                                         "op"
                                                         "mp")
                                                        (("5"
                                                          (assert)
                                                          (("5"
                                                            (hide-all-but
                                                             (-1 -2))
                                                            (("5"
                                                              (name
                                                               "f"
                                                               "polynomial(aq,n)")
                                                              (("5"
                                                                (replaces
                                                                 -1)
                                                                (("5"
                                                                  (assert)
                                                                  (("5"
                                                                    (case
                                                                     "FORALL (a1,a2:real): NOT (a1<a2 AND a2<a1)")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "f(op)"
                                                                       "f(mp)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("6"
                                  (reveal "ans")
                                  (("6"
                                    (delabel "ans")
                                    (("6"
                                      (reveal "ans2")
                                      (("6"
                                        (delabel "ans2")
                                        (("6"
                                          (replaces -1)
                                          (("6"
                                            (replaces -1)
                                            (("6"
                                              (expand "realord")
                                              (("6"
                                                (hide 1)
                                                (("6"
                                                  (expand "mono")
                                                  (("6"
                                                    (expand "realord")
                                                    (("6"
                                                      (rewrite
                                                       "compute_poly_mono_basic_def"
                                                       :dir
                                                       rl)
                                                      (("6"
                                                        (expand
                                                         "realord")
                                                        (("6"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("7"
                                  (reveal "ans")
                                  (("7"
                                    (delabel "ans")
                                    (("7"
                                      (reveal "ans2")
                                      (("7"
                                        (delabel "ans2")
                                        (("7"
                                          (replaces -1)
                                          (("7"
                                            (replaces -1)
                                            (("7"
                                              (expand "realord")
                                              (("7"
                                                (hide 1)
                                                (("7"
                                                  (expand "mono")
                                                  (("7"
                                                    (expand "realord")
                                                    (("7"
                                                      (rewrite
                                                       "compute_poly_mono_basic_def"
                                                       :dir
                                                       rl)
                                                      (("7"
                                                        (expand
                                                         "realord")
                                                        (("7"
                                                          (ground)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "x"
                                                               "y")
                                                              (("1"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "x"
                                                               "y")
                                                              (("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("8"
                                  (reveal "ans")
                                  (("8"
                                    (delabel "ans")
                                    (("8"
                                      (reveal "ans2")
                                      (("8"
                                        (delabel "ans2")
                                        (("8"
                                          (replaces -1)
                                          (("8"
                                            (replaces -1)
                                            (("8"
                                              (expand "realord")
                                              (("8"
                                                (hide 1)
                                                (("8"
                                                  (expand "mono")
                                                  (("8"
                                                    (expand "realord")
                                                    (("8"
                                                      (expand "swap")
                                                      (("8"
                                                        (rewrite
                                                         "compute_poly_mono_basic_def"
                                                         :dir
                                                         rl)
                                                        (("8"
                                                          (expand
                                                           "realord")
                                                          (("8"
                                                            (ground)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "y"
                                                                 "x")
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "y"
                                                                 "x")
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("9"
                                  (reveal "ans")
                                  (("9"
                                    (delabel "ans")
                                    (("9"
                                      (reveal "ans2")
                                      (("9"
                                        (delabel "ans2")
                                        (("9"
                                          (replaces -1)
                                          (("9"
                                            (replaces -1)
                                            (("9"
                                              (expand "realord")
                                              (("9"
                                                (hide 1)
                                                (("9"
                                                  (expand "mono")
                                                  (("9"
                                                    (expand "swap")
                                                    (("9"
                                                      (expand
                                                       "realord")
                                                      (("9"
                                                        (rewrite
                                                         "compute_poly_mono_basic_def"
                                                         :dir
                                                         rl)
                                                        (("9"
                                                          (expand
                                                           "realord")
                                                          (("9"
                                                            (ground)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "y"
                                                                 "x")
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "y"
                                                                 "x")
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("10"
                                  (reveal "ans")
                                  (("10"
                                    (delabel "ans")
                                    (("10"
                                      (reveal "ans2")
                                      (("10"
                                        (delabel "ans2")
                                        (("10"
                                          (replaces -1)
                                          (("10"
                                            (replaces -1)
                                            (("10"
                                              (expand "realord")
                                              (("10"
                                                (hide 1)
                                                (("10"
                                                  (expand "mono")
                                                  (("10"
                                                    (lemma
                                                     "poly_non_constant_real_int")
                                                    (("10"
                                                      (inst
                                                       -
                                                       "I"
                                                       "aq"
                                                       "n")
                                                      (("10"
                                                        (assert)
                                                        (("10"
                                                          (skeep -)
                                                          (("10"
                                                            (inst-cp
                                                             -
                                                             "x"
                                                             "y")
                                                            (("10"
                                                              (inst
                                                               -
                                                               "y"
                                                               "x")
                                                              (("10"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("11"
                                  (reveal "ans")
                                  (("11"
                                    (delabel "ans")
                                    (("11"
                                      (reveal "ans2")
                                      (("11"
                                        (delabel "ans2")
                                        (("11"
                                          (replaces -1)
                                          (("11"
                                            (replaces -1)
                                            (("11"
                                              (expand "realord")
                                              (("11"
                                                (hide 1)
                                                (("11"
                                                  (expand "mono")
                                                  (("11"
                                                    (expand "realord")
                                                    (("11"
                                                      (lemma
                                                       "compute_poly_mono_basic_def")
                                                      (("11"
                                                        (inst?)
                                                        (("11"
                                                          (expand
                                                           "realord")
                                                          (("11"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("12"
                                  (reveal "ans")
                                  (("12"
                                    (delabel "ans")
                                    (("12"
                                      (reveal "ans2")
                                      (("12"
                                        (delabel "ans2")
                                        (("12"
                                          (replaces -1)
                                          (("12"
                                            (replaces -1)
                                            (("12"
                                              (expand "realord")
                                              (("12" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("13"
                                  (reveal "ans")
                                  (("13"
                                    (delabel "ans")
                                    (("13"
                                      (reveal "ans2")
                                      (("13"
                                        (delabel "ans2")
                                        (("13"
                                          (replaces -1)
                                          (("13"
                                            (replaces -1)
                                            (("13"
                                              (expand "realord")
                                              (("13"
                                                (hide 1)
                                                (("13"
                                                  (expand "mono")
                                                  (("13"
                                                    (expand "realord")
                                                    (("13"
                                                      (expand "swap")
                                                      (("13"
                                                        (rewrite
                                                         "compute_poly_mono_basic_def"
                                                         :dir
                                                         rl)
                                                        (("13"
                                                          (expand
                                                           "realord")
                                                          (("13"
                                                            (ground)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "y"
                                                                 "x")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "y"
                                                                 "x")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("14"
                                  (reveal "ans")
                                  (("14"
                                    (delabel "ans")
                                    (("14"
                                      (reveal "ans2")
                                      (("14"
                                        (delabel "ans2")
                                        (("14"
                                          (replaces -1)
                                          (("14"
                                            (replaces -1)
                                            (("14"
                                              (expand "realord")
                                              (("14" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("15"
                                  (reveal "ans")
                                  (("15"
                                    (delabel "ans")
                                    (("15"
                                      (reveal "ans2")
                                      (("15"
                                        (delabel "ans2")
                                        (("15"
                                          (replaces -1)
                                          (("15"
                                            (replaces -1)
                                            (("15"
                                              (assert)
                                              (("15"
                                                (expand "mono")
                                                (("15"
                                                  (expand "realord")
                                                  (("15"
                                                    (hide 1)
                                                    (("15"
                                                      (lemma
                                                       "poly_non_constant_real_int")
                                                      (("15"
                                                        (inst
                                                         -
                                                         "I"
                                                         "aq"
                                                         "n")
                                                        (("15"
                                                          (assert)
                                                          (("15"
                                                            (skeep)
                                                            (("15"
                                                              (inst-cp
                                                               -
                                                               "x"
                                                               "y")
                                                              (("15"
                                                                (inst
                                                                 -
                                                                 "y"
                                                                 "x")
                                                                (("15"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("16"
                                  (reveal "ans")
                                  (("16"
                                    (delabel "ans")
                                    (("16"
                                      (reveal "ans2")
                                      (("16"
                                        (delabel "ans2")
                                        (("16"
                                          (replaces -1)
                                          (("16"
                                            (replaces -1)
                                            (("16"
                                              (expand "realord")
                                              (("16"
                                                (hide 1)
                                                (("16"
                                                  (expand "mono")
                                                  (("16"
                                                    (expand "realord")
                                                    (("16"
                                                      (lemma
                                                       "compute_poly_mono_basic_def")
                                                      (("16"
                                                        (inst?)
                                                        (("16"
                                                          (expand
                                                           "realord")
                                                          (("16"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("17"
                                  (reveal "ans")
                                  (("17"
                                    (delabel "ans")
                                    (("17"
                                      (reveal "ans2")
                                      (("17"
                                        (delabel "ans2")
                                        (("17"
                                          (replaces -1)
                                          (("17"
                                            (replaces -1)
                                            (("17"
                                              (expand "realord")
                                              (("17"
                                                (hide 1)
                                                (("17"
                                                  (expand "mono")
                                                  (("17"
                                                    (expand "realord")
                                                    (("17"
                                                      (rewrite
                                                       "compute_poly_mono_basic_def"
                                                       :dir
                                                       rl)
                                                      (("17"
                                                        (expand
                                                         "realord")
                                                        (("17"
                                                          (ground)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "x"
                                                               "y")
                                                              (("1"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "x"
                                                               "y")
                                                              (("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("18"
                                  (reveal "ans")
                                  (("18"
                                    (delabel "ans")
                                    (("18"
                                      (reveal "ans2")
                                      (("18"
                                        (delabel "ans2")
                                        (("18"
                                          (replaces -1)
                                          (("18"
                                            (replaces -1)
                                            (("18"
                                              (expand "realord")
                                              (("18"
                                                (hide 1)
                                                (("18"
                                                  (expand "mono")
                                                  (("18"
                                                    (expand "realord")
                                                    (("18"
                                                      (expand "swap")
                                                      (("18"
                                                        (rewrite
                                                         "compute_poly_mono_basic_def"
                                                         :dir
                                                         rl)
                                                        (("18"
                                                          (expand
                                                           "realord")
                                                          (("18"
                                                            (ground)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "y"
                                                                 "x")
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "y"
                                                                 "x")
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("19"
                                  (reveal "ans")
                                  (("19"
                                    (delabel "ans")
                                    (("19"
                                      (reveal "ans2")
                                      (("19"
                                        (delabel "ans2")
                                        (("19"
                                          (replaces -1)
                                          (("19"
                                            (replaces -1)
                                            (("19"
                                              (expand "realord")
                                              (("19"
                                                (hide 1)
                                                (("19"
                                                  (expand "mono")
                                                  (("19"
                                                    (expand "realord")
                                                    (("19"
                                                      (expand "swap")
                                                      (("19"
                                                        (rewrite
                                                         "compute_poly_mono_basic_def"
                                                         :dir
                                                         rl)
                                                        (("19"
                                                          (expand
                                                           "realord")
                                                          (("19"
                                                            (ground)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "y"
                                                                 "x")
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "y"
                                                                 "x")
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("20"
                                  (reveal "ans")
                                  (("20"
                                    (delabel "ans")
                                    (("20"
                                      (reveal "ans2")
                                      (("20"
                                        (delabel "ans2")
                                        (("20"
                                          (replaces -1)
                                          (("20"
                                            (replaces -1)
                                            (("20"
                                              (expand "realord")
                                              (("20"
                                                (hide 1)
                                                (("20"
                                                  (expand "mono")
                                                  (("20"
                                                    (lemma
                                                     "poly_non_constant_real_int")
                                                    (("20"
                                                      (inst
                                                       -
                                                       "I"
                                                       "aq"
                                                       "n")
                                                      (("20"
                                                        (assert)
                                                        (("20"
                                                          (skeep)
                                                          (("20"
                                                            (inst-cp
                                                             -
                                                             "x"
                                                             "y")
                                                            (("20"
                                                              (inst
                                                               -
                                                               "y"
                                                               "x")
                                                              (("20"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("21"
                                  (reveal "ans")
                                  (("21"
                                    (delabel "ans")
                                    (("21"
                                      (reveal "ans2")
                                      (("21"
                                        (delabel "ans2")
                                        (("21"
                                          (replaces -1)
                                          (("21"
                                            (replaces -1)
                                            (("21"
                                              (expand "realord")
                                              (("21"
                                                (hide 1)
                                                (("21"
                                                  (expand "mono")
                                                  (("21"
                                                    (expand "realord")
                                                    (("21"
                                                      (rewrite
                                                       "compute_poly_mono_basic_def"
                                                       :dir
                                                       rl)
                                                      (("21"
                                                        (expand
                                                         "realord")
                                                        (("21"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("22"
                                  (reveal "ans")
                                  (("22"
                                    (delabel "ans")
                                    (("22"
                                      (reveal "ans2")
                                      (("22"
                                        (delabel "ans2")
                                        (("22"
                                          (replaces -1)
                                          (("22"
                                            (replaces -1)
                                            (("22"
                                              (expand "realord")
                                              (("22" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("23"
                                  (reveal "ans")
                                  (("23"
                                    (delabel "ans")
                                    (("23"
                                      (reveal "ans2")
                                      (("23"
                                        (delabel "ans2")
                                        (("23"
                                          (replaces -1)
                                          (("23"
                                            (replaces -1)
                                            (("23"
                                              (expand "realord")
                                              (("23"
                                                (hide 1)
                                                (("23"
                                                  (expand "mono")
                                                  (("23"
                                                    (expand "realord")
                                                    (("23"
                                                      (expand "swap")
                                                      (("23"
                                                        (rewrite
                                                         "compute_poly_mono_basic_def"
                                                         :dir
                                                         rl)
                                                        (("23"
                                                          (expand
                                                           "realord")
                                                          (("23"
                                                            (ground)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "y"
                                                                 "x")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "y"
                                                                 "x")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("24"
                                  (reveal "ans")
                                  (("24"
                                    (delabel "ans")
                                    (("24"
                                      (reveal "ans2")
                                      (("24"
                                        (delabel "ans2")
                                        (("24"
                                          (replaces -1)
                                          (("24"
                                            (replaces -1)
                                            (("24"
                                              (expand "realord")
                                              (("24" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("25"
                                  (reveal "ans")
                                  (("25"
                                    (delabel "ans")
                                    (("25"
                                      (reveal "ans2")
                                      (("25"
                                        (delabel "ans2")
                                        (("25"
                                          (replaces -1)
                                          (("25"
                                            (replaces -1)
                                            (("25"
                                              (expand "realord")
                                              (("25"
                                                (hide 1)
                                                (("25"
                                                  (expand "mono")
                                                  (("25"
                                                    (expand "realord")
                                                    (("25"
                                                      (expand "swap")
                                                      (("25"
                                                        (split +)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (rewrite
                                                             "compute_poly_mono_basic_def"
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (expand
                                                               "realord")
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "x!1"
                                                                   "y!1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (splash -1)
                                                            (("2"
                                                              (rewrite
                                                               "compute_poly_mono_basic_def"
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (expand
                                                                 "realord")
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst-cp
                                                                     -
                                                                     "x"
                                                                     "y")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "y"
                                                                       "x")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rel_disjunction formula-decl nil compute_sturm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (contains? const-decl "bool" RealInt "reals/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (realord const-decl "bool" compute_sturm nil)
    (mono const-decl "bool" compute_sturm nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (compute_poly_mono_basic const-decl "bool" compute_sturm nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (ne_ adt-constructor-decl "(ne_?)" compute_sturm nil)
    (ne_? adt-recognizer-decl "[SturmRel -> boolean]" compute_sturm
     nil)
    (poly_non_constant_real_int formula-decl nil compute_sturm nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (ge_? adt-recognizer-decl "[SturmRel -> boolean]" compute_sturm
     nil)
    (ge_ adt-constructor-decl "(ge_?)" compute_sturm nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_ adt-constructor-decl "(le_?)" compute_sturm nil)
    (le_? adt-recognizer-decl "[SturmRel -> boolean]" compute_sturm
     nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (gt_ adt-constructor-decl "(gt_?)" compute_sturm nil)
    (gt_? adt-recognizer-decl "[SturmRel -> boolean]" compute_sturm
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (swap const-decl "SturmRel" compute_sturm nil)
    (TRUE const-decl "bool" booleans nil)
    (compute_poly_mono_basic_def formula-decl nil compute_sturm nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (lt_? adt-recognizer-decl "[SturmRel -> boolean]" compute_sturm
     nil)
    (lt_ adt-constructor-decl "(lt_?)" compute_sturm nil)
    (< const-decl "bool" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (SturmRel type-decl nil compute_sturm nil))
   nil)))


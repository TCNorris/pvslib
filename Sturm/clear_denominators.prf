(clear_denominators (posratpair_plus 0 (posratpair_plus-1 nil 3599588076 ("" (grind) nil nil) nil shostak)) (posratpair_div 0 (posratpair_div-1 nil 3599588176 ("" (grind) nil nil) nil shostak)) (PosRatSet_nonempty 0 (PosRatSet_nonempty-1 nil 3599814580 ("" (skeep) (("" (typepred "x") (("" (lemma "rational_pred_ax2") (("" (inst - "x") (("" (skeep -1) (("" (case "i<=0") (("1" (mult-by -1 "1/p") (("1" (assert) nil nil)) nil) ("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (inst - "i+p") (("1" (expand "member") (("1" (expand "PosRatSet") (("1" (inst + "i" "p") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak)) (PosRatSet_glb_posnat_TCC1 0 (PosRatSet_glb_posnat_TCC1-1 nil 3599840373 ("" (skeep) (("" (split) (("1" (lemma "PosRatSet_nonempty") (("1" (inst - "x") (("1" (expand "nonempty?") (("1" (expand "empty?") (("1" (skosimp*) (("1" (inst - "x!1") (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "bounded_below?") (("2" (inst + "-1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (PosRatSet_glb_posnat subtype "extend[real, posnat, booleans.bool, booleans.FALSE].extend(clear_denominators.PosRatSet(clear_denominators.x))" "(bounded_real_defs.bounded_below?)"))) (PosRatSet_glb_posnat 0 (PosRatSet_glb_posnat-1 nil 3599840375 ("" (skeep) (("" (lemma "glb_nat") (("" (inst?) (("1" (assert) (("1" (skosimp*) (("1" (inst + "n!1") (("1" (assert) (("1" (invoke (name "A" "%1") (! 1 2)) (("1" (replace -1) (("1" (case "n!1 > A") (("1" (typepred "A") (("1" (expand "greatest_lower_bound?" -1) (("1" (flatten) (("1" (inst - "n!1") (("1" (assert) (("1" (hide (-1 -2 -3)) (("1" (hide 2) (("1" (expand "greatest_lower_bound?") (("1" (flatten) (("1" (hide -2) (("1" (expand "lower_bound?") (("1" (skosimp*) (("1" (inst - "s!1") (("1" (expand "extend") (("1" (typepred "s!1") (("1" (expand "extend") (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "NOT n!1 < A") (("1" (assert) nil nil) ("2" (hide +) (("2" (expand "greatest_lower_bound?") (("2" (flatten) (("2" (inst - "A") (("2" (assert) (("2" (hide -) (("2" (typepred "A") (("2" (expand "greatest_lower_bound?") (("2" (flatten) (("2" (hide -2) (("2" (expand "lower_bound?") (("2" (skosimp*) (("2" (inst - "s!1") (("2" (hide 2) (("2" (typepred "s!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (split) (("1" (grind) nil nil) ("2" (lemma "PosRatSet_nonempty") (("2" (inst?) (("2" (assert) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (skosimp*) (("2" (inst - "x!1") (("2" (assert) (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak)) (PosRatMeas_TCC1 0 (PosRatMeas_TCC1-1 nil 3599814898 ("" (assert) (("" (skeep) (("" (lemma "PosRatSet_nonempty") (("" (inst - "x") (("" (split +) (("1" (expand "nonempty?") (("1" (expand "empty?") (("1" (skeep) (("1" (inst - "x_1") (("1" (expand "extend") (("1" (expand "member") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "bounded_below?") (("2" (inst + "0") (("2" (expand "lower_bound?") (("2" (skosimp*) (("2" (typepred "s!1") (("2" (expand "extend") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (PosRatMeas subtype "extend[real, posnat, booleans.bool, booleans.FALSE].extend(clear_denominators.PosRatSet(clear_denominators.x))" "(bounded_real_defs.bounded_below?)"))) (PosRatMeas_TCC2 0 (PosRatMeas_TCC2-1 nil 3599814898 ("" (assert) (("" (skeep) (("" (invoke (name "mmp" "%1") (! 1 2 2 1 1)) (("1" (lemma "glb_nat") (("1" (inst - "extend[real, posnat, bool, FALSE](PosRatSet(x))") (("1" (skosimp*) (("1" (case "mmp = n!1") (("1" (assert) (("1" (typepred "mmp") (("1" (expand "greatest_lower_bound?" -1) (("1" (flatten) (("1" (inst - "1/2") (("1" (assert) (("1" (hide 2) (("1" (expand "lower_bound?" 1) (("1" (skosimp*) (("1" (typepred "s!1") (("1" (expand "extend" -1) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "mmp") (("2" (lemma "glb_lem") (("2" (inst - "extend[real, posnat, bool, FALSE](PosRatSet(x))" "n!1") (("2" (assert) (("2" (hide (-1 -3 -4 2)) (("2" (expand "greatest_lower_bound?") (("2" (flatten) (("2" (assert) (("2" (split +) (("1" (hide -2) (("1" (expand "lower_bound?") (("1" (skosimp*) (("1" (inst - "s!1") (("1" (expand "extend") (("1" (expand "restrict") (("1" (typepred "s!1") (("1" (expand "PosRatSet") (("1" (expand "extend") (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (skeep) (("2" (inst - "y") (("2" (assert) (("2" (hide 1) (("2" (expand "lower_bound?") (("2" (skeep) (("2" (inst - "s") (("2" (typepred "s") (("2" (expand "extend") (("2" (expand "restrict") (("2" (grind :exclude "PosRatSet") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (lemma "PosRatSet_nonempty") (("2" (inst?) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (skosimp*) (("2" (inst - "x!1") (("2" (expand "member") (("2" (expand "restrict") (("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (split) (("1" (lemma "PosRatSet_nonempty") (("1" (inst?) (("1" (expand "nonempty?") (("1" (expand "empty?") (("1" (skosimp*) (("1" (inst - "x!1") (("1" (expand "member") (("1" (expand "extend") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "bounded_below?") (("2" (inst + "0") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (PosRatMeas subtype "bounded_real_defs.glb(extend[real, posnat, booleans.bool, booleans.FALSE].extend(clear_denominators.PosRatSet(clear_denominators.x)))" "posnat"))) (PosRatMeas_TCC3 0 (PosRatMeas_TCC3-1 nil 3599840492 ("" (skeep) (("" (lemma "PosRatSet_glb_posnat") (("" (inst - "x") (("" (skosimp*) (("" (replace -3 :dir rl) (("" (replace -2 + :dir rl) (("" (case "FORALL (kk:nat): 10^(kk+1)>=10") (("1" (inst - "pn!1-1") (("1" (assert) nil nil)) nil) ("2" (hide-all-but 1) (("2" (induct "kk") (("1" (grind) nil nil) ("2" (skeep) (("2" (assert) (("2" (expand "^") (("2" (expand "expt" +) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (PosRatMeas subtype "(number_fields.-)(exponentiation.^(10, clear_denominators.mp), 1)" "nat"))) (PosRatMeas_increasing 0 (PosRatMeas_increasing-1 nil 3599838300 ("" (skeep) (("" (expand "PosRatMeas" :assert? none) (("" (name "mpx" "glb(extend[real, posnat, bool, FALSE](PosRatSet(x)))") (("" (replace -1) (("" (name "mpy" "glb(extend[real, posnat, bool, FALSE](PosRatSet(y)))") (("" (replace -1) (("" (lemma "PosRatSet_glb_posnat") (("" (inst-cp - "x") (("" (inst - "y") (("" (skolem - "pny") (("" (skolem - "pnx") (("" (assert) (("" (flatten) (("" (case "mpx < mpy") (("1" (case "10^(mpx) <= 10^mpy-10") (("1" (assert) (("1" (lift-if) (("1" (lift-if) (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (case "10^mpy >= 10* 10^mpx AND 10^mpx >= 10") (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (hide 2) (("2" (case "FORALL (kk:nat): 10^(mpx+1+kk)>=10^(mpx+1)") (("1" (inst - "mpy-mpx-1") (("1" (assert) (("1" (split +) (("1" (expand "^" (-1 1)) (("1" (expand "expt" -1 2) (("1" (propax) nil nil)) nil)) nil) ("2" (case "FORALL (kk:nat): 10^(kk+1)>=10") (("1" (inst - "mpx-1") (("1" (assert) nil nil) ("2" (assert) (("2" (replace -8) (("2" (replace -6 + :dir rl) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (induct "kk") (("1" (grind) nil nil) ("2" (skeep) (("2" (expand "^") (("2" (expand "expt" +) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replaces -6) (("2" (replaces -6) (("2" (replaces -3 :dir rl) (("2" (replaces -4 :dir rl) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (induct "kk") (("1" (assert) nil nil) ("2" (skeep) (("2" (assert) (("2" (expand "^" (-1 1)) (("2" (expand "expt" + 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (replaces -7) (("3" (replace -5 :dir rl) (("3" (assert) nil nil)) nil)) nil) ("4" (replaces -7) (("4" (replace -5 :dir rl) (("4" (assert) nil nil)) nil)) nil) ("5" (replaces -7) (("5" (replace -5 :dir rl) (("5" (assert) nil nil)) nil)) nil) ("6" (replaces -7) (("6" (replace -5 :dir rl) (("6" (assert) nil nil)) nil)) nil) ("7" (replaces -7) (("7" (replace -5 :dir rl) (("7" (assert) nil nil)) nil)) nil) ("8" (replaces -7) (("8" (replace -5 :dir rl) (("8" (assert) nil nil)) nil)) nil) ("9" (replaces -7) (("9" (replace -5 :dir rl) (("9" (assert) nil nil)) nil)) nil)) nil) ("3" (replaces -7) (("3" (replace -5 :dir rl) (("3" (assert) nil nil)) nil)) nil) ("4" (skeep) (("4" (replaces -7) (("4" (replace -5 :dir rl) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (replaces -7) (("3" (replace -5 :dir rl) (("3" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (replaces -6) (("3" (replace -3 :dir rl) (("3" (assert) nil nil)) nil)) nil) ("4" (replaces -6) (("4" (replace -3 :dir rl) (("4" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (assert) (("2" (skolem - "PNN") (("2" (typepred "PNN") (("2" (typepred "mpy") (("2" (expand "greatest_lower_bound?") (("2" (inst - "pny") (("2" (assert) (("2" (flatten) (("2" (typepred "mpx") (("2" (expand "greatest_lower_bound?") (("2" (flatten) (("2" (expand "lower_bound?" -1) (("2" (inst - "PNN") (("1" (assert) nil nil) ("2" (hide-all-but (-5 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak)) (PosRatMeas_glb_minus_posnat_TCC1 0 (PosRatMeas_glb_minus_posnat_TCC1-1 nil 3599903317 ("" (subtype-tcc) nil nil) nil nil (PosRatMeas_glb_minus_posnat subtype "(number_fields.-)(clear_denominators.x, clear_denominators.pn)" "posrat"))) (PosRatMeas_glb_minus_posnat_TCC2 0 (PosRatMeas_glb_minus_posnat_TCC2-1 nil 3599903317 ("" (lemma "PosRatSet_nonempty") (("" (skeep) (("" (inst - "x-pn") (("1" (assert) (("1" (split) (("1" (expand "nonempty?") (("1" (expand "empty?") (("1" (skosimp*) (("1" (inst - "x!1") (("1" (expand "member") (("1" (expand "extend") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "bounded_below?") (("2" (inst + "-1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) nil nil (PosRatMeas_glb_minus_posnat subtype "extend[real, posnat, booleans.bool, booleans.FALSE].extend(clear_denominators.PosRatSet((number_fields.-)(clear_denominators.x, clear_denominators.pn)))" "(bounded_real_defs.bounded_below?)"))) (PosRatMeas_glb_minus_posnat 0 (PosRatMeas_glb_minus_posnat-1 nil 3599903321 ("" (skeep) (("" (invoke (name "mxi" "%1") (! 1 1)) (("1" (invoke (name "mx" "%1") (! 1 2 1)) (("1" (replace -1) (("1" (replace -2) (("1" (lemma "PosRatSet_glb_posnat") (("1" (inst-cp - "x") (("1" (inst - "x-pn") (("1" (skolem - "pxi") (("1" (skolem - "px") (("1" (flatten) (("1" (replace -5) (("1" (replace -6) (("1" (copy -3) (("1" (expand "PosRatSet" -1) (("1" (skeep -1) (("1" (case "mxi <= mx - pn2*pn") (("1" (case "pn2>=1") (("1" (mult-by -1 "pn") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil) ("2" (hide 2) (("2" (typepred "mxi") (("2" (expand "greatest_lower_bound?") (("2" (flatten) (("2" (hide -2) (("2" (expand "lower_bound?") (("2" (inst - "mx - pn2*pn") (("2" (hide 2) (("2" (expand "extend" +) (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (expand "PosRatSet" 1) (("1" (inst + "pn1-pn2*pn" "pn2") (("1" (assert) nil nil) ("2" (assert) (("2" (case "pn1 > pn2*pn") (("1" (assert) nil nil) ("2" (hide 2) (("2" (replace -5) (("2" (cross-mult -) (("2" (cross-mult -) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (replace -4 :dir rl) (("2" (replace -6 :dir rl) (("2" (assert) (("2" (case "px > pn2*pn") (("1" (assert) nil nil) ("2" (hide 2) (("2" (replace -2 +) (("2" (case "pn1 > pn*pn2") (("1" (assert) nil nil) ("2" (hide 2) (("2" (replace -1) (("2" (cross-mult -) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) nil nil)) (compute_posratpair_TCC1 0 (compute_posratpair_TCC1-1 nil 3599821439 ("" (subtype-tcc) nil nil) nil nil (compute_posratpair subtype "floor_ceil.floor(clear_denominators.x)" "posnat"))) (compute_posratpair_TCC2 0 (compute_posratpair_TCC2-1 nil 3599821439 ("" (subtype-tcc) nil nil) nil nil (compute_posratpair subtype "(# num := floor_ceil.floor(clear_denominators.x), den := 1 #)" "{prp | clear_denominators.posratpair_convert(clear_denominators.prp) = clear_denominators.x}"))) (compute_posratpair_TCC3 0 (compute_posratpair_TCC3-1 nil 3599821439 ("" (subtype-tcc) nil nil) nil nil (compute_posratpair subtype "floor_ceil.floor(clear_denominators.x)" "posnat"))) (compute_posratpair_TCC4 0 (compute_posratpair_TCC4-1 nil 3599821439 ("" (subtype-tcc) nil nil) nil nil (compute_posratpair subtype "(number_fields.-)(clear_denominators.x, floor_ceil.floor(clear_denominators.x))" "posrat"))) (compute_posratpair_TCC5 0 (compute_posratpair_TCC5-2 "" 3790098750 ("" (skeep) (("" (expand "PosRatMeas") (("" (assert) (("" (lemma "PosRatMeas_glb_minus_posnat") (("" (inst?) (("" (assert) (("" (name "pnn" "floor(x)") (("" (replace -1) (("" (invoke (name "pe" "%1") (! -2 1)) (("1" (replace -1) (("1" (invoke (name "pz" "%1") (! -3 2 1)) (("1" (replace -1) (("1" (lemma "PosRatSet_glb_posnat") (("1" (inst-cp - "x") (("1" (inst - "x-pnn") (("1" (skolem - "epe") (("1" (skolem - "epz") (("1" (flatten) (("1" (assert) (("1" (lemma "both_sides_expt_gt1_lt_aux") (("1" (inst - "10" "pe-1" "pz-1") (("1" (expand "^" +) (("1" (assert) (("1" (replace -6) (("1" (replace -7) (("1" (replace -3 :dir rl) (("1" (replace -5 :dir rl) (("1" (assert) (("1" (case "EXISTS (k1:nat,k2:nat): expt(10,epe)=k1 AND expt(10,epz)=k2") (("1" (skeep -1) (("1" (assert) (("1" (case "NOT expt(10,epe) = expt(10,epz)-1") (("1" (assert) (("1" (replaces -1) (("1" (replaces -1) (("1" (hide-all-but (-1 +)) (("1" (hide 2) (("1" (case "FORALL (a1,a2:nat): a1<a2 IMPLIES a1=a2-1 OR a1<a2-1") (("1" (inst - "k1" "k2") (("1" (assert) nil nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "NOT divides(10,1)") (("1" (expand "divides" 1) (("1" (expand "expt" -1) (("1" (inst + "expt(10, epz - 1) - expt(10, epe - 1)") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (hide-all-but -1) (("2" (expand "divides") (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "expt(10,epe)" "expt(10,epz)") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (replaces -5) (("2" (replaces -4 :dir rl) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (replaces -6) (("3" (replaces -2 :dir rl) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak (compute_posratpair termination "clear_denominators.compute_posratpair((number_fields.-)(clear_denominators.x, floor_ceil.floor(clear_denominators.x)))" "nil")) (compute_posratpair_TCC5-1 nil 3599821439 ("" (skeep) (("" (expand "PosRatMeas") (("" (assert) (("" (lemma "PosRatMeas_glb_minus_posnat") (("" (inst?) (("" (assert) (("" (name "pnn" "floor(x)") (("" (replace -1) (("" (invoke (name "pe" "%1") (! -2 1)) (("1" (replace -1) (("1" (invoke (name "pz" "%1") (! -3 2 1)) (("1" (replace -1) (("1" (lemma "PosRatSet_glb_posnat") (("1" (inst-cp - "x") (("1" (inst - "x-pnn") (("1" (skolem - "epe") (("1" (skolem - "epz") (("1" (flatten) (("1" (assert) (("1" (lemma "both_sides_expt_gt1_lt_aux") (("1" (inst - "10" "pe-1" "pz-1") (("1" (expand "^" +) (("1" (assert) (("1" (replace -6) (("1" (replace -7) (("1" (replace -3 :dir rl) (("1" (replace -5 :dir rl) (("1" (assert) (("1" (case "EXISTS (k1:nat,k2:nat): expt(10,epe)=k1 AND expt(10,epz)=k2") (("1" (skeep -1) (("1" (assert) (("1" (case "NOT expt(10,epe) = expt(10,epz)-1") (("1" (assert) (("1" (replaces -1) (("1" (replaces -1) (("1" (assert) (("1" (hide-all-but (-1 +)) (("1" (hide 2) (("1" (case "FORALL (a1,a2:nat): a1<a2 IMPLIES a1=a2-1 OR a1<a2-1") (("1" (inst - "k1" "k2") (("1" (assert) nil nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "NOT divides(10,1)") (("1" (expand "divides" 1) (("1" (expand "expt" -1) (("1" (inst + "expt(10, epz - 1) - expt(10, epe - 1)") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (hide-all-but -1) (("2" (expand "divides") (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "expt(10,epe)" "expt(10,epz)") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (replaces -5) (("2" (replaces -4 :dir rl) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (replaces -6) (("3" (replaces -2 :dir rl) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (compute_posratpair termination "clear_denominators.compute_posratpair((number_fields.-)(clear_denominators.x, floor_ceil.floor(clear_denominators.x)))" "nil"))) (compute_posratpair_TCC6 0 (compute_posratpair_TCC6-1 nil 3599821439 ("" (skeep) (("" (typepred "v(x-floor(x))") (("1" (expand "posratpair_convert") (("1" (name "d" "floor(x)") (("1" (replaces -1) (("1" (assert) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) nil nil (compute_posratpair subtype "(clear_denominators.+)((# num := floor_ceil.floor(clear_denominators.x), den := 1 #), clear_denominators.compute_posratpair((number_fields.-)(clear_denominators.x, floor_ceil.floor(clear_denominators.x))))" "{prp | clear_denominators.posratpair_convert(clear_denominators.prp) = clear_denominators.x}"))) (compute_posratpair_TCC7 0 (compute_posratpair_TCC7-1 nil 3599821439 ("" (skeep) (("" (expand "PosRatMeas") (("" (assert) (("" (case "NOT 1/x>=1") (("1" (cross-mult 1) nil nil) ("2" (assert) (("2" (case "PosRatSet(1/x) = PosRatSet(x)") (("1" (assert) nil nil) ("2" (hide 4) (("2" (hide (-1 3)) (("2" (case "FORALL (y): FORALL (N:posnat): PosRatSet(y)(N) IMPLIES PosRatSet(1/y)(N)") (("1" (decompose-equality +) (("1" (iff) (("1" (ground) (("1" (inst - "1/x") (("1" (inst - "x!1") (("1" (assert) nil nil)) nil)) nil) ("2" (inst - "x") (("2" (inst - "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (skeep) (("2" (skeep) (("2" (expand "PosRatSet") (("2" (skeep -) (("2" (inst + "pn2" "pn1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (compute_posratpair termination "clear_denominators.compute_posratpair(number_fields./(1, clear_denominators.x))" "nil"))) (compute_posratpair_TCC8 0 (compute_posratpair_TCC8-1 nil 3599821439 ("" (skeep) (("" (typepred "v(1/x)") (("" (rewrite "posratpair_div" :dir rl) (("" (replaces -1) (("" (expand "posratpair_convert") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (compute_posratpair subtype "clear_denominators./((# num := 1, den := 1 #), clear_denominators.compute_posratpair(number_fields./(1, clear_denominators.x)))" "{prp | clear_denominators.posratpair_convert(clear_denominators.prp) = clear_denominators.x}"))) (rat_poly_to_int_rec_TCC1 0 (rat_poly_to_int_rec_TCC1-1 nil 3599920945 ("" (skeep) (("" (split) (("1" (inst + "1") (("1" (assert) nil nil)) nil) ("2" (assert) (("2" (skeep) (("2" (rewrite "one_divides") nil nil)) nil)) nil)) nil)) nil) nil nil (rat_poly_to_int_rec subtype "(# newpoly := clear_denominators.aq, currgcd := 1 #)" "{ans: [# currgcd: integers.posnat, newpoly: [naturalnumbers.nat -> rationals.rat] #] | booleans.AND(EXISTS (cp: rationals.posrat): FORALL (j: naturalnumbers.nat): ans`newpoly(j) = number_fields.*(cp, clear_denominators.aq(j)), FORALL (j: naturalnumbers.upto(clear_denominators.n)): booleans.AND(integers.integer_pred(ans`newpoly(j)), divides.divides(ans`currgcd, ans`newpoly(j))))}"))) (rat_poly_to_int_rec_TCC2 0 (rat_poly_to_int_rec_TCC2-2 "" 3755375060 ("" (skeep) (("" (assert) (("" (skeep) (("" (assert) (("" (case "NOT thisden*aq(0)/=0") (("1" (assert) nil nil) ("2" (split +) (("1" (flatten) (("1" (case "integer_pred(thisden*aq(0))") (("1" (case "EXISTS (kk:int): thisden*aq(0)=kk") (("1" (skeep -1) (("1" (replaces -1 +) (("1" (grind) nil nil)) nil)) nil) ("2" (inst + "thisden*aq(0)") nil nil)) nil) ("2" (hide 2) (("2" (typepred "compute_posratpair(abs(aq(0)))") (("2" (expand "posratpair_convert") (("2" (replace -3 :dir rl) (("2" (case "aq(0) > 0") (("1" (expand "abs") (("1" (assert) nil nil)) nil) ("2" (expand "abs") (("2" (assert) (("2" (cross-mult -1) (("2" (assert) (("2" (neg-formula -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak (rat_poly_to_int_rec subtype "real_defs.abs(number_fields.*(clear_denominators.thisden, clear_denominators.aq(0)))" "posnat")) (rat_poly_to_int_rec_TCC2-1 nil 3599920945 ("" (skeep) (("" (assert) (("" (skeep) (("" (assert) (("" (case "NOT thisden*aq(0)/=0") (("1" (assert) nil nil) ("2" (split +) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (flatten) (("3" (case "integer_pred(thisden*aq(0))") (("1" (case "EXISTS (kk:int): thisden*aq(0)=kk") (("1" (skeep -1) (("1" (replaces -1 +) (("1" (grind) nil nil)) nil)) nil) ("2" (inst + "thisden*aq(0)") nil nil)) nil) ("2" (hide 2) (("2" (typepred "compute_posratpair(abs(aq(0)))") (("2" (expand "posratpair_convert") (("2" (replace -3 :dir rl) (("2" (case "aq(0) > 0") (("1" (expand "abs") (("1" (assert) nil nil)) nil) ("2" (expand "abs") (("2" (assert) (("2" (cross-mult -1) (("2" (assert) (("2" (neg-formula -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (rat_poly_to_int_rec subtype "real_defs.abs(number_fields.*(clear_denominators.thisden, clear_denominators.aq(0)))" "posnat"))) (rat_poly_to_int_rec_TCC3 0 (rat_poly_to_int_rec_TCC3-2 "" 3790098752 ("" (skeep) (("" (skeep) (("" (assert) (("" (split) (("1" (inst + "thisden") (("1" (skosimp*) nil nil)) nil) ("2" (skeep) (("2" (case "NOT j = 0") (("1" (assert) nil nil) ("2" (replaces -1) (("2" (assert) (("2" (rewrite "abs_mult") (("2" (typepred "compute_posratpair(abs(aq(0)))") (("2" (expand "posratpair_convert") (("2" (replace -3 :dir rl) (("2" (cross-mult -1) (("2" (case "aq(0) > 0") (("1" (expand "abs") (("1" (assert) (("1" (expand "divides") (("1" (inst + "1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (expand "abs") (("2" (assert) (("2" (neg-formula -1) (("2" (assert) (("2" (expand "divides") (("2" (inst + "-1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((abs_nat_rew formula-decl nil abs_rews ints)) shostak (rat_poly_to_int_rec subtype "(# newpoly := (LAMBDA (i: naturalnumbers.nat): number_fields.*(clear_denominators.thisden, clear_denominators.aq(i))), currgcd := real_defs.abs(number_fields.*(clear_denominators.thisden, clear_denominators.aq(0))) #)" "{ans: [# currgcd: integers.posnat, newpoly: [naturalnumbers.nat -> rationals.rat] #] | booleans.AND(EXISTS (cp: rationals.posrat): FORALL (j: naturalnumbers.nat): ans`newpoly(j) = number_fields.*(cp, clear_denominators.aq(j)), FORALL (j: naturalnumbers.upto(clear_denominators.n)): booleans.AND(integers.integer_pred(ans`newpoly(j)), divides.divides(ans`currgcd, ans`newpoly(j))))}")) (rat_poly_to_int_rec_TCC3-1 nil 3599920945 ("" (skeep) (("" (skeep) (("" (assert) (("" (split) (("1" (inst + "thisden") (("1" (skosimp*) nil nil)) nil) ("2" (skeep) (("2" (case "NOT j = 0") (("1" (assert) nil nil) ("2" (replaces -1) (("2" (replaces -1) (("2" (assert) (("2" (rewrite "abs_mult") (("2" (typepred "compute_posratpair(abs(aq(0)))") (("2" (expand "posratpair_convert") (("2" (replace -3 :dir rl) (("2" (cross-mult -1) (("2" (case "aq(0) > 0") (("1" (expand "abs") (("1" (assert) (("1" (expand "divides") (("1" (inst + "1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (expand "abs") (("2" (assert) (("2" (neg-formula -1) (("2" (assert) (("2" (expand "divides") (("2" (inst + "-1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((abs_nat_rew formula-decl nil abs_rews ints)) nil (rat_poly_to_int_rec subtype "(# newpoly := (LAMBDA (i: naturalnumbers.nat): number_fields.*(clear_denominators.thisden, clear_denominators.aq(i))), currgcd := real_defs.abs(number_fields.*(clear_denominators.thisden, clear_denominators.aq(0))) #)" "{ans: [# currgcd: integers.posnat, newpoly: [naturalnumbers.nat -> rationals.rat] #] | booleans.AND(EXISTS (cp: rationals.posrat): FORALL (j: naturalnumbers.nat): ans`newpoly(j) = number_fields.*(cp, clear_denominators.aq(j)), FORALL (j: naturalnumbers.upto(clear_denominators.n)): booleans.AND(integers.integer_pred(ans`newpoly(j)), divides.divides(ans`currgcd, ans`newpoly(j))))}"))) (rat_poly_to_int_rec_TCC4 0 (rat_poly_to_int_rec_TCC4-1 nil 3599920945 ("" (subtype-tcc) nil nil) nil nil (rat_poly_to_int_rec subtype "real_defs.abs(clear_denominators.aq(0))" "posrat"))) (rat_poly_to_int_rec_TCC5 0 (rat_poly_to_int_rec_TCC5-1 nil 3599920945 ("" (subtype-tcc) nil nil) nil nil (rat_poly_to_int_rec subtype "(number_fields.-)(clear_denominators.n, 1)" "nat"))) (rat_poly_to_int_rec_TCC6 0 (rat_poly_to_int_rec_TCC6-1 nil 3599920945 ("" (termination-tcc) nil nil) nil nil (rat_poly_to_int_rec termination "clear_denominators.rat_poly_to_int_rec(clear_denominators.aq, (number_fields.-)(clear_denominators.n, 1))" "nil"))) (rat_poly_to_int_rec_TCC7 0 (rat_poly_to_int_rec_TCC7-2 "" 3804485430 ("" (skeep) (("" (assert) (("" (hide 1) (("" (split) (("1" (typepred "v(aq,n-1)") (("1" (propax) nil nil)) nil) ("2" (skeep) (("2" (typepred "v(aq,n-1)") (("2" (inst -2 "j") (("2" (assert) (("2" (skeep -1) (("2" (inst - "n") (("2" (assert) (("2" (replace -2) (("2" (assert) (("2" (case "n = j") (("1" (replaces -1) (("1" (replace -1) (("1" (rewrite "divides_zero") nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak (rat_poly_to_int_rec subtype "clear_denominators.rat_poly_to_int_rec(clear_denominators.aq, (number_fields.-)(clear_denominators.n, 1))" "{ans: [# currgcd: integers.posnat, newpoly: [naturalnumbers.nat -> rationals.rat] #] | booleans.AND(EXISTS (cp: rationals.posrat): FORALL (j: naturalnumbers.nat): ans`newpoly(j) = number_fields.*(cp, clear_denominators.aq(j)), FORALL (j: naturalnumbers.upto(clear_denominators.n)): booleans.AND(integers.integer_pred(ans`newpoly(j)), divides.divides(ans`currgcd, ans`newpoly(j))))}")) (rat_poly_to_int_rec_TCC7-1 nil 3599920945 ("" (skeep) (("" (assert) (("" (hide 2) (("" (split) (("1" (typepred "v(aq,n-1)") (("1" (propax) nil nil)) nil) ("2" (skeep) (("2" (typepred "v(aq,n-1)") (("2" (inst -2 "j") (("2" (assert) (("2" (skeep -1) (("2" (inst - "n") (("2" (assert) (("2" (replace -2) (("2" (assert) (("2" (case "n = j") (("1" (replaces -1) (("1" (replace -1) (("1" (rewrite "divides_zero") nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (rat_poly_to_int_rec subtype "clear_denominators.rat_poly_to_int_rec(clear_denominators.aq, (number_fields.-)(clear_denominators.n, 1))" "{ans: [# currgcd: integers.posnat, newpoly: [naturalnumbers.nat -> rationals.rat] #] | booleans.AND(EXISTS (cp: rationals.posrat): FORALL (j: naturalnumbers.nat): ans`newpoly(j) = number_fields.*(cp, clear_denominators.aq(j)), FORALL (j: naturalnumbers.upto(clear_denominators.n)): booleans.AND(integers.integer_pred(ans`newpoly(j)), divides.divides(ans`currgcd, ans`newpoly(j))))}"))) (rat_poly_to_int_rec_TCC8 0 (rat_poly_to_int_rec_TCC8-1 nil 3599920945 ("" (subtype-tcc) nil nil) nil nil (rat_poly_to_int_rec subtype "real_defs.abs(clear_denominators.currpoly`newpoly(clear_denominators.n))" "posrat"))) (rat_poly_to_int_rec_TCC9 0 (rat_poly_to_int_rec_TCC9-1 nil 3599920945 ("" (skeep) (("" (assert) (("" (hide 3) (("" (skeep) (("" (skeep) (("" (name "D" "currpoly`newpoly(n)") (("" (replaces -1) (("" (assert) (("" (typepred "compute_posratpair(abs(D))") (("" (expand "posratpair_convert") (("" (replace -3 :dir rl) (("" (cross-mult -1) (("" (case "D > 0") (("1" (expand "abs") (("1" (assert) nil nil)) nil) ("2" (expand "abs") (("2" (assert) (("2" (neg-formula -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (rat_poly_to_int_rec subtype "number_fields.*(clear_denominators.thisden, clear_denominators.currpoly`newpoly(clear_denominators.n))" "int"))) (rat_poly_to_int_rec_TCC10 0 (rat_poly_to_int_rec_TCC10-1 nil 3599920945 ("" (subtype-tcc) nil nil) nil nil (rat_poly_to_int_rec subtype "clear_denominators.currpoly`currgcd" "{jj: integers.int | booleans.=>(number_fields.*(clear_denominators.thisden, clear_denominators.currpoly`newpoly(clear_denominators.n)) = 0, jj /= 0)}"))) (rat_poly_to_int_rec_TCC11 0 (rat_poly_to_int_rec_TCC11-3 "" 3804705885 ("" (skeep) (("" (skeep) (("" (hide 1) (("" (assert) (("" (split) (("1" (typepred "v(aq,n-1)") (("1" (skeep) (("1" (inst + "thisden*cp") (("1" (skeep) (("1" (assert) (("1" (inst - "j") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep) (("2" (assert) (("2" (case "NOT j = n") (("1" (typepred "v(aq,n-1)") (("1" (inst -2 "j") (("1" (flatten) (("1" (assert) (("1" (case "EXISTS (kk:int): v(aq,n-1)`newpoly(j) = kk") (("1" (skeep -1) (("1" (assert) (("1" (replace -1) (("1" (replace -5 :dir rl) (("1" (replace -1) (("1" (assert) (("1" (typepred "compute_gcd(thisden * currpoly`newpoly(n), currpoly`currgcd)") (("1" (hide -1) (("1" (typepred "gcd(thisden * currpoly`newpoly(n), currpoly`currgcd)") (("1" (replace -4) (("1" (invoke (name "ggg" "%1") (! 2 1)) (("1" (replace -1) (("1" (lemma "divides_transitive") (("1" (inst - "kk" "currpoly`currgcd" "ggg") (("1" (assert) (("1" (expand "divides") (("1" (skosimp*) (("1" (inst + "thisden*x!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (name "K" "currpoly`newpoly(n)") (("2" (replace -1) (("2" (typepred "compute_posratpair(abs(K))") (("2" (expand "posratpair_convert") (("2" (replace -8 :dir rl) (("2" (cross-mult -1) (("2" (case "K > 0") (("1" (expand "abs") (("1" (assert) nil nil)) nil) ("2" (expand "abs") (("2" (assert) (("2" (neg-formula -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "v(aq,n-1)`newpoly(j)") nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (replaces -1) (("2" (split) (("1" (name "K" "currpoly`newpoly(n)") (("1" (replace -1) (("1" (typepred "compute_posratpair(abs(K))") (("1" (expand "posratpair_convert") (("1" (replace -4 :dir rl) (("1" (cross-mult -1) (("1" (case "K > 0") (("1" (expand "abs") (("1" (assert) nil nil)) nil) ("2" (expand "abs") (("2" (assert) (("2" (neg-formula -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (name "K" "currpoly`newpoly(n)") (("2" (replace -1) (("2" (assert) (("2" (typepred "compute_gcd(thisden * K, currpoly`currgcd)") (("1" (typepred "gcd(thisden * K, currpoly`currgcd)") (("1" (replace -5) (("1" (propax) nil nil)) nil)) nil) ("2" (assert) (("2" (hide 2) (("2" (typepred "compute_posratpair(abs(K))") (("2" (expand "posratpair_convert") (("2" (replace -4 :dir rl) (("2" (cross-mult -1) (("2" (case "K > 0") (("1" (expand "abs") (("1" (assert) nil nil)) nil) ("2" (expand "abs") (("2" (assert) (("2" (neg-formula -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak (rat_poly_to_int_rec subtype "(# newpoly := (LAMBDA (i: naturalnumbers.nat): number_fields.*(clear_denominators.thisden, (clear_denominators.currpoly`newpoly(i)))), currgcd := gcd.compute_gcd(number_fields.*(clear_denominators.thisden, clear_denominators.currpoly`newpoly(clear_denominators.n)), clear_denominators.currpoly`currgcd) #)" "{ans: [# currgcd: integers.posnat, newpoly: [naturalnumbers.nat -> rationals.rat] #] | booleans.AND(EXISTS (cp: rationals.posrat): FORALL (j: naturalnumbers.nat): ans`newpoly(j) = number_fields.*(cp, clear_denominators.aq(j)), FORALL (j: naturalnumbers.upto(clear_denominators.n)): booleans.AND(integers.integer_pred(ans`newpoly(j)), divides.divides(ans`currgcd, ans`newpoly(j))))}")) (rat_poly_to_int_rec_TCC11-2 "" 3790098755 ("" (skeep) (("" (skeep) (("" (hide 3) (("" (assert) (("" (skeep) (("" (assert) (("" (split) (("1" (typepred "v(aq,n-1)") (("1" (skeep) (("1" (inst + "thisden*cp") (("1" (skeep) (("1" (assert) (("1" (inst - "j") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep) (("2" (assert) (("2" (case "NOT j = n") (("1" (typepred "v(aq,n-1)") (("1" (inst -2 "j") (("1" (flatten) (("1" (assert) (("1" (case "EXISTS (kk:int): v(aq,n-1)`newpoly(j) = kk") (("1" (skeep -1) (("1" (assert) (("1" (replace -1) (("1" (replace -5 :dir rl) (("1" (replace -1) (("1" (assert) (("1" (typepred "compute_gcd(thisden * currpoly`newpoly(n), currpoly`currgcd)") (("1" (hide -1) (("1" (typepred "gcd(thisden * currpoly`newpoly(n), currpoly`currgcd)") (("1" (replace -4) (("1" (invoke (name "ggg" "%1") (! 2 1)) (("1" (replace -1) (("1" (lemma "divides_transitive") (("1" (inst - "kk" "currpoly`currgcd" "ggg") (("1" (assert) (("1" (expand "divides") (("1" (skosimp*) (("1" (inst + "thisden*x!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (name "K" "currpoly`newpoly(n)") (("2" (replace -1) (("2" (typepred "compute_posratpair(abs(K))") (("2" (expand "posratpair_convert") (("2" (replace -8 :dir rl) (("2" (cross-mult -1) (("2" (case "K > 0") (("1" (expand "abs") (("1" (assert) nil nil)) nil) ("2" (expand "abs") (("2" (assert) (("2" (neg-formula -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "v(aq,n-1)`newpoly(j)") nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (replaces -1) (("2" (split) (("1" (name "K" "currpoly`newpoly(n)") (("1" (replace -1) (("1" (typepred "compute_posratpair(abs(K))") (("1" (expand "posratpair_convert") (("1" (replace -4 :dir rl) (("1" (cross-mult -1) (("1" (case "K > 0") (("1" (expand "abs") (("1" (assert) nil nil)) nil) ("2" (expand "abs") (("2" (assert) (("2" (neg-formula -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (name "K" "currpoly`newpoly(n)") (("2" (replace -1) (("2" (assert) (("2" (typepred "compute_gcd(thisden * K, currpoly`currgcd)") (("1" (typepred "gcd(thisden * K, currpoly`currgcd)") (("1" (replace -5) (("1" (propax) nil nil)) nil)) nil) ("2" (assert) (("2" (hide 2) (("2" (typepred "compute_posratpair(abs(K))") (("2" (expand "posratpair_convert") (("2" (replace -4 :dir rl) (("2" (cross-mult -1) (("2" (case "K > 0") (("1" (expand "abs") (("1" (assert) nil nil)) nil) ("2" (expand "abs") (("2" (assert) (("2" (neg-formula -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((rat_times_rat_is_rat application-judgement "rat" rationals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (rat_abs_is_nonneg application-judgement "{r: nonneg_rat | r >= q}" real_defs nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (n skolem-const-decl "nat" clear_denominators nil) (j skolem-const-decl "upto(n)" clear_denominators nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}" gcd ints) (compute_gcd def-decl "{kj: posnat | kj = gcd(i, j)}" gcd ints) (divides_transitive formula-decl nil divides nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (PosRatPair type-eq-decl nil clear_denominators nil) (posratpair_convert const-decl "posrat" clear_denominators nil) (compute_posratpair def-decl "{prp | posratpair_convert(prp) = x}" clear_denominators nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (minus_rat_is_rat application-judgement "rat" rationals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (both_sides_times1_imp formula-decl nil extra_real_props nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (neg_neg formula-decl nil extra_tegies nil) (neg_mult formula-decl nil extra_tegies nil) (mult_neg formula-decl nil extra_tegies nil) (bijective? const-decl "bool" functions nil) (id const-decl "(bijective?[T, T])" identity nil) (TRUE const-decl "bool" booleans nil) (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat" rationals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (div_cancel3 formula-decl nil real_props nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (int_times_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (divides const-decl "bool" divides nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (rat nonempty-type-eq-decl nil rationals nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (posrat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (>= const-decl "bool" reals nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (posrat_times_posrat_is_posrat application-judgement "posrat" rationals nil) (nonneg_int nonempty-type-eq-decl nil integers nil)) shostak (rat_poly_to_int_rec subtype "(# newpoly := (LAMBDA (i: naturalnumbers.nat): number_fields.*(clear_denominators.thisden, (clear_denominators.currpoly`newpoly(i)))), currgcd := gcd.compute_gcd(number_fields.*(clear_denominators.thisden, clear_denominators.currpoly`newpoly(clear_denominators.n)), clear_denominators.currpoly`currgcd) #)" "{ans: [# currgcd: integers.posnat, newpoly: [naturalnumbers.nat -> rationals.rat] #] | booleans.AND(EXISTS (cp: rationals.posrat): FORALL (j: naturalnumbers.nat): ans`newpoly(j) = number_fields.*(cp, clear_denominators.aq(j)), FORALL (j: naturalnumbers.upto(clear_denominators.n)): booleans.AND(integers.integer_pred(ans`newpoly(j)), divides.divides(ans`currgcd, ans`newpoly(j))))}")) (rat_poly_to_int_rec_TCC11-1 nil 3599920945 ("" (skeep) (("" (skeep) (("" (hide 3) (("" (assert) (("" (skeep) (("" (assert) (("" (split) (("1" (typepred "v(aq,n-1)") (("1" (skeep) (("1" (inst + "thisden*cp") (("1" (skeep) (("1" (assert) (("1" (inst - "j") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep) (("2" (assert) (("2" (case "NOT j = n") (("1" (typepred "v(aq,n-1)") (("1" (inst -2 "j") (("1" (flatten) (("1" (assert) (("1" (case "EXISTS (kk:int): v(aq,n-1)`newpoly(j) = kk") (("1" (skeep -1) (("1" (assert) (("1" (replace -1) (("1" (replace -5 :dir rl) (("1" (replace -1) (("1" (assert) (("1" (typepred "compute_gcd(thisden * currpoly`newpoly(n), currpoly`currgcd)") (("1" (hide -1) (("1" (typepred "gcd(thisden * currpoly`newpoly(n), currpoly`currgcd)") (("1" (replace -4) (("1" (invoke (name "ggg" "%1") (! 2 1)) (("1" (replace -1) (("1" (lemma "divides_transitive") (("1" (inst - "kk" "currpoly`currgcd" "ggg") (("1" (assert) (("1" (expand "divides") (("1" (skosimp*) (("1" (inst + "thisden*x!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (name "K" "currpoly`newpoly(n)") (("2" (replace -1) (("2" (typepred "compute_posratpair(abs(K))") (("2" (expand "posratpair_convert") (("2" (replace -8 :dir rl) (("2" (cross-mult -1) (("2" (case "K > 0") (("1" (expand "abs") (("1" (assert) nil nil)) nil) ("2" (expand "abs") (("2" (assert) (("2" (neg-formula -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "v(aq,n-1)`newpoly(j)") nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (replaces -1) (("2" (assert) (("2" (split) (("1" (name "K" "currpoly`newpoly(n)") (("1" (replace -1) (("1" (typepred "compute_posratpair(abs(K))") (("1" (expand "posratpair_convert") (("1" (replace -4 :dir rl) (("1" (cross-mult -1) (("1" (case "K > 0") (("1" (expand "abs") (("1" (assert) nil nil)) nil) ("2" (expand "abs") (("2" (assert) (("2" (neg-formula -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (name "K" "currpoly`newpoly(n)") (("2" (replace -1) (("2" (assert) (("2" (typepred "compute_gcd(thisden * K, currpoly`currgcd)") (("1" (typepred "gcd(thisden * K, currpoly`currgcd)") (("1" (replace -5) (("1" (propax) nil nil)) nil)) nil) ("2" (assert) (("2" (hide 2) (("2" (typepred "compute_posratpair(abs(K))") (("2" (expand "posratpair_convert") (("2" (replace -4 :dir rl) (("2" (cross-mult -1) (("2" (case "K > 0") (("1" (expand "abs") (("1" (assert) nil nil)) nil) ("2" (expand "abs") (("2" (assert) (("2" (neg-formula -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}" gcd ints) (compute_gcd def-decl "{kj: posnat | kj = gcd(i, j)}" gcd ints)) nil (rat_poly_to_int_rec subtype "(# newpoly := (LAMBDA (i: naturalnumbers.nat): number_fields.*(clear_denominators.thisden, (clear_denominators.currpoly`newpoly(i)))), currgcd := gcd.compute_gcd(number_fields.*(clear_denominators.thisden, clear_denominators.currpoly`newpoly(clear_denominators.n)), clear_denominators.currpoly`currgcd) #)" "{ans: [# currgcd: integers.posnat, newpoly: [naturalnumbers.nat -> rationals.rat] #] | booleans.AND(EXISTS (cp: rationals.posrat): FORALL (j: naturalnumbers.nat): ans`newpoly(j) = number_fields.*(cp, clear_denominators.aq(j)), FORALL (j: naturalnumbers.upto(clear_denominators.n)): booleans.AND(integers.integer_pred(ans`newpoly(j)), divides.divides(ans`currgcd, ans`newpoly(j))))}"))) (rat_poly_to_int_rec_TCC12 0 (rat_poly_to_int_rec_TCC12-1 nil 3599920945 ("" (subtype-tcc) nil nil) nil nil (rat_poly_to_int_rec subtype "(number_fields.-)(clear_denominators.n, 1)" "nat"))) (rat_poly_to_int_rec_TCC13 0 (rat_poly_to_int_rec_TCC13-1 nil 3599920945 ("" (termination-tcc) nil nil) nil nil (rat_poly_to_int_rec termination "clear_denominators.rat_poly_to_int_rec(clear_denominators.aq, (number_fields.-)(clear_denominators.n, 1))" "nil"))) (rat_poly_to_int_TCC1 0 (rat_poly_to_int_TCC1-1 nil 3599920402 ("" (subtype-tcc) nil nil) nil nil (rat_poly_to_int subtype "number_fields./(clear_denominators.ppoly(clear_denominators.i), clear_denominators.mgcd)" "int"))) (rat_poly_to_int_TCC2 0 (rat_poly_to_int_TCC2-2 "" 3790098755 ("" (skeep) (("" (skeep) (("" (skeep) (("" (typepred "rptir") (("" (skeep -1) (("" (inst + "cp/mgcd") (("" (skeep) (("" (inst - "j") (("" (lift-if) (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak (rat_poly_to_int subtype "(LAMBDA (i: naturalnumbers.nat): IF reals.<=(i, clear_denominators.n) THEN number_fields./(clear_denominators.ppoly(i), clear_denominators.mgcd) ELSE 0 ENDIF)" "{ai: [naturalnumbers.nat -> integers.int] | EXISTS (cp: rationals.posrat): FORALL (j: naturalnumbers.upto(clear_denominators.n)): ai(j) = number_fields.*(cp, clear_denominators.aq(j))}")) (rat_poly_to_int_TCC2-1 nil 3599920402 ("" (skeep) (("" (skeep) (("" (skeep) (("" (typepred "rptir") (("" (skeep -1) (("" (inst + "cp/mgcd") (("1" (skeep) (("1" (inst - "j") (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (replace -5 :dir rl) (("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (rat_poly_to_int subtype "(LAMBDA (i: naturalnumbers.nat): IF reals.<=(i, clear_denominators.n) THEN number_fields./(clear_denominators.ppoly(i), clear_denominators.mgcd) ELSE 0 ENDIF)" "{ai: [naturalnumbers.nat -> integers.int] | EXISTS (cp: rationals.posrat): FORALL (j: naturalnumbers.upto(clear_denominators.n)): ai(j) = number_fields.*(cp, clear_denominators.aq(j))}"))))

(ramsey_graph
 (IncSub_ge 0
  (IncSub_ge-1 nil 3652087423
   ("" (induct "i")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst - "J")
          (("2" (typepred "J")
            (("2" (inst - "j" "j+1") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (IncSub type-eq-decl nil ramsey_graph nil) (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (BSet_unique 0
  (BSet_unique-1 nil 3652004237
   ("" (induct "K")
    (("1" (skeep)
      (("1" (assert)
        (("1" (typepred "c")
          (("1" (typepred "q")
            (("1" (assert)
              (("1" (case "P(0)")
                (("1" (case "q`D = 0")
                  (("1" (inst -6 "0")
                    (("1" (skosimp*) (("1" (assert) nil nil)) nil)
                     ("2" (expand "SatSet" 1) (("2" (propax) nil nil)) nil))
                    nil)
                   ("2" (case "c`D = 0")
                    (("1" (inst -10 "0")
                      (("1" (skosimp*) (("1" (assert) nil nil)) nil)
                       ("2" (expand "SatSet" 1) (("2" (propax) nil nil)) nil))
                      nil)
                     ("2" (assert)
                      (("2" (inst - "0")
                        (("2" (inst -7 "0")
                          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (case "q`D = 1")
                    (("1" (inst - "0")
                      (("1" (assert) (("1" (ground) nil nil)) nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (case "c`D = 1")
                      (("1" (inst -7 "0")
                        (("1" (ground) nil nil) ("2" (assert) nil nil)) nil)
                       ("2" (assert) (("2" (skosimp*) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 "K")
      (("2" (flatten)
        (("2" (skeep)
          (("2" (case "NOT P(K+1)")
            (("1" (inst - "P" "c" "q")
              (("1" (assert)
                (("1" (typepred "q")
                  (("1" (assert)
                    (("1" (lemma "injection_n_to_m")
                      (("1" (inst - "1+K" "q`D")
                        (("1" (split -)
                          (("1" (assert)
                            (("1" (splash 1)
                              (("1" (replace -1)
                                (("1" (replace -2) (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2" (skeep)
                                (("2" (inst -7 "u")
                                  (("2" (assert)
                                    (("2" (typepred "u")
                                      (("2"
                                        (expand "SatSet" (-2 1))
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (skeep)
                                (("3" (inst - "i")
                                  (("3" (flatten) (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (inst + "LAMBDA (j:below(q`D)): q`F(j)")
                              (("1" (expand "injective?" 1)
                                (("1" (skeep)
                                  (("1" (case "x1 < x2")
                                    (("1" (inst - "x1" "x2")
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (inst - "x2" "x1")
                                      (("2" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skeep)
                                (("2" (inst - "j")
                                  (("2" (flatten) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (typepred "c")
                  (("2" (assert)
                    (("2" (lemma "injection_n_to_m")
                      (("2" (inst - "1+K" "c`D")
                        (("2" (split -)
                          (("1" (assert)
                            (("1" (splash 1)
                              (("1" (replace -1)
                                (("1" (replace -2) (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2" (skeep)
                                (("2" (inst -7 "u")
                                  (("2" (assert)
                                    (("2" (typepred "u")
                                      (("2"
                                        (expand "SatSet" (-2 1))
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (skeep)
                                (("3" (inst - "i")
                                  (("3" (flatten) (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (inst + "LAMBDA (j:below(c`D)): c`F(j)")
                              (("1" (expand "injective?" 1)
                                (("1" (skeep)
                                  (("1" (case "x1 < x2")
                                    (("1" (inst - "x1" "x2")
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (inst - "x2" "x1")
                                      (("2" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skeep)
                                (("2" (inst - "j")
                                  (("2" (flatten) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "NOT (c`D>0 AND q`D>0)")
              (("1" (typepred "c")
                (("1" (inst -4 "K+1")
                  (("1" (skosimp*)
                    (("1" (assert)
                      (("1" (typepred "q")
                        (("1" (inst -4 "K+1")
                          (("1" (skosimp*) nil nil)
                           ("2" (expand "SatSet" 1) (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "SatSet" 1) (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (case "NOT (c`F(c`D-1) = K+1 AND q`F(q`D-1) = K+1)")
                    (("1" (split +)
                      (("1" (typepred "c")
                        (("1" (inst -4 "K+1")
                          (("1" (skosimp*)
                            (("1" (inst - "i!1" "c`D-1")
                              (("1" (assert)
                                (("1" (inst - "c`D-1")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "SatSet" 1) (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "q")
                        (("2" (inst -4 "K+1")
                          (("1" (skosimp*)
                            (("1" (inst - "i!1" "q`D-1")
                              (("1" (assert)
                                (("1" (inst - "q`D-1")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "SatSet" 1) (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (name "cc" "(# D:=c`D-1,F:=c`F #)")
                          (("2" (name "qq" "(# D:=q`D-1,F:=q`F #)")
                            (("2" (inst - "P" "cc" "qq")
                              (("1" (assert)
                                (("1" (flatten)
                                  (("1" (assert)
                                    (("1" (skeep)
                                      (("1"
                                        (inst - "i")
                                        (("1"
                                          (case "NOT cc`F(i)=qq`F(i)")
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (expand "cc" -1)
                                            (("2"
                                              (expand "qq" -1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "NOT c`D = q`D")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert)
                                (("2" (hide (-1 -2 -3 2))
                                  (("2" (typepred "q")
                                    (("2" (split)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (typepred "i")
                                          (("1"
                                            (expand "qq" -1)
                                            (("1"
                                              (inst - "i" "q`D-1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst - "i")
                                                    (("1"
                                                      (expand "qq" +)
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "qq" 1)
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (skeep)
                                        (("3"
                                          (inst -4 "u")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst + "i!1")
                                              (("1"
                                                (expand "qq" 1)
                                                (("1" (propax) nil nil))
                                                nil)
                                               ("2"
                                                (typepred "i!1")
                                                (("2"
                                                  (expand "qq" 1)
                                                  (("2"
                                                    (inst - "q`D-1" "i!1")
                                                    (("2" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "SatSet" 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (typepred "u")
                                                (("2"
                                                  (expand "SatSet" -2)
                                                  (("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (assert)
                                (("3" (hide (-1 -2 2))
                                  (("3" (typepred "c")
                                    (("3" (split)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (typepred "i")
                                          (("1"
                                            (expand "cc" -1)
                                            (("1"
                                              (inst - "i" "c`D-1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst - "i")
                                                    (("1"
                                                      (expand "cc" +)
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "cc" 1)
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (skeep)
                                        (("3"
                                          (inst -4 "u")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst + "i!1")
                                              (("1"
                                                (expand "cc" 1)
                                                (("1" (propax) nil nil))
                                                nil)
                                               ("2"
                                                (typepred "i!1")
                                                (("2"
                                                  (expand "cc" 1)
                                                  (("2"
                                                    (inst - "c`D-1" "i!1")
                                                    (("2" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "SatSet" 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (typepred "u")
                                                (("2"
                                                  (expand "SatSet" -2)
                                                  (("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cc skolem-const-decl "[# D: int, F: [nat -> nat] #]" ramsey_graph nil)
    (qq skolem-const-decl "[# D: int, F: [nat -> nat] #]" ramsey_graph nil)
    (i skolem-const-decl "below[c`D]" ramsey_graph nil)
    (u skolem-const-decl "(SatSet(P, K))" ramsey_graph nil)
    (i!1 skolem-const-decl "below[q`D]" ramsey_graph nil)
    (u skolem-const-decl "(SatSet(P, K))" ramsey_graph nil)
    (i!1 skolem-const-decl "below[c`D]" ramsey_graph nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (K skolem-const-decl "nat" ramsey_graph nil)
    (P skolem-const-decl "pred[nat]" ramsey_graph nil)
    (c skolem-const-decl "BSet(P, 1 + K)" ramsey_graph nil)
    (q skolem-const-decl "BSet(P, 1 + K)" ramsey_graph nil)
    (injection_n_to_m formula-decl nil nat_fun_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (u skolem-const-decl "(SatSet(P, K))" ramsey_graph nil)
    (below type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (u skolem-const-decl "(SatSet(P, K))" ramsey_graph nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (c skolem-const-decl "BSet(P, 0)" ramsey_graph nil)
    (q skolem-const-decl "BSet(P, 0)" ramsey_graph nil)
    (P skolem-const-decl "pred[nat]" ramsey_graph nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (BSet type-eq-decl nil ramsey_graph nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SatSet const-decl "set[upto[K]]" ramsey_graph nil)
    (set type-eq-decl nil sets nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (BSet_nonempty 0
  (BSet_nonempty-1 nil 3652004283
   ("" (induct "K")
    (("1" (skeep)
      (("1" (case "P(0)")
        (("1" (inst + "(# D:=1,F:=(LAMBDA (i:nat): i) #)")
          (("1" (split)
            (("1" (assert) nil nil) ("2" (grind) nil nil)
             ("3" (skeep) (("3" (inst + "0") nil nil)) nil))
            nil))
          nil)
         ("2" (inst + "(# D:=0,F:=(LAMBDA (i:nat): i) #)")
          (("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 "K")
      (("2" (flatten)
        (("2" (skeep)
          (("2" (inst - "P")
            (("2" (skeep)
              (("2" (typepred "c")
                (("2" (case "P(1+K)")
                  (("1"
                    (name "cc"
                          "(# D:=c`D+1,F:=(LAMBDA (i:nat): IF i<c`D THEN c`F(i) ELSIF i=c`D THEN K+1 ELSE K+i+10 ENDIF) #)")
                    (("1" (inst + "cc")
                      (("1" (hide -1)
                        (("1" (split +)
                          (("1" (expand "cc" 1) (("1" (assert) nil nil)) nil)
                           ("2" (skeep)
                            (("2" (typepred "i")
                              (("2" (expand "cc" -1)
                                (("2" (case "i = c`D")
                                  (("1" (replaces -1)
                                    (("1" (expand "cc" 1)
                                      (("1" (propax) nil nil)) nil))
                                    nil)
                                   ("2" (inst - "i")
                                    (("1" (flatten)
                                      (("1"
                                        (expand "cc" +)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (expand "cc" +)
                              (("3" (lift-if)
                                (("3" (assert)
                                  (("3" (lift-if)
                                    (("3" (ground)
                                      (("1"
                                        (inst - "i" "j")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (inst - "i")
                                        (("2" (assert) nil nil))
                                        nil)
                                       ("3"
                                        (inst - "i")
                                        (("3"
                                          (flatten)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (skeep)
                            (("4" (case "u = 1+K")
                              (("1" (inst + "c`D")
                                (("1" (expand "cc" 1) (("1" (assert) nil nil))
                                  nil)
                                 ("2" (expand "cc" 1) (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2" (inst -5 "u")
                                (("1" (skeep)
                                  (("1" (inst + "i")
                                    (("1" (expand "cc" 2)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (expand "cc" 1)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (assert)
                                  (("2" (typepred "u")
                                    (("2" (expand "SatSet")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (name "cc"
                          "(# D:=c`D,F:=(LAMBDA (i:nat): IF i<c`D THEN c`F(i)  ELSE K+i+10 ENDIF) #)")
                    (("2" (hide -1)
                      (("2" (inst + "cc")
                        (("2" (split +)
                          (("1" (expand "cc" 1) (("1" (assert) nil nil)) nil)
                           ("2" (skeep)
                            (("2" (inst - "i")
                              (("1" (flatten)
                                (("1" (expand "cc" 1)
                                  (("1" (assert)
                                    (("1" (typepred "i")
                                      (("1"
                                        (expand "cc" -1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (typepred "i")
                                (("2" (expand "cc" -1)
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (inst - "i" "j")
                              (("3" (assert)
                                (("3" (expand "cc" 1)
                                  (("3" (typepred "j")
                                    (("3" (lift-if)
                                      (("3"
                                        (lift-if)
                                        (("3"
                                          (lift-if)
                                          (("3"
                                            (ground)
                                            (("3"
                                              (inst - "i")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (skeep)
                            (("4" (inst -4 "u")
                              (("1" (skosimp*)
                                (("1" (inst + "i!1")
                                  (("1" (expand "cc" 1)
                                    (("1" (propax) nil nil)) nil)
                                   ("2" (expand "cc" 1)
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (assert)
                                (("2" (typepred "u")
                                  (("2" (expand "SatSet")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (cc skolem-const-decl "[# D: posint, F: [nat -> nat] #]" ramsey_graph nil)
    (K skolem-const-decl "nat" ramsey_graph nil)
    (P skolem-const-decl "pred[nat]" ramsey_graph nil)
    (c skolem-const-decl "BSet(P, K)" ramsey_graph nil)
    (i skolem-const-decl "below[cc`D]" ramsey_graph nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i skolem-const-decl "below[c`D]" ramsey_graph nil)
    (u skolem-const-decl "(SatSet(P, K + 1))" ramsey_graph nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (i skolem-const-decl "below[cc`D]" ramsey_graph nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (u skolem-const-decl "(SatSet(P, K + 1))" ramsey_graph nil)
    (i!1 skolem-const-decl "below[c`D]" ramsey_graph nil)
    (cc skolem-const-decl "[# D: nat, F: [nat -> nat] #]" ramsey_graph nil)
    (FALSE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (P skolem-const-decl "pred[nat]" ramsey_graph nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (BSet type-eq-decl nil ramsey_graph nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SatSet const-decl "set[upto[K]]" ramsey_graph nil)
    (set type-eq-decl nil sets nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (BSet_sequence 0
  (BSet_sequence-2 nil 3652024176
   (""
    (case "FORALL (m:nat): FORALL (K: nat, P: pred[nat], Q: nat):
                      K <= Q IMPLIES
                       (FORALL (c: BSet(P, K), q: BSet(P, Q)):
                          (FORALL (i:nat):i<=m AND i<c`D IMPLIES (i < q`D AND c`F(i) = q`F(i))))")
    (("1" (skeep*)
      (("1" (inst - "c`D")
        (("1" (inst - "K" "P" "Q")
          (("1" (assert)
            (("1" (inst - "c" "q")
              (("1" (assert)
                (("1" (split +)
                  (("1" (inst - "c`D-1")
                    (("1" (ground) nil nil) ("2" (assert) nil nil)) nil)
                   ("2" (skeep)
                    (("2" (inst - "i") (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "m")
        (("1" (skeep*)
          (("1" (case "NOT i = 0")
            (("1" (assert) nil nil)
             ("2" (replace -1)
              (("2" (assert)
                (("2" (typepred "c")
                  (("2" (inst - "0")
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (typepred "q")
                          (("2" (inst -4 "c`F(0)")
                            (("1" (assert)
                              (("1" (skosimp*)
                                (("1" (assert)
                                  (("1" (inst - "0")
                                    (("1" (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst - "0" "i!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst -10 "q`F(0)")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst - "0" "i!2")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "SatSet" 1)
                                                (("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "SatSet" 1) (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem 1 "m")
          (("2" (flatten)
            (("2" (skeep*)
              (("2" (case "NOT i = m+1")
                (("1" (assert)
                  (("1" (inst - "K" "P" "Q")
                    (("1" (assert)
                      (("1" (insteep -)
                        (("1" (insteep -) (("1" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -4)
                  (("2" (replaces -1)
                    (("2" (assert)
                      (("2" (typepred "q")
                        (("2" (typepred "c")
                          (("2" (inst -8 "c`F(1+m)")
                            (("1" (skosimp*)
                              (("1" (assert)
                                (("1" (case "i!1 < 1+m")
                                  (("1" (inst - "i!1" "1+m")
                                    (("1" (assert)
                                      (("1"
                                        (inst - "K" "P" "Q")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -10 "c" "q")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -10 "i!1")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (case "i!1 > 1+m")
                                    (("1" (hide 1)
                                      (("1"
                                        (copy -10)
                                        (("1"
                                          (insteep -)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (insteep -)
                                              (("1"
                                                (inst - "m")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (copy -9)
                                                    (("1"
                                                      (inst-cp - "1+m" "i!1")
                                                      (("1"
                                                        (inst - "m" "1+m")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -8
                                                             "q`F(1+m)")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -8
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -12)
                                                                      (("1"
                                                                        (inst-cp
                                                                         -
                                                                         "i!2"
                                                                         "m")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "m+1"
                                                                             "i!2")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "SatSet"
                                                               1)
                                                              (("2"
                                                                (inst-cp
                                                                 -
                                                                 "1+m")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst
                                                                       -11
                                                                       "1+m")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "SatSet" 1)
                              (("2" (inst - "1+m") (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((q skolem-const-decl "BSet(P, Q)" ramsey_graph nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (Q skolem-const-decl "nat" ramsey_graph nil)
    (m skolem-const-decl "nat" ramsey_graph nil)
    (c skolem-const-decl "BSet(P, K)" ramsey_graph nil)
    (P skolem-const-decl "pred[nat]" ramsey_graph nil)
    (K skolem-const-decl "nat" ramsey_graph nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (q skolem-const-decl "BSet(P, Q)" ramsey_graph nil)
    (c skolem-const-decl "BSet(P, K)" ramsey_graph nil)
    (K skolem-const-decl "nat" ramsey_graph nil)
    (Q skolem-const-decl "nat" ramsey_graph nil)
    (P skolem-const-decl "pred[nat]" ramsey_graph nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (K skolem-const-decl "nat" ramsey_graph nil)
    (P skolem-const-decl "pred[nat]" ramsey_graph nil)
    (c skolem-const-decl "BSet(P, K)" ramsey_graph nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (set type-eq-decl nil sets nil)
    (SatSet const-decl "set[upto[K]]" ramsey_graph nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (BSet type-eq-decl nil ramsey_graph nil))
   nil)
  (BSet_sequence-1 nil 3652015598
   (""
    (case "NOT FORALL (K,P): FORALL (c:BSet(P,K),i:nat): i<c`D AND  c`D>0 IMPLIES i<=c`F(i)")
    (("1" (hide 2)
      (("1" (skeep)
        (("1" (induct "i")
          (("1" (grind) nil nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (insteep -)
                (("2" (assert)
                  (("2" (typepred "c")
                    (("2" (inst - "j" "1+j") (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (label "hyp1" -1)
      (("2" (hide "hyp1")
        (("2"
          (case "NOT FORALL (m:nat): FORALL (K,P): FORALL (c:BSet(P,K)): c`D<=m+1 AND c`D>0 IMPLIES c`D<=1+c`F(c`D-1)")
          (("1" (hide 2)
            (("1" (induct "m")
              (("1" (skeep*) (("1" (assert) nil nil)) nil)
               ("2" (skolem 1 "m")
                (("2" (flatten)
                  (("2" (skeep)
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (case "NOT c`D = 2+m")
                          (("1" (inst - "K" "P")
                            (("1" (inst - "c") (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (replace -1)
                            (("2" (assert)
                              (("2" (inst - "c`F(m)" "P")
                                (("2" (name "cc" "(# D:=1+m,F:=c`F #)")
                                  (("2" (inst - "cc")
                                    (("1" (assert)
                                      (("1"
                                        (expand "cc" -3)
                                        (("1"
                                          (typepred "c")
                                          (("1"
                                            (inst - "m" "1+m")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (case "NOT cc`D <= 1 + c`F(m)")
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (expand "cc" 1)
                                          (("1"
                                            (reveal "hyp1")
                                            (("1"
                                              (insteep -)
                                              (("1"
                                                (inst - "c" "m")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (typepred "c")
                                          (("2"
                                            (split +)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (typepred "i")
                                                (("1"
                                                  (expand "cc" -1)
                                                  (("1"
                                                    (expand "cc" 1)
                                                    (("1"
                                                      (split +)
                                                      (("1"
                                                        (inst - "i" "m")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst - "i")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "cc" 1)
                                              (("2" (propax) nil nil))
                                              nil)
                                             ("3"
                                              (skeep)
                                              (("3"
                                                (expand "cc" 1)
                                                (("3"
                                                  (inst -4 "u")
                                                  (("1"
                                                    (typepred "u")
                                                    (("1"
                                                      (inst-cp + "m")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (typepred "i!1")
                                                            (("1"
                                                              (inst + "i!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "NOT i!1 = 1+m")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (typepred
                                                                       "c")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "m"
                                                                         "1+m")
                                                                        (("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred "u")
                                                      (("2"
                                                        (expand "SatSet" 1)
                                                        (("2"
                                                          (expand "SatSet" -2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst - "m")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep) (("3" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (label "hyp2" -1)
            (("2" (hide "hyp2")
              (("2" (skeep)
                (("2" (skeep)
                  (("2" (lemma "BSet_unique")
                    (("2" (name "qq" "(# D:=c`D,F:=q`F #)")
                      (("2" (inst - "K" "P" "c" "qq")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "qq" -3)
                              (("1" (replace -3)
                                (("1" (assert)
                                  (("1" (typepred "q")
                                    (("1" (inst -4 "c`F(c`D-1)")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (typepred "i")
                                          (("1"
                                            (inst -8 "c`D-1")
                                            (("1"
                                              (replace -8)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case "i<c`D-1")
                                                  (("1"
                                                    (inst - "i" "c`D-1")
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2"
                                                    (case "i > c`D-1")
                                                    (("1"
                                                      (inst - "c`D-1" "i")
                                                      (("1" (assert) nil nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "c")
                                        (("2"
                                          (inst - "c`D-1")
                                          (("2"
                                            (expand "SatSet" 1)
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "qq" 1)
                          (("2" (assert) (("2" (postpone) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (enum_natset 0
  (enum_natset-1 nil 3651927515
   ("" (skeep)
    (("" (name "F" "LAMBDA (K:nat): choose({c:BSet(P,K)|TRUE})")
      (("1" (case "NOT FORALL (M:nat): EXISTS (j:nat): F(j)`D>=M")
        (("1" (induct "M")
          (("1" (inst + "0") (("1" (assert) nil nil)) nil)
           ("2" (skolem 1 "M")
            (("2" (flatten)
              (("2" (skeep)
                (("2" (case "NOT F(j)`D = M")
                  (("1" (inst + "j") (("1" (assert) nil nil)) nil)
                   ("2" (hide -2)
                    (("2" (case "M = 0")
                      (("1" (replace -1)
                        (("1" (assert)
                          (("1" (inst 2 "10")
                            (("1" (skosimp*)
                              (("1" (inst + "i!1+10")
                                (("1" (typepred "F(i!1+10)")
                                  (("1" (inst -4 "i!1")
                                    (("1" (skosimp*) (("1" (assert) nil nil))
                                      nil)
                                     ("2" (expand "SatSet" 1)
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst 3 "F(j)`F(M-1)+1")
                        (("1" (skosimp*)
                          (("1" (inst 2 "i!1+10")
                            (("1" (typepred "F(i!1+10)")
                              (("1" (inst -4 "i!1")
                                (("1" (skolem -4 "aa")
                                  (("1" (case "aa>=M")
                                    (("1" (assert) nil nil)
                                     ("2" (case "NOT j < i!1+10")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "BSet_sequence")
                                          (("1"
                                            (inst - "10+i!1" "P" "j")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst - "F(10+i!1)" "F(j)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst - "aa")
                                                    (("1"
                                                      (replace -5 -1)
                                                      (("1"
                                                        (replace -1 -8)
                                                        (("1"
                                                          (typepred "F(j)")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "aa"
                                                             "M-1")
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "BSet_sequence")
                                        (("2"
                                          (inst - "j" "P" "i!1+10")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst - "F(j)" "F(i!1+10)")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst - "M-1")
                                                    (("2"
                                                      (replace -2)
                                                      (("2"
                                                        (inst - "aa" "M-1")
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "SatSet" 1)
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (name "II" "LAMBDA (M:nat): choose({j:nat|F(j)`D>=M})")
          (("1" (name "JJ" "LAMBDA (i:nat): F(II(i+1))`F(i)")
            (("1" (hide 1)
              (("1" (inst 1 "JJ")
                (("1" (skeep)
                  (("1" (split +)
                    (("1" (flatten)
                      (("1" (typepred "II(i+1)")
                        (("1" (typepred "F(II(i+1))")
                          (("1" (inst -4 "i")
                            (("1" (skosimp*)
                              (("1" (inst + "i!1")
                                (("1" (expand "JJ" 1)
                                  (("1" (assert)
                                    (("1" (typepred "i!1")
                                      (("1"
                                        (case
                                         "F(II(1+i!1))`F(i!1) = F(II(1+i))`F(i!1)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (case "II(1+i!1) < II(1+i)")
                                            (("1"
                                              (lemma "BSet_sequence")
                                              (("1"
                                                (inst
                                                 -
                                                 "II(1+i!1)"
                                                 "P"
                                                 "II(1+i)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -
                                                     "F(II(1+i!1))"
                                                     "F(II(1+i))")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst - "i!1")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "BSet_sequence")
                                              (("2"
                                                (inst
                                                 -
                                                 "II(1+i)"
                                                 "P"
                                                 "II(1+i!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -
                                                     "F(II(1+i))"
                                                     "F(II(1+i!1))")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst - "i!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2" (expand "SatSet" 1)
                                (("2" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (skeep -)
                        (("2" (expand "JJ" -1)
                          (("2" (typepred "F(II(1+j))")
                            (("2" (inst - "j")
                              (("1" (ground) nil nil) ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (skeep)
                    (("2" (expand "JJ" +)
                      (("2" (case "II(1+i)<=II(1+j)")
                        (("1" (lemma "BSet_sequence")
                          (("1" (inst - "II(1+i)" "P" "II(1+j)")
                            (("1" (assert)
                              (("1" (inst - "F(II(1+i))" "F(II(1+j))")
                                (("1" (flatten)
                                  (("1" (inst - "i")
                                    (("1" (replaces -2)
                                      (("1"
                                        (typepred "F(II(1+j))")
                                        (("1"
                                          (inst - "i" "j")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "BSet_sequence")
                          (("2" (inst - "II(1+j)" "P" "II(1+i)")
                            (("2" (assert)
                              (("2" (inst - "F(II(1+j))" "F(II(1+i))")
                                (("2" (flatten)
                                  (("2" (inst - "j")
                                    (("2" (replaces -2)
                                      (("2"
                                        (typepred "F(II(1+i))")
                                        (("2"
                                          (inst - "i" "j")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide (2 3))
            (("2" (skeep)
              (("2" (inst - "M")
                (("2" (expand "nonempty?")
                  (("2" (expand "empty?")
                    (("2" (expand "member")
                      (("2" (skosimp*) (("2" (inst - "j!1") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "BSet_nonempty")
        (("2" (skeep)
          (("2" (inst - "K" "P")
            (("2" (skeep -)
              (("2" (expand "nonempty?")
                (("2" (expand "empty?")
                  (("2" (inst - "c")
                    (("2" (expand "member") (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (BSet type-eq-decl nil ramsey_graph nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SatSet const-decl "set[upto[K]]" ramsey_graph nil)
    (set type-eq-decl nil sets nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (j skolem-const-decl "nat" ramsey_graph nil)
    (II skolem-const-decl "[M: nat -> ({j: nat | F(j)`D >= M})]" ramsey_graph
     nil)
    (F skolem-const-decl "[K: nat -> BSet(P, K)]" ramsey_graph nil)
    (i skolem-const-decl "nat" ramsey_graph nil)
    (IncSub type-eq-decl nil ramsey_graph nil)
    (JJ skolem-const-decl "[nat -> nat]" ramsey_graph nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (i!1 skolem-const-decl "nat" ramsey_graph nil)
    (P skolem-const-decl "pred[nat]" ramsey_graph nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (BSet_sequence formula-decl nil ramsey_graph nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i!1 skolem-const-decl "nat" ramsey_graph nil)
    (M skolem-const-decl "nat" ramsey_graph nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (BSet_nonempty formula-decl nil ramsey_graph nil))
   shostak))
 (VertexRamsey 0
  (VertexRamsey-1 nil 3651925790
   (""
    (case "FORALL (n:nat, vc: VertexColoring(n+1)):
               EXISTS (J): EXISTS (p: below(n+1)): FORALL (j): vc(J(j)) = p")
    (("1" (skeep) (("1" (inst - "N-1" "vc") nil nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (inst + "LAMBDA (k:nat): k")
            (("1" (inst + "0") (("1" (skeep) (("1" (assert) nil nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil)
         ("2" (skolem 1 "n")
          (("2" (flatten)
            (("2" (assert)
              (("2" (skeep)
                (("2" (case "EXISTS (K:nat): FORALL (i:nat): vc(i+K) /= 1+n")
                  (("1" (skeep -)
                    (("1" (name "vcs" "LAMBDA (i:nat): vc(i+K)")
                      (("1" (inst -3 "vcs")
                        (("1" (skeep)
                          (("1" (skeep)
                            (("1" (inst + "LAMBDA (j): J(j)+K")
                              (("1" (inst + "p")
                                (("1" (skosimp*)
                                  (("1" (inst -3 "j!1")
                                    (("1" (expand "vcs" -3)
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skosimp*)
                                (("2" (typepred "J")
                                  (("2" (inst - "i!1" "j!1")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (expand "vcs" 1)
                            (("2" (inst -2 "x1!1") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (name "PP" "LAMBDA (i:nat): vc(i) = 1+n")
                    (("2" (lemma "enum_natset")
                      (("2" (inst - "PP")
                        (("2" (split -)
                          (("1" (skeep)
                            (("1" (inst + "K")
                              (("1" (skeep)
                                (("1" (inst - "i+K")
                                  (("1" (assert)
                                    (("1" (expand "PP" 1)
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (inst 2 "J")
                              (("2" (inst 2 "1+n")
                                (("2" (skeep 2)
                                  (("2" (inst - "J(j)")
                                    (("2" (flatten)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (split -)
                                          (("1"
                                            (expand "PP" -1)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2" (inst + "j") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (/= const-decl "boolean" notequal nil)
    (J skolem-const-decl "IncSub" ramsey_graph nil)
    (K skolem-const-decl "nat" ramsey_graph nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vcs skolem-const-decl "[nat -> below[2 + n]]" ramsey_graph nil)
    (n skolem-const-decl "nat" ramsey_graph nil)
    (enum_natset formula-decl nil ramsey_graph nil)
    (PP skolem-const-decl "[nat -> boolean]" ramsey_graph nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (VertexColoring type-eq-decl nil ramsey_graph nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IncSub type-eq-decl nil ramsey_graph nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (e2v_fun_TCC1 0
  (e2v_fun_TCC1-1 nil 3652090754
   ("" (skeep)
    (("" (expand "nonempty?")
      (("" (expand "empty?")
        (("" (expand "member")
          (("" (lemma "VertexRamsey")
            (("" (inst - "N" "vc")
              (("" (skeep) (("" (inst - "J") nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (VertexColoring type-eq-decl nil ramsey_graph nil)
    (IncSub type-eq-decl nil ramsey_graph nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (VertexRamsey formula-decl nil ramsey_graph nil)
    (empty? const-decl "bool" sets nil))
   nil
   (e2v_fun subtype
    "{J | EXISTS (p: naturalnumbers.below(ramsey_graph.N)): FORALL (j): ramsey_graph.vc(ramsey_graph.J(ramsey_graph.j)) = p}"
    "(sets[IncSub].nonempty?)")))
 (e2v_fun_TCC2 0
  (e2v_fun_TCC2-1 nil 3652090754
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "cf")
        (("" (hide -4)
          (("" (split)
            (("1" (skosimp*)
              (("1" (inst - "j+i+1+i!1" "j+i+1+j!1") (("1" (assert) nil nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (inst + "p")
                (("2" (skeep)
                  (("2" (split +)
                    (("1" (lemma "IncSub_ge")
                      (("1" (inst - "cf" "1+i+j+n") (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (replaces -3)
                      (("2" (assert)
                        (("2" (lemma "IncSub_ge")
                          (("2" (inst - "1+j+i+n")
                            (("2" (inst - "cf" "1+i+j+n")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (replaces -3) (("3" (inst - "j+i+1+n") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (IncSub_ge formula-decl nil ramsey_graph nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (IncSub type-eq-decl nil ramsey_graph nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (e2v_fun subtype
    "(LAMBDA (z: naturalnumbers.nat): ramsey_graph.cf((number_fields.+)((number_fields.+)((number_fields.+)(ramsey_graph.j, ramsey_graph.i), 1), z)))"
    "{J | EXISTS (p: nat_types[ramsey_graph.N].below): FORALL (n): booleans.AND(reals.>(ramsey_graph.J(ramsey_graph.n), ramsey_graph.j), booleans.AND(reals.>(ramsey_graph.J(ramsey_graph.n), ramsey_graph.i), ramsey_graph.ec(ramsey_graph.i, ramsey_graph.J(ramsey_graph.n)) = p))}")))
 (e2v_color_TCC1 0
  (e2v_color_TCC1-1 nil 3652093272
   ("" (skeep)
    (("" (expand "nonempty?")
      (("" (expand "empty?")
        (("" (expand "member")
          (("" (typepred "e2v_fun(N,ec,j)(i)")
            (("" (skeep)
              (("" (inst -3 "p")
                (("" (skeep) (("" (inst -2 "n") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (EdgeColoring type-eq-decl nil ramsey_graph nil)
    (IncSub type-eq-decl nil ramsey_graph nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (e2v_fun const-decl "{J |
   EXISTS (p: below[N]):
     FORALL (n): J(n) > j AND J(n) > i AND ec(i, J(n)) = p}" ramsey_graph nil)
    (empty? const-decl "bool" sets nil))
   nil
   (e2v_color subtype
    "{p: naturalnumbers.below(ramsey_graph.N) | FORALL (n): ramsey_graph.ec(ramsey_graph.i, ramsey_graph.e2v_fun(ramsey_graph.N, ramsey_graph.ec, ramsey_graph.j)(ramsey_graph.i)(ramsey_graph.n)) = p}"
    "(sets[naturalnumbers.below(ramsey_graph.N)].nonempty?)")))
 (Ramsey_edge_fun_TCC1 0
  (Ramsey_edge_fun_TCC1-2 "" 3790081330
   ("" (skeep*)
    (("" (typepred "e2v_fun(N,ec,0)(0)")
      (("" (lift-if)
        (("" (assert)
          (("" (ground)
            (("1" (inst - "0" "j")
              (("1" (assert) (("1" (assert) nil nil)) nil)) nil)
             ("2" (insteep -) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((e2v_fun const-decl "{J |
   EXISTS (p: below[N]):
     FORALL (n): J(n) > j AND J(n) > i AND ec(i, J(n)) = p}" ramsey_graph nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IncSub type-eq-decl nil ramsey_graph nil)
    (EdgeColoring type-eq-decl nil ramsey_graph nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil nat_types nil) (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (Ramsey_edge_fun subtype
    "(LAMBDA (n): IF ramsey_graph.n = 0 THEN 0 ELSE ramsey_graph.e2v_fun(ramsey_graph.N, ramsey_graph.ec, 0)(0)(ramsey_graph.n) ENDIF)"
    "IncSub"))
  (Ramsey_edge_fun_TCC1-1 nil 3652094396
   ("" (skeep*)
    (("" (split)
      (("1" (skeep*)
        (("1" (typepred "e2v_fun(N,ec,0)(0)")
          (("1" (lift-if)
            (("1" (assert)
              (("1" (ground)
                (("1" (inst - "0" "j")
                  (("1" (assert) (("1" (assert) nil nil)) nil)) nil)
                 ("2" (insteep -) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (inst + "e2v_color(N,ec,0)(0)")
          (("2" (skeep)
            (("2" (lift-if)
              (("2" (assert)
                (("2" (assert)
                  (("2" (typepred "e2v_color(N,ec,0)(0)")
                    (("2" (inst - "j") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (Ramsey_edge_fun subtype
    "(LAMBDA (n): IF ramsey_graph.n = 0 THEN 0 ELSE ramsey_graph.e2v_fun(ramsey_graph.N, ramsey_graph.ec, 0)(0)(ramsey_graph.n) ENDIF)"
    "IncSub")))
 (Ramsey_edge_fun_TCC2 0
  (Ramsey_edge_fun_TCC2-1 nil 3652094396
   ("" (skeep*)
    (("" (hide -1)
      (("" (typepred "ref")
        (("" (assert)
          (("" (replaces -2)
            (("" (assert)
              (("" (typepred "ec")
                (("" (inst - "ref(i)" "ref(j)") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (EdgeColoring type-eq-decl nil ramsey_graph nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (IncSub type-eq-decl nil ramsey_graph nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (Ramsey_edge_fun subtype "ramsey_graph.newec"
    "ramsey_graph.EdgeColoring(ramsey_graph.N)")))
 (Ramsey_edge_fun_TCC3 0
  (Ramsey_edge_fun_TCC3-1 nil 3652094396
   ("" (skeep*)
    (("" (hide -1)
      (("" (typepred "ref")
        (("" (lift-if)
          (("" (assert)
            (("" (lift-if)
              (("" (ground)
                (("1" (inst - "i" "j") (("1" (assert) nil nil)) nil)
                 ("2" (inst - "i" "3+K") (("2" (assert) nil nil)) nil)
                 ("3" (inst? -2)
                  (("3" (assert)
                    (("3" (lemma "IncSub_ge")
                      (("3"
                        (inst - "e2v_fun(N, newec, 4 + K)((3 + K))" "4+K+j")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (inst? -2)
                  (("4" (assert)
                    (("4" (lemma "IncSub_ge")
                      (("4"
                        (inst - "e2v_fun(N, newec, 4 + K)((3 + K))" "4+K+j")
                        (("4" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("5" (inst? -1)
                  (("5" (assert)
                    (("5" (hide 2)
                      (("5" (typepred "e2v_fun(N, newec, 4 + K)((3 + K))")
                        (("5" (inst? -1) (("5" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (EdgeColoring type-eq-decl nil ramsey_graph nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (e2v_fun const-decl "{J |
   EXISTS (p: below[N]):
     FORALL (n): J(n) > j AND J(n) > i AND ec(i, J(n)) = p}" ramsey_graph nil)
    (IncSub_ge formula-decl nil ramsey_graph nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (IncSub type-eq-decl nil ramsey_graph nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (Ramsey_edge_fun subtype
    "(LAMBDA (n): IF reals.<(ramsey_graph.n, ramsey_graph.K) THEN ramsey_graph.ref(ramsey_graph.n) ELSIF ramsey_graph.n = ramsey_graph.K THEN ramsey_graph.ref((number_fields.+)(ramsey_graph.K, 3)) ELSE ramsey_graph.ref(ramsey_graph.e2v_fun(ramsey_graph.N, ramsey_graph.newec, (number_fields.+)(ramsey_graph.K, 4))((number_fields.+)(ramsey_graph.K, 3))((number_fields.+)((number_fields.+)(ramsey_graph.K, 4), ramsey_graph.n))) ENDIF)"
    "IncSub")))
 (Ramsey_edge_fun_TCC4 0
  (Ramsey_edge_fun_TCC4-1 nil 3652094396 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (EdgeColoring type-eq-decl nil ramsey_graph nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (Ramsey_edge_fun subtype "(number_fields.-)(ramsey_graph.K, 1)" "nat")))
 (Ramsey_edge_fun_TCC5 0
  (Ramsey_edge_fun_TCC5-1 nil 3652103443 ("" (termination-tcc) nil nil) nil
   nil
   (Ramsey_edge_fun termination
    "ramsey_graph.Ramsey_edge_fun(ramsey_graph.N, ramsey_graph.ec)((number_fields.-)(ramsey_graph.K, 1))"
    "nil")))
 (Ramsey_edge_fun_eq 0
  (Ramsey_edge_fun_eq-1 nil 3652097961
   ("" (skeep)
    ((""
      (case "FORALL (K1, n: nat):
         (FORALL (i):
            i <= K1 IMPLIES
             Ramsey_edge_fun(N, ec)(K1)(i) = Ramsey_edge_fun(N, ec)(K1+n)(i))")
      (("1" (skeep)
        (("1" (inst - "K1" "K2-K1")
          (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "n")
          (("1" (assert) nil nil)
           ("2" (skolem 1 "n")
            (("2" (assert)
              (("2" (flatten)
                (("2" (skeep)
                  (("2" (insteep -)
                    (("2" (skeep)
                      (("2" (expand "Ramsey_edge_fun" + 2)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (inst - "i") (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Ramsey_edge_fun def-decl "IncSub" ramsey_graph nil)
    (IncSub type-eq-decl nil ramsey_graph nil)
    (EdgeColoring type-eq-decl nil ramsey_graph nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil nat_types nil) (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (K2 skolem-const-decl "nat" ramsey_graph nil)
    (K1 skolem-const-decl "nat" ramsey_graph nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (Ramsey_edge_fun_const 0
  (Ramsey_edge_fun_const-1 nil 3652101168
   ("" (induct "K")
    (("1" (skeep)
      (("1" (expand "Ramsey_edge_fun")
        (("1" (assert)
          (("1" (inst + "e2v_color(N,ec,0)(0)")
            (("1" (skeep)
              (("1" (assert)
                (("1" (typepred "e2v_color(N,ec,0)(0)")
                  (("1" (inst?) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 "K")
      (("2" (flatten)
        (("2" (skeep)
          (("2" (insteep -)
            (("2" (expand "Ramsey_edge_fun" +)
              (("2"
                (name "newec" "LAMBDA
                                           (i, j):
                                           ec
                                           (Ramsey_edge_fun(N, ec)(K)(i),
                                            Ramsey_edge_fun(N, ec)(K)(j))")
                (("2" (replace -1)
                  (("2" (hide -1)
                    (("2"
                      (name "p" "e2v_color(N, newec, 5 + K)
                                          (4 + K)")
                      (("1" (inst + "p")
                        (("1" (skeep)
                          (("1" (assert)
                            (("1"
                              (case "newec(4+K,e2v_fun(N, newec, 5 + K)(4 + K)(5 + K + i)) = p")
                              (("1" (expand "newec" -1)
                                (("1" (assert)
                                  (("1" (lemma "newec")
                                    (("1" (replaces -1 :dir rl) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (typepred "p")
                                  (("2" (inst - "5+K+i") nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (skeep)
                          (("2" (expand "newec" +)
                            (("2" (typepred "ec")
                              (("2" (inst?) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (newec skolem-const-decl "[[nat, nat] -> below[N]]" ramsey_graph nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (e2v_color const-decl
     "{p: below(N) | FORALL (n): ec(i, e2v_fun(N, ec, j)(i)(n)) = p}"
     ramsey_graph nil)
    (e2v_fun const-decl "{J |
   EXISTS (p: below[N]):
     FORALL (n): J(n) > j AND J(n) > i AND ec(i, J(n)) = p}" ramsey_graph nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (Ramsey_edge_fun def-decl "IncSub" ramsey_graph nil)
    (IncSub type-eq-decl nil ramsey_graph nil)
    (below type-eq-decl nil naturalnumbers nil)
    (EdgeColoring type-eq-decl nil ramsey_graph nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (Ramsey_edge_fun_values 0
  (Ramsey_edge_fun_values-1 nil 3652105040
   (""
    (case "FORALL (K: nat, N: posnat, Q, i: nat, ec: EdgeColoring(N)):
       (EXISTS (j):
            j >= i AND
             Ramsey_edge_fun(N, ec)(K)(j) = Ramsey_edge_fun(N, ec)(K+Q)(i))")
    (("1" (assert)
      (("1" (skeep)
        (("1" (insteep - :but "Q")
          (("1" (inst - "Q-K") (("1" (assert) nil nil) ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "Q")
        (("1" (skeep) (("1" (inst + "i") (("1" (assert) nil nil)) nil)) nil)
         ("2" (skolem 1 "n")
          (("2" (flatten)
            (("2" (assert)
              (("2" (skeep)
                (("2" (expand "Ramsey_edge_fun" + 2)
                  (("2" (assert)
                    (("2" (case "i < 1+K+n")
                      (("1" (assert) (("1" (insteep -) nil nil)) nil)
                       ("2" (case "i = 1+K+n")
                        (("1" (assert)
                          (("1" (insteep - :but "i")
                            (("1" (inst - "4+K+n")
                              (("1" (assert)
                                (("1" (skeep)
                                  (("1" (inst + "j") (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (name "newec" "LAMBDA (i, j):
                                    ec
                                    (Ramsey_edge_fun(N, ec)(K + n)(i),
                                     Ramsey_edge_fun(N, ec)(K + n)(j))")
                            (("2" (replace -1)
                              (("2" (assert)
                                (("2"
                                  (inst - "K" "N"
                                   "e2v_fun(N, newec, 5 + K + n)(4 + K + n)
                                 (5 + K + i + n)" "ec")
                                  (("1" (skeep)
                                    (("1" (inst + "j")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "IncSub_ge")
                                          (("1"
                                            (inst
                                             -
                                             "e2v_fun(N, newec, 5 + K + n)(4 + K + n)"
                                             "5+K+i+n")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 3)
                                    (("2" (hide 3)
                                      (("2"
                                        (hide -)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (expand "newec")
                                              (("2"
                                                (typepred "ec")
                                                (("2"
                                                  (inst?)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (N skolem-const-decl "posnat" ramsey_graph nil)
    (newec skolem-const-decl "[[nat, nat] -> below[N]]" ramsey_graph nil)
    (e2v_fun const-decl "{J |
   EXISTS (p: below[N]):
     FORALL (n): J(n) > j AND J(n) > i AND ec(i, J(n)) = p}" ramsey_graph nil)
    (IncSub_ge formula-decl nil ramsey_graph nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (K skolem-const-decl "nat" ramsey_graph nil)
    (Q skolem-const-decl "nat" ramsey_graph nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (EdgeColoring type-eq-decl nil ramsey_graph nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IncSub type-eq-decl nil ramsey_graph nil)
    (Ramsey_edge_fun def-decl "IncSub" ramsey_graph nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil))
   shostak))
 (Ramsey_edge_fun_def 0
  (Ramsey_edge_fun_def-1 nil 3652098409
   ("" (skeep)
    (("" (name "JJ" "Ramsey_edge_fun(N, ec)(K)")
      (("" (replaces -1)
        (("" (assert)
          (("" (skeep)
            (("" (lemma "Ramsey_edge_fun_const")
              (("" (lemma "JJ")
                (("" (lemma "Ramsey_edge_fun_const")
                  (("" (inst - "i" "N" "ec")
                    (("" (skeep)
                      (("" (inst + "p")
                        (("" (skeep)
                          (("" (lemma "Ramsey_edge_fun_values")
                            (("" (inst - "i" "N" "K" "j" "ec")
                              (("" (assert)
                                (("" (expand "JJ" +)
                                  (("" (skolem - "z")
                                    (("" (flatten)
                                      ((""
                                        (replace -2 :dir rl)
                                        ((""
                                          (inst - "z")
                                          ((""
                                            (assert)
                                            ((""
                                              (lemma "Ramsey_edge_fun_eq")
                                              ((""
                                                (inst - "N" "ec" "i" "K")
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (inst - "i")
                                                    (("" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Ramsey_edge_fun def-decl "IncSub" ramsey_graph nil)
    (IncSub type-eq-decl nil ramsey_graph nil)
    (EdgeColoring type-eq-decl nil ramsey_graph nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil) (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Ramsey_edge_fun_const formula-decl nil ramsey_graph nil)
    (Ramsey_edge_fun_eq formula-decl nil ramsey_graph nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Ramsey_edge_fun_values formula-decl nil ramsey_graph nil)
    (below type-eq-decl nil naturalnumbers nil)
    (JJ skolem-const-decl "IncSub" ramsey_graph nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (Ramsey_edge_color_TCC1 0
  (Ramsey_edge_color_TCC1-1 nil 3652107250
   ("" (skeep)
    (("" (expand "nonempty?")
      (("" (expand "empty?")
        (("" (expand "member")
          (("" (lemma "Ramsey_edge_fun_def")
            (("" (inst - "K" "N" "ec")
              (("" (assert)
                (("" (inst - "K")
                  (("" (assert)
                    (("" (skeep)
                      (("" (inst -2 "p")
                        (("" (skeep)
                          (("" (skeep)
                            (("" (lemma "Ramsey_edge_fun_values")
                              (("" (inst - "K" "N" "j" "i" "ec")
                                (("" (assert)
                                  (("" (skolem - "z")
                                    (("" (flatten)
                                      ((""
                                        (replaces -2 :dir rl)
                                        ((""
                                          (inst - "z")
                                          (("" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (EdgeColoring type-eq-decl nil ramsey_graph nil)
    (Ramsey_edge_fun_values formula-decl nil ramsey_graph nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (TRUE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (Ramsey_edge_fun_def formula-decl nil ramsey_graph nil)
    (empty? const-decl "bool" sets nil))
   nil
   (Ramsey_edge_color subtype
    "{p: naturalnumbers.below(ramsey_graph.N) | FORALL (j): booleans.IMPLIES(reals.>=(ramsey_graph.j, ramsey_graph.K), FORALL (i): booleans.IMPLIES(reals.>(ramsey_graph.i, ramsey_graph.K), ramsey_graph.ec(ramsey_graph.Ramsey_edge_fun(ramsey_graph.N, ramsey_graph.ec)(ramsey_graph.K)(ramsey_graph.K), ramsey_graph.Ramsey_edge_fun(ramsey_graph.N, ramsey_graph.ec)(ramsey_graph.j)(ramsey_graph.i)) = p))}"
    "(sets[naturalnumbers.below(ramsey_graph.N)].nonempty?)")))
 (EdgeRamsey 0
  (EdgeRamsey-1 nil 3652107542
   ("" (lemma "VertexRamsey")
    (("" (skeep)
      (("" (inst - "N" "Ramsey_edge_color(N,ec)")
        (("" (skeep)
          (("" (name "JJ" "LAMBDA (i:nat): Ramsey_edge_fun(N,ec)(J(i))(J(i))")
            (("" (inst + "JJ")
              (("1" (skeep)
                (("1" (inst + "p")
                  (("1"
                    (case "FORALL (i, j): i < j IMPLIES ec(JJ(i), JJ(j)) = p")
                    (("1" (skeep)
                      (("1" (inst-cp - "i" "j")
                        (("1" (inst - "j" "i")
                          (("1" (assert)
                            (("1" (ground)
                              (("1" (typepred "ec")
                                (("1" (inst?) (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (skeep)
                        (("2" (expand "JJ" +)
                          (("2" (inst - "i")
                            (("2" (typepred "Ramsey_edge_color(N, ec)(J(i))")
                              (("2" (replace -5)
                                (("2" (inst - "J(j)")
                                  (("2" (split -)
                                    (("1" (inst - "J(j)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "J")
                                          (("1"
                                            (inst - "i" "j")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (typepred "J")
                                      (("2"
                                        (inst - "i" "j")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (hide -2)
                  (("2" (hide -2)
                    (("2" (expand "JJ" +)
                      (("2" (lemma "Ramsey_edge_fun_eq")
                        (("2" (inst - "N" "ec" "J(i)" "J(j)")
                          (("2" (split -)
                            (("1" (inst - "J(i)")
                              (("1" (assert)
                                (("1" (replaces -1)
                                  (("1"
                                    (typepred "Ramsey_edge_fun(N, ec)(J(j))")
                                    (("1" (inst - "J(i)" "J(j)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "J")
                                          (("1"
                                            (inst - "i" "j")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "J")
                              (("2" (inst - "i" "j") (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((JJ skolem-const-decl "[nat -> nat]" ramsey_graph nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (Ramsey_edge_fun_eq formula-decl nil ramsey_graph nil)
    (Ramsey_edge_color const-decl "{p: below(N) |
   FORALL (j):
     j >= K IMPLIES
      FORALL (i):
        i > K IMPLIES
         ec(Ramsey_edge_fun(N, ec)(K)(K), Ramsey_edge_fun(N, ec)(j)(i)) = p}"
     ramsey_graph nil)
    (Ramsey_edge_fun def-decl "IncSub" ramsey_graph nil)
    (IncSub type-eq-decl nil ramsey_graph nil)
    (below type-eq-decl nil naturalnumbers nil)
    (EdgeColoring type-eq-decl nil ramsey_graph nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (VertexColoring type-eq-decl nil ramsey_graph nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (VertexRamsey formula-decl nil ramsey_graph nil))
   shostak)))

